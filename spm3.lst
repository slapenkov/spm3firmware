CCS PCH C Compiler, Version 4.110, 5967               24-дек-15 18:37

               Filename: C:\Projects\MWT-3\SPM3Firmware\spm3.lst

               ROM used: 17300 bytes (54%)
                         Largest free fragment is 14632
               RAM used: 1418 (93%) at main() level
                         1450 (95%) worst case
               Stack:    5 worst case (2 in main + 3 for interrupts)

*
0000:  GOTO   2D82
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  F9D.0
0056:  GOTO   0060
005A:  BTFSC  F9E.0
005C:  GOTO   18F0
0060:  BTFSS  F9D.5
0062:  GOTO   006C
0066:  BTFSC  F9E.5
0068:  GOTO   0370
006C:  MOVFF  0E,00
0070:  MOVFF  0F,01
0074:  MOVFF  10,02
0078:  MOVFF  11,03
007C:  MOVFF  0C,FE9
0080:  MOVFF  07,FEA
0084:  BSF    07.7
0086:  MOVFF  08,FE1
008A:  MOVFF  09,FE2
008E:  MOVFF  0A,FD9
0092:  MOVFF  0B,FDA
0096:  MOVFF  12,FF3
009A:  MOVFF  13,FF4
009E:  MOVFF  14,FFA
00A2:  MOVFF  15,FF5
00A6:  MOVFF  16,FF6
00AA:  MOVFF  17,FF7
00AE:  MOVF   04,W
00B0:  MOVFF  06,FE0
00B4:  MOVFF  05,FD8
00B8:  RETFIE 0
.................... #include "spm3.h" 
.................... #include <18F4520.h> 
.................... //////// Standard Header file for the PIC18F4520 device //////////////// 
.................... #device PIC18F4520 
.................... #list 
....................  
.................... #device ICD=TRUE 
.................... #device adc=10 
.................... #FUSES WDT                      //Watch Dog Timer  
.................... #FUSES WDT1                     //Watch Dog Timer uses 1:1 Postscale 
.................... #FUSES INTRC_IO                 //Internal RC Osc, no CLKOUT 
.................... #FUSES NOPROTECT                //Code not protected from reading 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... //#FUSES BORV20                   //Brownout reset at 2.0V 
.................... #FUSES PUT                      //Power Up Timer 
.................... #FUSES NOCPD                    //No EE protection 
.................... #FUSES STVREN                   //Stack full/underflow will cause reset 
.................... #FUSES NODEBUG                  //No Debug mode for ICD 
.................... #FUSES LVP                      //Low Voltage Programming on B3(PIC16) or B5(PIC18) 
.................... #FUSES NOWRT                    //Program memory not write protected 
.................... #FUSES NOWRTD                   //Data EEPROM not write protected 
.................... #FUSES IESO                     //Internal External Switch Over mode enabled 
.................... #FUSES FCMEN                    //Fail-safe clock monitor enabled 
.................... #FUSES PBADEN                   //PORTB pins are configured as analog input channels on RESET 
.................... #FUSES NOWRTC                   //configuration not registers write protected 
.................... #FUSES NOWRTB                   //Boot block not write protected 
.................... #FUSES NOEBTR                   //Memory not protected from table reads 
.................... #FUSES NOEBTRB                  //Boot block not protected from table reads 
.................... #FUSES NOCPB                    //No Boot Block code protection 
.................... #FUSES LPT1OSC                  //Timer1 configured for low-power operation 
.................... #FUSES NOMCLR                   //Master Clear pin enabled 
.................... #FUSES XINST                    //Extended set extension and Indexed Addressing mode enabled 
....................  
.................... #use delay(clock=32000000,RESTART_WDT) 
*
189C:  MOVLW  05
189E:  MOVWF  FEA
18A0:  MOVLW  A1
18A2:  MOVWF  FE9
18A4:  MOVF   FEF,W
18A6:  BZ    18CA
18A8:  MOVLW  0A
18AA:  MOVWF  01
18AC:  MOVLW  BF
18AE:  MOVWF  00
18B0:  CLRWDT
18B2:  DECFSZ 00,F
18B4:  BRA    18B0
18B6:  DECFSZ 01,F
18B8:  BRA    18AC
18BA:  MOVLW  5E
18BC:  MOVWF  00
18BE:  DECFSZ 00,F
18C0:  BRA    18BE
18C2:  BRA    18C4
18C4:  CLRWDT
18C6:  DECFSZ FEF,F
18C8:  BRA    18A8
18CA:  GOTO   1D5A (RETURN)
.................... #define S0   PIN_A0 
.................... #define S1   PIN_A1 
.................... #define T0   PIN_A2 
.................... #define Uref   PIN_A3 
.................... #define T1   PIN_A4 
.................... #define T2   PIN_A5 
.................... #define DIR   PIN_A6 
.................... #define LDAC   PIN_A7 
.................... #define STAT   PIN_C0 
.................... #define MEM0   PIN_C1 
.................... #define MEM1   PIN_C2 
.................... #define SCK   PIN_C3 
.................... #define SDI   PIN_C4 
.................... #define SDO   PIN_C5 
.................... #define TX   PIN_C6 
.................... #define RX   PIN_C7 
.................... #define DAC0   PIN_D0 
.................... #define DAC1   PIN_D1 
.................... #define KU1   PIN_D4 
.................... #define KU0   PIN_D5 
.................... #define SYNC_POS   PIN_E0 
.................... #define TERMO   PIN_E1 
....................  
....................  
....................  
.................... #include "ee_var.h" 
.................... //SPM-3 EEPROM storage structure 
.................... //define adresses of EEPROM locations 
.................... /*		LocName		Addr	Discr			*/ 
.................... /*==========================================*/ 
.................... #define	EE_SAW_A0	0x00	//define saw level 
.................... #define	EE_SAW_A1	0x02	//define saw amplitude 
.................... #define	EE_KU0		0x04	//amp coeff for in0 
.................... #define	EE_KU1		0x06	//amp coeff for in1 
.................... #define	EE_TAQ		0x08	//number of DAQ points 
.................... #define	EE_PCOUNT	0x0A	//num of measures for meaning 
.................... #define	EE_FWDT		0x0C 
.................... #define	EE_Speed	0x0E	//serial device speed 
.................... #define	EE_Host		0x10	//host address & serial number	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<!!! Device ID!!! 
.................... #define	EE_T0_CAL	0x12	//cal temperature of cn0  
.................... #define	EE_T1_CAL	0x14	//cal temperature of cn1  
.................... #define	EE_TG_CAL	0x16	//cal temperature of generator  
.................... #define	EE_KGT		0x18	//termo coeff of generator 
.................... #define	EE_KGU		0x1C	//voltage coeff of generator 
.................... #define	EE_KST0		0x20	//termo coeff of cn0 
.................... #define	EE_KST1		0x24	//termo coeff of cn1 
....................  
.................... //EEPROM data definition 
.................... #ROM	0xf00000={2300,	//EE_SAW_A0 
.................... 				  0x03E8,	//EE_SAW_A1 
.................... 				  0x0001,	//EE_KU0				   
.................... 				  0x0001,	//EE_KU1 
.................... 				  0x0800,	//EE_TAQ 
.................... 				  0x0080,	//EE_PCOUNT 
.................... 				  0x0040,	//EE_FWDT 
.................... 				  0x4B00,	//EE_Speed 
.................... 				  0x0001,	//EE_Host				   
.................... 				  0x09C4,	//EE_TO_CAL 
.................... 				  0x09C4,	//EE_T1_CAL 
.................... 				  0x0BB8,	//EE_TG_CAL 
.................... 				  0x0000,	//EE_KGT 
.................... 				  0x0000, 
.................... 				  0x7F00,	//EE_KGU 
.................... 				  0x0000, 
.................... 				  0x0000,	//EE_KST0 
.................... 				  0x0000, 
.................... 				  0x0000,	//EE_KST1 
.................... 				  0x0000 
.................... } 
.................... // 
....................  
....................  
.................... //directives 
.................... //#USE FAST_IO(A) 
.................... //#USE FAST_IO(C) 
.................... //#USE FAST_IO(D) 
.................... //const 
.................... float	const	f2int32=209715.2*0.995; 
.................... //variables 
.................... //buffers 
.................... //channel 0 
.................... //static	int8	data_buff0[256];	//reduced data buffer for channel 0 
.................... //static	int8	data_hist0[256];	//redused histogramm for ch0 
.................... static	int16	data_filt0[64];		//filtering buffer for ch0 
.................... static	int16	data_mean0;			//mean value 
.................... //static	int16	redu_mean0;			//reduces mean value 
.................... static	int16	maxRise0;			//max value at rising saw 
.................... static	int16	iMaxRise0;			//index of maximum at rising saw 
.................... static	int16	maxFall0;			//max value at falling saw 
.................... static	int16	iMaxFall0;			//index of maximum at falling saw 
.................... static	int16	alp_buf0[128];		//alpha meaning buffer 
.................... //static	int16	alp_sort[64];		//alpha sorted buffer 
.................... static	int16	bet_buf0[128];		//beta meaning buffer 
.................... //static	int16	bet_sort[64];		//beta sorted buffer 
.................... static	int16	gam_buf0[128];		//gamma meaning buffer 
.................... //static	int16	gam_sort[64];		//gamma sorted buffer 
.................... static	int16	Amplitude0;			//amplitude in B*1000 
.................... static	int16	PulseWdt0;			//pulse width in uS/10 
.................... static	int16	iGamma0;			//gamma in Daq intervals 
.................... static	int16	Gamma0;				//gamma in uS/10 
.................... static	int16	AmpCoef0;			//input amplifier coeff 
.................... static	float	KST0;				// 
.................... static	int16	T0_CAL;				// 
.................... static	signed int16	T_SR0;				//temperature of cn0 
.................... //channel 1 
.................... //static	int8	data_buff1[128];	//reduced data buffer for channel 1 
.................... //static	int8	data_hist1[128];	//redused histogramm for ch1 
.................... //static	int16	data_filt1[64];		//filtering buffer for ch1 
.................... //static	int16	data_mean1;			//mean value 
.................... //static	int16	redu_mean1;			//reduces mean value 
.................... //static	int16	maxRise1;			//max value at rising saw 
.................... //static	int16	iMaxRise1;			//index of maximum at rising saw 
.................... //static	int16	maxFall1;			//max value at falling saw 
.................... //static	int16	iMaxFall1;			//index of maximum at falling saw 
.................... //static	int16	gam_buf1[32];		//gamma meaning buffer 
.................... //static	int16	Amplitude1;			//amplitude in B*1000 
.................... //static	int16	PulseWdt1;			//pulse width in uS/10 
.................... //static	int16	iGamma1;			//gamma in Daq intervals 
.................... static	int16	Gamma1;				//gamma in uS/10 
.................... static	int16	AmpCoef1;			//input amplifier coeff 
.................... static	float	KST1;				// 
.................... static	int16	T1_CAL;				// 
.................... static	signed int16	T_SR1;				//temperature of cn1 
.................... //common 
.................... static 	int16	TAQ;				//number of data samples at measuring period 
.................... static	int16	FWDT;				//filering window width 
.................... static	int16	PCOUNT;				//measuring periods for meaning 
.................... static	int1	OneCycle;			//one cycle flag 
.................... static	int8	iGam=0;				//gamma meaning index 
.................... //saw 
.................... static	signed int16	T_GEN;				//generator temperature 
.................... static	int16	SAW_A0;				//level of saw 
.................... static	int32	SawLevel;			//current saw level 
.................... static	int16	SAW_A1;				//saw amplitude 
.................... static	int32	SawStep;			//saw step 
.................... static	float	KGT;				// 
.................... static	float	KGU;				// 
.................... static	int16	TG_CAL;				// 
.................... //communication 
.................... static	int16	Speed;				//USART speed 
.................... static	int16	Addr;				//own USART host adress 
.................... //filtering 
.................... static	int8	iWin;				//meaning window index 
.................... static	int32	AlpSum; 
.................... static	int32	BetSum; 
.................... static	int32	GamSum; 
.................... //temperature regulator 
.................... static	int16	Hst=50;				//Histeresis 
....................  
....................  
.................... //states 
.................... enum	daq_states{ 
.................... 	DaqIdle,		//idle state - state after daq stop 
.................... 	DaqStart,		//cyclic mesuring start for one cycle 
.................... 	DaqMeasure,		//measuring 
.................... 	DaqScale,		//scaling measured values 
.................... 	DaqEnd			//ending measuring cycle 
.................... }; 
.................... int8	DaqState;	//Daq procedure state 
.................... // 
.................... //math variables 
.................... float	kgv; 
.................... float	Va; 
.................... float	delta_gamma, delta_gamma2; 
.................... float	T_0, T_G, T_G_k; 
.................... float	Gam0, Gam0_k; 
.................... float	k1, tsn; 
.................... float	W; 
.................... float	Haw0, Haw0_k; 
.................... float	AA, BB, a0, a1, a2, a3, a4, a5; 
.................... float	Am0, Am0_k; 
.................... float	T_S0, T_S0_k; 
.................... //procedures 
.................... //mathematics 
.................... char Calc() // Humidity calculation 
.................... 	{	   
.................... 	float difftime0; 
....................  	//coeff validation 
....................  	if (kgv==0) kgv=1; 
....................  	if (Va==0) Va=1; 
....................  	// 
....................  	delta_gamma =(kgt/kgv)*(T_0/Va)*(T_G-T_G_k);	//generator temperature correction 
.................... 	delta_gamma2=k1*(T_S0-tsn);	//object temperature correction 
....................  	difftime0=(Gam0-Gam0_k);	//addition parameter estimation 
....................  	difftime0=difftime0+delta_gamma+delta_gamma2;	//adding corecction 
....................  	//main regression 
.................... 	W=AA+BB*(a0+a1*(Am0-Am0_k)*10+a2*(Haw0-Haw0_k)/1000+a3*difftime0/1000+a4*(T_G-T_G_k)/100+a5*(T_S0-T_S0_k)/100); 
....................   
....................     return 0; 
.................... } 
.................... //Peripherals setup 
.................... void	InitMcu(void){		//initialization of MCU 
.................... 	 
....................    //oscillator configuration 
....................    setup_oscillator(OSC_32MHZ|OSC_NORMAL|OSC_31250); 
*
1E8A:  MOVLW  70
1E8C:  MOVWF  FD3
1E8E:  MOVLW  C0
1E90:  MOVWF  F9B
1E92:  MOVF   FD3,W
....................    //disable PSP 
....................    setup_psp(PSP_DISABLED); 
1E94:  BCF    F96.4
....................    //WDT config 
....................    setup_wdt(WDT_OFF); 
1E96:  BCF    FD1.0
....................    //disable comparators 
....................    setup_comparator(NC_NC_NC_NC); 
1E98:  MOVLW  07
1E9A:  MOVWF  FB4
1E9C:  MOVF   F92,W
1E9E:  MOVWF  F92
1EA0:  CLRWDT
1EA2:  MOVLW  1A
1EA4:  MOVWF  00
1EA6:  DECFSZ 00,F
1EA8:  BRA    1EA6
1EAA:  MOVF   FB4,W
1EAC:  BCF    FA1.6
....................    setup_vref(FALSE); 
1EAE:  CLRF   FB5
....................    //config ADC module 
....................    setup_adc_ports(AN0_TO_AN5|VSS_VREF); 
1EB0:  MOVF   FC1,W
1EB2:  ANDLW  C0
1EB4:  IORLW  19
1EB6:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_16|ADC_TAD_MUL_2); 
1EB8:  MOVF   FC0,W
1EBA:  ANDLW  C0
1EBC:  IORLW  0D
1EBE:  MOVWF  FC0
1EC0:  BSF    FC0.7
1EC2:  BSF    FC2.0
....................     
....................    //port configuration 
....................    set_tris_a(0x3f); 
1EC4:  MOVLW  3F
1EC6:  MOVWF  F92
....................    set_tris_c(0xf8); 
1EC8:  MOVLW  F8
1ECA:  MOVWF  F94
....................    set_tris_d(0x00); 
1ECC:  MOVLW  00
1ECE:  MOVWF  F95
....................    //set high all selectors 
....................    output_high(LDAC); 
1ED0:  BCF    F92.7
1ED2:  BSF    F89.7
....................    output_high(MEM0); 
1ED4:  BCF    F94.1
1ED6:  BSF    F8B.1
....................    output_high(MEM1); 
1ED8:  BCF    F94.2
1EDA:  BSF    F8B.2
....................    output_high(DAC0); 
1EDC:  BCF    F95.0
1EDE:  BSF    F8C.0
....................    output_high(DAC1); 
1EE0:  BCF    F95.1
1EE2:  BSF    F8C.1
....................    output_high(KU0); 
1EE4:  BCF    F95.5
1EE6:  BSF    F8C.5
....................    output_high(KU1); 
1EE8:  BCF    F95.4
1EEA:  BSF    F8C.4
....................    output_high(STAT); 
1EEC:  BCF    F94.0
1EEE:  BSF    F8B.0
....................  
....................     
....................    //timers configuration 
....................    setup_timer_0(RTCC_INTERNAL); 
1EF0:  MOVLW  80
1EF2:  MOVWF  FD5
....................     
....................    setup_timer_1(T1_INTERNAL | T1_DIV_BY_8); 
1EF4:  MOVLW  B5
1EF6:  MOVWF  FCD
....................     
....................    setup_timer_2(T2_DISABLED,0,1); 
1EF8:  MOVLW  00
1EFA:  MOVWF  FCA
1EFC:  MOVLW  00
1EFE:  MOVWF  FCB
....................     
....................    setup_timer_3(T3_INTERNAL | T3_DIV_BY_1); 
1F00:  MOVLW  85
1F02:  MOVWF  FB1
....................    //setup communications 
....................    //setup usart 
....................    output_low(DIR);	//enable receiving 
1F04:  BCF    F92.6
1F06:  BCF    F89.6
....................    //SPI configuration 
....................    setup_spi(SPI_MASTER|SPI_CLK_DIV_4|SPI_H_TO_L); 
1F08:  BCF    FC6.5
1F0A:  BCF    F94.5
1F0C:  BSF    F94.4
1F0E:  BCF    F94.3
1F10:  MOVLW  30
1F12:  MOVWF  FC6
1F14:  MOVLW  40
1F16:  MOVWF  FC7
....................     
....................    //interrupt configuration 
....................    enable_interrupts(INT_RDA); 
1F18:  BSF    F9D.5
....................     
....................    enable_interrupts(GLOBAL); 
1F1A:  MOVLW  C0
1F1C:  IORWF  FF2,F
....................     
....................    //States reset 
....................    DaqState=DaqIdle;	//initial state 
1F1E:  MOVLB  3
1F20:  CLRF   xF4
.................... } 
1F22:  MOVLB  0
1F24:  GOTO   37B8 (RETURN)
.................... // 
.................... //read registers from EE 
.................... void	BURead(void){	//back up read 
.................... 	int32	temp; 
.................... 	//reading 
.................... 	SAW_A0=make16(read_eeprom(EE_SAW_A0+1),read_eeprom(EE_SAW_A0)); //rise saw level 
1F28:  MOVFF  FF2,58A
1F2C:  BCF    FF2.7
1F2E:  MOVLW  01
1F30:  MOVWF  FA9
1F32:  BCF    FA6.6
1F34:  BCF    FA6.7
1F36:  BSF    FA6.0
1F38:  MOVF   FA8,W
1F3A:  MOVLB  5
1F3C:  BTFSC  x8A.7
1F3E:  BSF    FF2.7
1F40:  MOVWF  x8B
1F42:  MOVFF  FF2,58C
1F46:  BCF    FF2.7
1F48:  CLRF   FA9
1F4A:  BCF    FA6.6
1F4C:  BCF    FA6.7
1F4E:  BSF    FA6.0
1F50:  MOVF   FA8,W
1F52:  BTFSC  x8C.7
1F54:  BSF    FF2.7
1F56:  MOVWF  x8D
1F58:  MOVFF  58B,3CC
1F5C:  MOVFF  58D,3CB
.................... 	SAW_A1=make16(read_eeprom(EE_SAW_A1+1),read_eeprom(EE_SAW_A1)); //rise saw amplitude 
1F60:  MOVFF  FF2,58A
1F64:  BCF    FF2.7
1F66:  MOVLW  03
1F68:  MOVWF  FA9
1F6A:  BCF    FA6.6
1F6C:  BCF    FA6.7
1F6E:  BSF    FA6.0
1F70:  MOVF   FA8,W
1F72:  BTFSC  x8A.7
1F74:  BSF    FF2.7
1F76:  MOVWF  x8B
1F78:  MOVFF  FF2,58C
1F7C:  BCF    FF2.7
1F7E:  MOVLW  02
1F80:  MOVWF  FA9
1F82:  BCF    FA6.6
1F84:  BCF    FA6.7
1F86:  BSF    FA6.0
1F88:  MOVF   FA8,W
1F8A:  BTFSC  x8C.7
1F8C:  BSF    FF2.7
1F8E:  MOVWF  x8D
1F90:  MOVFF  58B,3D2
1F94:  MOVFF  58D,3D1
.................... 	AmpCoef0=make16(read_eeprom(EE_KU0+1),read_eeprom(EE_KU0)); // 
1F98:  MOVFF  FF2,58A
1F9C:  BCF    FF2.7
1F9E:  MOVLW  05
1FA0:  MOVWF  FA9
1FA2:  BCF    FA6.6
1FA4:  BCF    FA6.7
1FA6:  BSF    FA6.0
1FA8:  MOVF   FA8,W
1FAA:  BTFSC  x8A.7
1FAC:  BSF    FF2.7
1FAE:  MOVWF  x8B
1FB0:  MOVFF  FF2,58C
1FB4:  BCF    FF2.7
1FB6:  MOVLW  04
1FB8:  MOVWF  FA9
1FBA:  BCF    FA6.6
1FBC:  BCF    FA6.7
1FBE:  BSF    FA6.0
1FC0:  MOVF   FA8,W
1FC2:  BTFSC  x8C.7
1FC4:  BSF    FF2.7
1FC6:  MOVWF  x8D
1FC8:  MOVFF  58B,3AC
1FCC:  MOVFF  58D,3AB
.................... 	AmpCoef1=make16(read_eeprom(EE_KU1+1),read_eeprom(EE_KU1)); // 
1FD0:  MOVFF  FF2,58A
1FD4:  BCF    FF2.7
1FD6:  MOVLW  07
1FD8:  MOVWF  FA9
1FDA:  BCF    FA6.6
1FDC:  BCF    FA6.7
1FDE:  BSF    FA6.0
1FE0:  MOVF   FA8,W
1FE2:  BTFSC  x8A.7
1FE4:  BSF    FF2.7
1FE6:  MOVWF  x8B
1FE8:  MOVFF  FF2,58C
1FEC:  BCF    FF2.7
1FEE:  MOVLW  06
1FF0:  MOVWF  FA9
1FF2:  BCF    FA6.6
1FF4:  BCF    FA6.7
1FF6:  BSF    FA6.0
1FF8:  MOVF   FA8,W
1FFA:  BTFSC  x8C.7
1FFC:  BSF    FF2.7
1FFE:  MOVWF  x8D
2000:  MOVFF  58B,3B8
2004:  MOVFF  58D,3B7
.................... 	TAQ=make16(read_eeprom(EE_TAQ+1),read_eeprom(EE_TAQ)); // 
2008:  MOVFF  FF2,58A
200C:  BCF    FF2.7
200E:  MOVLW  09
2010:  MOVWF  FA9
2012:  BCF    FA6.6
2014:  BCF    FA6.7
2016:  BSF    FA6.0
2018:  MOVF   FA8,W
201A:  BTFSC  x8A.7
201C:  BSF    FF2.7
201E:  MOVWF  x8B
2020:  MOVFF  FF2,58C
2024:  BCF    FF2.7
2026:  MOVLW  08
2028:  MOVWF  FA9
202A:  BCF    FA6.6
202C:  BCF    FA6.7
202E:  BSF    FA6.0
2030:  MOVF   FA8,W
2032:  BTFSC  x8C.7
2034:  BSF    FF2.7
2036:  MOVWF  x8D
2038:  MOVFF  58B,3C2
203C:  MOVFF  58D,3C1
.................... 	PCOUNT=make16(read_eeprom(EE_PCOUNT+1),read_eeprom(EE_PCOUNT)); // 
2040:  MOVFF  FF2,58A
2044:  BCF    FF2.7
2046:  MOVLW  0B
2048:  MOVWF  FA9
204A:  BCF    FA6.6
204C:  BCF    FA6.7
204E:  BSF    FA6.0
2050:  MOVF   FA8,W
2052:  BTFSC  x8A.7
2054:  BSF    FF2.7
2056:  MOVWF  x8B
2058:  MOVFF  FF2,58C
205C:  BCF    FF2.7
205E:  MOVLW  0A
2060:  MOVWF  FA9
2062:  BCF    FA6.6
2064:  BCF    FA6.7
2066:  BSF    FA6.0
2068:  MOVF   FA8,W
206A:  BTFSC  x8C.7
206C:  BSF    FF2.7
206E:  MOVWF  x8D
2070:  MOVFF  58B,3C6
2074:  MOVFF  58D,3C5
.................... 	FWDT=make16(read_eeprom(EE_FWDT+1),read_eeprom(EE_FWDT)); // 
2078:  MOVFF  FF2,58A
207C:  BCF    FF2.7
207E:  MOVLW  0D
2080:  MOVWF  FA9
2082:  BCF    FA6.6
2084:  BCF    FA6.7
2086:  BSF    FA6.0
2088:  MOVF   FA8,W
208A:  BTFSC  x8A.7
208C:  BSF    FF2.7
208E:  MOVWF  x8B
2090:  MOVFF  FF2,58C
2094:  BCF    FF2.7
2096:  MOVLW  0C
2098:  MOVWF  FA9
209A:  BCF    FA6.6
209C:  BCF    FA6.7
209E:  BSF    FA6.0
20A0:  MOVF   FA8,W
20A2:  BTFSC  x8C.7
20A4:  BSF    FF2.7
20A6:  MOVWF  x8D
20A8:  MOVFF  58B,3C4
20AC:  MOVFF  58D,3C3
.................... 	Speed=make16(read_eeprom(EE_Speed+1),read_eeprom(EE_Speed)); // 
20B0:  MOVFF  FF2,58A
20B4:  BCF    FF2.7
20B6:  MOVLW  0F
20B8:  MOVWF  FA9
20BA:  BCF    FA6.6
20BC:  BCF    FA6.7
20BE:  BSF    FA6.0
20C0:  MOVF   FA8,W
20C2:  BTFSC  x8A.7
20C4:  BSF    FF2.7
20C6:  MOVWF  x8B
20C8:  MOVFF  FF2,58C
20CC:  BCF    FF2.7
20CE:  MOVLW  0E
20D0:  MOVWF  FA9
20D2:  BCF    FA6.6
20D4:  BCF    FA6.7
20D6:  BSF    FA6.0
20D8:  MOVF   FA8,W
20DA:  BTFSC  x8C.7
20DC:  BSF    FF2.7
20DE:  MOVWF  x8D
20E0:  MOVFF  58B,3E2
20E4:  MOVFF  58D,3E1
.................... 	Addr=make16(read_eeprom(EE_Host+1),read_eeprom(EE_Host)); // 
20E8:  MOVFF  FF2,58A
20EC:  BCF    FF2.7
20EE:  MOVLW  11
20F0:  MOVWF  FA9
20F2:  BCF    FA6.6
20F4:  BCF    FA6.7
20F6:  BSF    FA6.0
20F8:  MOVF   FA8,W
20FA:  BTFSC  x8A.7
20FC:  BSF    FF2.7
20FE:  MOVWF  x8B
2100:  MOVFF  FF2,58C
2104:  BCF    FF2.7
2106:  MOVLW  10
2108:  MOVWF  FA9
210A:  BCF    FA6.6
210C:  BCF    FA6.7
210E:  BSF    FA6.0
2110:  MOVF   FA8,W
2112:  BTFSC  x8C.7
2114:  BSF    FF2.7
2116:  MOVWF  x8D
2118:  MOVFF  58B,3E4
211C:  MOVFF  58D,3E3
.................... 	T0_CAL=make32(read_eeprom(EE_T0_CAL+1),read_eeprom(EE_T0_CAL)); // 
2120:  MOVFF  FF2,58A
2124:  BCF    FF2.7
2126:  MOVLW  13
2128:  MOVWF  FA9
212A:  BCF    FA6.6
212C:  BCF    FA6.7
212E:  BSF    FA6.0
2130:  MOVF   FA8,W
2132:  BTFSC  x8A.7
2134:  BSF    FF2.7
2136:  MOVWF  x8B
2138:  MOVFF  FF2,58C
213C:  BCF    FF2.7
213E:  MOVLW  12
2140:  MOVWF  FA9
2142:  BCF    FA6.6
2144:  BCF    FA6.7
2146:  BSF    FA6.0
2148:  MOVF   FA8,W
214A:  BTFSC  x8C.7
214C:  BSF    FF2.7
214E:  MOVWF  x8D
2150:  MOVFF  58B,3B2
2154:  MOVFF  58D,3B1
.................... 	T1_CAL=make16(read_eeprom(EE_T1_CAL+1),read_eeprom(EE_T1_CAL)); // 
2158:  MOVFF  FF2,58A
215C:  BCF    FF2.7
215E:  MOVLW  15
2160:  MOVWF  FA9
2162:  BCF    FA6.6
2164:  BCF    FA6.7
2166:  BSF    FA6.0
2168:  MOVF   FA8,W
216A:  BTFSC  x8A.7
216C:  BSF    FF2.7
216E:  MOVWF  x8B
2170:  MOVFF  FF2,58C
2174:  BCF    FF2.7
2176:  MOVLW  14
2178:  MOVWF  FA9
217A:  BCF    FA6.6
217C:  BCF    FA6.7
217E:  BSF    FA6.0
2180:  MOVF   FA8,W
2182:  BTFSC  x8C.7
2184:  BSF    FF2.7
2186:  MOVWF  x8D
2188:  MOVFF  58B,3BE
218C:  MOVFF  58D,3BD
.................... 	TG_CAL=make16(read_eeprom(EE_TG_CAL+1),read_eeprom(EE_TG_CAL)); // 
2190:  MOVFF  FF2,58A
2194:  BCF    FF2.7
2196:  MOVLW  17
2198:  MOVWF  FA9
219A:  BCF    FA6.6
219C:  BCF    FA6.7
219E:  BSF    FA6.0
21A0:  MOVF   FA8,W
21A2:  BTFSC  x8A.7
21A4:  BSF    FF2.7
21A6:  MOVWF  x8B
21A8:  MOVFF  FF2,58C
21AC:  BCF    FF2.7
21AE:  MOVLW  16
21B0:  MOVWF  FA9
21B2:  BCF    FA6.6
21B4:  BCF    FA6.7
21B6:  BSF    FA6.0
21B8:  MOVF   FA8,W
21BA:  BTFSC  x8C.7
21BC:  BSF    FF2.7
21BE:  MOVWF  x8D
21C0:  MOVFF  58B,3E0
21C4:  MOVFF  58D,3DF
.................... 	temp=make32(read_eeprom(EE_KGT+2),read_eeprom(EE_KGT+3),read_eeprom(EE_KGT),read_eeprom(EE_KGT+1)); // 
21C8:  MOVFF  FF2,58A
21CC:  BCF    FF2.7
21CE:  MOVLW  1A
21D0:  MOVWF  FA9
21D2:  BCF    FA6.6
21D4:  BCF    FA6.7
21D6:  BSF    FA6.0
21D8:  MOVF   FA8,W
21DA:  BTFSC  x8A.7
21DC:  BSF    FF2.7
21DE:  MOVWF  x8B
21E0:  MOVFF  FF2,58C
21E4:  BCF    FF2.7
21E6:  MOVLW  1B
21E8:  MOVWF  FA9
21EA:  BCF    FA6.6
21EC:  BCF    FA6.7
21EE:  BSF    FA6.0
21F0:  MOVF   FA8,W
21F2:  BTFSC  x8C.7
21F4:  BSF    FF2.7
21F6:  MOVWF  x8D
21F8:  MOVFF  FF2,58E
21FC:  BCF    FF2.7
21FE:  MOVLW  18
2200:  MOVWF  FA9
2202:  BCF    FA6.6
2204:  BCF    FA6.7
2206:  BSF    FA6.0
2208:  MOVF   FA8,W
220A:  BTFSC  x8E.7
220C:  BSF    FF2.7
220E:  MOVWF  x8F
2210:  MOVFF  FF2,590
2214:  BCF    FF2.7
2216:  MOVLW  19
2218:  MOVWF  FA9
221A:  BCF    FA6.6
221C:  BCF    FA6.7
221E:  BSF    FA6.0
2220:  MOVF   FA8,W
2222:  BTFSC  x90.7
2224:  BSF    FF2.7
2226:  MOVWF  x91
2228:  MOVFF  58B,589
222C:  MOVFF  58D,588
2230:  MOVFF  58F,587
2234:  MOVFF  591,586
.................... 	memcpy(&KGT,&temp,4); 
2238:  MOVLW  03
223A:  MOVWF  FEA
223C:  MOVLW  D7
223E:  MOVWF  FE9
2240:  MOVLW  05
2242:  MOVWF  FE2
2244:  MOVLW  86
2246:  MOVWF  FE1
2248:  MOVLW  04
224A:  MOVWF  01
224C:  MOVFF  FE6,FEE
2250:  DECFSZ 01,F
2252:  BRA    224C
.................... 	temp=make32(read_eeprom(EE_KGU+2),read_eeprom(EE_KGU+3),read_eeprom(EE_KGU),read_eeprom(EE_KGU+1)); // 
2254:  MOVFF  FF2,58A
2258:  BCF    FF2.7
225A:  MOVLW  1E
225C:  MOVWF  FA9
225E:  BCF    FA6.6
2260:  BCF    FA6.7
2262:  BSF    FA6.0
2264:  MOVF   FA8,W
2266:  BTFSC  x8A.7
2268:  BSF    FF2.7
226A:  MOVWF  x8B
226C:  MOVFF  FF2,58C
2270:  BCF    FF2.7
2272:  MOVLW  1F
2274:  MOVWF  FA9
2276:  BCF    FA6.6
2278:  BCF    FA6.7
227A:  BSF    FA6.0
227C:  MOVF   FA8,W
227E:  BTFSC  x8C.7
2280:  BSF    FF2.7
2282:  MOVWF  x8D
2284:  MOVFF  FF2,58E
2288:  BCF    FF2.7
228A:  MOVLW  1C
228C:  MOVWF  FA9
228E:  BCF    FA6.6
2290:  BCF    FA6.7
2292:  BSF    FA6.0
2294:  MOVF   FA8,W
2296:  BTFSC  x8E.7
2298:  BSF    FF2.7
229A:  MOVWF  x8F
229C:  MOVFF  FF2,590
22A0:  BCF    FF2.7
22A2:  MOVLW  1D
22A4:  MOVWF  FA9
22A6:  BCF    FA6.6
22A8:  BCF    FA6.7
22AA:  BSF    FA6.0
22AC:  MOVF   FA8,W
22AE:  BTFSC  x90.7
22B0:  BSF    FF2.7
22B2:  MOVWF  x91
22B4:  MOVFF  58B,589
22B8:  MOVFF  58D,588
22BC:  MOVFF  58F,587
22C0:  MOVFF  591,586
.................... 	memcpy(&KGU,&temp,4); 
22C4:  MOVLW  03
22C6:  MOVWF  FEA
22C8:  MOVLW  DB
22CA:  MOVWF  FE9
22CC:  MOVLW  05
22CE:  MOVWF  FE2
22D0:  MOVLW  86
22D2:  MOVWF  FE1
22D4:  MOVLW  04
22D6:  MOVWF  01
22D8:  MOVFF  FE6,FEE
22DC:  DECFSZ 01,F
22DE:  BRA    22D8
.................... 	temp=make32(read_eeprom(EE_KST0+2),read_eeprom(EE_KST0+3),read_eeprom(EE_KST0),read_eeprom(EE_KST0+1)); // 
22E0:  MOVFF  FF2,58A
22E4:  BCF    FF2.7
22E6:  MOVLW  22
22E8:  MOVWF  FA9
22EA:  BCF    FA6.6
22EC:  BCF    FA6.7
22EE:  BSF    FA6.0
22F0:  MOVF   FA8,W
22F2:  BTFSC  x8A.7
22F4:  BSF    FF2.7
22F6:  MOVWF  x8B
22F8:  MOVFF  FF2,58C
22FC:  BCF    FF2.7
22FE:  MOVLW  23
2300:  MOVWF  FA9
2302:  BCF    FA6.6
2304:  BCF    FA6.7
2306:  BSF    FA6.0
2308:  MOVF   FA8,W
230A:  BTFSC  x8C.7
230C:  BSF    FF2.7
230E:  MOVWF  x8D
2310:  MOVFF  FF2,58E
2314:  BCF    FF2.7
2316:  MOVLW  20
2318:  MOVWF  FA9
231A:  BCF    FA6.6
231C:  BCF    FA6.7
231E:  BSF    FA6.0
2320:  MOVF   FA8,W
2322:  BTFSC  x8E.7
2324:  BSF    FF2.7
2326:  MOVWF  x8F
2328:  MOVFF  FF2,590
232C:  BCF    FF2.7
232E:  MOVLW  21
2330:  MOVWF  FA9
2332:  BCF    FA6.6
2334:  BCF    FA6.7
2336:  BSF    FA6.0
2338:  MOVF   FA8,W
233A:  BTFSC  x90.7
233C:  BSF    FF2.7
233E:  MOVWF  x91
2340:  MOVFF  58B,589
2344:  MOVFF  58D,588
2348:  MOVFF  58F,587
234C:  MOVFF  591,586
.................... 	memcpy(&KST0,&temp,4); 
2350:  MOVLW  03
2352:  MOVWF  FEA
2354:  MOVLW  AD
2356:  MOVWF  FE9
2358:  MOVLW  05
235A:  MOVWF  FE2
235C:  MOVLW  86
235E:  MOVWF  FE1
2360:  MOVLW  04
2362:  MOVWF  01
2364:  MOVFF  FE6,FEE
2368:  DECFSZ 01,F
236A:  BRA    2364
.................... 	temp=make32(read_eeprom(EE_KST1+2),read_eeprom(EE_KST1+3),read_eeprom(EE_KST1),read_eeprom(EE_KST1+1)); // 
236C:  MOVFF  FF2,58A
2370:  BCF    FF2.7
2372:  MOVLW  26
2374:  MOVWF  FA9
2376:  BCF    FA6.6
2378:  BCF    FA6.7
237A:  BSF    FA6.0
237C:  MOVF   FA8,W
237E:  BTFSC  x8A.7
2380:  BSF    FF2.7
2382:  MOVWF  x8B
2384:  MOVFF  FF2,58C
2388:  BCF    FF2.7
238A:  MOVLW  27
238C:  MOVWF  FA9
238E:  BCF    FA6.6
2390:  BCF    FA6.7
2392:  BSF    FA6.0
2394:  MOVF   FA8,W
2396:  BTFSC  x8C.7
2398:  BSF    FF2.7
239A:  MOVWF  x8D
239C:  MOVFF  FF2,58E
23A0:  BCF    FF2.7
23A2:  MOVLW  24
23A4:  MOVWF  FA9
23A6:  BCF    FA6.6
23A8:  BCF    FA6.7
23AA:  BSF    FA6.0
23AC:  MOVF   FA8,W
23AE:  BTFSC  x8E.7
23B0:  BSF    FF2.7
23B2:  MOVWF  x8F
23B4:  MOVFF  FF2,590
23B8:  BCF    FF2.7
23BA:  MOVLW  25
23BC:  MOVWF  FA9
23BE:  BCF    FA6.6
23C0:  BCF    FA6.7
23C2:  BSF    FA6.0
23C4:  MOVF   FA8,W
23C6:  BTFSC  x90.7
23C8:  BSF    FF2.7
23CA:  MOVWF  x91
23CC:  MOVFF  58B,589
23D0:  MOVFF  58D,588
23D4:  MOVFF  58F,587
23D8:  MOVFF  591,586
.................... 	memcpy(&KST1,&temp,4);	 
23DC:  MOVLW  03
23DE:  MOVWF  FEA
23E0:  MOVLW  B9
23E2:  MOVWF  FE9
23E4:  MOVLW  05
23E6:  MOVWF  FE2
23E8:  MOVLW  86
23EA:  MOVWF  FE1
23EC:  MOVLW  04
23EE:  MOVWF  01
23F0:  MOVFF  FE6,FEE
23F4:  DECFSZ 01,F
23F6:  BRA    23F0
.................... } 
23F8:  MOVLB  0
23FA:  GOTO   37BC (RETURN)
.................... // 
.................... //write registers to EE 
.................... void	BUWrite(void){	//back up write 
.................... 	int32	temp; 
.................... 	setup_wdt(WDT_OFF); 
*
1142:  BCF    FD1.0
.................... 	//writing 
.................... 	//int16 
.................... 	write_eeprom(EE_SAW_A0,make8(SAW_A0,0));	write_eeprom(EE_SAW_A0+1,make8(SAW_A0,1)); 
1144:  MOVFF  3CB,5A5
1148:  CLRF   FA9
114A:  MOVFF  5A5,FA8
114E:  BCF    FA6.6
1150:  BCF    FA6.7
1152:  BSF    FA6.2
1154:  MOVF   FF2,W
1156:  MOVWF  00
1158:  BCF    FF2.7
115A:  MOVLB  F
115C:  MOVLW  55
115E:  MOVWF  FA7
1160:  MOVLW  AA
1162:  MOVWF  FA7
1164:  BSF    FA6.1
1166:  BTFSC  FA6.1
1168:  BRA    1166
116A:  BCF    FA6.2
116C:  MOVF   00,W
116E:  IORWF  FF2,F
1170:  MOVFF  3CC,5A5
1174:  MOVLW  01
1176:  MOVWF  FA9
1178:  MOVFF  5A5,FA8
117C:  BCF    FA6.6
117E:  BCF    FA6.7
1180:  BSF    FA6.2
1182:  MOVF   FF2,W
1184:  MOVWF  00
1186:  BCF    FF2.7
1188:  MOVLW  55
118A:  MOVWF  FA7
118C:  MOVLW  AA
118E:  MOVWF  FA7
1190:  BSF    FA6.1
1192:  BTFSC  FA6.1
1194:  BRA    1192
1196:  BCF    FA6.2
1198:  MOVF   00,W
119A:  IORWF  FF2,F
.................... 	write_eeprom(EE_SAW_A1,make8(SAW_A1,0));	write_eeprom(EE_SAW_A1+1,make8(SAW_A1,1)); 
119C:  MOVFF  3D1,5A5
11A0:  MOVLW  02
11A2:  MOVWF  FA9
11A4:  MOVFF  3D1,FA8
11A8:  BCF    FA6.6
11AA:  BCF    FA6.7
11AC:  BSF    FA6.2
11AE:  MOVFF  FF2,00
11B2:  BCF    FF2.7
11B4:  MOVLW  55
11B6:  MOVWF  FA7
11B8:  MOVLW  AA
11BA:  MOVWF  FA7
11BC:  BSF    FA6.1
11BE:  BTFSC  FA6.1
11C0:  BRA    11BE
11C2:  BCF    FA6.2
11C4:  MOVF   00,W
11C6:  IORWF  FF2,F
11C8:  MOVFF  3D2,5A5
11CC:  MOVLW  03
11CE:  MOVWF  FA9
11D0:  MOVFF  3D2,FA8
11D4:  BCF    FA6.6
11D6:  BCF    FA6.7
11D8:  BSF    FA6.2
11DA:  MOVFF  FF2,00
11DE:  BCF    FF2.7
11E0:  MOVLW  55
11E2:  MOVWF  FA7
11E4:  MOVLW  AA
11E6:  MOVWF  FA7
11E8:  BSF    FA6.1
11EA:  BTFSC  FA6.1
11EC:  BRA    11EA
11EE:  BCF    FA6.2
11F0:  MOVF   00,W
11F2:  IORWF  FF2,F
.................... 	write_eeprom(EE_KU0,make8(AmpCoef0,0));		write_eeprom(EE_KU0+1,make8(AmpCoef0,1)); 
11F4:  MOVFF  3AB,5A5
11F8:  MOVLW  04
11FA:  MOVWF  FA9
11FC:  MOVFF  3AB,FA8
1200:  BCF    FA6.6
1202:  BCF    FA6.7
1204:  BSF    FA6.2
1206:  MOVFF  FF2,00
120A:  BCF    FF2.7
120C:  MOVLW  55
120E:  MOVWF  FA7
1210:  MOVLW  AA
1212:  MOVWF  FA7
1214:  BSF    FA6.1
1216:  BTFSC  FA6.1
1218:  BRA    1216
121A:  BCF    FA6.2
121C:  MOVF   00,W
121E:  IORWF  FF2,F
1220:  MOVFF  3AC,5A5
1224:  MOVLW  05
1226:  MOVWF  FA9
1228:  MOVFF  3AC,FA8
122C:  BCF    FA6.6
122E:  BCF    FA6.7
1230:  BSF    FA6.2
1232:  MOVFF  FF2,00
1236:  BCF    FF2.7
1238:  MOVLW  55
123A:  MOVWF  FA7
123C:  MOVLW  AA
123E:  MOVWF  FA7
1240:  BSF    FA6.1
1242:  BTFSC  FA6.1
1244:  BRA    1242
1246:  BCF    FA6.2
1248:  MOVF   00,W
124A:  IORWF  FF2,F
.................... 	write_eeprom(EE_KU1,make8(AmpCoef1,0));		write_eeprom(EE_KU1+1,make8(AmpCoef1,1)); 
124C:  MOVFF  3B7,5A5
1250:  MOVLW  06
1252:  MOVWF  FA9
1254:  MOVFF  3B7,FA8
1258:  BCF    FA6.6
125A:  BCF    FA6.7
125C:  BSF    FA6.2
125E:  MOVFF  FF2,00
1262:  BCF    FF2.7
1264:  MOVLW  55
1266:  MOVWF  FA7
1268:  MOVLW  AA
126A:  MOVWF  FA7
126C:  BSF    FA6.1
126E:  BTFSC  FA6.1
1270:  BRA    126E
1272:  BCF    FA6.2
1274:  MOVF   00,W
1276:  IORWF  FF2,F
1278:  MOVFF  3B8,5A5
127C:  MOVLW  07
127E:  MOVWF  FA9
1280:  MOVFF  3B8,FA8
1284:  BCF    FA6.6
1286:  BCF    FA6.7
1288:  BSF    FA6.2
128A:  MOVFF  FF2,00
128E:  BCF    FF2.7
1290:  MOVLW  55
1292:  MOVWF  FA7
1294:  MOVLW  AA
1296:  MOVWF  FA7
1298:  BSF    FA6.1
129A:  BTFSC  FA6.1
129C:  BRA    129A
129E:  BCF    FA6.2
12A0:  MOVF   00,W
12A2:  IORWF  FF2,F
.................... 	write_eeprom(EE_TAQ,make8(TAQ,0));			write_eeprom(EE_TAQ+1,make8(TAQ,1)); 
12A4:  MOVFF  3C1,5A5
12A8:  MOVLW  08
12AA:  MOVWF  FA9
12AC:  MOVFF  3C1,FA8
12B0:  BCF    FA6.6
12B2:  BCF    FA6.7
12B4:  BSF    FA6.2
12B6:  MOVFF  FF2,00
12BA:  BCF    FF2.7
12BC:  MOVLW  55
12BE:  MOVWF  FA7
12C0:  MOVLW  AA
12C2:  MOVWF  FA7
12C4:  BSF    FA6.1
12C6:  BTFSC  FA6.1
12C8:  BRA    12C6
12CA:  BCF    FA6.2
12CC:  MOVF   00,W
12CE:  IORWF  FF2,F
12D0:  MOVFF  3C2,5A5
12D4:  MOVLW  09
12D6:  MOVWF  FA9
12D8:  MOVFF  3C2,FA8
12DC:  BCF    FA6.6
12DE:  BCF    FA6.7
12E0:  BSF    FA6.2
12E2:  MOVFF  FF2,00
12E6:  BCF    FF2.7
12E8:  MOVLW  55
12EA:  MOVWF  FA7
12EC:  MOVLW  AA
12EE:  MOVWF  FA7
12F0:  BSF    FA6.1
12F2:  BTFSC  FA6.1
12F4:  BRA    12F2
12F6:  BCF    FA6.2
12F8:  MOVF   00,W
12FA:  IORWF  FF2,F
.................... 	write_eeprom(EE_PCOUNT,make8(PCOUNT,0));	write_eeprom(EE_PCOUNT+1,make8(PCOUNT,1)); 
12FC:  MOVFF  3C5,5A5
1300:  MOVLW  0A
1302:  MOVWF  FA9
1304:  MOVFF  3C5,FA8
1308:  BCF    FA6.6
130A:  BCF    FA6.7
130C:  BSF    FA6.2
130E:  MOVFF  FF2,00
1312:  BCF    FF2.7
1314:  MOVLW  55
1316:  MOVWF  FA7
1318:  MOVLW  AA
131A:  MOVWF  FA7
131C:  BSF    FA6.1
131E:  BTFSC  FA6.1
1320:  BRA    131E
1322:  BCF    FA6.2
1324:  MOVF   00,W
1326:  IORWF  FF2,F
1328:  MOVFF  3C6,5A5
132C:  MOVLW  0B
132E:  MOVWF  FA9
1330:  MOVFF  3C6,FA8
1334:  BCF    FA6.6
1336:  BCF    FA6.7
1338:  BSF    FA6.2
133A:  MOVFF  FF2,00
133E:  BCF    FF2.7
1340:  MOVLW  55
1342:  MOVWF  FA7
1344:  MOVLW  AA
1346:  MOVWF  FA7
1348:  BSF    FA6.1
134A:  BTFSC  FA6.1
134C:  BRA    134A
134E:  BCF    FA6.2
1350:  MOVF   00,W
1352:  IORWF  FF2,F
.................... 	write_eeprom(EE_FWDT,make8(FWDT,0));		write_eeprom(EE_FWDT+1,make8(FWDT,1)); 
1354:  MOVFF  3C3,5A5
1358:  MOVLW  0C
135A:  MOVWF  FA9
135C:  MOVFF  3C3,FA8
1360:  BCF    FA6.6
1362:  BCF    FA6.7
1364:  BSF    FA6.2
1366:  MOVFF  FF2,00
136A:  BCF    FF2.7
136C:  MOVLW  55
136E:  MOVWF  FA7
1370:  MOVLW  AA
1372:  MOVWF  FA7
1374:  BSF    FA6.1
1376:  BTFSC  FA6.1
1378:  BRA    1376
137A:  BCF    FA6.2
137C:  MOVF   00,W
137E:  IORWF  FF2,F
1380:  MOVFF  3C4,5A5
1384:  MOVLW  0D
1386:  MOVWF  FA9
1388:  MOVFF  3C4,FA8
138C:  BCF    FA6.6
138E:  BCF    FA6.7
1390:  BSF    FA6.2
1392:  MOVFF  FF2,00
1396:  BCF    FF2.7
1398:  MOVLW  55
139A:  MOVWF  FA7
139C:  MOVLW  AA
139E:  MOVWF  FA7
13A0:  BSF    FA6.1
13A2:  BTFSC  FA6.1
13A4:  BRA    13A2
13A6:  BCF    FA6.2
13A8:  MOVF   00,W
13AA:  IORWF  FF2,F
.................... 	write_eeprom(EE_Speed,make8(Speed,0));		write_eeprom(EE_Speed+1,make8(Speed,1)); 
13AC:  MOVFF  3E1,5A5
13B0:  MOVLW  0E
13B2:  MOVWF  FA9
13B4:  MOVFF  3E1,FA8
13B8:  BCF    FA6.6
13BA:  BCF    FA6.7
13BC:  BSF    FA6.2
13BE:  MOVFF  FF2,00
13C2:  BCF    FF2.7
13C4:  MOVLW  55
13C6:  MOVWF  FA7
13C8:  MOVLW  AA
13CA:  MOVWF  FA7
13CC:  BSF    FA6.1
13CE:  BTFSC  FA6.1
13D0:  BRA    13CE
13D2:  BCF    FA6.2
13D4:  MOVF   00,W
13D6:  IORWF  FF2,F
13D8:  MOVFF  3E2,5A5
13DC:  MOVLW  0F
13DE:  MOVWF  FA9
13E0:  MOVFF  3E2,FA8
13E4:  BCF    FA6.6
13E6:  BCF    FA6.7
13E8:  BSF    FA6.2
13EA:  MOVFF  FF2,00
13EE:  BCF    FF2.7
13F0:  MOVLW  55
13F2:  MOVWF  FA7
13F4:  MOVLW  AA
13F6:  MOVWF  FA7
13F8:  BSF    FA6.1
13FA:  BTFSC  FA6.1
13FC:  BRA    13FA
13FE:  BCF    FA6.2
1400:  MOVF   00,W
1402:  IORWF  FF2,F
.................... 	write_eeprom(EE_Host,make8(Addr,0));		write_eeprom(EE_Host+1,make8(Addr,1)); 
1404:  MOVFF  3E3,5A5
1408:  MOVLW  10
140A:  MOVWF  FA9
140C:  MOVFF  3E3,FA8
1410:  BCF    FA6.6
1412:  BCF    FA6.7
1414:  BSF    FA6.2
1416:  MOVFF  FF2,00
141A:  BCF    FF2.7
141C:  MOVLW  55
141E:  MOVWF  FA7
1420:  MOVLW  AA
1422:  MOVWF  FA7
1424:  BSF    FA6.1
1426:  BTFSC  FA6.1
1428:  BRA    1426
142A:  BCF    FA6.2
142C:  MOVF   00,W
142E:  IORWF  FF2,F
1430:  MOVFF  3E4,5A5
1434:  MOVLW  11
1436:  MOVWF  FA9
1438:  MOVFF  3E4,FA8
143C:  BCF    FA6.6
143E:  BCF    FA6.7
1440:  BSF    FA6.2
1442:  MOVFF  FF2,00
1446:  BCF    FF2.7
1448:  MOVLW  55
144A:  MOVWF  FA7
144C:  MOVLW  AA
144E:  MOVWF  FA7
1450:  BSF    FA6.1
1452:  BTFSC  FA6.1
1454:  BRA    1452
1456:  BCF    FA6.2
1458:  MOVF   00,W
145A:  IORWF  FF2,F
.................... 	write_eeprom(EE_T0_CAL,make8(T0_CAL,0));	write_eeprom(EE_T0_CAL+1,make8(T0_CAL,1)); 
145C:  MOVFF  3B1,5A5
1460:  MOVLW  12
1462:  MOVWF  FA9
1464:  MOVFF  3B1,FA8
1468:  BCF    FA6.6
146A:  BCF    FA6.7
146C:  BSF    FA6.2
146E:  MOVFF  FF2,00
1472:  BCF    FF2.7
1474:  MOVLW  55
1476:  MOVWF  FA7
1478:  MOVLW  AA
147A:  MOVWF  FA7
147C:  BSF    FA6.1
147E:  BTFSC  FA6.1
1480:  BRA    147E
1482:  BCF    FA6.2
1484:  MOVF   00,W
1486:  IORWF  FF2,F
1488:  MOVFF  3B2,5A5
148C:  MOVLW  13
148E:  MOVWF  FA9
1490:  MOVFF  3B2,FA8
1494:  BCF    FA6.6
1496:  BCF    FA6.7
1498:  BSF    FA6.2
149A:  MOVFF  FF2,00
149E:  BCF    FF2.7
14A0:  MOVLW  55
14A2:  MOVWF  FA7
14A4:  MOVLW  AA
14A6:  MOVWF  FA7
14A8:  BSF    FA6.1
14AA:  BTFSC  FA6.1
14AC:  BRA    14AA
14AE:  BCF    FA6.2
14B0:  MOVF   00,W
14B2:  IORWF  FF2,F
.................... 	write_eeprom(EE_T1_CAL,make8(T1_CAL,0));	write_eeprom(EE_T1_CAL+1,make8(T1_CAL,1)); 
14B4:  MOVFF  3BD,5A5
14B8:  MOVLW  14
14BA:  MOVWF  FA9
14BC:  MOVFF  3BD,FA8
14C0:  BCF    FA6.6
14C2:  BCF    FA6.7
14C4:  BSF    FA6.2
14C6:  MOVFF  FF2,00
14CA:  BCF    FF2.7
14CC:  MOVLW  55
14CE:  MOVWF  FA7
14D0:  MOVLW  AA
14D2:  MOVWF  FA7
14D4:  BSF    FA6.1
14D6:  BTFSC  FA6.1
14D8:  BRA    14D6
14DA:  BCF    FA6.2
14DC:  MOVF   00,W
14DE:  IORWF  FF2,F
14E0:  MOVFF  3BE,5A5
14E4:  MOVLW  15
14E6:  MOVWF  FA9
14E8:  MOVFF  3BE,FA8
14EC:  BCF    FA6.6
14EE:  BCF    FA6.7
14F0:  BSF    FA6.2
14F2:  MOVFF  FF2,00
14F6:  BCF    FF2.7
14F8:  MOVLW  55
14FA:  MOVWF  FA7
14FC:  MOVLW  AA
14FE:  MOVWF  FA7
1500:  BSF    FA6.1
1502:  BTFSC  FA6.1
1504:  BRA    1502
1506:  BCF    FA6.2
1508:  MOVF   00,W
150A:  IORWF  FF2,F
.................... 	write_eeprom(EE_TG_CAL,make8(TG_CAL,0));	write_eeprom(EE_TG_CAL+1,make8(TG_CAL,1)); 
150C:  MOVFF  3DF,5A5
1510:  MOVLW  16
1512:  MOVWF  FA9
1514:  MOVFF  3DF,FA8
1518:  BCF    FA6.6
151A:  BCF    FA6.7
151C:  BSF    FA6.2
151E:  MOVFF  FF2,00
1522:  BCF    FF2.7
1524:  MOVLW  55
1526:  MOVWF  FA7
1528:  MOVLW  AA
152A:  MOVWF  FA7
152C:  BSF    FA6.1
152E:  BTFSC  FA6.1
1530:  BRA    152E
1532:  BCF    FA6.2
1534:  MOVF   00,W
1536:  IORWF  FF2,F
1538:  MOVFF  3E0,5A5
153C:  MOVLW  17
153E:  MOVWF  FA9
1540:  MOVFF  3E0,FA8
1544:  BCF    FA6.6
1546:  BCF    FA6.7
1548:  BSF    FA6.2
154A:  MOVFF  FF2,00
154E:  BCF    FF2.7
1550:  MOVLW  55
1552:  MOVWF  FA7
1554:  MOVLW  AA
1556:  MOVWF  FA7
1558:  BSF    FA6.1
155A:  BTFSC  FA6.1
155C:  BRA    155A
155E:  BCF    FA6.2
1560:  MOVF   00,W
1562:  IORWF  FF2,F
.................... 	//float 
.................... 	memcpy(&temp,&KGT,4); 
1564:  MOVLW  05
1566:  MOVWF  FEA
1568:  MOVLW  A1
156A:  MOVWF  FE9
156C:  MOVLW  03
156E:  MOVWF  FE2
1570:  MOVLW  D7
1572:  MOVWF  FE1
1574:  MOVLW  04
1576:  MOVWF  01
1578:  MOVFF  FE6,FEE
157C:  DECFSZ 01,F
157E:  BRA    1578
.................... 	write_eeprom(EE_KGT+2,make8(temp,3));		write_eeprom(EE_KGT+3,make8(temp,2)); 
1580:  MOVFF  5A4,5A5
1584:  MOVLW  1A
1586:  MOVWF  FA9
1588:  MOVFF  5A4,FA8
158C:  BCF    FA6.6
158E:  BCF    FA6.7
1590:  BSF    FA6.2
1592:  MOVFF  FF2,00
1596:  BCF    FF2.7
1598:  MOVLW  55
159A:  MOVWF  FA7
159C:  MOVLW  AA
159E:  MOVWF  FA7
15A0:  BSF    FA6.1
15A2:  BTFSC  FA6.1
15A4:  BRA    15A2
15A6:  BCF    FA6.2
15A8:  MOVF   00,W
15AA:  IORWF  FF2,F
15AC:  MOVFF  5A3,5A5
15B0:  MOVLW  1B
15B2:  MOVWF  FA9
15B4:  MOVFF  5A3,FA8
15B8:  BCF    FA6.6
15BA:  BCF    FA6.7
15BC:  BSF    FA6.2
15BE:  MOVFF  FF2,00
15C2:  BCF    FF2.7
15C4:  MOVLW  55
15C6:  MOVWF  FA7
15C8:  MOVLW  AA
15CA:  MOVWF  FA7
15CC:  BSF    FA6.1
15CE:  BTFSC  FA6.1
15D0:  BRA    15CE
15D2:  BCF    FA6.2
15D4:  MOVF   00,W
15D6:  IORWF  FF2,F
.................... 	write_eeprom(EE_KGT,make8(temp,1));			write_eeprom(EE_KGT+1,make8(temp,0)); 
15D8:  MOVFF  5A2,5A5
15DC:  MOVLW  18
15DE:  MOVWF  FA9
15E0:  MOVFF  5A2,FA8
15E4:  BCF    FA6.6
15E6:  BCF    FA6.7
15E8:  BSF    FA6.2
15EA:  MOVFF  FF2,00
15EE:  BCF    FF2.7
15F0:  MOVLW  55
15F2:  MOVWF  FA7
15F4:  MOVLW  AA
15F6:  MOVWF  FA7
15F8:  BSF    FA6.1
15FA:  BTFSC  FA6.1
15FC:  BRA    15FA
15FE:  BCF    FA6.2
1600:  MOVF   00,W
1602:  IORWF  FF2,F
1604:  MOVFF  5A1,5A5
1608:  MOVLW  19
160A:  MOVWF  FA9
160C:  MOVFF  5A1,FA8
1610:  BCF    FA6.6
1612:  BCF    FA6.7
1614:  BSF    FA6.2
1616:  MOVFF  FF2,00
161A:  BCF    FF2.7
161C:  MOVLW  55
161E:  MOVWF  FA7
1620:  MOVLW  AA
1622:  MOVWF  FA7
1624:  BSF    FA6.1
1626:  BTFSC  FA6.1
1628:  BRA    1626
162A:  BCF    FA6.2
162C:  MOVF   00,W
162E:  IORWF  FF2,F
.................... 	memcpy(&temp,&KGU,4); 
1630:  MOVLW  05
1632:  MOVWF  FEA
1634:  MOVLW  A1
1636:  MOVWF  FE9
1638:  MOVLW  03
163A:  MOVWF  FE2
163C:  MOVLW  DB
163E:  MOVWF  FE1
1640:  MOVLW  04
1642:  MOVWF  01
1644:  MOVFF  FE6,FEE
1648:  DECFSZ 01,F
164A:  BRA    1644
.................... 	write_eeprom(EE_KGU+2,make8(temp,3));		write_eeprom(EE_KGU+3,make8(temp,2)); 
164C:  MOVFF  5A4,5A5
1650:  MOVLW  1E
1652:  MOVWF  FA9
1654:  MOVFF  5A4,FA8
1658:  BCF    FA6.6
165A:  BCF    FA6.7
165C:  BSF    FA6.2
165E:  MOVFF  FF2,00
1662:  BCF    FF2.7
1664:  MOVLW  55
1666:  MOVWF  FA7
1668:  MOVLW  AA
166A:  MOVWF  FA7
166C:  BSF    FA6.1
166E:  BTFSC  FA6.1
1670:  BRA    166E
1672:  BCF    FA6.2
1674:  MOVF   00,W
1676:  IORWF  FF2,F
1678:  MOVFF  5A3,5A5
167C:  MOVLW  1F
167E:  MOVWF  FA9
1680:  MOVFF  5A3,FA8
1684:  BCF    FA6.6
1686:  BCF    FA6.7
1688:  BSF    FA6.2
168A:  MOVFF  FF2,00
168E:  BCF    FF2.7
1690:  MOVLW  55
1692:  MOVWF  FA7
1694:  MOVLW  AA
1696:  MOVWF  FA7
1698:  BSF    FA6.1
169A:  BTFSC  FA6.1
169C:  BRA    169A
169E:  BCF    FA6.2
16A0:  MOVF   00,W
16A2:  IORWF  FF2,F
.................... 	write_eeprom(EE_KGU,make8(temp,1));			write_eeprom(EE_KGU+1,make8(temp,0)); 
16A4:  MOVFF  5A2,5A5
16A8:  MOVLW  1C
16AA:  MOVWF  FA9
16AC:  MOVFF  5A2,FA8
16B0:  BCF    FA6.6
16B2:  BCF    FA6.7
16B4:  BSF    FA6.2
16B6:  MOVFF  FF2,00
16BA:  BCF    FF2.7
16BC:  MOVLW  55
16BE:  MOVWF  FA7
16C0:  MOVLW  AA
16C2:  MOVWF  FA7
16C4:  BSF    FA6.1
16C6:  BTFSC  FA6.1
16C8:  BRA    16C6
16CA:  BCF    FA6.2
16CC:  MOVF   00,W
16CE:  IORWF  FF2,F
16D0:  MOVFF  5A1,5A5
16D4:  MOVLW  1D
16D6:  MOVWF  FA9
16D8:  MOVFF  5A1,FA8
16DC:  BCF    FA6.6
16DE:  BCF    FA6.7
16E0:  BSF    FA6.2
16E2:  MOVFF  FF2,00
16E6:  BCF    FF2.7
16E8:  MOVLW  55
16EA:  MOVWF  FA7
16EC:  MOVLW  AA
16EE:  MOVWF  FA7
16F0:  BSF    FA6.1
16F2:  BTFSC  FA6.1
16F4:  BRA    16F2
16F6:  BCF    FA6.2
16F8:  MOVF   00,W
16FA:  IORWF  FF2,F
.................... 	memcpy(&temp,&KGT,4); 
16FC:  MOVLW  05
16FE:  MOVWF  FEA
1700:  MOVLW  A1
1702:  MOVWF  FE9
1704:  MOVLW  03
1706:  MOVWF  FE2
1708:  MOVLW  D7
170A:  MOVWF  FE1
170C:  MOVLW  04
170E:  MOVWF  01
1710:  MOVFF  FE6,FEE
1714:  DECFSZ 01,F
1716:  BRA    1710
.................... 	write_eeprom(EE_KST0+2,make8(temp,3));		write_eeprom(EE_KST0+3,make8(temp,2)); 
1718:  MOVFF  5A4,5A5
171C:  MOVLW  22
171E:  MOVWF  FA9
1720:  MOVFF  5A4,FA8
1724:  BCF    FA6.6
1726:  BCF    FA6.7
1728:  BSF    FA6.2
172A:  MOVFF  FF2,00
172E:  BCF    FF2.7
1730:  MOVLW  55
1732:  MOVWF  FA7
1734:  MOVLW  AA
1736:  MOVWF  FA7
1738:  BSF    FA6.1
173A:  BTFSC  FA6.1
173C:  BRA    173A
173E:  BCF    FA6.2
1740:  MOVF   00,W
1742:  IORWF  FF2,F
1744:  MOVFF  5A3,5A5
1748:  MOVLW  23
174A:  MOVWF  FA9
174C:  MOVFF  5A3,FA8
1750:  BCF    FA6.6
1752:  BCF    FA6.7
1754:  BSF    FA6.2
1756:  MOVFF  FF2,00
175A:  BCF    FF2.7
175C:  MOVLW  55
175E:  MOVWF  FA7
1760:  MOVLW  AA
1762:  MOVWF  FA7
1764:  BSF    FA6.1
1766:  BTFSC  FA6.1
1768:  BRA    1766
176A:  BCF    FA6.2
176C:  MOVF   00,W
176E:  IORWF  FF2,F
.................... 	write_eeprom(EE_KST0,make8(temp,1));		write_eeprom(EE_KST0+1,make8(temp,0)); 
1770:  MOVFF  5A2,5A5
1774:  MOVLW  20
1776:  MOVWF  FA9
1778:  MOVFF  5A2,FA8
177C:  BCF    FA6.6
177E:  BCF    FA6.7
1780:  BSF    FA6.2
1782:  MOVFF  FF2,00
1786:  BCF    FF2.7
1788:  MOVLW  55
178A:  MOVWF  FA7
178C:  MOVLW  AA
178E:  MOVWF  FA7
1790:  BSF    FA6.1
1792:  BTFSC  FA6.1
1794:  BRA    1792
1796:  BCF    FA6.2
1798:  MOVF   00,W
179A:  IORWF  FF2,F
179C:  MOVFF  5A1,5A5
17A0:  MOVLW  21
17A2:  MOVWF  FA9
17A4:  MOVFF  5A1,FA8
17A8:  BCF    FA6.6
17AA:  BCF    FA6.7
17AC:  BSF    FA6.2
17AE:  MOVFF  FF2,00
17B2:  BCF    FF2.7
17B4:  MOVLW  55
17B6:  MOVWF  FA7
17B8:  MOVLW  AA
17BA:  MOVWF  FA7
17BC:  BSF    FA6.1
17BE:  BTFSC  FA6.1
17C0:  BRA    17BE
17C2:  BCF    FA6.2
17C4:  MOVF   00,W
17C6:  IORWF  FF2,F
.................... 	memcpy(&temp,&KGT,4); 
17C8:  MOVLW  05
17CA:  MOVWF  FEA
17CC:  MOVLW  A1
17CE:  MOVWF  FE9
17D0:  MOVLW  03
17D2:  MOVWF  FE2
17D4:  MOVLW  D7
17D6:  MOVWF  FE1
17D8:  MOVLW  04
17DA:  MOVWF  01
17DC:  MOVFF  FE6,FEE
17E0:  DECFSZ 01,F
17E2:  BRA    17DC
.................... 	write_eeprom(EE_KST1+2,make8(temp,3));		write_eeprom(EE_KST1+3,make8(temp,2)); 
17E4:  MOVFF  5A4,5A5
17E8:  MOVLW  26
17EA:  MOVWF  FA9
17EC:  MOVFF  5A4,FA8
17F0:  BCF    FA6.6
17F2:  BCF    FA6.7
17F4:  BSF    FA6.2
17F6:  MOVFF  FF2,00
17FA:  BCF    FF2.7
17FC:  MOVLW  55
17FE:  MOVWF  FA7
1800:  MOVLW  AA
1802:  MOVWF  FA7
1804:  BSF    FA6.1
1806:  BTFSC  FA6.1
1808:  BRA    1806
180A:  BCF    FA6.2
180C:  MOVF   00,W
180E:  IORWF  FF2,F
1810:  MOVFF  5A3,5A5
1814:  MOVLW  27
1816:  MOVWF  FA9
1818:  MOVFF  5A3,FA8
181C:  BCF    FA6.6
181E:  BCF    FA6.7
1820:  BSF    FA6.2
1822:  MOVFF  FF2,00
1826:  BCF    FF2.7
1828:  MOVLW  55
182A:  MOVWF  FA7
182C:  MOVLW  AA
182E:  MOVWF  FA7
1830:  BSF    FA6.1
1832:  BTFSC  FA6.1
1834:  BRA    1832
1836:  BCF    FA6.2
1838:  MOVF   00,W
183A:  IORWF  FF2,F
.................... 	write_eeprom(EE_KST1,make8(temp,1));			write_eeprom(EE_KST1+1,make8(temp,0)); 
183C:  MOVFF  5A2,5A5
1840:  MOVLW  24
1842:  MOVWF  FA9
1844:  MOVFF  5A2,FA8
1848:  BCF    FA6.6
184A:  BCF    FA6.7
184C:  BSF    FA6.2
184E:  MOVFF  FF2,00
1852:  BCF    FF2.7
1854:  MOVLW  55
1856:  MOVWF  FA7
1858:  MOVLW  AA
185A:  MOVWF  FA7
185C:  BSF    FA6.1
185E:  BTFSC  FA6.1
1860:  BRA    185E
1862:  BCF    FA6.2
1864:  MOVF   00,W
1866:  IORWF  FF2,F
1868:  MOVFF  5A1,5A5
186C:  MOVLW  25
186E:  MOVWF  FA9
1870:  MOVFF  5A1,FA8
1874:  BCF    FA6.6
1876:  BCF    FA6.7
1878:  BSF    FA6.2
187A:  MOVFF  FF2,00
187E:  BCF    FF2.7
1880:  MOVLW  55
1882:  MOVWF  FA7
1884:  MOVLW  AA
1886:  MOVWF  FA7
1888:  BSF    FA6.1
188A:  BTFSC  FA6.1
188C:  BRA    188A
188E:  BCF    FA6.2
1890:  MOVF   00,W
1892:  IORWF  FF2,F
.................... 	 
.................... 	setup_wdt(WDT_ON); 
1894:  BSF    FD1.0
.................... } 
1896:  MOVLB  0
1898:  GOTO   1BEC (RETURN)
.................... // 
.................... //temperature measuring 
.................... void	Termometer(void){ 
.................... 	signed int16	temp; 
.................... 	//generator 
.................... 	set_adc_channel(2);	//select generator channel 
*
26C4:  MOVLW  08
26C6:  MOVWF  01
26C8:  MOVF   FC2,W
26CA:  ANDLW  C3
26CC:  IORWF  01,W
26CE:  MOVWF  FC2
.................... 	delay_us(10);		//small wait 
26D0:  CLRWDT
26D2:  MOVLW  1A
26D4:  MOVWF  00
26D6:  DECFSZ 00,F
26D8:  BRA    26D6
.................... 	temp=read_adc();	//read value 
26DA:  BSF    FC2.1
26DC:  BTFSC  FC2.1
26DE:  BRA    26DC
26E0:  MOVFF  FC4,587
26E4:  MOVLB  5
26E6:  MOVFF  FC3,586
.................... 	T_GEN=(signed int16)((temp-205)*24.414); 
26EA:  MOVLW  CD
26EC:  SUBWF  x86,W
26EE:  MOVWF  x88
26F0:  MOVLW  00
26F2:  SUBWFB x87,W
26F4:  MOVWF  x89
26F6:  MOVWF  x8B
26F8:  MOVFF  588,58A
26FC:  MOVLB  0
26FE:  RCALL  2542
2700:  MOVFF  03,58D
2704:  MOVFF  02,58C
2708:  MOVFF  01,58B
270C:  MOVFF  00,58A
2710:  MOVLW  DF
2712:  MOVLB  5
2714:  MOVWF  x91
2716:  MOVLW  4F
2718:  MOVWF  x90
271A:  MOVLW  43
271C:  MOVWF  x8F
271E:  MOVLW  83
2720:  MOVWF  x8E
2722:  MOVLB  0
2724:  RCALL  2592
2726:  MOVFF  03,58B
272A:  MOVFF  02,58A
272E:  MOVFF  01,589
2732:  MOVFF  00,588
2736:  RCALL  2688
2738:  MOVFF  02,3CA
273C:  MOVFF  01,3C9
.................... 	//t0 
.................... 	set_adc_channel(5);	//select generator channel 
2740:  MOVLW  14
2742:  MOVWF  01
2744:  MOVF   FC2,W
2746:  ANDLW  C3
2748:  IORWF  01,W
274A:  MOVWF  FC2
.................... 	delay_us(10);		//small wait 
274C:  CLRWDT
274E:  MOVLW  1A
2750:  MOVWF  00
2752:  DECFSZ 00,F
2754:  BRA    2752
.................... 	temp=read_adc();	//read value 
2756:  BSF    FC2.1
2758:  BTFSC  FC2.1
275A:  BRA    2758
275C:  MOVFF  FC4,587
2760:  MOVLB  5
2762:  MOVFF  FC3,586
.................... 	T_SR0=(signed int16)((temp-205)*24.414); 
2766:  MOVLW  CD
2768:  SUBWF  x86,W
276A:  MOVWF  x88
276C:  MOVLW  00
276E:  SUBWFB x87,W
2770:  MOVWF  x89
2772:  MOVWF  x8B
2774:  MOVFF  588,58A
2778:  MOVLB  0
277A:  RCALL  2542
277C:  MOVFF  03,58D
2780:  MOVFF  02,58C
2784:  MOVFF  01,58B
2788:  MOVFF  00,58A
278C:  MOVLW  DF
278E:  MOVLB  5
2790:  MOVWF  x91
2792:  MOVLW  4F
2794:  MOVWF  x90
2796:  MOVLW  43
2798:  MOVWF  x8F
279A:  MOVLW  83
279C:  MOVWF  x8E
279E:  MOVLB  0
27A0:  RCALL  2592
27A2:  MOVFF  03,58B
27A6:  MOVFF  02,58A
27AA:  MOVFF  01,589
27AE:  MOVFF  00,588
27B2:  RCALL  2688
27B4:  MOVFF  02,3B4
27B8:  MOVFF  01,3B3
.................... 	//t1 
.................... 	set_adc_channel(4);	//select generator channel 
27BC:  MOVLW  10
27BE:  MOVWF  01
27C0:  MOVF   FC2,W
27C2:  ANDLW  C3
27C4:  IORWF  01,W
27C6:  MOVWF  FC2
.................... 	delay_us(10);		//small wait 
27C8:  CLRWDT
27CA:  MOVLW  1A
27CC:  MOVWF  00
27CE:  DECFSZ 00,F
27D0:  BRA    27CE
.................... 	temp=read_adc();	//read value 
27D2:  BSF    FC2.1
27D4:  BTFSC  FC2.1
27D6:  BRA    27D4
27D8:  MOVFF  FC4,587
27DC:  MOVLB  5
27DE:  MOVFF  FC3,586
.................... 	T_SR1=(signed int16)((temp-205)*24.414); 
27E2:  MOVLW  CD
27E4:  SUBWF  x86,W
27E6:  MOVWF  x88
27E8:  MOVLW  00
27EA:  SUBWFB x87,W
27EC:  MOVWF  x89
27EE:  MOVWF  x8B
27F0:  MOVFF  588,58A
27F4:  MOVLB  0
27F6:  RCALL  2542
27F8:  MOVFF  03,58D
27FC:  MOVFF  02,58C
2800:  MOVFF  01,58B
2804:  MOVFF  00,58A
2808:  MOVLW  DF
280A:  MOVLB  5
280C:  MOVWF  x91
280E:  MOVLW  4F
2810:  MOVWF  x90
2812:  MOVLW  43
2814:  MOVWF  x8F
2816:  MOVLW  83
2818:  MOVWF  x8E
281A:  MOVLB  0
281C:  RCALL  2592
281E:  MOVFF  03,58B
2822:  MOVFF  02,58A
2826:  MOVFF  01,589
282A:  MOVFF  00,588
282E:  RCALL  2688
2830:  MOVFF  02,3C0
2834:  MOVFF  01,3BF
.................... } 
2838:  RETLW  00
.................... // 
.................... //DAC setting 
.................... void	SetSawDac(int32	level){ 
.................... 	int16	course; 
.................... 	//fine part 
.................... 	output_low(DAC0);						//select fine DAC 
.................... 	spi_write((make8(level,1)&0x03)|0x10);	//send high part 
.................... 	spi_write(make8(level,0));				//send low part 
.................... 	output_high(DAC0);						//deselect 
.................... 	//course part 
.................... 	course=(make16(make8(level,2),make8(level,1)))>>2; 
.................... 	output_low(DAC1);						//select course DAC 
.................... 	spi_write((make8(course,1)&0x0f)|0x10);	//send high part 
.................... 	spi_write(make8(course,0));				//send low part 
.................... 	output_high(DAC1);						//deselect 
.................... 	output_low(LDAC);						//send DAC 
.................... 	output_high(LDAC);						//strobe 
.................... } 
.................... //KU setting 
.................... void	SetKU0(int16 coeff){ 
.................... 	int16	dacval; 
.................... 	setup_wdt(WDT_OFF); 
283A:  BCF    FD1.0
.................... 	if((coeff<1)&(coeff>6))	coeff=1; 
283C:  MOVLB  5
283E:  MOVF   x86,F
2840:  BNZ   2846
2842:  MOVF   x87,F
2844:  BZ    284A
2846:  MOVLW  00
2848:  BRA    284C
284A:  MOVLW  01
284C:  MOVWF  x8A
284E:  MOVF   x87,F
2850:  BNZ   285C
2852:  MOVF   x86,W
2854:  SUBLW  06
2856:  BNC   285C
2858:  MOVLW  00
285A:  BRA    285E
285C:  MOVLW  01
285E:  ANDWF  x8A,W
2860:  BZ    2868
2862:  CLRF   x87
2864:  MOVLW  01
2866:  MOVWF  x86
.................... 	dacval=(0x1fff>>coeff)|0x7000; 
2868:  MOVLW  1F
286A:  MOVWF  x8B
286C:  MOVLW  FF
286E:  MOVWF  x8A
2870:  MOVF   x86,W
2872:  MOVWF  00
2874:  BZ    2880
2876:  BCF    FD8.0
2878:  RRCF   x8B,F
287A:  RRCF   x8A,F
287C:  DECFSZ 00,F
287E:  BRA    2876
2880:  MOVF   x8A,W
2882:  MOVWF  x88
2884:  MOVF   x8B,W
2886:  IORLW  70
2888:  MOVWF  x89
.................... 	output_low(KU0);				//select KU0 DAC 
288A:  BCF    F95.5
288C:  BCF    F8C.5
.................... 	spi_write(make8(dacval,1));		//send high part 
288E:  MOVFF  589,58A
2892:  MOVF   FC9,W
2894:  MOVFF  589,FC9
2898:  RRCF   FC7,W
289A:  BNC   2898
.................... 	spi_write(make8(dacval,0));		//send low part 
289C:  MOVFF  588,58A
28A0:  MOVF   FC9,W
28A2:  MOVFF  588,FC9
28A6:  RRCF   FC7,W
28A8:  BNC   28A6
.................... 	output_high(KU0);				//deselect 
28AA:  BCF    F95.5
28AC:  BSF    F8C.5
.................... 	setup_wdt(WDT_ON); 
28AE:  BSF    FD1.0
.................... } 
28B0:  MOVLB  0
28B2:  GOTO   3804 (RETURN)
.................... void	SetKU1(int16 coeff){ 
.................... 	int16	dacval; 
.................... 	setup_wdt(WDT_OFF); 
28B6:  BCF    FD1.0
.................... 	if((coeff<1)&(coeff>6))	coeff=1; 
28B8:  MOVLB  5
28BA:  MOVF   x86,F
28BC:  BNZ   28C2
28BE:  MOVF   x87,F
28C0:  BZ    28C6
28C2:  MOVLW  00
28C4:  BRA    28C8
28C6:  MOVLW  01
28C8:  MOVWF  x8A
28CA:  MOVF   x87,F
28CC:  BNZ   28D8
28CE:  MOVF   x86,W
28D0:  SUBLW  06
28D2:  BNC   28D8
28D4:  MOVLW  00
28D6:  BRA    28DA
28D8:  MOVLW  01
28DA:  ANDWF  x8A,W
28DC:  BZ    28E4
28DE:  CLRF   x87
28E0:  MOVLW  01
28E2:  MOVWF  x86
.................... 	dacval=(0x1fff>>coeff)|0x7000; 
28E4:  MOVLW  1F
28E6:  MOVWF  x8B
28E8:  MOVLW  FF
28EA:  MOVWF  x8A
28EC:  MOVF   x86,W
28EE:  MOVWF  00
28F0:  BZ    28FC
28F2:  BCF    FD8.0
28F4:  RRCF   x8B,F
28F6:  RRCF   x8A,F
28F8:  DECFSZ 00,F
28FA:  BRA    28F2
28FC:  MOVF   x8A,W
28FE:  MOVWF  x88
2900:  MOVF   x8B,W
2902:  IORLW  70
2904:  MOVWF  x89
.................... 	output_low(KU1);				//select KU0 DAC 
2906:  BCF    F95.4
2908:  BCF    F8C.4
.................... 	spi_write(make8(dacval,1));		//send high part 
290A:  MOVFF  589,58A
290E:  MOVF   FC9,W
2910:  MOVFF  589,FC9
2914:  RRCF   FC7,W
2916:  BNC   2914
.................... 	spi_write(make8(dacval,0));		//send low part 
2918:  MOVFF  588,58A
291C:  MOVF   FC9,W
291E:  MOVFF  588,FC9
2922:  RRCF   FC7,W
2924:  BNC   2922
.................... 	output_high(KU1);				//deselect 
2926:  BCF    F95.4
2928:  BSF    F8C.4
.................... 	setup_wdt(WDT_ON); 
292A:  BSF    FD1.0
.................... } 
292C:  MOVLB  0
292E:  GOTO   3810 (RETURN)
.................... // 
....................  
.................... //ISR 
.................... #include	"modbus_isr.h" 
.................... //modbus realization 
.................... // 
.................... //values 
.................... enum modbus_exceptions{ 
.................... 	illegal_function=1, 
.................... 	illegal_data_address=2, 
.................... 	illegal_data_value=3, 
.................... 	slave_device_failure=4, 
.................... 	acknowledge=5, 
.................... 	slave_device_busy=6 
.................... }; 
.................... static 	int8	MB_Buffer[256];		//incoming buffer 
.................... static	int8	MB_Length=0;			//message length 
.................... static	int16	ValidReq;			//valid req count 
.................... static	int16	CRCReq;				//CRC error count 
.................... static	int16	ExcReq;				//ecxcept error count 
.................... // 
.................... //CRC table 
.................... /* Table of CRC values for high–order byte */ 
.................... const int8 modbus_auchCRCHi[] = { 
....................    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 
....................    0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 
....................    0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 
....................    0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 
....................    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 
....................    0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 
....................    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 
....................    0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 
....................    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 
....................    0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 
....................    0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 
....................    0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 
....................    0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 
....................    0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 
....................    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 
....................    0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 
....................    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 
....................    0x40 
.................... }; 
....................  
.................... /* Table of CRC values for low–order byte */ 
.................... const int8 modbus_auchCRCLo[] = { 
....................    0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4, 
....................    0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09, 
....................    0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 
....................    0x1D, 0x1C, 0xDC, 0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3, 
....................    0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7, 
....................    0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A, 
....................    0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 
....................    0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26, 
....................    0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2, 
....................    0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F, 
....................    0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB, 
....................    0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5, 
....................    0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91, 
....................    0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C, 
....................    0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88, 
....................    0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C, 
....................    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80, 
....................    0x40 
.................... }; 
.................... //procedures 
.................... // 
.................... // 
.................... //UART preset 
.................... #USE RS232(baud=9600, xmit=TX, rcv=RX, enable=DIR, parity=N) 
*
18CE:  BCF    F92.6
18D0:  BSF    F89.6
18D2:  BTFSS  F9E.4
18D4:  BRA    18D2
18D6:  MOVLB  5
18D8:  MOVFF  5A2,FAD
18DC:  NOP   
18DE:  BCF    F92.6
18E0:  BSF    F89.6
18E2:  BTFSS  FAC.1
18E4:  BRA    18E2
18E6:  BCF    F92.6
18E8:  BCF    F89.6
18EA:  MOVLB  0
18EC:  GOTO   1E66 (RETURN)
.................... void	RsInit(void){ 
.................... 	MB_Length=0;	//set clear buffer 
*
23FE:  MOVLB  5
2400:  CLRF   x5D
.................... 	//select rate 
.................... 	switch(Speed){ 
2402:  MOVLB  3
2404:  MOVF   xE1,W
2406:  MOVWF  00
2408:  MOVF   xE2,W
240A:  MOVWF  03
240C:  MOVLW  04
240E:  SUBWF  03,W
2410:  BNZ   241C
2412:  MOVLW  B0
2414:  SUBWF  00,W
2416:  MOVLB  0
2418:  BZ    248C
241A:  MOVLB  3
241C:  MOVLW  07
241E:  SUBWF  03,W
2420:  BNZ   242C
2422:  MOVLW  08
2424:  SUBWF  00,W
2426:  MOVLB  0
2428:  BZ    24A0
242A:  MOVLB  3
242C:  MOVLW  09
242E:  SUBWF  03,W
2430:  BNZ   243C
2432:  MOVLW  60
2434:  SUBWF  00,W
2436:  MOVLB  0
2438:  BZ    24B4
243A:  MOVLB  3
243C:  MOVLW  12
243E:  SUBWF  03,W
2440:  BNZ   244C
2442:  MOVLW  C0
2444:  SUBWF  00,W
2446:  MOVLB  0
2448:  BZ    24C8
244A:  MOVLB  3
244C:  MOVLW  1C
244E:  SUBWF  03,W
2450:  BNZ   245C
2452:  MOVLW  20
2454:  SUBWF  00,W
2456:  MOVLB  0
2458:  BZ    24DC
245A:  MOVLB  3
245C:  MOVLW  25
245E:  SUBWF  03,W
2460:  BNZ   246C
2462:  MOVLW  80
2464:  SUBWF  00,W
2466:  MOVLB  0
2468:  BZ    24F0
246A:  MOVLB  3
246C:  MOVLW  38
246E:  SUBWF  03,W
2470:  BNZ   247C
2472:  MOVLW  40
2474:  SUBWF  00,W
2476:  MOVLB  0
2478:  BZ    2504
247A:  MOVLB  3
247C:  MOVLW  4B
247E:  SUBWF  03,W
2480:  BNZ   248A
2482:  MOVF   00,F
2484:  MOVLB  0
2486:  BZ    2514
2488:  MOVLB  3
248A:  BRA    252A
.................... 		case	1200:	setup_uart(1200); 
248C:  BSF    FB8.3
248E:  MOVLW  0A
2490:  MOVWF  FAF
2492:  MOVLW  1A
2494:  MOVWF  FB0
2496:  MOVLW  A6
2498:  MOVWF  FAC
249A:  NOP   
249C:  NOP   
.................... 						break; 
249E:  BRA    253C
.................... 		case	1800:	setup_uart(1800); 
24A0:  BSF    FB8.3
24A2:  MOVLW  5B
24A4:  MOVWF  FAF
24A6:  MOVLW  11
24A8:  MOVWF  FB0
24AA:  MOVLW  A6
24AC:  MOVWF  FAC
24AE:  NOP   
24B0:  NOP   
.................... 						break; 
24B2:  BRA    253C
.................... 		case	2400:	setup_uart(2400); 
24B4:  BSF    FB8.3
24B6:  MOVLW  04
24B8:  MOVWF  FAF
24BA:  MOVLW  0D
24BC:  MOVWF  FB0
24BE:  MOVLW  A6
24C0:  MOVWF  FAC
24C2:  NOP   
24C4:  NOP   
.................... 						break; 
24C6:  BRA    253C
.................... 		case	4800:	setup_uart(4800); 
24C8:  BSF    FB8.3
24CA:  MOVLW  82
24CC:  MOVWF  FAF
24CE:  MOVLW  06
24D0:  MOVWF  FB0
24D2:  MOVLW  A6
24D4:  MOVWF  FAC
24D6:  NOP   
24D8:  NOP   
.................... 						break; 
24DA:  BRA    253C
.................... 		case	7200:	setup_uart(7200); 
24DC:  BSF    FB8.3
24DE:  MOVLW  56
24E0:  MOVWF  FAF
24E2:  MOVLW  04
24E4:  MOVWF  FB0
24E6:  MOVLW  A6
24E8:  MOVWF  FAC
24EA:  NOP   
24EC:  NOP   
.................... 						break; 
24EE:  BRA    253C
.................... 		case	9600:	setup_uart(9600); 
24F0:  BSF    FB8.3
24F2:  MOVLW  40
24F4:  MOVWF  FAF
24F6:  MOVLW  03
24F8:  MOVWF  FB0
24FA:  MOVLW  A6
24FC:  MOVWF  FAC
24FE:  NOP   
2500:  NOP   
.................... 						break; 
2502:  BRA    253C
.................... 		case	14400:	setup_uart(14400); 
2504:  BCF    FB8.3
2506:  MOVLW  8A
2508:  MOVWF  FAF
250A:  MOVLW  A6
250C:  MOVWF  FAC
250E:  NOP   
2510:  NOP   
.................... 						break; 
2512:  BRA    253C
.................... 		case	19200:	setup_uart(19200); 
2514:  BSF    FB8.3
2516:  MOVLW  A0
2518:  MOVWF  FAF
251A:  MOVLW  01
251C:  MOVWF  FB0
251E:  MOVLW  A6
2520:  MOVWF  FAC
2522:  NOP   
2524:  NOP   
.................... 						break; 
2526:  BRA    253C
2528:  MOVLB  3
.................... 		default:		setup_uart(9600); 
252A:  BSF    FB8.3
252C:  MOVLW  40
252E:  MOVWF  FAF
2530:  MOVLW  03
2532:  MOVWF  FB0
2534:  MOVLW  A6
2536:  MOVWF  FAC
2538:  NOP   
253A:  NOP   
253C:  MOVLB  0
.................... 	};	 
.................... //	dmy=getc(); 
.................... } 
253E:  GOTO   37C0 (RETURN)
.................... // 
....................  
.................... //usart settings 
....................  
.................... //usart interrupt vector - packet interception 
.................... #INT_RDA 
.................... void	Incoming(void){ 
.................... 	MB_Buffer[MB_Length]=getc();	//read stream 
*
0370:  CLRF   03
0372:  MOVLB  5
0374:  MOVF   x5D,W
0376:  ADDLW  5D
0378:  MOVWF  FE9
037A:  MOVLW  04
037C:  ADDWFC 03,W
037E:  MOVWF  FEA
0380:  BTFSS  F9E.5
0382:  BRA    0380
0384:  MOVFF  FAE,FEF
.................... 	MB_Length++;					//set new point 
0388:  INCF   x5D,F
.................... 	output_low(STAT); 
038A:  BCF    F94.0
038C:  BCF    F8B.0
.................... 	set_timer1((int16)(0xffff-35000000/Speed));	//set wait time 
038E:  BCF    FD8.1
0390:  MOVLW  02
0392:  MOVWF  x9D
0394:  MOVLW  16
0396:  MOVWF  x9C
0398:  MOVLW  0E
039A:  MOVWF  x9B
039C:  MOVLW  C0
039E:  MOVWF  x9A
03A0:  CLRF   xA1
03A2:  CLRF   xA0
03A4:  MOVFF  3E2,59F
03A8:  MOVFF  3E1,59E
03AC:  MOVLB  0
03AE:  BRA    02DA
03B0:  MOVLW  FF
03B2:  BSF    FD8.0
03B4:  SUBFWB 00,F
03B6:  SUBFWB 01,F
03B8:  MOVLW  00
03BA:  SUBFWB 02,F
03BC:  SUBFWB 03,F
03BE:  MOVFF  01,FCF
03C2:  MOVFF  00,FCE
.................... 	clear_interrupt(INT_TIMER1);		//clear timer 1 int 
03C6:  BCF    F9E.0
.................... 	enable_interrupts(INT_TIMER1);	//enable timer 1 interrupt 
03C8:  BSF    F9D.0
.................... //	clear_interrupt(int_rda);		//clear interrupt flag 
.................... } 
.................... // 
.................... //calculate CRC16 : 1st - buffer, 2d - length of data 
03CA:  BCF    F9E.5
03CC:  GOTO   006C
.................... int16	ModbusCRC(int8 * buf, int8 len){ 
03D0:  MOVLW  FF
03D2:  MOVLB  5
03D4:  MOVWF  xA7
03D6:  MOVWF  xA8
.................... 	int8	i,index; 
.................... 	int8	CRC_Low=0xff,CRC_High=0xff; 
.................... 	// 
.................... 	for(i=0; i<len; i++){ 
03D8:  CLRF   xA5
03DA:  MOVF   xA4,W
03DC:  SUBWF  xA5,W
03DE:  BC    0418
.................... 		index=CRC_High^buf[i]; 
03E0:  CLRF   03
03E2:  MOVF   xA5,W
03E4:  ADDWF  xA2,W
03E6:  MOVWF  FE9
03E8:  MOVF   xA3,W
03EA:  ADDWFC 03,W
03EC:  MOVWF  FEA
03EE:  MOVF   FEF,W
03F0:  XORWF  xA8,W
03F2:  MOVWF  xA6
.................... 		CRC_High=CRC_Low^modbus_auchCRCHi[index]; 
03F4:  CLRF   03
03F6:  MOVF   xA6,W
03F8:  MOVLB  0
03FA:  RCALL  00BA
03FC:  MOVWF  01
03FE:  MOVLB  5
0400:  MOVF   xA7,W
0402:  XORWF  01,W
0404:  MOVWF  xA8
.................... 		CRC_Low=modbus_auchCRCLo[index]; 
0406:  CLRF   03
0408:  MOVF   xA6,W
040A:  MOVLB  0
040C:  RCALL  01CA
040E:  MOVFF  FE8,5A7
.................... 	} 
0412:  MOVLB  5
0414:  INCF   xA5,F
0416:  BRA    03DA
.................... 	// 
.................... 	return	make16(CRC_High,CRC_Low); 
0418:  MOVFF  5A8,03
041C:  MOVFF  5A7,01
0420:  MOVFF  5A8,02
.................... } 
0424:  MOVLB  0
0426:  RETLW  00
.................... //read registers 
.................... static int16	CRCr,CRCc; 
.................... static int8	j; 
.................... // 
....................  
.................... //add register data 
.................... void	AddRegData(int8 regist){ 
.................... 	int32	flcopy; 
.................... 	restart_wdt(); 
0428:  CLRWDT
.................... 			switch(regist){ 
042A:  MOVLB  5
042C:  MOVF   xA1,W
042E:  XORLW  00
0430:  MOVLB  0
0432:  BZ    04E4
0434:  XORLW  01
0436:  BTFSC  FD8.2
0438:  BRA    051C
043A:  XORLW  03
043C:  BTFSC  FD8.2
043E:  BRA    0554
0440:  XORLW  01
0442:  BTFSC  FD8.2
0444:  BRA    058C
0446:  XORLW  07
0448:  BTFSC  FD8.2
044A:  BRA    05B8
044C:  XORLW  01
044E:  BTFSC  FD8.2
0450:  BRA    05F0
0452:  XORLW  03
0454:  BTFSC  FD8.2
0456:  BRA    061C
0458:  XORLW  01
045A:  BTFSC  FD8.2
045C:  BRA    0654
045E:  XORLW  0F
0460:  BTFSC  FD8.2
0462:  BRA    068C
0464:  XORLW  01
0466:  BTFSC  FD8.2
0468:  BRA    06C4
046A:  XORLW  03
046C:  BTFSC  FD8.2
046E:  BRA    06F0
0470:  XORLW  01
0472:  BTFSC  FD8.2
0474:  BRA    071C
0476:  XORLW  07
0478:  BTFSC  FD8.2
047A:  BRA    0754
047C:  XORLW  01
047E:  BTFSC  FD8.2
0480:  BRA    078C
0482:  XORLW  03
0484:  BTFSC  FD8.2
0486:  BRA    07C4
0488:  XORLW  01
048A:  BTFSC  FD8.2
048C:  BRA    07FC
048E:  XORLW  1F
0490:  BTFSC  FD8.2
0492:  BRA    0834
0494:  XORLW  01
0496:  BTFSC  FD8.2
0498:  BRA    086C
049A:  XORLW  03
049C:  BTFSC  FD8.2
049E:  BRA    08A4
04A0:  XORLW  01
04A2:  BTFSC  FD8.2
04A4:  BRA    08DC
04A6:  XORLW  07
04A8:  BTFSC  FD8.2
04AA:  BRA    0914
04AC:  XORLW  01
04AE:  BTFSC  FD8.2
04B0:  BRA    0944
04B2:  XORLW  03
04B4:  BTFSC  FD8.2
04B6:  BRA    0974
04B8:  XORLW  01
04BA:  BTFSC  FD8.2
04BC:  BRA    09A4
04BE:  XORLW  0F
04C0:  BTFSC  FD8.2
04C2:  BRA    0A18
04C4:  XORLW  01
04C6:  BTFSC  FD8.2
04C8:  BRA    0A8C
04CA:  XORLW  03
04CC:  BTFSC  FD8.2
04CE:  BRA    0B00
04D0:  XORLW  01
04D2:  BTFSC  FD8.2
04D4:  BRA    0B50
04D6:  XORLW  07
04D8:  BTFSC  FD8.2
04DA:  BRA    0B88
04DC:  XORLW  01
04DE:  BTFSC  FD8.2
04E0:  BRA    0BC0
04E2:  BRA    0BF8
.................... 				case 0x00:	//gamma 0					 
.................... 					MB_Buffer[j]=make8(Gamma0,1);	//high part 
04E4:  CLRF   03
04E6:  MOVLB  5
04E8:  MOVF   x68,W
04EA:  ADDLW  5D
04EC:  MOVWF  FE9
04EE:  MOVLW  04
04F0:  ADDWFC 03,W
04F2:  MOVWF  FEA
04F4:  MOVLB  3
04F6:  MOVFF  3AA,FEF
.................... 					j++; 
04FA:  MOVLB  5
04FC:  INCF   x68,F
.................... 					MB_Buffer[j]=make8(Gamma0,0);	//low part 
04FE:  CLRF   03
0500:  MOVF   x68,W
0502:  ADDLW  5D
0504:  MOVWF  FE9
0506:  MOVLW  04
0508:  ADDWFC 03,W
050A:  MOVWF  FEA
050C:  MOVLB  3
050E:  MOVFF  3A9,FEF
.................... 					j++; 
0512:  MOVLB  5
0514:  INCF   x68,F
.................... 					MB_Length+=2; 
0516:  MOVLW  02
0518:  ADDWF  x5D,F
.................... 					break; 
051A:  BRA    0C14
.................... 				case 0x01:	//gamma1 
.................... 					MB_Buffer[j]=make8(Gamma1,1);	//high part 
051C:  CLRF   03
051E:  MOVLB  5
0520:  MOVF   x68,W
0522:  ADDLW  5D
0524:  MOVWF  FE9
0526:  MOVLW  04
0528:  ADDWFC 03,W
052A:  MOVWF  FEA
052C:  MOVLB  3
052E:  MOVFF  3B6,FEF
.................... 					j++; 
0532:  MOVLB  5
0534:  INCF   x68,F
.................... 					MB_Buffer[j]=make8(Gamma1,0);	//low part 
0536:  CLRF   03
0538:  MOVF   x68,W
053A:  ADDLW  5D
053C:  MOVWF  FE9
053E:  MOVLW  04
0540:  ADDWFC 03,W
0542:  MOVWF  FEA
0544:  MOVLB  3
0546:  MOVFF  3B5,FEF
.................... 					j++; 
054A:  MOVLB  5
054C:  INCF   x68,F
.................... 					MB_Length+=2; 
054E:  MOVLW  02
0550:  ADDWF  x5D,F
.................... 					break; 
0552:  BRA    0C14
.................... 				case 0x02:	//pulse width 1/2 amp				 
.................... 					MB_Buffer[j]=make8(PulseWdt0,1);	//high part 
0554:  CLRF   03
0556:  MOVLB  5
0558:  MOVF   x68,W
055A:  ADDLW  5D
055C:  MOVWF  FE9
055E:  MOVLW  04
0560:  ADDWFC 03,W
0562:  MOVWF  FEA
0564:  MOVLB  3
0566:  MOVFF  3A6,FEF
.................... 					j++; 
056A:  MOVLB  5
056C:  INCF   x68,F
.................... 					MB_Buffer[j]=make8(PulseWdt0,0);	//low part 
056E:  CLRF   03
0570:  MOVF   x68,W
0572:  ADDLW  5D
0574:  MOVWF  FE9
0576:  MOVLW  04
0578:  ADDWFC 03,W
057A:  MOVWF  FEA
057C:  MOVLB  3
057E:  MOVFF  3A5,FEF
.................... 					j++; 
0582:  MOVLB  5
0584:  INCF   x68,F
.................... 					MB_Length+=2; 
0586:  MOVLW  02
0588:  ADDWF  x5D,F
.................... 					break; 
058A:  BRA    0C14
.................... 				case 0x03:	//pulse width 1/2 amp 
.................... 					MB_Buffer[j]=0;	//high part 
058C:  CLRF   03
058E:  MOVLB  5
0590:  MOVF   x68,W
0592:  ADDLW  5D
0594:  MOVWF  FE9
0596:  MOVLW  04
0598:  ADDWFC 03,W
059A:  MOVWF  FEA
059C:  CLRF   FEF
.................... 					j++; 
059E:  INCF   x68,F
.................... 					MB_Buffer[j]=0;	//low part 
05A0:  CLRF   03
05A2:  MOVF   x68,W
05A4:  ADDLW  5D
05A6:  MOVWF  FE9
05A8:  MOVLW  04
05AA:  ADDWFC 03,W
05AC:  MOVWF  FEA
05AE:  CLRF   FEF
.................... 					j++; 
05B0:  INCF   x68,F
.................... 					MB_Length+=2; 
05B2:  MOVLW  02
05B4:  ADDWF  x5D,F
.................... 					break; 
05B6:  BRA    0C14
.................... 				case 0x04:	//pulse amplitude			 
.................... 					MB_Buffer[j]=make8(Amplitude0,1);	//high part 
05B8:  CLRF   03
05BA:  MOVLB  5
05BC:  MOVF   x68,W
05BE:  ADDLW  5D
05C0:  MOVWF  FE9
05C2:  MOVLW  04
05C4:  ADDWFC 03,W
05C6:  MOVWF  FEA
05C8:  MOVLB  3
05CA:  MOVFF  3A4,FEF
.................... 					j++; 
05CE:  MOVLB  5
05D0:  INCF   x68,F
.................... 					MB_Buffer[j]=make8(Amplitude0,0);	//low part 
05D2:  CLRF   03
05D4:  MOVF   x68,W
05D6:  ADDLW  5D
05D8:  MOVWF  FE9
05DA:  MOVLW  04
05DC:  ADDWFC 03,W
05DE:  MOVWF  FEA
05E0:  MOVLB  3
05E2:  MOVFF  3A3,FEF
.................... 					j++; 
05E6:  MOVLB  5
05E8:  INCF   x68,F
.................... 					MB_Length+=2; 
05EA:  MOVLW  02
05EC:  ADDWF  x5D,F
.................... 					break; 
05EE:  BRA    0C14
.................... 				case 0x05:	//pulse amplitude				 
.................... 					MB_Buffer[j]=0;	//high part 
05F0:  CLRF   03
05F2:  MOVLB  5
05F4:  MOVF   x68,W
05F6:  ADDLW  5D
05F8:  MOVWF  FE9
05FA:  MOVLW  04
05FC:  ADDWFC 03,W
05FE:  MOVWF  FEA
0600:  CLRF   FEF
.................... 					j++; 
0602:  INCF   x68,F
.................... 					MB_Buffer[j]=0;	//low part 
0604:  CLRF   03
0606:  MOVF   x68,W
0608:  ADDLW  5D
060A:  MOVWF  FE9
060C:  MOVLW  04
060E:  ADDWFC 03,W
0610:  MOVWF  FEA
0612:  CLRF   FEF
.................... 					j++; 
0614:  INCF   x68,F
.................... 					MB_Length+=2; 
0616:  MOVLW  02
0618:  ADDWF  x5D,F
.................... 					break; 
061A:  BRA    0C14
.................... 				case 0x06:	//temp of gen				 
.................... 					MB_Buffer[j]=make8(T_GEN,1);	//high part 
061C:  CLRF   03
061E:  MOVLB  5
0620:  MOVF   x68,W
0622:  ADDLW  5D
0624:  MOVWF  FE9
0626:  MOVLW  04
0628:  ADDWFC 03,W
062A:  MOVWF  FEA
062C:  MOVLB  3
062E:  MOVFF  3CA,FEF
.................... 					j++; 
0632:  MOVLB  5
0634:  INCF   x68,F
.................... 					MB_Buffer[j]=make8(T_GEN,0);	//low part 
0636:  CLRF   03
0638:  MOVF   x68,W
063A:  ADDLW  5D
063C:  MOVWF  FE9
063E:  MOVLW  04
0640:  ADDWFC 03,W
0642:  MOVWF  FEA
0644:  MOVLB  3
0646:  MOVFF  3C9,FEF
.................... 					j++; 
064A:  MOVLB  5
064C:  INCF   x68,F
.................... 					MB_Length+=2; 
064E:  MOVLW  02
0650:  ADDWF  x5D,F
.................... 					break; 
0652:  BRA    0C14
.................... 				case 0x07:	//temp 0					 
.................... 					MB_Buffer[j]=make8(T_SR0,1);	//high part 
0654:  CLRF   03
0656:  MOVLB  5
0658:  MOVF   x68,W
065A:  ADDLW  5D
065C:  MOVWF  FE9
065E:  MOVLW  04
0660:  ADDWFC 03,W
0662:  MOVWF  FEA
0664:  MOVLB  3
0666:  MOVFF  3B4,FEF
.................... 					j++; 
066A:  MOVLB  5
066C:  INCF   x68,F
.................... 					MB_Buffer[j]=make8(T_SR0,0);	//low part 
066E:  CLRF   03
0670:  MOVF   x68,W
0672:  ADDLW  5D
0674:  MOVWF  FE9
0676:  MOVLW  04
0678:  ADDWFC 03,W
067A:  MOVWF  FEA
067C:  MOVLB  3
067E:  MOVFF  3B3,FEF
.................... 					j++; 
0682:  MOVLB  5
0684:  INCF   x68,F
.................... 					MB_Length+=2; 
0686:  MOVLW  02
0688:  ADDWF  x5D,F
.................... 					break; 
068A:  BRA    0C14
.................... 				case 0x08:	//temp 1 
.................... 					MB_Buffer[j]=make8(T_SR1,1);	//high part 
068C:  CLRF   03
068E:  MOVLB  5
0690:  MOVF   x68,W
0692:  ADDLW  5D
0694:  MOVWF  FE9
0696:  MOVLW  04
0698:  ADDWFC 03,W
069A:  MOVWF  FEA
069C:  MOVLB  3
069E:  MOVFF  3C0,FEF
.................... 					j++; 
06A2:  MOVLB  5
06A4:  INCF   x68,F
.................... 					MB_Buffer[j]=make8(T_SR1,0);	//low part 
06A6:  CLRF   03
06A8:  MOVF   x68,W
06AA:  ADDLW  5D
06AC:  MOVWF  FE9
06AE:  MOVLW  04
06B0:  ADDWFC 03,W
06B2:  MOVWF  FEA
06B4:  MOVLB  3
06B6:  MOVFF  3BF,FEF
.................... 					j++; 
06BA:  MOVLB  5
06BC:  INCF   x68,F
.................... 					MB_Length+=2; 
06BE:  MOVLW  02
06C0:  ADDWF  x5D,F
.................... 					break; 
06C2:  BRA    0C14
.................... 				case 0x09:	//dummy command					 
.................... 					MB_Buffer[j]=0x00;	//high part 
06C4:  CLRF   03
06C6:  MOVLB  5
06C8:  MOVF   x68,W
06CA:  ADDLW  5D
06CC:  MOVWF  FE9
06CE:  MOVLW  04
06D0:  ADDWFC 03,W
06D2:  MOVWF  FEA
06D4:  CLRF   FEF
.................... 					j++; 
06D6:  INCF   x68,F
.................... 					MB_Buffer[j]=0x00;	//low part 
06D8:  CLRF   03
06DA:  MOVF   x68,W
06DC:  ADDLW  5D
06DE:  MOVWF  FE9
06E0:  MOVLW  04
06E2:  ADDWFC 03,W
06E4:  MOVWF  FEA
06E6:  CLRF   FEF
.................... 					j++; 
06E8:  INCF   x68,F
.................... 					MB_Length+=2; 
06EA:  MOVLW  02
06EC:  ADDWF  x5D,F
.................... 					break; 
06EE:  BRA    0C14
.................... 				case 0x0A:	//dummy command					 
.................... 					MB_Buffer[j]=0x00;	//high part 
06F0:  CLRF   03
06F2:  MOVLB  5
06F4:  MOVF   x68,W
06F6:  ADDLW  5D
06F8:  MOVWF  FE9
06FA:  MOVLW  04
06FC:  ADDWFC 03,W
06FE:  MOVWF  FEA
0700:  CLRF   FEF
.................... 					j++; 
0702:  INCF   x68,F
.................... 					MB_Buffer[j]=0x00;	//low part 
0704:  CLRF   03
0706:  MOVF   x68,W
0708:  ADDLW  5D
070A:  MOVWF  FE9
070C:  MOVLW  04
070E:  ADDWFC 03,W
0710:  MOVWF  FEA
0712:  CLRF   FEF
.................... 					j++; 
0714:  INCF   x68,F
.................... 					MB_Length+=2; 
0716:  MOVLW  02
0718:  ADDWF  x5D,F
.................... 					break; 
071A:  BRA    0C14
.................... 				case 0x0B:	//saw level 
.................... 					MB_Buffer[j]=make8(SAW_A0,1);	//high part 
071C:  CLRF   03
071E:  MOVLB  5
0720:  MOVF   x68,W
0722:  ADDLW  5D
0724:  MOVWF  FE9
0726:  MOVLW  04
0728:  ADDWFC 03,W
072A:  MOVWF  FEA
072C:  MOVLB  3
072E:  MOVFF  3CC,FEF
.................... 					j++; 
0732:  MOVLB  5
0734:  INCF   x68,F
.................... 					MB_Buffer[j]=make8(SAW_A0,0);	//low part 
0736:  CLRF   03
0738:  MOVF   x68,W
073A:  ADDLW  5D
073C:  MOVWF  FE9
073E:  MOVLW  04
0740:  ADDWFC 03,W
0742:  MOVWF  FEA
0744:  MOVLB  3
0746:  MOVFF  3CB,FEF
.................... 					j++; 
074A:  MOVLB  5
074C:  INCF   x68,F
.................... 					MB_Length+=2; 
074E:  MOVLW  02
0750:  ADDWF  x5D,F
.................... 					break; 
0752:  BRA    0C14
.................... 				case 0x0C:	//saw amplitude			 
.................... 					MB_Buffer[j]=make8(SAW_A1,1);	//high part 
0754:  CLRF   03
0756:  MOVLB  5
0758:  MOVF   x68,W
075A:  ADDLW  5D
075C:  MOVWF  FE9
075E:  MOVLW  04
0760:  ADDWFC 03,W
0762:  MOVWF  FEA
0764:  MOVLB  3
0766:  MOVFF  3D2,FEF
.................... 					j++; 
076A:  MOVLB  5
076C:  INCF   x68,F
.................... 					MB_Buffer[j]=make8(SAW_A1,0);	//low part 
076E:  CLRF   03
0770:  MOVF   x68,W
0772:  ADDLW  5D
0774:  MOVWF  FE9
0776:  MOVLW  04
0778:  ADDWFC 03,W
077A:  MOVWF  FEA
077C:  MOVLB  3
077E:  MOVFF  3D1,FEF
.................... 					j++; 
0782:  MOVLB  5
0784:  INCF   x68,F
.................... 					MB_Length+=2; 
0786:  MOVLW  02
0788:  ADDWF  x5D,F
.................... 					break; 
078A:  BRA    0C14
.................... 				case 0x0D:	//input coef 0					 
.................... 					MB_Buffer[j]=make8(AmpCoef0,1);	//high part 
078C:  CLRF   03
078E:  MOVLB  5
0790:  MOVF   x68,W
0792:  ADDLW  5D
0794:  MOVWF  FE9
0796:  MOVLW  04
0798:  ADDWFC 03,W
079A:  MOVWF  FEA
079C:  MOVLB  3
079E:  MOVFF  3AC,FEF
.................... 					j++; 
07A2:  MOVLB  5
07A4:  INCF   x68,F
.................... 					MB_Buffer[j]=make8(AmpCoef0,0);	//low part 
07A6:  CLRF   03
07A8:  MOVF   x68,W
07AA:  ADDLW  5D
07AC:  MOVWF  FE9
07AE:  MOVLW  04
07B0:  ADDWFC 03,W
07B2:  MOVWF  FEA
07B4:  MOVLB  3
07B6:  MOVFF  3AB,FEF
.................... 					j++; 
07BA:  MOVLB  5
07BC:  INCF   x68,F
.................... 					MB_Length+=2; 
07BE:  MOVLW  02
07C0:  ADDWF  x5D,F
.................... 					break; 
07C2:  BRA    0C14
.................... 				case 0x0E:	//input coef 1 
.................... 					MB_Buffer[j]=make8(AmpCoef1,1);	//high part 
07C4:  CLRF   03
07C6:  MOVLB  5
07C8:  MOVF   x68,W
07CA:  ADDLW  5D
07CC:  MOVWF  FE9
07CE:  MOVLW  04
07D0:  ADDWFC 03,W
07D2:  MOVWF  FEA
07D4:  MOVLB  3
07D6:  MOVFF  3B8,FEF
.................... 					j++; 
07DA:  MOVLB  5
07DC:  INCF   x68,F
.................... 					MB_Buffer[j]=make8(AmpCoef1,0);	//low part 
07DE:  CLRF   03
07E0:  MOVF   x68,W
07E2:  ADDLW  5D
07E4:  MOVWF  FE9
07E6:  MOVLW  04
07E8:  ADDWFC 03,W
07EA:  MOVWF  FEA
07EC:  MOVLB  3
07EE:  MOVFF  3B7,FEF
.................... 					j++; 
07F2:  MOVLB  5
07F4:  INCF   x68,F
.................... 					MB_Length+=2; 
07F6:  MOVLW  02
07F8:  ADDWF  x5D,F
.................... 					break; 
07FA:  BRA    0C14
.................... 				case 0x0F:	//measure points 
.................... 					MB_Buffer[j]=make8(TAQ,1);	//high part 
07FC:  CLRF   03
07FE:  MOVLB  5
0800:  MOVF   x68,W
0802:  ADDLW  5D
0804:  MOVWF  FE9
0806:  MOVLW  04
0808:  ADDWFC 03,W
080A:  MOVWF  FEA
080C:  MOVLB  3
080E:  MOVFF  3C2,FEF
.................... 					j++; 
0812:  MOVLB  5
0814:  INCF   x68,F
.................... 					MB_Buffer[j]=make8(TAQ,0);	//low part 
0816:  CLRF   03
0818:  MOVF   x68,W
081A:  ADDLW  5D
081C:  MOVWF  FE9
081E:  MOVLW  04
0820:  ADDWFC 03,W
0822:  MOVWF  FEA
0824:  MOVLB  3
0826:  MOVFF  3C1,FEF
.................... 					j++; 
082A:  MOVLB  5
082C:  INCF   x68,F
.................... 					MB_Length+=2; 
082E:  MOVLW  02
0830:  ADDWF  x5D,F
.................... 					break; 
0832:  BRA    0C14
.................... 				case 0x10:	//filter width				 
.................... 					MB_Buffer[j]=make8(FWDT,1);	//high part 
0834:  CLRF   03
0836:  MOVLB  5
0838:  MOVF   x68,W
083A:  ADDLW  5D
083C:  MOVWF  FE9
083E:  MOVLW  04
0840:  ADDWFC 03,W
0842:  MOVWF  FEA
0844:  MOVLB  3
0846:  MOVFF  3C4,FEF
.................... 					j++; 
084A:  MOVLB  5
084C:  INCF   x68,F
.................... 					MB_Buffer[j]=make8(FWDT,0);	//low part 
084E:  CLRF   03
0850:  MOVF   x68,W
0852:  ADDLW  5D
0854:  MOVWF  FE9
0856:  MOVLW  04
0858:  ADDWFC 03,W
085A:  MOVWF  FEA
085C:  MOVLB  3
085E:  MOVFF  3C3,FEF
.................... 					j++; 
0862:  MOVLB  5
0864:  INCF   x68,F
.................... 					MB_Length+=2; 
0866:  MOVLW  02
0868:  ADDWF  x5D,F
.................... 					break; 
086A:  BRA    0C14
.................... 				case 0x11:	//measures count 
.................... 					MB_Buffer[j]=make8(PCOUNT,1);	//high part 
086C:  CLRF   03
086E:  MOVLB  5
0870:  MOVF   x68,W
0872:  ADDLW  5D
0874:  MOVWF  FE9
0876:  MOVLW  04
0878:  ADDWFC 03,W
087A:  MOVWF  FEA
087C:  MOVLB  3
087E:  MOVFF  3C6,FEF
.................... 					j++; 
0882:  MOVLB  5
0884:  INCF   x68,F
.................... 					MB_Buffer[j]=make8(PCOUNT,0);	//low part 
0886:  CLRF   03
0888:  MOVF   x68,W
088A:  ADDLW  5D
088C:  MOVWF  FE9
088E:  MOVLW  04
0890:  ADDWFC 03,W
0892:  MOVWF  FEA
0894:  MOVLB  3
0896:  MOVFF  3C5,FEF
.................... 					j++; 
089A:  MOVLB  5
089C:  INCF   x68,F
.................... 					MB_Length+=2; 
089E:  MOVLW  02
08A0:  ADDWF  x5D,F
.................... 					break; 
08A2:  BRA    0C14
.................... 				case 0x12:	//speed register 
.................... 					MB_Buffer[j]=make8(Speed,1);	//high part 
08A4:  CLRF   03
08A6:  MOVLB  5
08A8:  MOVF   x68,W
08AA:  ADDLW  5D
08AC:  MOVWF  FE9
08AE:  MOVLW  04
08B0:  ADDWFC 03,W
08B2:  MOVWF  FEA
08B4:  MOVLB  3
08B6:  MOVFF  3E2,FEF
.................... 					j++; 
08BA:  MOVLB  5
08BC:  INCF   x68,F
.................... 					MB_Buffer[j]=make8(Speed,0);	//low part 
08BE:  CLRF   03
08C0:  MOVF   x68,W
08C2:  ADDLW  5D
08C4:  MOVWF  FE9
08C6:  MOVLW  04
08C8:  ADDWFC 03,W
08CA:  MOVWF  FEA
08CC:  MOVLB  3
08CE:  MOVFF  3E1,FEF
.................... 					j++; 
08D2:  MOVLB  5
08D4:  INCF   x68,F
.................... 					MB_Length+=2; 
08D6:  MOVLW  02
08D8:  ADDWF  x5D,F
.................... 					break; 
08DA:  BRA    0C14
.................... 				case 0x13:	//host address register 
.................... 					MB_Buffer[j]=make8(Addr,1);	//high part 
08DC:  CLRF   03
08DE:  MOVLB  5
08E0:  MOVF   x68,W
08E2:  ADDLW  5D
08E4:  MOVWF  FE9
08E6:  MOVLW  04
08E8:  ADDWFC 03,W
08EA:  MOVWF  FEA
08EC:  MOVLB  3
08EE:  MOVFF  3E4,FEF
.................... 					j++; 
08F2:  MOVLB  5
08F4:  INCF   x68,F
.................... 					MB_Buffer[j]=make8(Addr,0);	//low part 
08F6:  CLRF   03
08F8:  MOVF   x68,W
08FA:  ADDLW  5D
08FC:  MOVWF  FE9
08FE:  MOVLW  04
0900:  ADDWFC 03,W
0902:  MOVWF  FEA
0904:  MOVLB  3
0906:  MOVFF  3E3,FEF
.................... 					j++;								 
090A:  MOVLB  5
090C:  INCF   x68,F
.................... 					MB_Length+=2; 
090E:  MOVLW  02
0910:  ADDWF  x5D,F
.................... 					break; 
0912:  BRA    0C14
.................... 				case 0x14:	//Valid request register 
.................... 					MB_Buffer[j]=make8(ValidReq,1);	//high part 
0914:  CLRF   03
0916:  MOVLB  5
0918:  MOVF   x68,W
091A:  ADDLW  5D
091C:  MOVWF  FE9
091E:  MOVLW  04
0920:  ADDWFC 03,W
0922:  MOVWF  FEA
0924:  MOVFF  55F,FEF
.................... 					j++; 
0928:  INCF   x68,F
.................... 					MB_Buffer[j]=make8(ValidReq,0);	//low part 
092A:  CLRF   03
092C:  MOVF   x68,W
092E:  ADDLW  5D
0930:  MOVWF  FE9
0932:  MOVLW  04
0934:  ADDWFC 03,W
0936:  MOVWF  FEA
0938:  MOVFF  55E,FEF
.................... 					j++;								 
093C:  INCF   x68,F
.................... 					MB_Length+=2; 
093E:  MOVLW  02
0940:  ADDWF  x5D,F
.................... 					break; 
0942:  BRA    0C14
.................... 				case 0x15:	//CRC error register 
.................... 					MB_Buffer[j]=make8(CRCReq,1);	//high part 
0944:  CLRF   03
0946:  MOVLB  5
0948:  MOVF   x68,W
094A:  ADDLW  5D
094C:  MOVWF  FE9
094E:  MOVLW  04
0950:  ADDWFC 03,W
0952:  MOVWF  FEA
0954:  MOVFF  561,FEF
.................... 					j++; 
0958:  INCF   x68,F
.................... 					MB_Buffer[j]=make8(CRCReq,0);	//low part 
095A:  CLRF   03
095C:  MOVF   x68,W
095E:  ADDLW  5D
0960:  MOVWF  FE9
0962:  MOVLW  04
0964:  ADDWFC 03,W
0966:  MOVWF  FEA
0968:  MOVFF  560,FEF
.................... 					j++;								 
096C:  INCF   x68,F
.................... 					MB_Length+=2; 
096E:  MOVLW  02
0970:  ADDWF  x5D,F
.................... 					break; 
0972:  BRA    0C14
.................... 				case 0x16:	//Exception register 
.................... 					MB_Buffer[j]=make8(ExcReq,1);	//high part 
0974:  CLRF   03
0976:  MOVLB  5
0978:  MOVF   x68,W
097A:  ADDLW  5D
097C:  MOVWF  FE9
097E:  MOVLW  04
0980:  ADDWFC 03,W
0982:  MOVWF  FEA
0984:  MOVFF  563,FEF
.................... 					j++; 
0988:  INCF   x68,F
.................... 					MB_Buffer[j]=make8(ExcReq,0);	//low part 
098A:  CLRF   03
098C:  MOVF   x68,W
098E:  ADDLW  5D
0990:  MOVWF  FE9
0992:  MOVLW  04
0994:  ADDWFC 03,W
0996:  MOVWF  FEA
0998:  MOVFF  562,FEF
.................... 					j++;								 
099C:  INCF   x68,F
.................... 					MB_Length+=2; 
099E:  MOVLW  02
09A0:  ADDWF  x5D,F
.................... 					break; 
09A2:  BRA    0C14
.................... 				case 0x17:	//KGT				 
.................... 					//copy 
.................... 					memcpy(&flcopy,&KGT,4); 
09A4:  MOVLW  05
09A6:  MOVWF  FEA
09A8:  MOVLW  A2
09AA:  MOVWF  FE9
09AC:  MOVLW  03
09AE:  MOVWF  FE2
09B0:  MOVLW  D7
09B2:  MOVWF  FE1
09B4:  MOVLW  04
09B6:  MOVWF  01
09B8:  MOVFF  FE6,FEE
09BC:  DECFSZ 01,F
09BE:  BRA    09B8
.................... 					//store to buf 
.................... 					MB_Buffer[j]=make8(flcopy,0);	//high part 
09C0:  CLRF   03
09C2:  MOVLB  5
09C4:  MOVF   x68,W
09C6:  ADDLW  5D
09C8:  MOVWF  FE9
09CA:  MOVLW  04
09CC:  ADDWFC 03,W
09CE:  MOVWF  FEA
09D0:  MOVFF  5A2,FEF
.................... 					j++; 
09D4:  INCF   x68,F
.................... 					MB_Buffer[j]=make8(flcopy,1);	//high part 
09D6:  CLRF   03
09D8:  MOVF   x68,W
09DA:  ADDLW  5D
09DC:  MOVWF  FE9
09DE:  MOVLW  04
09E0:  ADDWFC 03,W
09E2:  MOVWF  FEA
09E4:  MOVFF  5A3,FEF
.................... 					j++; 
09E8:  INCF   x68,F
.................... 					MB_Buffer[j]=make8(flcopy,2);	//high part 
09EA:  CLRF   03
09EC:  MOVF   x68,W
09EE:  ADDLW  5D
09F0:  MOVWF  FE9
09F2:  MOVLW  04
09F4:  ADDWFC 03,W
09F6:  MOVWF  FEA
09F8:  MOVFF  5A4,FEF
.................... 					j++; 
09FC:  INCF   x68,F
.................... 					MB_Buffer[j]=make8(flcopy,3);	//high part 
09FE:  CLRF   03
0A00:  MOVF   x68,W
0A02:  ADDLW  5D
0A04:  MOVWF  FE9
0A06:  MOVLW  04
0A08:  ADDWFC 03,W
0A0A:  MOVWF  FEA
0A0C:  MOVFF  5A5,FEF
.................... 					j++; 
0A10:  INCF   x68,F
.................... 					MB_Length+=4; 
0A12:  MOVLW  04
0A14:  ADDWF  x5D,F
.................... 					break; 
0A16:  BRA    0C14
.................... 				case 0x18:	//KGU				 
.................... 					//copy 
.................... 					memcpy(&flcopy,&KGU,4); 
0A18:  MOVLW  05
0A1A:  MOVWF  FEA
0A1C:  MOVLW  A2
0A1E:  MOVWF  FE9
0A20:  MOVLW  03
0A22:  MOVWF  FE2
0A24:  MOVLW  DB
0A26:  MOVWF  FE1
0A28:  MOVLW  04
0A2A:  MOVWF  01
0A2C:  MOVFF  FE6,FEE
0A30:  DECFSZ 01,F
0A32:  BRA    0A2C
.................... 					//store to buf 
.................... 					MB_Buffer[j]=make8(flcopy,0);	//high part 
0A34:  CLRF   03
0A36:  MOVLB  5
0A38:  MOVF   x68,W
0A3A:  ADDLW  5D
0A3C:  MOVWF  FE9
0A3E:  MOVLW  04
0A40:  ADDWFC 03,W
0A42:  MOVWF  FEA
0A44:  MOVFF  5A2,FEF
.................... 					j++; 
0A48:  INCF   x68,F
.................... 					MB_Buffer[j]=make8(flcopy,1);	//high part 
0A4A:  CLRF   03
0A4C:  MOVF   x68,W
0A4E:  ADDLW  5D
0A50:  MOVWF  FE9
0A52:  MOVLW  04
0A54:  ADDWFC 03,W
0A56:  MOVWF  FEA
0A58:  MOVFF  5A3,FEF
.................... 					j++; 
0A5C:  INCF   x68,F
.................... 					MB_Buffer[j]=make8(flcopy,2);	//high part 
0A5E:  CLRF   03
0A60:  MOVF   x68,W
0A62:  ADDLW  5D
0A64:  MOVWF  FE9
0A66:  MOVLW  04
0A68:  ADDWFC 03,W
0A6A:  MOVWF  FEA
0A6C:  MOVFF  5A4,FEF
.................... 					j++; 
0A70:  INCF   x68,F
.................... 					MB_Buffer[j]=make8(flcopy,3);	//high part 
0A72:  CLRF   03
0A74:  MOVF   x68,W
0A76:  ADDLW  5D
0A78:  MOVWF  FE9
0A7A:  MOVLW  04
0A7C:  ADDWFC 03,W
0A7E:  MOVWF  FEA
0A80:  MOVFF  5A5,FEF
.................... 					j++; 
0A84:  INCF   x68,F
.................... 					MB_Length+=4; 
0A86:  MOVLW  04
0A88:  ADDWF  x5D,F
.................... 					break; 
0A8A:  BRA    0C14
.................... 				case 0x19:	//KST0 
.................... 					//copy 
.................... 					memcpy(&flcopy,&KST0,4); 
0A8C:  MOVLW  05
0A8E:  MOVWF  FEA
0A90:  MOVLW  A2
0A92:  MOVWF  FE9
0A94:  MOVLW  03
0A96:  MOVWF  FE2
0A98:  MOVLW  AD
0A9A:  MOVWF  FE1
0A9C:  MOVLW  04
0A9E:  MOVWF  01
0AA0:  MOVFF  FE6,FEE
0AA4:  DECFSZ 01,F
0AA6:  BRA    0AA0
.................... 					//store to buf 
.................... 					MB_Buffer[j]=make8(flcopy,0);	//high part 
0AA8:  CLRF   03
0AAA:  MOVLB  5
0AAC:  MOVF   x68,W
0AAE:  ADDLW  5D
0AB0:  MOVWF  FE9
0AB2:  MOVLW  04
0AB4:  ADDWFC 03,W
0AB6:  MOVWF  FEA
0AB8:  MOVFF  5A2,FEF
.................... 					j++; 
0ABC:  INCF   x68,F
.................... 					MB_Buffer[j]=make8(flcopy,1);	//high part 
0ABE:  CLRF   03
0AC0:  MOVF   x68,W
0AC2:  ADDLW  5D
0AC4:  MOVWF  FE9
0AC6:  MOVLW  04
0AC8:  ADDWFC 03,W
0ACA:  MOVWF  FEA
0ACC:  MOVFF  5A3,FEF
.................... 					j++; 
0AD0:  INCF   x68,F
.................... 					MB_Buffer[j]=make8(flcopy,2);	//high part 
0AD2:  CLRF   03
0AD4:  MOVF   x68,W
0AD6:  ADDLW  5D
0AD8:  MOVWF  FE9
0ADA:  MOVLW  04
0ADC:  ADDWFC 03,W
0ADE:  MOVWF  FEA
0AE0:  MOVFF  5A4,FEF
.................... 					j++; 
0AE4:  INCF   x68,F
.................... 					MB_Buffer[j]=make8(flcopy,3);	//high part 
0AE6:  CLRF   03
0AE8:  MOVF   x68,W
0AEA:  ADDLW  5D
0AEC:  MOVWF  FE9
0AEE:  MOVLW  04
0AF0:  ADDWFC 03,W
0AF2:  MOVWF  FEA
0AF4:  MOVFF  5A5,FEF
.................... 					j++; 
0AF8:  INCF   x68,F
.................... 					MB_Length+=4; 
0AFA:  MOVLW  04
0AFC:  ADDWF  x5D,F
.................... 					break; 
0AFE:  BRA    0C14
.................... 				case 0x1A:	//KST1				 
.................... 					MB_Buffer[j]=0x00;	//high part 
0B00:  CLRF   03
0B02:  MOVLB  5
0B04:  MOVF   x68,W
0B06:  ADDLW  5D
0B08:  MOVWF  FE9
0B0A:  MOVLW  04
0B0C:  ADDWFC 03,W
0B0E:  MOVWF  FEA
0B10:  CLRF   FEF
.................... 					j++; 
0B12:  INCF   x68,F
.................... 					MB_Buffer[j]=0x00;	//low part 
0B14:  CLRF   03
0B16:  MOVF   x68,W
0B18:  ADDLW  5D
0B1A:  MOVWF  FE9
0B1C:  MOVLW  04
0B1E:  ADDWFC 03,W
0B20:  MOVWF  FEA
0B22:  CLRF   FEF
.................... 					j++; 
0B24:  INCF   x68,F
.................... 					MB_Buffer[j]=0x00;	//low part 
0B26:  CLRF   03
0B28:  MOVF   x68,W
0B2A:  ADDLW  5D
0B2C:  MOVWF  FE9
0B2E:  MOVLW  04
0B30:  ADDWFC 03,W
0B32:  MOVWF  FEA
0B34:  CLRF   FEF
.................... 					j++; 
0B36:  INCF   x68,F
.................... 					MB_Buffer[j]=0x00;	//low part 
0B38:  CLRF   03
0B3A:  MOVF   x68,W
0B3C:  ADDLW  5D
0B3E:  MOVWF  FE9
0B40:  MOVLW  04
0B42:  ADDWFC 03,W
0B44:  MOVWF  FEA
0B46:  CLRF   FEF
.................... 					j++; 
0B48:  INCF   x68,F
.................... 					MB_Length+=4; 
0B4A:  MOVLW  04
0B4C:  ADDWF  x5D,F
.................... 					break; 
0B4E:  BRA    0C14
.................... 				case 0x1B:	//T0_CAL 
.................... 					MB_Buffer[j]=make8(T0_CAL,1);	//high part 
0B50:  CLRF   03
0B52:  MOVLB  5
0B54:  MOVF   x68,W
0B56:  ADDLW  5D
0B58:  MOVWF  FE9
0B5A:  MOVLW  04
0B5C:  ADDWFC 03,W
0B5E:  MOVWF  FEA
0B60:  MOVLB  3
0B62:  MOVFF  3B2,FEF
.................... 					j++; 
0B66:  MOVLB  5
0B68:  INCF   x68,F
.................... 					MB_Buffer[j]=make8(T0_CAL,0);	//low part 
0B6A:  CLRF   03
0B6C:  MOVF   x68,W
0B6E:  ADDLW  5D
0B70:  MOVWF  FE9
0B72:  MOVLW  04
0B74:  ADDWFC 03,W
0B76:  MOVWF  FEA
0B78:  MOVLB  3
0B7A:  MOVFF  3B1,FEF
.................... 					j++;								 
0B7E:  MOVLB  5
0B80:  INCF   x68,F
.................... 					MB_Length+=2; 
0B82:  MOVLW  02
0B84:  ADDWF  x5D,F
.................... 					break; 
0B86:  BRA    0C14
.................... 				case 0x1C:	//T1_CAL 
.................... 					MB_Buffer[j]=make8(T1_CAL,1);	//high part 
0B88:  CLRF   03
0B8A:  MOVLB  5
0B8C:  MOVF   x68,W
0B8E:  ADDLW  5D
0B90:  MOVWF  FE9
0B92:  MOVLW  04
0B94:  ADDWFC 03,W
0B96:  MOVWF  FEA
0B98:  MOVLB  3
0B9A:  MOVFF  3BE,FEF
.................... 					j++; 
0B9E:  MOVLB  5
0BA0:  INCF   x68,F
.................... 					MB_Buffer[j]=make8(T1_CAL,0);	//low part 
0BA2:  CLRF   03
0BA4:  MOVF   x68,W
0BA6:  ADDLW  5D
0BA8:  MOVWF  FE9
0BAA:  MOVLW  04
0BAC:  ADDWFC 03,W
0BAE:  MOVWF  FEA
0BB0:  MOVLB  3
0BB2:  MOVFF  3BD,FEF
.................... 					j++;								 
0BB6:  MOVLB  5
0BB8:  INCF   x68,F
.................... 					MB_Length+=2; 
0BBA:  MOVLW  02
0BBC:  ADDWF  x5D,F
.................... 					break; 
0BBE:  BRA    0C14
.................... 				case 0x1D:	//TG_CAL 
.................... 					MB_Buffer[j]=make8(TG_CAL,1);	//high part 
0BC0:  CLRF   03
0BC2:  MOVLB  5
0BC4:  MOVF   x68,W
0BC6:  ADDLW  5D
0BC8:  MOVWF  FE9
0BCA:  MOVLW  04
0BCC:  ADDWFC 03,W
0BCE:  MOVWF  FEA
0BD0:  MOVLB  3
0BD2:  MOVFF  3E0,FEF
.................... 					j++; 
0BD6:  MOVLB  5
0BD8:  INCF   x68,F
.................... 					MB_Buffer[j]=make8(TG_CAL,0);	//low part 
0BDA:  CLRF   03
0BDC:  MOVF   x68,W
0BDE:  ADDLW  5D
0BE0:  MOVWF  FE9
0BE2:  MOVLW  04
0BE4:  ADDWFC 03,W
0BE6:  MOVWF  FEA
0BE8:  MOVLB  3
0BEA:  MOVFF  3DF,FEF
.................... 					j++;								 
0BEE:  MOVLB  5
0BF0:  INCF   x68,F
.................... 					MB_Length+=2; 
0BF2:  MOVLW  02
0BF4:  ADDWF  x5D,F
.................... 					break; 
0BF6:  BRA    0C14
.................... 				default:	//no valid registers							 
.................... 					MB_Buffer[1]|=0x80; 
0BF8:  MOVLB  4
0BFA:  BSF    x5E.7
.................... 					MB_Buffer[2]=illegal_data_value; 
0BFC:  MOVLW  03
0BFE:  MOVWF  x5F
.................... 					MB_Length=5; 
0C00:  MOVLW  05
0C02:  MOVLB  5
0C04:  MOVWF  x5D
.................... 					ExcReq++; 
0C06:  INCF   x62,F
0C08:  BTFSC  FD8.2
0C0A:  INCF   x63,F
.................... 					ValidReq--;  
0C0C:  MOVF   x5E,W
0C0E:  BTFSC  FD8.2
0C10:  DECF   x5F,F
0C12:  DECF   x5E,F
.................... 			};	 
.................... } 
0C14:  MOVLB  0
0C16:  GOTO   1B60 (RETURN)
.................... // 
.................... static	int8	bytecount; 
.................... //write registers 
.................... void	SetRegData(int8 reg){ 
.................... 	int32	flcopy; 
.................... 	restart_wdt(); 
0C1A:  CLRWDT
.................... 			switch(reg){ 
0C1C:  MOVLB  5
0C1E:  MOVF   xA1,W
0C20:  XORLW  00
0C22:  MOVLB  0
0C24:  BZ    0CC8
0C26:  XORLW  01
0C28:  BZ    0CD0
0C2A:  XORLW  03
0C2C:  BZ    0CD8
0C2E:  XORLW  01
0C30:  BZ    0CE0
0C32:  XORLW  07
0C34:  BZ    0CE8
0C36:  XORLW  01
0C38:  BZ    0CF0
0C3A:  XORLW  03
0C3C:  BZ    0CF8
0C3E:  XORLW  01
0C40:  BZ    0D00
0C42:  XORLW  0F
0C44:  BTFSC  FD8.2
0C46:  BRA    0D08
0C48:  XORLW  01
0C4A:  BTFSC  FD8.2
0C4C:  BRA    0D10
0C4E:  XORLW  03
0C50:  BTFSC  FD8.2
0C52:  BRA    0D18
0C54:  XORLW  01
0C56:  BTFSC  FD8.2
0C58:  BRA    0D20
0C5A:  XORLW  07
0C5C:  BTFSC  FD8.2
0C5E:  BRA    0D56
0C60:  XORLW  01
0C62:  BTFSC  FD8.2
0C64:  BRA    0D8C
0C66:  XORLW  03
0C68:  BTFSC  FD8.2
0C6A:  BRA    0DC2
0C6C:  XORLW  01
0C6E:  BTFSC  FD8.2
0C70:  BRA    0DF8
0C72:  XORLW  1F
0C74:  BTFSC  FD8.2
0C76:  BRA    0E2E
0C78:  XORLW  01
0C7A:  BTFSC  FD8.2
0C7C:  BRA    0E64
0C7E:  XORLW  03
0C80:  BTFSC  FD8.2
0C82:  BRA    0E9A
0C84:  XORLW  01
0C86:  BTFSC  FD8.2
0C88:  BRA    0EA2
0C8A:  XORLW  07
0C8C:  BTFSC  FD8.2
0C8E:  BRA    0ED8
0C90:  XORLW  01
0C92:  BTFSC  FD8.2
0C94:  BRA    0EE0
0C96:  XORLW  03
0C98:  BTFSC  FD8.2
0C9A:  BRA    0EE8
0C9C:  XORLW  01
0C9E:  BTFSC  FD8.2
0CA0:  BRA    0EF0
0CA2:  XORLW  0F
0CA4:  BTFSC  FD8.2
0CA6:  BRA    0F72
0CA8:  XORLW  01
0CAA:  BTFSC  FD8.2
0CAC:  BRA    0FF4
0CAE:  XORLW  03
0CB0:  BTFSC  FD8.2
0CB2:  BRA    1076
0CB4:  XORLW  01
0CB6:  BTFSC  FD8.2
0CB8:  BRA    107E
0CBA:  XORLW  07
0CBC:  BTFSC  FD8.2
0CBE:  BRA    10B4
0CC0:  XORLW  01
0CC2:  BTFSC  FD8.2
0CC4:  BRA    10EA
0CC6:  BRA    1120
.................... 				case 0x00:	//dummy command					 
.................... 					j+=2;	//set next data 
0CC8:  MOVLW  02
0CCA:  MOVLB  5
0CCC:  ADDWF  x68,F
.................... 					break; 
0CCE:  BRA    113C
.................... 				case 0x01:	//dummy command					 
.................... 					j+=2;	//set next data 
0CD0:  MOVLW  02
0CD2:  MOVLB  5
0CD4:  ADDWF  x68,F
.................... 					break; 
0CD6:  BRA    113C
.................... 				case 0x02:	//dummy command					 
.................... 					j+=2;	//set next data 
0CD8:  MOVLW  02
0CDA:  MOVLB  5
0CDC:  ADDWF  x68,F
.................... 					break; 
0CDE:  BRA    113C
.................... 				case 0x03:	//dummy command					 
.................... 					j+=2;	//set next data 
0CE0:  MOVLW  02
0CE2:  MOVLB  5
0CE4:  ADDWF  x68,F
.................... 					break; 
0CE6:  BRA    113C
.................... 				case 0x04:	//dummy command					 
.................... 					j+=2;	//set next data 
0CE8:  MOVLW  02
0CEA:  MOVLB  5
0CEC:  ADDWF  x68,F
.................... 					break; 
0CEE:  BRA    113C
.................... 				case 0x05:	//dummy command					 
.................... 					j+=2;	//set next data 
0CF0:  MOVLW  02
0CF2:  MOVLB  5
0CF4:  ADDWF  x68,F
.................... 					break; 
0CF6:  BRA    113C
.................... 				case 0x06:	//dummy command					 
.................... 					j+=2;	//set next data 
0CF8:  MOVLW  02
0CFA:  MOVLB  5
0CFC:  ADDWF  x68,F
.................... 					break; 
0CFE:  BRA    113C
.................... 				case 0x07:	//dummy command					 
.................... 					j+=2;	//set next data 
0D00:  MOVLW  02
0D02:  MOVLB  5
0D04:  ADDWF  x68,F
.................... 					break; 
0D06:  BRA    113C
.................... 				case 0x08:	//dummy command					 
.................... 					j+=2;	//set next data 
0D08:  MOVLW  02
0D0A:  MOVLB  5
0D0C:  ADDWF  x68,F
.................... 					break; 
0D0E:  BRA    113C
.................... 				case 0x09:	//dummy command					 
.................... 					j+=2;	//set next data 
0D10:  MOVLW  02
0D12:  MOVLB  5
0D14:  ADDWF  x68,F
.................... 					break; 
0D16:  BRA    113C
.................... 				case 0x0A:	//dummy command					 
.................... 					j+=2;	//set next data 
0D18:  MOVLW  02
0D1A:  MOVLB  5
0D1C:  ADDWF  x68,F
.................... 					break; 
0D1E:  BRA    113C
.................... 				case 0x0B:	//SAW_A0 
.................... 					//read data from buffer 
.................... 					SAW_A0=make16(MB_Buffer[j],MB_Buffer[j+1]); 
0D20:  CLRF   03
0D22:  MOVLB  5
0D24:  MOVF   x68,W
0D26:  ADDLW  5D
0D28:  MOVWF  FE9
0D2A:  MOVLW  04
0D2C:  ADDWFC 03,W
0D2E:  MOVWF  FEA
0D30:  MOVFF  FEF,5A6
0D34:  MOVLW  01
0D36:  ADDWF  x68,W
0D38:  CLRF   03
0D3A:  ADDLW  5D
0D3C:  MOVWF  FE9
0D3E:  MOVLW  04
0D40:  ADDWFC 03,W
0D42:  MOVWF  FEA
0D44:  MOVFF  FEF,5A7
0D48:  MOVFF  5A6,3CC
0D4C:  MOVFF  5A7,3CB
.................... 					j+=2;	//set next data 
0D50:  MOVLW  02
0D52:  ADDWF  x68,F
.................... 					break; 
0D54:  BRA    113C
.................... 				case 0x0C:	//SAW_A1 
.................... 					//read data from buffer 
.................... 					SAW_A1=make16(MB_Buffer[j],MB_Buffer[j+1]); 
0D56:  CLRF   03
0D58:  MOVLB  5
0D5A:  MOVF   x68,W
0D5C:  ADDLW  5D
0D5E:  MOVWF  FE9
0D60:  MOVLW  04
0D62:  ADDWFC 03,W
0D64:  MOVWF  FEA
0D66:  MOVFF  FEF,5A6
0D6A:  MOVLW  01
0D6C:  ADDWF  x68,W
0D6E:  CLRF   03
0D70:  ADDLW  5D
0D72:  MOVWF  FE9
0D74:  MOVLW  04
0D76:  ADDWFC 03,W
0D78:  MOVWF  FEA
0D7A:  MOVFF  FEF,5A7
0D7E:  MOVFF  5A6,3D2
0D82:  MOVFF  5A7,3D1
.................... 					j+=2;	//set next data 
0D86:  MOVLW  02
0D88:  ADDWF  x68,F
.................... 					break; 
0D8A:  BRA    113C
.................... 				case 0x0D:	//KU0 
.................... 					//read data from buffer 
.................... 					AmpCoef0=make16(MB_Buffer[j],MB_Buffer[j+1]); 
0D8C:  CLRF   03
0D8E:  MOVLB  5
0D90:  MOVF   x68,W
0D92:  ADDLW  5D
0D94:  MOVWF  FE9
0D96:  MOVLW  04
0D98:  ADDWFC 03,W
0D9A:  MOVWF  FEA
0D9C:  MOVFF  FEF,5A6
0DA0:  MOVLW  01
0DA2:  ADDWF  x68,W
0DA4:  CLRF   03
0DA6:  ADDLW  5D
0DA8:  MOVWF  FE9
0DAA:  MOVLW  04
0DAC:  ADDWFC 03,W
0DAE:  MOVWF  FEA
0DB0:  MOVFF  FEF,5A7
0DB4:  MOVFF  5A6,3AC
0DB8:  MOVFF  5A7,3AB
.................... 					j+=2;	//set next data 
0DBC:  MOVLW  02
0DBE:  ADDWF  x68,F
.................... 					break; 
0DC0:  BRA    113C
.................... 				case 0x0E:	//KU1 
.................... 					//read data from buffer 
.................... 					AmpCoef1=make16(MB_Buffer[j],MB_Buffer[j+1]); 
0DC2:  CLRF   03
0DC4:  MOVLB  5
0DC6:  MOVF   x68,W
0DC8:  ADDLW  5D
0DCA:  MOVWF  FE9
0DCC:  MOVLW  04
0DCE:  ADDWFC 03,W
0DD0:  MOVWF  FEA
0DD2:  MOVFF  FEF,5A6
0DD6:  MOVLW  01
0DD8:  ADDWF  x68,W
0DDA:  CLRF   03
0DDC:  ADDLW  5D
0DDE:  MOVWF  FE9
0DE0:  MOVLW  04
0DE2:  ADDWFC 03,W
0DE4:  MOVWF  FEA
0DE6:  MOVFF  FEF,5A7
0DEA:  MOVFF  5A6,3B8
0DEE:  MOVFF  5A7,3B7
.................... 					j+=2;	//set next data 
0DF2:  MOVLW  02
0DF4:  ADDWF  x68,F
.................... 					break; 
0DF6:  BRA    113C
.................... 				case 0x0F:	//TAQ 
.................... 					//read data from buffer 
.................... 					TAQ=make16(MB_Buffer[j],MB_Buffer[j+1]); 
0DF8:  CLRF   03
0DFA:  MOVLB  5
0DFC:  MOVF   x68,W
0DFE:  ADDLW  5D
0E00:  MOVWF  FE9
0E02:  MOVLW  04
0E04:  ADDWFC 03,W
0E06:  MOVWF  FEA
0E08:  MOVFF  FEF,5A6
0E0C:  MOVLW  01
0E0E:  ADDWF  x68,W
0E10:  CLRF   03
0E12:  ADDLW  5D
0E14:  MOVWF  FE9
0E16:  MOVLW  04
0E18:  ADDWFC 03,W
0E1A:  MOVWF  FEA
0E1C:  MOVFF  FEF,5A7
0E20:  MOVFF  5A6,3C2
0E24:  MOVFF  5A7,3C1
.................... 					j+=2;	//set next data 
0E28:  MOVLW  02
0E2A:  ADDWF  x68,F
.................... 					break; 
0E2C:  BRA    113C
.................... 				case 0x10:	//FWDT 
.................... 					//read data from buffer 
.................... 					FWDT=make16(MB_Buffer[j],MB_Buffer[j+1]); 
0E2E:  CLRF   03
0E30:  MOVLB  5
0E32:  MOVF   x68,W
0E34:  ADDLW  5D
0E36:  MOVWF  FE9
0E38:  MOVLW  04
0E3A:  ADDWFC 03,W
0E3C:  MOVWF  FEA
0E3E:  MOVFF  FEF,5A6
0E42:  MOVLW  01
0E44:  ADDWF  x68,W
0E46:  CLRF   03
0E48:  ADDLW  5D
0E4A:  MOVWF  FE9
0E4C:  MOVLW  04
0E4E:  ADDWFC 03,W
0E50:  MOVWF  FEA
0E52:  MOVFF  FEF,5A7
0E56:  MOVFF  5A6,3C4
0E5A:  MOVFF  5A7,3C3
.................... 					j+=2;	//set next data 
0E5E:  MOVLW  02
0E60:  ADDWF  x68,F
.................... 					break; 
0E62:  BRA    113C
.................... 				case 0x11:	//PCOUNT 
.................... 					//read data from buffer 
.................... 					PCOUNT=make16(MB_Buffer[j],MB_Buffer[j+1]); 
0E64:  CLRF   03
0E66:  MOVLB  5
0E68:  MOVF   x68,W
0E6A:  ADDLW  5D
0E6C:  MOVWF  FE9
0E6E:  MOVLW  04
0E70:  ADDWFC 03,W
0E72:  MOVWF  FEA
0E74:  MOVFF  FEF,5A6
0E78:  MOVLW  01
0E7A:  ADDWF  x68,W
0E7C:  CLRF   03
0E7E:  ADDLW  5D
0E80:  MOVWF  FE9
0E82:  MOVLW  04
0E84:  ADDWFC 03,W
0E86:  MOVWF  FEA
0E88:  MOVFF  FEF,5A7
0E8C:  MOVFF  5A6,3C6
0E90:  MOVFF  5A7,3C5
.................... 					j+=2;	//set next data 
0E94:  MOVLW  02
0E96:  ADDWF  x68,F
.................... 					break; 
0E98:  BRA    113C
.................... 				case 0x12:	// 
.................... 					j+=2;	//set next data 
0E9A:  MOVLW  02
0E9C:  MOVLB  5
0E9E:  ADDWF  x68,F
.................... 					break; 
0EA0:  BRA    113C
.................... 				case 0x13:	// 
.................... 					Addr=make16(MB_Buffer[j],MB_Buffer[j+1]); 
0EA2:  CLRF   03
0EA4:  MOVLB  5
0EA6:  MOVF   x68,W
0EA8:  ADDLW  5D
0EAA:  MOVWF  FE9
0EAC:  MOVLW  04
0EAE:  ADDWFC 03,W
0EB0:  MOVWF  FEA
0EB2:  MOVFF  FEF,5A6
0EB6:  MOVLW  01
0EB8:  ADDWF  x68,W
0EBA:  CLRF   03
0EBC:  ADDLW  5D
0EBE:  MOVWF  FE9
0EC0:  MOVLW  04
0EC2:  ADDWFC 03,W
0EC4:  MOVWF  FEA
0EC6:  MOVFF  FEF,5A7
0ECA:  MOVFF  5A6,3E4
0ECE:  MOVFF  5A7,3E3
.................... 					j+=2;	//set next data 
0ED2:  MOVLW  02
0ED4:  ADDWF  x68,F
.................... 					break; 
0ED6:  BRA    113C
.................... 				case 0x14:	//Valid request register	- no acton 
.................... 					j+=2;	//set next data 
0ED8:  MOVLW  02
0EDA:  MOVLB  5
0EDC:  ADDWF  x68,F
.................... 					break; 
0EDE:  BRA    113C
.................... 				case 0x15:	//CRC error register - no action 
.................... 					j+=2;	//set next data 
0EE0:  MOVLW  02
0EE2:  MOVLB  5
0EE4:  ADDWF  x68,F
.................... 					break; 
0EE6:  BRA    113C
.................... 				case 0x16:	//Exception register - no action 
.................... 					j+=2;	//set next data 
0EE8:  MOVLW  02
0EEA:  MOVLB  5
0EEC:  ADDWF  x68,F
.................... 					break; 
0EEE:  BRA    113C
.................... 				case 0x17:	//KGT 
.................... 					flcopy=make32(MB_Buffer[j+3],MB_Buffer[j+2],MB_Buffer[j+1],MB_Buffer[j]); 
0EF0:  MOVLW  03
0EF2:  MOVLB  5
0EF4:  ADDWF  x68,W
0EF6:  CLRF   03
0EF8:  ADDLW  5D
0EFA:  MOVWF  FE9
0EFC:  MOVLW  04
0EFE:  ADDWFC 03,W
0F00:  MOVWF  FEA
0F02:  MOVFF  FEF,5A6
0F06:  MOVLW  02
0F08:  ADDWF  x68,W
0F0A:  CLRF   03
0F0C:  ADDLW  5D
0F0E:  MOVWF  FE9
0F10:  MOVLW  04
0F12:  ADDWFC 03,W
0F14:  MOVWF  FEA
0F16:  MOVFF  FEF,5A7
0F1A:  MOVLW  01
0F1C:  ADDWF  x68,W
0F1E:  CLRF   03
0F20:  ADDLW  5D
0F22:  MOVWF  FE9
0F24:  MOVLW  04
0F26:  ADDWFC 03,W
0F28:  MOVWF  FEA
0F2A:  MOVFF  FEF,5A8
0F2E:  CLRF   03
0F30:  MOVF   x68,W
0F32:  ADDLW  5D
0F34:  MOVWF  FE9
0F36:  MOVLW  04
0F38:  ADDWFC 03,W
0F3A:  MOVWF  FEA
0F3C:  MOVFF  FEF,5A9
0F40:  MOVFF  5A6,5A5
0F44:  MOVFF  5A7,5A4
0F48:  MOVFF  5A8,5A3
0F4C:  MOVFF  5A9,5A2
.................... 					memcpy(&KGT,&flcopy,4); 
0F50:  MOVLW  03
0F52:  MOVWF  FEA
0F54:  MOVLW  D7
0F56:  MOVWF  FE9
0F58:  MOVLW  05
0F5A:  MOVWF  FE2
0F5C:  MOVLW  A2
0F5E:  MOVWF  FE1
0F60:  MOVLW  04
0F62:  MOVWF  01
0F64:  MOVFF  FE6,FEE
0F68:  DECFSZ 01,F
0F6A:  BRA    0F64
.................... 					j+=4;	//set next data 
0F6C:  MOVLW  04
0F6E:  ADDWF  x68,F
.................... 					break; 
0F70:  BRA    113C
.................... 				case 0x18:	//KGU 
.................... 					flcopy=make32(MB_Buffer[j+3],MB_Buffer[j+2],MB_Buffer[j+1],MB_Buffer[j]); 
0F72:  MOVLW  03
0F74:  MOVLB  5
0F76:  ADDWF  x68,W
0F78:  CLRF   03
0F7A:  ADDLW  5D
0F7C:  MOVWF  FE9
0F7E:  MOVLW  04
0F80:  ADDWFC 03,W
0F82:  MOVWF  FEA
0F84:  MOVFF  FEF,5A6
0F88:  MOVLW  02
0F8A:  ADDWF  x68,W
0F8C:  CLRF   03
0F8E:  ADDLW  5D
0F90:  MOVWF  FE9
0F92:  MOVLW  04
0F94:  ADDWFC 03,W
0F96:  MOVWF  FEA
0F98:  MOVFF  FEF,5A7
0F9C:  MOVLW  01
0F9E:  ADDWF  x68,W
0FA0:  CLRF   03
0FA2:  ADDLW  5D
0FA4:  MOVWF  FE9
0FA6:  MOVLW  04
0FA8:  ADDWFC 03,W
0FAA:  MOVWF  FEA
0FAC:  MOVFF  FEF,5A8
0FB0:  CLRF   03
0FB2:  MOVF   x68,W
0FB4:  ADDLW  5D
0FB6:  MOVWF  FE9
0FB8:  MOVLW  04
0FBA:  ADDWFC 03,W
0FBC:  MOVWF  FEA
0FBE:  MOVFF  FEF,5A9
0FC2:  MOVFF  5A6,5A5
0FC6:  MOVFF  5A7,5A4
0FCA:  MOVFF  5A8,5A3
0FCE:  MOVFF  5A9,5A2
.................... 					memcpy(&KGU,&flcopy,4); 
0FD2:  MOVLW  03
0FD4:  MOVWF  FEA
0FD6:  MOVLW  DB
0FD8:  MOVWF  FE9
0FDA:  MOVLW  05
0FDC:  MOVWF  FE2
0FDE:  MOVLW  A2
0FE0:  MOVWF  FE1
0FE2:  MOVLW  04
0FE4:  MOVWF  01
0FE6:  MOVFF  FE6,FEE
0FEA:  DECFSZ 01,F
0FEC:  BRA    0FE6
.................... 					j+=4;	//set next data 
0FEE:  MOVLW  04
0FF0:  ADDWF  x68,F
.................... 					break; 
0FF2:  BRA    113C
.................... 				case 0x19:	//KST0 
.................... 					flcopy=make32(MB_Buffer[j+3],MB_Buffer[j+2],MB_Buffer[j+1],MB_Buffer[j]); 
0FF4:  MOVLW  03
0FF6:  MOVLB  5
0FF8:  ADDWF  x68,W
0FFA:  CLRF   03
0FFC:  ADDLW  5D
0FFE:  MOVWF  FE9
1000:  MOVLW  04
1002:  ADDWFC 03,W
1004:  MOVWF  FEA
1006:  MOVFF  FEF,5A6
100A:  MOVLW  02
100C:  ADDWF  x68,W
100E:  CLRF   03
1010:  ADDLW  5D
1012:  MOVWF  FE9
1014:  MOVLW  04
1016:  ADDWFC 03,W
1018:  MOVWF  FEA
101A:  MOVFF  FEF,5A7
101E:  MOVLW  01
1020:  ADDWF  x68,W
1022:  CLRF   03
1024:  ADDLW  5D
1026:  MOVWF  FE9
1028:  MOVLW  04
102A:  ADDWFC 03,W
102C:  MOVWF  FEA
102E:  MOVFF  FEF,5A8
1032:  CLRF   03
1034:  MOVF   x68,W
1036:  ADDLW  5D
1038:  MOVWF  FE9
103A:  MOVLW  04
103C:  ADDWFC 03,W
103E:  MOVWF  FEA
1040:  MOVFF  FEF,5A9
1044:  MOVFF  5A6,5A5
1048:  MOVFF  5A7,5A4
104C:  MOVFF  5A8,5A3
1050:  MOVFF  5A9,5A2
.................... 					memcpy(&KST0,&flcopy,4); 
1054:  MOVLW  03
1056:  MOVWF  FEA
1058:  MOVLW  AD
105A:  MOVWF  FE9
105C:  MOVLW  05
105E:  MOVWF  FE2
1060:  MOVLW  A2
1062:  MOVWF  FE1
1064:  MOVLW  04
1066:  MOVWF  01
1068:  MOVFF  FE6,FEE
106C:  DECFSZ 01,F
106E:  BRA    1068
.................... 					j+=4;	//set next data 
1070:  MOVLW  04
1072:  ADDWF  x68,F
.................... 					break; 
1074:  BRA    113C
.................... 				case 0x1A:	//dummy command			 
.................... 					j+=4;	//set next data 
1076:  MOVLW  04
1078:  MOVLB  5
107A:  ADDWF  x68,F
.................... 					break; 
107C:  BRA    113C
.................... 				case 0x1B:	//T0_CAL 
.................... 					//read data from buffer 
.................... 					T0_CAL=make16(MB_Buffer[j],MB_Buffer[j+1]); 
107E:  CLRF   03
1080:  MOVLB  5
1082:  MOVF   x68,W
1084:  ADDLW  5D
1086:  MOVWF  FE9
1088:  MOVLW  04
108A:  ADDWFC 03,W
108C:  MOVWF  FEA
108E:  MOVFF  FEF,5A6
1092:  MOVLW  01
1094:  ADDWF  x68,W
1096:  CLRF   03
1098:  ADDLW  5D
109A:  MOVWF  FE9
109C:  MOVLW  04
109E:  ADDWFC 03,W
10A0:  MOVWF  FEA
10A2:  MOVFF  FEF,5A7
10A6:  MOVFF  5A6,3B2
10AA:  MOVFF  5A7,3B1
.................... 					j+=2;	//set next data 
10AE:  MOVLW  02
10B0:  ADDWF  x68,F
.................... 					break; 
10B2:  BRA    113C
.................... 				case 0x1C:	//T1_CAL 
.................... 					//read data from buffer 
.................... 					T1_CAL=make16(MB_Buffer[j],MB_Buffer[j+1]); 
10B4:  CLRF   03
10B6:  MOVLB  5
10B8:  MOVF   x68,W
10BA:  ADDLW  5D
10BC:  MOVWF  FE9
10BE:  MOVLW  04
10C0:  ADDWFC 03,W
10C2:  MOVWF  FEA
10C4:  MOVFF  FEF,5A6
10C8:  MOVLW  01
10CA:  ADDWF  x68,W
10CC:  CLRF   03
10CE:  ADDLW  5D
10D0:  MOVWF  FE9
10D2:  MOVLW  04
10D4:  ADDWFC 03,W
10D6:  MOVWF  FEA
10D8:  MOVFF  FEF,5A7
10DC:  MOVFF  5A6,3BE
10E0:  MOVFF  5A7,3BD
.................... 					j+=2;	//set next data 
10E4:  MOVLW  02
10E6:  ADDWF  x68,F
.................... 					break; 
10E8:  BRA    113C
.................... 				case 0x1D:	//TG_CAL 
.................... 					//read data from buffer 
.................... 					TG_CAL=make16(MB_Buffer[j],MB_Buffer[j+1]); 
10EA:  CLRF   03
10EC:  MOVLB  5
10EE:  MOVF   x68,W
10F0:  ADDLW  5D
10F2:  MOVWF  FE9
10F4:  MOVLW  04
10F6:  ADDWFC 03,W
10F8:  MOVWF  FEA
10FA:  MOVFF  FEF,5A6
10FE:  MOVLW  01
1100:  ADDWF  x68,W
1102:  CLRF   03
1104:  ADDLW  5D
1106:  MOVWF  FE9
1108:  MOVLW  04
110A:  ADDWFC 03,W
110C:  MOVWF  FEA
110E:  MOVFF  FEF,5A7
1112:  MOVFF  5A6,3E0
1116:  MOVFF  5A7,3DF
.................... 					j+=2;	//set next data 
111A:  MOVLW  02
111C:  ADDWF  x68,F
.................... 					break; 
111E:  BRA    113C
.................... 				default:	//no valid registers							 
.................... 					MB_Buffer[1]|=0x80; 
1120:  MOVLB  4
1122:  BSF    x5E.7
.................... 					MB_Buffer[2]=illegal_data_value; 
1124:  MOVLW  03
1126:  MOVWF  x5F
.................... 					MB_Length=5; 
1128:  MOVLW  05
112A:  MOVLB  5
112C:  MOVWF  x5D
.................... 					ExcReq++; 
112E:  INCF   x62,F
1130:  BTFSC  FD8.2
1132:  INCF   x63,F
.................... 					ValidReq--; 
1134:  MOVF   x5E,W
1136:  BTFSC  FD8.2
1138:  DECF   x5F,F
113A:  DECF   x5E,F
.................... 			};	 
.................... } 
113C:  MOVLB  0
113E:  GOTO   1BB6 (RETURN)
.................... // 
.................... //timer 2 interrupt vector - packet recognition 
.................... #INT_TIMER1 
.................... void	Reaction(void){ 
.................... 	int8	StAddr,EnAddr;	 
.................... 	int8	bytecount; 
.................... 	int16	k,l; 
.................... 	//end of tramsmittion process 
.................... 	disable_interrupts(INT_RDA); 
*
18F0:  BCF    F9D.5
.................... 	output_high(STAT);	//on led 
18F2:  BCF    F94.0
18F4:  BSF    F8B.0
.................... 	// 
.................... 	if (MB_Length<4)	goto exit;	//exit if to small 
18F6:  MOVLB  5
18F8:  MOVF   x5D,W
18FA:  SUBLW  03
18FC:  BNC   1900
18FE:  BRA    1E72
.................... 	//detect adress 
.................... 	if((MB_Buffer[0]!=make8(Addr,0))&&(MB_Buffer[0]!=0))	goto exit;	//if not broadcast & not qwn address - then exit 
1900:  MOVLB  3
1902:  MOVF   xE3,W
1904:  MOVLB  4
1906:  SUBWF  x5D,W
1908:  BZ    1912
190A:  MOVF   x5D,F
190C:  BZ    1912
190E:  MOVLB  5
1910:  BRA    1E72
.................... 	//calculate CRC 
.................... 	CRCc=ModbusCRC(MB_Buffer,MB_Length-2); 
1912:  MOVLW  02
1914:  MOVLB  5
1916:  SUBWF  x5D,W
1918:  MOVWF  xA1
191A:  MOVLW  04
191C:  MOVWF  xA3
191E:  MOVLW  5D
1920:  MOVWF  xA2
1922:  MOVFF  5A1,5A4
1926:  MOVLB  0
1928:  CALL   03D0
192C:  MOVFF  02,567
1930:  MOVFF  01,566
.................... 	CRCr=make16(MB_Buffer[MB_Length-2],MB_Buffer[MB_Length-1]); 
1934:  MOVLW  02
1936:  MOVLB  5
1938:  SUBWF  x5D,W
193A:  CLRF   03
193C:  ADDLW  5D
193E:  MOVWF  FE9
1940:  MOVLW  04
1942:  ADDWFC 03,W
1944:  MOVWF  FEA
1946:  MOVFF  FEF,5A1
194A:  MOVLW  01
194C:  SUBWF  x5D,W
194E:  CLRF   03
1950:  ADDLW  5D
1952:  MOVWF  FE9
1954:  MOVLW  04
1956:  ADDWFC 03,W
1958:  MOVWF  FEA
195A:  MOVFF  FEF,5A2
195E:  MOVFF  5A1,565
1962:  MOVFF  5A2,564
.................... 	// 
.................... 	if(CRCc!=CRCr){				//if error CRC then exit 
1966:  MOVF   x64,W
1968:  SUBWF  x66,W
196A:  BNZ   1972
196C:  MOVF   x65,W
196E:  SUBWF  x67,W
1970:  BZ    197A
.................... 		CRCReq++;	 
1972:  INCF   x60,F
1974:  BTFSC  FD8.2
1976:  INCF   x61,F
.................... 		goto exit; 
1978:  BRA    1E72
.................... 	}; 
.................... 	//proceed command 
.................... 	//analizing function code 
.................... 	switch(MB_Buffer[1]){ 
197A:  MOVLB  4
197C:  MOVF   x5E,W
197E:  XORLW  42
1980:  MOVLB  0
1982:  BZ    19AA
1984:  XORLW  01
1986:  BTFSC  FD8.2
1988:  BRA    1A6C
198A:  XORLW  07
198C:  BTFSC  FD8.2
198E:  BRA    1B28
1990:  XORLW  01
1992:  BTFSC  FD8.2
1994:  BRA    1B7E
1996:  XORLW  20
1998:  BTFSC  FD8.2
199A:  BRA    1BDE
199C:  XORLW  0F
199E:  BTFSC  FD8.2
19A0:  BRA    1C10
19A2:  XORLW  01
19A4:  BTFSC  FD8.2
19A6:  BRA    1D7C
19A8:  BRA    1DDC
.................... 		//CMODE 
.................... 		case	0x42: 
.................... 				if(MB_Length==5){ 
19AA:  MOVLB  5
19AC:  MOVF   x5D,W
19AE:  SUBLW  05
19B0:  BNZ   1A56
.................... 					switch(MB_Buffer[2]){ 
19B2:  MOVLB  4
19B4:  MOVF   x5F,W
19B6:  XORLW  00
19B8:  MOVLB  0
19BA:  BZ    19C6
19BC:  XORLW  01
19BE:  BZ    19DC
19C0:  XORLW  03
19C2:  BZ    1A3A
19C4:  BRA    1A40
.................... 						case	0x00:	//normal cycle 
.................... 							OneCycle=0;	//clear one cycle flag 
19C6:  MOVLB  3
19C8:  BCF    xC7.0
.................... 							DaqState=DaqStart;	//start new measuring 
19CA:  MOVLW  01
19CC:  MOVWF  xF4
.................... 							MB_Length=4; 
19CE:  MOVLW  04
19D0:  MOVLB  5
19D2:  MOVWF  x5D
.................... 							ValidReq++; 
19D4:  INCF   x5E,F
19D6:  BTFSC  FD8.2
19D8:  INCF   x5F,F
.................... 							break; 
19DA:  BRA    1A54
.................... 						case	0x01: 
.................... 							OneCycle=1;	//set one cycle flag 
19DC:  MOVLB  3
19DE:  BSF    xC7.0
.................... 							DaqState=DaqStart;	//set new cycle 
19E0:  MOVLW  01
19E2:  MOVWF  xF4
.................... 							for(k=0; k<PCOUNT; k++){ 
19E4:  MOVLB  5
19E6:  CLRF   x9E
19E8:  CLRF   x9D
19EA:  MOVF   x9E,W
19EC:  MOVLB  3
19EE:  SUBWF  xC6,W
19F0:  BNC   1A2C
19F2:  BNZ   1A04
19F4:  MOVF   xC5,W
19F6:  MOVLB  5
19F8:  SUBWF  x9D,W
19FA:  BTFSS  FD8.0
19FC:  BRA    1A02
19FE:  MOVLB  3
1A00:  BRA    1A2C
1A02:  MOVLB  3
.................... 								gam_buf0[k]=0;	//clear measuring buffer 
1A04:  BCF    FD8.0
1A06:  MOVLB  5
1A08:  RLCF   x9D,W
1A0A:  MOVWF  02
1A0C:  RLCF   x9E,W
1A0E:  MOVWF  03
1A10:  MOVF   02,W
1A12:  ADDLW  A3
1A14:  MOVWF  FE9
1A16:  MOVLW  02
1A18:  ADDWFC 03,W
1A1A:  MOVWF  FEA
1A1C:  CLRF   FEC
1A1E:  MOVF   FED,F
1A20:  CLRF   FEF
.................... 								}; 
1A22:  INCF   x9D,F
1A24:  BTFSC  FD8.2
1A26:  INCF   x9E,F
1A28:  BRA    19EA
1A2A:  MOVLB  3
.................... 							MB_Length=4; 
1A2C:  MOVLW  04
1A2E:  MOVLB  5
1A30:  MOVWF  x5D
.................... 							ValidReq++; 
1A32:  INCF   x5E,F
1A34:  BTFSC  FD8.2
1A36:  INCF   x5F,F
.................... 							break; 
1A38:  BRA    1A54
.................... 						case	0x02:	//reset mcu 
.................... 							reset_cpu(); 
1A3A:  RESET
.................... 							break; 
1A3C:  MOVLB  5
1A3E:  BRA    1A54
.................... 						default: 
.................... 						MB_Buffer[1]|=0x80; 
1A40:  MOVLB  4
1A42:  BSF    x5E.7
.................... 						MB_Buffer[2]=illegal_data_value; 
1A44:  MOVLW  03
1A46:  MOVWF  x5F
.................... 						ExcReq++; 
1A48:  MOVLB  5
1A4A:  INCF   x62,F
1A4C:  BTFSC  FD8.2
1A4E:  INCF   x63,F
.................... 						MB_Length=5; 
1A50:  MOVLW  05
1A52:  MOVWF  x5D
.................... 						}; 
.................... 					}else{ 
1A54:  BRA    1A6A
.................... 					MB_Buffer[1]|=0x80; 
1A56:  MOVLB  4
1A58:  BSF    x5E.7
.................... 					MB_Buffer[2]=illegal_data_address; 
1A5A:  MOVLW  02
1A5C:  MOVWF  x5F
.................... 					MB_Length=5; 
1A5E:  MOVLW  05
1A60:  MOVLB  5
1A62:  MOVWF  x5D
.................... 					ExcReq++; 
1A64:  INCF   x62,F
1A66:  BTFSC  FD8.2
1A68:  INCF   x63,F
.................... 					}; 
.................... 				break; 
1A6A:  BRA    1DF0
.................... 		//read buffer 
.................... 		case	0x43: 
.................... 				if(MB_Length==7){ 
1A6C:  MOVLB  5
1A6E:  MOVF   x5D,W
1A70:  SUBLW  07
1A72:  BNZ   1B12
.................... 					switch(MB_Buffer[3]){ 
1A74:  MOVLB  4
1A76:  MOVF   x60,W
1A78:  XORLW  00
1A7A:  MOVLB  0
1A7C:  BZ    1A84
1A7E:  XORLW  01
1A80:  BZ    1AC0
1A82:  BRA    1AFC
.................... 						case	0x00:	//channel 0 
.................... 							//pack 
.................... 							l=2; 
1A84:  MOVLB  5
1A86:  CLRF   xA0
1A88:  MOVLW  02
1A8A:  MOVWF  x9F
.................... 							for(k=0; k<0x100; k+=2){ 
1A8C:  CLRF   x9E
1A8E:  CLRF   x9D
1A90:  MOVF   x9E,W
1A92:  SUBLW  00
1A94:  BNC   1AB4
.................... 								MB_Buffer[l]=0; 
1A96:  MOVLW  5D
1A98:  ADDWF  x9F,W
1A9A:  MOVWF  FE9
1A9C:  MOVLW  04
1A9E:  ADDWFC xA0,W
1AA0:  MOVWF  FEA
1AA2:  CLRF   FEF
.................... 								l++; 
1AA4:  INCF   x9F,F
1AA6:  BTFSC  FD8.2
1AA8:  INCF   xA0,F
.................... 								}; 
1AAA:  MOVLW  02
1AAC:  ADDWF  x9D,F
1AAE:  MOVLW  00
1AB0:  ADDWFC x9E,F
1AB2:  BRA    1A90
.................... 							MB_Length=132; 
1AB4:  MOVLW  84
1AB6:  MOVWF  x5D
.................... 							ValidReq++; 
1AB8:  INCF   x5E,F
1ABA:  BTFSC  FD8.2
1ABC:  INCF   x5F,F
.................... 							break; 
1ABE:  BRA    1B10
.................... 						case	0x01:	//channel 1 
.................... 							//pack 
.................... 							l=2; 
1AC0:  MOVLB  5
1AC2:  CLRF   xA0
1AC4:  MOVLW  02
1AC6:  MOVWF  x9F
.................... 							for(k=0; k<0x100; k+=2){ 
1AC8:  CLRF   x9E
1ACA:  CLRF   x9D
1ACC:  MOVF   x9E,W
1ACE:  SUBLW  00
1AD0:  BNC   1AF0
.................... 								MB_Buffer[l]=0; 
1AD2:  MOVLW  5D
1AD4:  ADDWF  x9F,W
1AD6:  MOVWF  FE9
1AD8:  MOVLW  04
1ADA:  ADDWFC xA0,W
1ADC:  MOVWF  FEA
1ADE:  CLRF   FEF
.................... 								l++; 
1AE0:  INCF   x9F,F
1AE2:  BTFSC  FD8.2
1AE4:  INCF   xA0,F
.................... 								}; 
1AE6:  MOVLW  02
1AE8:  ADDWF  x9D,F
1AEA:  MOVLW  00
1AEC:  ADDWFC x9E,F
1AEE:  BRA    1ACC
.................... 							MB_Length=132; 
1AF0:  MOVLW  84
1AF2:  MOVWF  x5D
.................... 							ValidReq++; 
1AF4:  INCF   x5E,F
1AF6:  BTFSC  FD8.2
1AF8:  INCF   x5F,F
.................... 							break; 
1AFA:  BRA    1B10
.................... 						default:						 
.................... 						MB_Buffer[1]|=0x80; 
1AFC:  MOVLB  4
1AFE:  BSF    x5E.7
.................... 						MB_Buffer[2]=illegal_data_value; 
1B00:  MOVLW  03
1B02:  MOVWF  x5F
.................... 						ExcReq++; 
1B04:  MOVLB  5
1B06:  INCF   x62,F
1B08:  BTFSC  FD8.2
1B0A:  INCF   x63,F
.................... 						MB_Length=5; 
1B0C:  MOVLW  05
1B0E:  MOVWF  x5D
.................... 						}; 
.................... 					}else{ 
1B10:  BRA    1B26
.................... 					MB_Buffer[1]|=0x80; 
1B12:  MOVLB  4
1B14:  BSF    x5E.7
.................... 					MB_Buffer[2]=illegal_data_address; 
1B16:  MOVLW  02
1B18:  MOVWF  x5F
.................... 					MB_Length=5; 
1B1A:  MOVLW  05
1B1C:  MOVLB  5
1B1E:  MOVWF  x5D
.................... 					ExcReq++; 
1B20:  INCF   x62,F
1B22:  BTFSC  FD8.2
1B24:  INCF   x63,F
.................... 					}; 
.................... 				break; 
1B26:  BRA    1DF0
.................... 		//get registers 
.................... 		case	0x44: 
.................... 				if(MB_Length==7){ 
1B28:  MOVLB  5
1B2A:  MOVF   x5D,W
1B2C:  SUBLW  07
1B2E:  BNZ   1B68
.................... 					//valig req propose 
.................... 					MB_Length=4; 
1B30:  MOVLW  04
1B32:  MOVWF  x5D
.................... 					ValidReq++; 
1B34:  INCF   x5E,F
1B36:  BTFSC  FD8.2
1B38:  INCF   x5F,F
.................... 					//action 
.................... 					//forming answer 
.................... 					j=2;	//set start answer pointer 
1B3A:  MOVLW  02
1B3C:  MOVWF  x68
.................... 					StAddr=MB_Buffer[3]; 
1B3E:  MOVFF  460,59A
.................... 					EnAddr=(MB_Buffer[3]+MB_Buffer[4]); 
1B42:  MOVLB  4
1B44:  MOVF   x61,W
1B46:  ADDWF  x60,W
1B48:  MOVLB  5
1B4A:  MOVWF  x9B
.................... 					for(bytecount=StAddr; bytecount<EnAddr; bytecount++){ 
1B4C:  MOVFF  59A,59C
1B50:  MOVF   x9B,W
1B52:  SUBWF  x9C,W
1B54:  BC    1B66
.................... 						AddRegData(bytecount);		//get registers						 
1B56:  MOVFF  59C,5A1
1B5A:  MOVLB  0
1B5C:  GOTO   0428
.................... 					}; 
1B60:  MOVLB  5
1B62:  INCF   x9C,F
1B64:  BRA    1B50
.................... 					}else{ 
1B66:  BRA    1B7C
.................... 					MB_Buffer[1]|=0x80; 
1B68:  MOVLB  4
1B6A:  BSF    x5E.7
.................... 					MB_Buffer[2]=illegal_data_address; 
1B6C:  MOVLW  02
1B6E:  MOVWF  x5F
.................... 					MB_Length=5; 
1B70:  MOVLW  05
1B72:  MOVLB  5
1B74:  MOVWF  x5D
.................... 					ExcReq++; 
1B76:  INCF   x62,F
1B78:  BTFSC  FD8.2
1B7A:  INCF   x63,F
.................... 					};		 
.................... 				break; 
1B7C:  BRA    1DF0
.................... 		//set registers 
.................... 		case	0x45: 
.................... 				if((MB_Length>=8)&&(!(MB_Length&0x01))){ 
1B7E:  MOVLB  5
1B80:  MOVF   x5D,W
1B82:  SUBLW  07
1B84:  BC    1BC8
1B86:  BTFSC  x5D.0
1B88:  BRA    1BC8
.................... 					//action 
.................... 					j=4;	//set start answer pointer 
1B8A:  MOVLW  04
1B8C:  MOVWF  x68
.................... 					StAddr=MB_Buffer[3]; 
1B8E:  MOVFF  460,59A
.................... 					EnAddr=MB_Length-2; 
1B92:  MOVLW  02
1B94:  SUBWF  x5D,W
1B96:  MOVWF  x9B
.................... 					//valig req propose 
.................... 					MB_Length=4; 
1B98:  MOVLW  04
1B9A:  MOVWF  x5D
.................... 					ValidReq++; 
1B9C:  INCF   x5E,F
1B9E:  BTFSC  FD8.2
1BA0:  INCF   x5F,F
.................... 					for(bytecount=StAddr; j<EnAddr; bytecount++){ 
1BA2:  MOVFF  59A,59C
1BA6:  MOVF   x9B,W
1BA8:  SUBWF  x68,W
1BAA:  BC    1BBC
.................... 						SetRegData(bytecount);		//get registers 
1BAC:  MOVFF  59C,5A1
1BB0:  MOVLB  0
1BB2:  GOTO   0C1A
.................... 					}; 
1BB6:  MOVLB  5
1BB8:  INCF   x9C,F
1BBA:  BRA    1BA6
.................... 					//forming answer 
.................... 					MB_Length=4; 
1BBC:  MOVLW  04
1BBE:  MOVWF  x5D
.................... 					ValidReq++; 
1BC0:  INCF   x5E,F
1BC2:  BTFSC  FD8.2
1BC4:  INCF   x5F,F
.................... 					}else{ 
1BC6:  BRA    1BDC
.................... 					MB_Buffer[1]|=0x80; 
1BC8:  MOVLB  4
1BCA:  BSF    x5E.7
.................... 					MB_Buffer[2]=illegal_data_address; 
1BCC:  MOVLW  02
1BCE:  MOVWF  x5F
.................... 					MB_Length=5; 
1BD0:  MOVLW  05
1BD2:  MOVLB  5
1BD4:  MOVWF  x5D
.................... 					ExcReq++; 
1BD6:  INCF   x62,F
1BD8:  BTFSC  FD8.2
1BDA:  INCF   x63,F
.................... 					};		 
.................... 				break; 
1BDC:  BRA    1DF0
.................... 		//write to EEPROM command 
.................... 		case	0x65: 
.................... 				if(MB_Length==4){ 
1BDE:  MOVLB  5
1BE0:  MOVF   x5D,W
1BE2:  SUBLW  04
1BE4:  BNZ   1BFA
.................... 					BUWrite(); 
1BE6:  MOVLB  0
1BE8:  GOTO   1142
.................... 					MB_Length=4; 
1BEC:  MOVLW  04
1BEE:  MOVLB  5
1BF0:  MOVWF  x5D
.................... 					ValidReq++; 
1BF2:  INCF   x5E,F
1BF4:  BTFSC  FD8.2
1BF6:  INCF   x5F,F
.................... 					}else{ 
1BF8:  BRA    1C0E
.................... 					MB_Buffer[1]|=0x80; 
1BFA:  MOVLB  4
1BFC:  BSF    x5E.7
.................... 					MB_Buffer[2]=illegal_data_address; 
1BFE:  MOVLW  02
1C00:  MOVWF  x5F
.................... 					MB_Length=5; 
1C02:  MOVLW  05
1C04:  MOVLB  5
1C06:  MOVWF  x5D
.................... 					ExcReq++; 
1C08:  INCF   x62,F
1C0A:  BTFSC  FD8.2
1C0C:  INCF   x63,F
.................... 					};		 
.................... 				break; 
1C0E:  BRA    1DF0
.................... 		//set speed 
.................... 		case	0x6A: 
.................... 				if(MB_Length==5){ 
1C10:  MOVLB  5
1C12:  MOVF   x5D,W
1C14:  SUBLW  05
1C16:  BTFSS  FD8.2
1C18:  BRA    1D62
.................... 					MB_Length=4; 
1C1A:  MOVLW  04
1C1C:  MOVWF  x5D
.................... 					ValidReq++; 
1C1E:  INCF   x5E,F
1C20:  BTFSC  FD8.2
1C22:  INCF   x5F,F
.................... 					switch(MB_Buffer[2]){ 
1C24:  MOVLB  4
1C26:  MOVF   x5F,W
1C28:  XORLW  00
1C2A:  MOVLB  0
1C2C:  BZ    1C4C
1C2E:  XORLW  01
1C30:  BZ    1C6A
1C32:  XORLW  03
1C34:  BZ    1C88
1C36:  XORLW  01
1C38:  BZ    1CA6
1C3A:  XORLW  07
1C3C:  BZ    1CC4
1C3E:  XORLW  01
1C40:  BZ    1CE2
1C42:  XORLW  03
1C44:  BZ    1D00
1C46:  XORLW  01
1C48:  BZ    1D1A
1C4A:  BRA    1D36
.................... 						case	0x00:	//1200 
.................... 							Speed=1200; 
1C4C:  MOVLW  04
1C4E:  MOVLB  3
1C50:  MOVWF  xE2
1C52:  MOVLW  B0
1C54:  MOVWF  xE1
.................... 							setup_uart(1200); 
1C56:  BSF    FB8.3
1C58:  MOVLW  0A
1C5A:  MOVWF  FAF
1C5C:  MOVLW  1A
1C5E:  MOVWF  FB0
1C60:  MOVLW  A6
1C62:  MOVWF  FAC
1C64:  NOP   
1C66:  NOP   
.................... 							break; 
1C68:  BRA    1D4C
.................... 						case	0x01:	//1800 
.................... 							Speed=1800; 
1C6A:  MOVLW  07
1C6C:  MOVLB  3
1C6E:  MOVWF  xE2
1C70:  MOVLW  08
1C72:  MOVWF  xE1
.................... 							setup_uart(1800); 
1C74:  BSF    FB8.3
1C76:  MOVLW  5B
1C78:  MOVWF  FAF
1C7A:  MOVLW  11
1C7C:  MOVWF  FB0
1C7E:  MOVLW  A6
1C80:  MOVWF  FAC
1C82:  NOP   
1C84:  NOP   
.................... 							break; 
1C86:  BRA    1D4C
.................... 						case	0x02:	//2400 
.................... 							Speed=2400; 
1C88:  MOVLW  09
1C8A:  MOVLB  3
1C8C:  MOVWF  xE2
1C8E:  MOVLW  60
1C90:  MOVWF  xE1
.................... 							setup_uart(2400); 
1C92:  BSF    FB8.3
1C94:  MOVLW  04
1C96:  MOVWF  FAF
1C98:  MOVLW  0D
1C9A:  MOVWF  FB0
1C9C:  MOVLW  A6
1C9E:  MOVWF  FAC
1CA0:  NOP   
1CA2:  NOP   
.................... 							break; 
1CA4:  BRA    1D4C
.................... 						case	0x03:	//4800 
.................... 							Speed=4800; 
1CA6:  MOVLW  12
1CA8:  MOVLB  3
1CAA:  MOVWF  xE2
1CAC:  MOVLW  C0
1CAE:  MOVWF  xE1
.................... 							setup_uart(4800); 
1CB0:  BSF    FB8.3
1CB2:  MOVLW  82
1CB4:  MOVWF  FAF
1CB6:  MOVLW  06
1CB8:  MOVWF  FB0
1CBA:  MOVLW  A6
1CBC:  MOVWF  FAC
1CBE:  NOP   
1CC0:  NOP   
.................... 							break; 
1CC2:  BRA    1D4C
.................... 						case	0x04:	//7200 
.................... 							Speed=7200; 
1CC4:  MOVLW  1C
1CC6:  MOVLB  3
1CC8:  MOVWF  xE2
1CCA:  MOVLW  20
1CCC:  MOVWF  xE1
.................... 							setup_uart(7200); 
1CCE:  BSF    FB8.3
1CD0:  MOVLW  56
1CD2:  MOVWF  FAF
1CD4:  MOVLW  04
1CD6:  MOVWF  FB0
1CD8:  MOVLW  A6
1CDA:  MOVWF  FAC
1CDC:  NOP   
1CDE:  NOP   
.................... 							break; 
1CE0:  BRA    1D4C
.................... 						case	0x05:	//9600 
.................... 							Speed=9600; 
1CE2:  MOVLW  25
1CE4:  MOVLB  3
1CE6:  MOVWF  xE2
1CE8:  MOVLW  80
1CEA:  MOVWF  xE1
.................... 							setup_uart(9600); 
1CEC:  BSF    FB8.3
1CEE:  MOVLW  40
1CF0:  MOVWF  FAF
1CF2:  MOVLW  03
1CF4:  MOVWF  FB0
1CF6:  MOVLW  A6
1CF8:  MOVWF  FAC
1CFA:  NOP   
1CFC:  NOP   
.................... 							break; 
1CFE:  BRA    1D4C
.................... 						case	0x06:	//14400 
.................... 							Speed=14400; 
1D00:  MOVLW  38
1D02:  MOVLB  3
1D04:  MOVWF  xE2
1D06:  MOVLW  40
1D08:  MOVWF  xE1
.................... 							setup_uart(14400); 
1D0A:  BCF    FB8.3
1D0C:  MOVLW  8A
1D0E:  MOVWF  FAF
1D10:  MOVLW  A6
1D12:  MOVWF  FAC
1D14:  NOP   
1D16:  NOP   
.................... 							break; 
1D18:  BRA    1D4C
.................... 						case	0x07:	//19200 
.................... 							Speed=19200; 
1D1A:  MOVLW  4B
1D1C:  MOVLB  3
1D1E:  MOVWF  xE2
1D20:  CLRF   xE1
.................... 							setup_uart(19200); 
1D22:  BSF    FB8.3
1D24:  MOVLW  A0
1D26:  MOVWF  FAF
1D28:  MOVLW  01
1D2A:  MOVWF  FB0
1D2C:  MOVLW  A6
1D2E:  MOVWF  FAC
1D30:  NOP   
1D32:  NOP   
.................... 							break; 
1D34:  BRA    1D4C
.................... 						default: 
.................... 							MB_Buffer[1]|=0x80; 
1D36:  MOVLB  4
1D38:  BSF    x5E.7
.................... 							MB_Buffer[2]=illegal_data_value; 
1D3A:  MOVLW  03
1D3C:  MOVWF  x5F
.................... 							MB_Length=5; 
1D3E:  MOVLW  05
1D40:  MOVLB  5
1D42:  MOVWF  x5D
.................... 							ExcReq++; 
1D44:  INCF   x62,F
1D46:  BTFSC  FD8.2
1D48:  INCF   x63,F
1D4A:  MOVLB  3
.................... 					}; 
.................... 					output_toggle(STAT); 
1D4C:  BCF    F94.0
1D4E:  BTG    F8B.0
.................... 					//pause for master 
.................... 					delay_ms(100); 
1D50:  MOVLW  64
1D52:  MOVLB  5
1D54:  MOVWF  xA1
1D56:  MOVLB  0
1D58:  BRA    189C
.................... 					output_toggle(STAT);					 
1D5A:  BCF    F94.0
1D5C:  BTG    F8B.0
.................... 					}else{ 
1D5E:  BRA    1D78
1D60:  MOVLB  5
.................... 					MB_Buffer[1]|=0x80; 
1D62:  MOVLB  4
1D64:  BSF    x5E.7
.................... 					MB_Buffer[2]=illegal_data_address; 
1D66:  MOVLW  02
1D68:  MOVWF  x5F
.................... 					MB_Length=5; 
1D6A:  MOVLW  05
1D6C:  MOVLB  5
1D6E:  MOVWF  x5D
.................... 					ExcReq++; 
1D70:  INCF   x62,F
1D72:  BTFSC  FD8.2
1D74:  INCF   x63,F
1D76:  MOVLB  0
.................... 					};		 
.................... 				break; 
1D78:  MOVLB  5
1D7A:  BRA    1DF0
.................... 		//send id 
.................... 		case	0x6B: 
.................... 				if(MB_Length==4){ 
1D7C:  MOVLB  5
1D7E:  MOVF   x5D,W
1D80:  SUBLW  04
1D82:  BNZ   1DC6
.................... 					MB_Buffer[2]="M"; 
1D84:  MOVLW  4D
1D86:  MOVLB  4
1D88:  MOVWF  x5F
.................... 					MB_Buffer[3]="W"; 
1D8A:  MOVLW  57
1D8C:  MOVWF  x60
.................... 					MB_Buffer[4]="T"; 
1D8E:  MOVLW  54
1D90:  MOVWF  x61
.................... 					MB_Buffer[5]="-"; 
1D92:  MOVLW  2D
1D94:  MOVWF  x62
.................... 					MB_Buffer[6]="S"; 
1D96:  MOVLW  53
1D98:  MOVWF  x63
.................... 					MB_Buffer[7]="P"; 
1D9A:  MOVLW  50
1D9C:  MOVWF  x64
.................... 					MB_Buffer[8]="M"; 
1D9E:  MOVLW  4D
1DA0:  MOVWF  x65
.................... 					MB_Buffer[9]="3"; 
1DA2:  MOVLW  33
1DA4:  MOVWF  x66
.................... 					MB_Buffer[10]="v"; 
1DA6:  MOVLW  76
1DA8:  MOVWF  x67
.................... 					MB_Buffer[11]="1"; 
1DAA:  MOVLW  31
1DAC:  MOVWF  x68
.................... 					MB_Buffer[12]="."; 
1DAE:  MOVLW  2E
1DB0:  MOVWF  x69
.................... 					MB_Buffer[13]="0"; 
1DB2:  MOVLW  30
1DB4:  MOVWF  x6A
.................... 					MB_Buffer[14]="0"; 
1DB6:  MOVWF  x6B
.................... 					MB_Length=16; 
1DB8:  MOVLW  10
1DBA:  MOVLB  5
1DBC:  MOVWF  x5D
.................... 					ValidReq++; 
1DBE:  INCF   x5E,F
1DC0:  BTFSC  FD8.2
1DC2:  INCF   x5F,F
.................... 					}else{ 
1DC4:  BRA    1DDA
.................... 					MB_Buffer[1]|=0x80; 
1DC6:  MOVLB  4
1DC8:  BSF    x5E.7
.................... 					MB_Buffer[2]=illegal_data_address; 
1DCA:  MOVLW  02
1DCC:  MOVWF  x5F
.................... 					MB_Length=5; 
1DCE:  MOVLW  05
1DD0:  MOVLB  5
1DD2:  MOVWF  x5D
.................... 					ExcReq++; 
1DD4:  INCF   x62,F
1DD6:  BTFSC  FD8.2
1DD8:  INCF   x63,F
.................... 					};		 
.................... 				break; 
1DDA:  BRA    1DF0
.................... 		//not recognized 
.................... 		default:		//not recognized command 
.................... 		MB_Buffer[1]|=0x80;	//set error code 
1DDC:  MOVLB  4
1DDE:  BSF    x5E.7
.................... 		MB_Buffer[2]=illegal_function; 
1DE0:  MOVLW  01
1DE2:  MOVWF  x5F
.................... 		MB_Length=5; 
1DE4:  MOVLW  05
1DE6:  MOVLB  5
1DE8:  MOVWF  x5D
.................... 		ExcReq++; 
1DEA:  INCF   x62,F
1DEC:  BTFSC  FD8.2
1DEE:  INCF   x63,F
.................... 	};	 
.................... 	//send answer 
.................... 	if(MB_Buffer[0]!=0){	//if unicast req - then send answer 
1DF0:  MOVLB  4
1DF2:  MOVF   x5D,F
1DF4:  BZ    1E74
.................... 	CRCc=ModbusCRC(MB_Buffer,MB_Length-2);	//calc CRC 
1DF6:  MOVLW  02
1DF8:  MOVLB  5
1DFA:  SUBWF  x5D,W
1DFC:  MOVWF  xA1
1DFE:  MOVLW  04
1E00:  MOVWF  xA3
1E02:  MOVLW  5D
1E04:  MOVWF  xA2
1E06:  MOVFF  5A1,5A4
1E0A:  MOVLB  0
1E0C:  CALL   03D0
1E10:  MOVFF  02,567
1E14:  MOVFF  01,566
.................... 	MB_Buffer[MB_Length-2]=make8(CRCc,1);	//high CRC 
1E18:  MOVLW  02
1E1A:  MOVLB  5
1E1C:  SUBWF  x5D,W
1E1E:  CLRF   03
1E20:  ADDLW  5D
1E22:  MOVWF  FE9
1E24:  MOVLW  04
1E26:  ADDWFC 03,W
1E28:  MOVWF  FEA
1E2A:  MOVFF  567,FEF
.................... 	MB_Buffer[MB_Length-1]=make8(CRCc,0);	//low CRC 
1E2E:  MOVLW  01
1E30:  SUBWF  x5D,W
1E32:  CLRF   03
1E34:  ADDLW  5D
1E36:  MOVWF  FE9
1E38:  MOVLW  04
1E3A:  ADDWFC 03,W
1E3C:  MOVWF  FEA
1E3E:  MOVFF  566,FEF
.................... 	//send 
.................... 	for(bytecount=0; bytecount<MB_Length; bytecount++){ 
1E42:  CLRF   x9C
1E44:  MOVF   x5D,W
1E46:  SUBWF  x9C,W
1E48:  BC    1E70
.................... 		restart_wdt(); 
1E4A:  CLRWDT
.................... 		putc(MB_Buffer[bytecount]); 
1E4C:  CLRF   03
1E4E:  MOVF   x9C,W
1E50:  ADDLW  5D
1E52:  MOVWF  FE9
1E54:  MOVLW  04
1E56:  ADDWFC 03,W
1E58:  MOVWF  FEA
1E5A:  MOVFF  FEF,5A1
1E5E:  MOVFF  5A1,5A2
1E62:  MOVLB  0
1E64:  BRA    18CE
.................... 		output_low(STAT);	//toggle led 
1E66:  BCF    F94.0
1E68:  BCF    F8B.0
.................... 		}; 
1E6A:  MOVLB  5
1E6C:  INCF   x9C,F
1E6E:  BRA    1E44
.................... 		goto exit; 
1E70:  BRA    1E72
1E72:  MOVLB  4
.................... 	};	 
.................... 	// 
.................... 	 
.................... exit:	//exit 
.................... 	output_high(STAT);	//on led 
1E74:  BCF    F94.0
1E76:  BSF    F8B.0
.................... 	MB_Length=0; 
1E78:  MOVLB  5
1E7A:  CLRF   x5D
.................... 	clear_interrupt(INT_RDA);	 
.................... 	clear_interrupt(INT_TIMER1);	 
1E7C:  BCF    F9E.0
.................... 	disable_interrupts(INT_TIMER1);	 
1E7E:  BCF    F9D.0
.................... 	enable_interrupts(INT_RDA); 
1E80:  BSF    F9D.5
.................... } 
.................... // 
....................  
.................... // 
.................... // 
.................... // 
1E82:  BCF    F9E.0
1E84:  MOVLB  0
1E86:  GOTO   006C
.................... void main(void){   
*
2D82:  CLRF   FF8
2D84:  BCF    FD0.7
2D86:  BSF    07.7
2D88:  CLRF   FEA
2D8A:  CLRF   FE9
2D8C:  MOVLW  70
2D8E:  MOVWF  FD3
2D90:  MOVLW  40
2D92:  MOVWF  F9B
2D94:  MOVF   FD3,W
2D96:  MOVLB  3
2D98:  CLRF   xC8
2D9A:  CLRF   xF3
2D9C:  MOVLW  32
2D9E:  MOVWF  xF2
2DA0:  MOVLB  5
2DA2:  CLRF   x5D
2DA4:  BCF    F92.6
2DA6:  BCF    F89.6
2DA8:  BSF    FB8.3
2DAA:  MOVLW  40
2DAC:  MOVWF  FAF
2DAE:  MOVLW  03
2DB0:  MOVWF  FB0
2DB2:  MOVLW  A6
2DB4:  MOVWF  FAC
2DB6:  MOVLW  90
2DB8:  MOVWF  FAB
2DBA:  NOP   
2DBC:  NOP   
2DBE:  MOVF   FC1,W
2DC0:  ANDLW  C0
2DC2:  IORLW  0F
2DC4:  MOVWF  FC1
2DC6:  MOVLW  07
2DC8:  MOVWF  FB4
2DCA:  CLRF   19
2DCC:  CLRF   1A
2DCE:  CLRF   1B
2DD0:  CLRF   1C
2DD2:  CLRF   1D
2DD4:  CLRF   1E
2DD6:  CLRF   1F
2DD8:  CLRF   20
2DDA:  CLRF   21
2DDC:  CLRF   22
2DDE:  CLRF   23
2DE0:  CLRF   24
2DE2:  CLRF   25
2DE4:  CLRF   26
2DE6:  CLRF   27
2DE8:  CLRF   28
2DEA:  CLRF   29
2DEC:  CLRF   2A
2DEE:  CLRF   2B
2DF0:  CLRF   2C
2DF2:  CLRF   2D
2DF4:  CLRF   2E
2DF6:  CLRF   2F
2DF8:  CLRF   30
2DFA:  CLRF   31
2DFC:  CLRF   32
2DFE:  CLRF   33
2E00:  CLRF   34
2E02:  CLRF   35
2E04:  CLRF   36
2E06:  CLRF   37
2E08:  CLRF   38
2E0A:  CLRF   39
2E0C:  CLRF   3A
2E0E:  CLRF   3B
2E10:  CLRF   3C
2E12:  CLRF   3D
2E14:  CLRF   3E
2E16:  CLRF   3F
2E18:  CLRF   40
2E1A:  CLRF   41
2E1C:  CLRF   42
2E1E:  CLRF   43
2E20:  CLRF   44
2E22:  CLRF   45
2E24:  CLRF   46
2E26:  CLRF   47
2E28:  CLRF   48
2E2A:  CLRF   49
2E2C:  CLRF   4A
2E2E:  CLRF   4B
2E30:  CLRF   4C
2E32:  CLRF   4D
2E34:  CLRF   4E
2E36:  CLRF   4F
2E38:  CLRF   50
2E3A:  CLRF   51
2E3C:  CLRF   52
2E3E:  CLRF   53
2E40:  CLRF   54
2E42:  CLRF   55
2E44:  CLRF   56
2E46:  CLRF   57
2E48:  CLRF   58
2E4A:  CLRF   59
2E4C:  CLRF   5A
2E4E:  CLRF   5B
2E50:  CLRF   5C
2E52:  CLRF   5D
2E54:  CLRF   5E
2E56:  CLRF   5F
2E58:  CLRF   60
2E5A:  CLRF   61
2E5C:  CLRF   62
2E5E:  CLRF   63
2E60:  CLRF   64
2E62:  CLRF   65
2E64:  CLRF   66
2E66:  CLRF   67
2E68:  CLRF   68
2E6A:  CLRF   69
2E6C:  CLRF   6A
2E6E:  CLRF   6B
2E70:  CLRF   6C
2E72:  CLRF   6D
2E74:  CLRF   6E
2E76:  CLRF   6F
2E78:  CLRF   70
2E7A:  CLRF   71
2E7C:  CLRF   72
2E7E:  CLRF   73
2E80:  CLRF   74
2E82:  CLRF   75
2E84:  CLRF   76
2E86:  CLRF   77
2E88:  CLRF   78
2E8A:  CLRF   79
2E8C:  CLRF   7A
2E8E:  CLRF   7B
2E90:  CLRF   7C
2E92:  CLRF   7D
2E94:  CLRF   7E
2E96:  CLRF   7F
2E98:  MOVLB  0
2E9A:  CLRF   x80
2E9C:  CLRF   x81
2E9E:  CLRF   x82
2EA0:  CLRF   x83
2EA2:  CLRF   x84
2EA4:  CLRF   x85
2EA6:  CLRF   x86
2EA8:  CLRF   x87
2EAA:  CLRF   x88
2EAC:  CLRF   x89
2EAE:  CLRF   x8A
2EB0:  CLRF   x8B
2EB2:  CLRF   x8C
2EB4:  CLRF   x8D
2EB6:  CLRF   x8E
2EB8:  CLRF   x8F
2EBA:  CLRF   x90
2EBC:  CLRF   x91
2EBE:  CLRF   x92
2EC0:  CLRF   x93
2EC2:  CLRF   x94
2EC4:  CLRF   x95
2EC6:  CLRF   x96
2EC8:  CLRF   x97
2ECA:  CLRF   x98
2ECC:  CLRF   x99
2ECE:  CLRF   x9A
2ED0:  CLRF   x9B
2ED2:  CLRF   x9C
2ED4:  CLRF   x9D
2ED6:  CLRF   x9E
2ED8:  CLRF   x9F
2EDA:  CLRF   xA0
2EDC:  CLRF   xA1
2EDE:  CLRF   xA2
2EE0:  CLRF   xA3
2EE2:  CLRF   xA4
2EE4:  CLRF   xA5
2EE6:  CLRF   xA6
2EE8:  CLRF   xA7
2EEA:  CLRF   xA8
2EEC:  CLRF   xA9
2EEE:  CLRF   xAA
2EF0:  CLRF   xAB
2EF2:  CLRF   xAC
2EF4:  CLRF   xAD
2EF6:  CLRF   xAE
2EF8:  CLRF   xAF
2EFA:  CLRF   xB0
2EFC:  CLRF   xB1
2EFE:  CLRF   xB2
2F00:  CLRF   xB3
2F02:  CLRF   xB4
2F04:  CLRF   xB5
2F06:  CLRF   xB6
2F08:  CLRF   xB7
2F0A:  CLRF   xB8
2F0C:  CLRF   xB9
2F0E:  CLRF   xBA
2F10:  CLRF   xBB
2F12:  CLRF   xBC
2F14:  CLRF   xBD
2F16:  CLRF   xBE
2F18:  CLRF   xBF
2F1A:  CLRF   xC0
2F1C:  CLRF   xC1
2F1E:  CLRF   xC2
2F20:  CLRF   xC3
2F22:  CLRF   xC4
2F24:  CLRF   xC5
2F26:  CLRF   xC6
2F28:  CLRF   xC7
2F2A:  CLRF   xC8
2F2C:  CLRF   xC9
2F2E:  CLRF   xCA
2F30:  CLRF   xCB
2F32:  CLRF   xCC
2F34:  CLRF   xCD
2F36:  CLRF   xCE
2F38:  CLRF   xCF
2F3A:  CLRF   xD0
2F3C:  CLRF   xD1
2F3E:  CLRF   xD2
2F40:  CLRF   xD3
2F42:  CLRF   xD4
2F44:  CLRF   xD5
2F46:  CLRF   xD6
2F48:  CLRF   xD7
2F4A:  CLRF   xD8
2F4C:  CLRF   xD9
2F4E:  CLRF   xDA
2F50:  CLRF   xDB
2F52:  CLRF   xDC
2F54:  CLRF   xDD
2F56:  CLRF   xDE
2F58:  CLRF   xDF
2F5A:  CLRF   xE0
2F5C:  CLRF   xE1
2F5E:  CLRF   xE2
2F60:  CLRF   xE3
2F62:  CLRF   xE4
2F64:  CLRF   xE5
2F66:  CLRF   xE6
2F68:  CLRF   xE7
2F6A:  CLRF   xE8
2F6C:  CLRF   xE9
2F6E:  CLRF   xEA
2F70:  CLRF   xEB
2F72:  CLRF   xEC
2F74:  CLRF   xED
2F76:  CLRF   xEE
2F78:  CLRF   xEF
2F7A:  CLRF   xF0
2F7C:  CLRF   xF1
2F7E:  CLRF   xF2
2F80:  CLRF   xF3
2F82:  CLRF   xF4
2F84:  CLRF   xF5
2F86:  CLRF   xF6
2F88:  CLRF   xF7
2F8A:  CLRF   xF8
2F8C:  CLRF   xF9
2F8E:  CLRF   xFA
2F90:  CLRF   xFB
2F92:  CLRF   xFC
2F94:  CLRF   xFD
2F96:  CLRF   xFE
2F98:  CLRF   xFF
2F9A:  MOVLB  1
2F9C:  CLRF   x00
2F9E:  CLRF   x01
2FA0:  CLRF   x02
2FA2:  CLRF   x03
2FA4:  CLRF   x04
2FA6:  CLRF   x05
2FA8:  CLRF   x06
2FAA:  CLRF   x07
2FAC:  CLRF   x08
2FAE:  CLRF   x09
2FB0:  CLRF   x0A
2FB2:  CLRF   x0B
2FB4:  CLRF   x0C
2FB6:  CLRF   x0D
2FB8:  CLRF   x0E
2FBA:  CLRF   x0F
2FBC:  CLRF   x10
2FBE:  CLRF   x11
2FC0:  CLRF   x12
2FC2:  CLRF   x13
2FC4:  CLRF   x14
2FC6:  CLRF   x15
2FC8:  CLRF   x16
2FCA:  CLRF   x17
2FCC:  CLRF   x18
2FCE:  CLRF   x19
2FD0:  CLRF   x1A
2FD2:  CLRF   x1B
2FD4:  CLRF   x1C
2FD6:  CLRF   x1D
2FD8:  CLRF   x1E
2FDA:  CLRF   x1F
2FDC:  CLRF   x20
2FDE:  CLRF   x21
2FE0:  CLRF   x22
2FE2:  CLRF   x23
2FE4:  CLRF   x24
2FE6:  CLRF   x25
2FE8:  CLRF   x26
2FEA:  CLRF   x27
2FEC:  CLRF   x28
2FEE:  CLRF   x29
2FF0:  CLRF   x2A
2FF2:  CLRF   x2B
2FF4:  CLRF   x2C
2FF6:  CLRF   x2D
2FF8:  CLRF   x2E
2FFA:  CLRF   x2F
2FFC:  CLRF   x30
2FFE:  CLRF   x31
3000:  CLRF   x32
3002:  CLRF   x33
3004:  CLRF   x34
3006:  CLRF   x35
3008:  CLRF   x36
300A:  CLRF   x37
300C:  CLRF   x38
300E:  CLRF   x39
3010:  CLRF   x3A
3012:  CLRF   x3B
3014:  CLRF   x3C
3016:  CLRF   x3D
3018:  CLRF   x3E
301A:  CLRF   x3F
301C:  CLRF   x40
301E:  CLRF   x41
3020:  CLRF   x42
3022:  CLRF   x43
3024:  CLRF   x44
3026:  CLRF   x45
3028:  CLRF   x46
302A:  CLRF   x47
302C:  CLRF   x48
302E:  CLRF   x49
3030:  CLRF   x4A
3032:  CLRF   x4B
3034:  CLRF   x4C
3036:  CLRF   x4D
3038:  CLRF   x4E
303A:  CLRF   x4F
303C:  CLRF   x50
303E:  CLRF   x51
3040:  CLRF   x52
3042:  CLRF   x53
3044:  CLRF   x54
3046:  CLRF   x55
3048:  CLRF   x56
304A:  CLRF   x57
304C:  CLRF   x58
304E:  CLRF   x59
3050:  CLRF   x5A
3052:  CLRF   x5B
3054:  CLRF   x5C
3056:  CLRF   x5D
3058:  CLRF   x5E
305A:  CLRF   x5F
305C:  CLRF   x60
305E:  CLRF   x61
3060:  CLRF   x62
3062:  CLRF   x63
3064:  CLRF   x64
3066:  CLRF   x65
3068:  CLRF   x66
306A:  CLRF   x67
306C:  CLRF   x68
306E:  CLRF   x69
3070:  CLRF   x6A
3072:  CLRF   x6B
3074:  CLRF   x6C
3076:  CLRF   x6D
3078:  CLRF   x6E
307A:  CLRF   x6F
307C:  CLRF   x70
307E:  CLRF   x71
3080:  CLRF   x72
3082:  CLRF   x73
3084:  CLRF   x74
3086:  CLRF   x75
3088:  CLRF   x76
308A:  CLRF   x77
308C:  CLRF   x78
308E:  CLRF   x79
3090:  CLRF   x7A
3092:  CLRF   x7B
3094:  CLRF   x7C
3096:  CLRF   x7D
3098:  CLRF   x7E
309A:  CLRF   x7F
309C:  CLRF   x80
309E:  CLRF   x81
30A0:  CLRF   x82
30A2:  CLRF   x83
30A4:  CLRF   x84
30A6:  CLRF   x85
30A8:  CLRF   x86
30AA:  CLRF   x87
30AC:  CLRF   x88
30AE:  CLRF   x89
30B0:  CLRF   x8A
30B2:  CLRF   x8B
30B4:  CLRF   x8C
30B6:  CLRF   x8D
30B8:  CLRF   x8E
30BA:  CLRF   x8F
30BC:  CLRF   x90
30BE:  CLRF   x91
30C0:  CLRF   x92
30C2:  CLRF   x93
30C4:  CLRF   x94
30C6:  CLRF   x95
30C8:  CLRF   x96
30CA:  CLRF   x97
30CC:  CLRF   x98
30CE:  CLRF   x99
30D0:  CLRF   x9A
30D2:  CLRF   x9B
30D4:  CLRF   x9C
30D6:  CLRF   x9D
30D8:  CLRF   x9E
30DA:  CLRF   x9F
30DC:  CLRF   xA0
30DE:  CLRF   xA1
30E0:  CLRF   xA2
30E2:  CLRF   xA3
30E4:  CLRF   xA4
30E6:  CLRF   xA5
30E8:  CLRF   xA6
30EA:  CLRF   xA7
30EC:  CLRF   xA8
30EE:  CLRF   xA9
30F0:  CLRF   xAA
30F2:  CLRF   xAB
30F4:  CLRF   xAC
30F6:  CLRF   xAD
30F8:  CLRF   xAE
30FA:  CLRF   xAF
30FC:  CLRF   xB0
30FE:  CLRF   xB1
3100:  CLRF   xB2
3102:  CLRF   xB3
3104:  CLRF   xB4
3106:  CLRF   xB5
3108:  CLRF   xB6
310A:  CLRF   xB7
310C:  CLRF   xB8
310E:  CLRF   xB9
3110:  CLRF   xBA
3112:  CLRF   xBB
3114:  CLRF   xBC
3116:  CLRF   xBD
3118:  CLRF   xBE
311A:  CLRF   xBF
311C:  CLRF   xC0
311E:  CLRF   xC1
3120:  CLRF   xC2
3122:  CLRF   xC3
3124:  CLRF   xC4
3126:  CLRF   xC5
3128:  CLRF   xC6
312A:  CLRF   xC7
312C:  CLRF   xC8
312E:  CLRF   xC9
3130:  CLRF   xCA
3132:  CLRF   xCB
3134:  CLRF   xCC
3136:  CLRF   xCD
3138:  CLRF   xCE
313A:  CLRF   xCF
313C:  CLRF   xD0
313E:  CLRF   xD1
3140:  CLRF   xD2
3142:  CLRF   xD3
3144:  CLRF   xD4
3146:  CLRF   xD5
3148:  CLRF   xD6
314A:  CLRF   xD7
314C:  CLRF   xD8
314E:  CLRF   xD9
3150:  CLRF   xDA
3152:  CLRF   xDB
3154:  CLRF   xDC
3156:  CLRF   xDD
3158:  CLRF   xDE
315A:  CLRF   xDF
315C:  CLRF   xE0
315E:  CLRF   xE1
3160:  CLRF   xE2
3162:  CLRF   xE3
3164:  CLRF   xE4
3166:  CLRF   xE5
3168:  CLRF   xE6
316A:  CLRF   xE7
316C:  CLRF   xE8
316E:  CLRF   xE9
3170:  CLRF   xEA
3172:  CLRF   xEB
3174:  CLRF   xEC
3176:  CLRF   xED
3178:  CLRF   xEE
317A:  CLRF   xEF
317C:  CLRF   xF0
317E:  CLRF   xF1
3180:  CLRF   xF2
3182:  CLRF   xF3
3184:  CLRF   xF4
3186:  CLRF   xF5
3188:  CLRF   xF6
318A:  CLRF   xF7
318C:  CLRF   xF8
318E:  CLRF   xF9
3190:  CLRF   xFA
3192:  CLRF   xFB
3194:  CLRF   xFC
3196:  CLRF   xFD
3198:  CLRF   xFE
319A:  CLRF   xFF
319C:  MOVLB  2
319E:  CLRF   x00
31A0:  CLRF   x01
31A2:  CLRF   x02
31A4:  CLRF   x03
31A6:  CLRF   x04
31A8:  CLRF   x05
31AA:  CLRF   x06
31AC:  CLRF   x07
31AE:  CLRF   x08
31B0:  CLRF   x09
31B2:  CLRF   x0A
31B4:  CLRF   x0B
31B6:  CLRF   x0C
31B8:  CLRF   x0D
31BA:  CLRF   x0E
31BC:  CLRF   x0F
31BE:  CLRF   x10
31C0:  CLRF   x11
31C2:  CLRF   x12
31C4:  CLRF   x13
31C6:  CLRF   x14
31C8:  CLRF   x15
31CA:  CLRF   x16
31CC:  CLRF   x17
31CE:  CLRF   x18
31D0:  CLRF   x19
31D2:  CLRF   x1A
31D4:  CLRF   x1B
31D6:  CLRF   x1C
31D8:  CLRF   x1D
31DA:  CLRF   x1E
31DC:  CLRF   x1F
31DE:  CLRF   x20
31E0:  CLRF   x21
31E2:  CLRF   x22
31E4:  CLRF   x23
31E6:  CLRF   x24
31E8:  CLRF   x25
31EA:  CLRF   x26
31EC:  CLRF   x27
31EE:  CLRF   x28
31F0:  CLRF   x29
31F2:  CLRF   x2A
31F4:  CLRF   x2B
31F6:  CLRF   x2C
31F8:  CLRF   x2D
31FA:  CLRF   x2E
31FC:  CLRF   x2F
31FE:  CLRF   x30
3200:  CLRF   x31
3202:  CLRF   x32
3204:  CLRF   x33
3206:  CLRF   x34
3208:  CLRF   x35
320A:  CLRF   x36
320C:  CLRF   x37
320E:  CLRF   x38
3210:  CLRF   x39
3212:  CLRF   x3A
3214:  CLRF   x3B
3216:  CLRF   x3C
3218:  CLRF   x3D
321A:  CLRF   x3E
321C:  CLRF   x3F
321E:  CLRF   x40
3220:  CLRF   x41
3222:  CLRF   x42
3224:  CLRF   x43
3226:  CLRF   x44
3228:  CLRF   x45
322A:  CLRF   x46
322C:  CLRF   x47
322E:  CLRF   x48
3230:  CLRF   x49
3232:  CLRF   x4A
3234:  CLRF   x4B
3236:  CLRF   x4C
3238:  CLRF   x4D
323A:  CLRF   x4E
323C:  CLRF   x4F
323E:  CLRF   x50
3240:  CLRF   x51
3242:  CLRF   x52
3244:  CLRF   x53
3246:  CLRF   x54
3248:  CLRF   x55
324A:  CLRF   x56
324C:  CLRF   x57
324E:  CLRF   x58
3250:  CLRF   x59
3252:  CLRF   x5A
3254:  CLRF   x5B
3256:  CLRF   x5C
3258:  CLRF   x5D
325A:  CLRF   x5E
325C:  CLRF   x5F
325E:  CLRF   x60
3260:  CLRF   x61
3262:  CLRF   x62
3264:  CLRF   x63
3266:  CLRF   x64
3268:  CLRF   x65
326A:  CLRF   x66
326C:  CLRF   x67
326E:  CLRF   x68
3270:  CLRF   x69
3272:  CLRF   x6A
3274:  CLRF   x6B
3276:  CLRF   x6C
3278:  CLRF   x6D
327A:  CLRF   x6E
327C:  CLRF   x6F
327E:  CLRF   x70
3280:  CLRF   x71
3282:  CLRF   x72
3284:  CLRF   x73
3286:  CLRF   x74
3288:  CLRF   x75
328A:  CLRF   x76
328C:  CLRF   x77
328E:  CLRF   x78
3290:  CLRF   x79
3292:  CLRF   x7A
3294:  CLRF   x7B
3296:  CLRF   x7C
3298:  CLRF   x7D
329A:  CLRF   x7E
329C:  CLRF   x7F
329E:  CLRF   x80
32A0:  CLRF   x81
32A2:  CLRF   x82
32A4:  CLRF   x83
32A6:  CLRF   x84
32A8:  CLRF   x85
32AA:  CLRF   x86
32AC:  CLRF   x87
32AE:  CLRF   x88
32B0:  CLRF   x89
32B2:  CLRF   x8A
32B4:  CLRF   x8B
32B6:  CLRF   x8C
32B8:  CLRF   x8D
32BA:  CLRF   x8E
32BC:  CLRF   x8F
32BE:  CLRF   x90
32C0:  CLRF   x91
32C2:  CLRF   x92
32C4:  CLRF   x93
32C6:  CLRF   x94
32C8:  CLRF   x95
32CA:  CLRF   x96
32CC:  CLRF   x97
32CE:  CLRF   x98
32D0:  CLRF   x99
32D2:  CLRF   x9A
32D4:  CLRF   x9B
32D6:  CLRF   x9C
32D8:  CLRF   x9D
32DA:  CLRF   x9E
32DC:  CLRF   x9F
32DE:  CLRF   xA0
32E0:  CLRF   xA1
32E2:  CLRF   xA2
32E4:  CLRF   xA3
32E6:  CLRF   xA4
32E8:  CLRF   xA5
32EA:  CLRF   xA6
32EC:  CLRF   xA7
32EE:  CLRF   xA8
32F0:  CLRF   xA9
32F2:  CLRF   xAA
32F4:  CLRF   xAB
32F6:  CLRF   xAC
32F8:  CLRF   xAD
32FA:  CLRF   xAE
32FC:  CLRF   xAF
32FE:  CLRF   xB0
3300:  CLRF   xB1
3302:  CLRF   xB2
3304:  CLRF   xB3
3306:  CLRF   xB4
3308:  CLRF   xB5
330A:  CLRF   xB6
330C:  CLRF   xB7
330E:  CLRF   xB8
3310:  CLRF   xB9
3312:  CLRF   xBA
3314:  CLRF   xBB
3316:  CLRF   xBC
3318:  CLRF   xBD
331A:  CLRF   xBE
331C:  CLRF   xBF
331E:  CLRF   xC0
3320:  CLRF   xC1
3322:  CLRF   xC2
3324:  CLRF   xC3
3326:  CLRF   xC4
3328:  CLRF   xC5
332A:  CLRF   xC6
332C:  CLRF   xC7
332E:  CLRF   xC8
3330:  CLRF   xC9
3332:  CLRF   xCA
3334:  CLRF   xCB
3336:  CLRF   xCC
3338:  CLRF   xCD
333A:  CLRF   xCE
333C:  CLRF   xCF
333E:  CLRF   xD0
3340:  CLRF   xD1
3342:  CLRF   xD2
3344:  CLRF   xD3
3346:  CLRF   xD4
3348:  CLRF   xD5
334A:  CLRF   xD6
334C:  CLRF   xD7
334E:  CLRF   xD8
3350:  CLRF   xD9
3352:  CLRF   xDA
3354:  CLRF   xDB
3356:  CLRF   xDC
3358:  CLRF   xDD
335A:  CLRF   xDE
335C:  CLRF   xDF
335E:  CLRF   xE0
3360:  CLRF   xE1
3362:  CLRF   xE2
3364:  CLRF   xE3
3366:  CLRF   xE4
3368:  CLRF   xE5
336A:  CLRF   xE6
336C:  CLRF   xE7
336E:  CLRF   xE8
3370:  CLRF   xE9
3372:  CLRF   xEA
3374:  CLRF   xEB
3376:  CLRF   xEC
3378:  CLRF   xED
337A:  CLRF   xEE
337C:  CLRF   xEF
337E:  CLRF   xF0
3380:  CLRF   xF1
3382:  CLRF   xF2
3384:  CLRF   xF3
3386:  CLRF   xF4
3388:  CLRF   xF5
338A:  CLRF   xF6
338C:  CLRF   xF7
338E:  CLRF   xF8
3390:  CLRF   xF9
3392:  CLRF   xFA
3394:  CLRF   xFB
3396:  CLRF   xFC
3398:  CLRF   xFD
339A:  CLRF   xFE
339C:  CLRF   xFF
339E:  MOVLB  3
33A0:  CLRF   x00
33A2:  CLRF   x01
33A4:  CLRF   x02
33A6:  CLRF   x03
33A8:  CLRF   x04
33AA:  CLRF   x05
33AC:  CLRF   x06
33AE:  CLRF   x07
33B0:  CLRF   x08
33B2:  CLRF   x09
33B4:  CLRF   x0A
33B6:  CLRF   x0B
33B8:  CLRF   x0C
33BA:  CLRF   x0D
33BC:  CLRF   x0E
33BE:  CLRF   x0F
33C0:  CLRF   x10
33C2:  CLRF   x11
33C4:  CLRF   x12
33C6:  CLRF   x13
33C8:  CLRF   x14
33CA:  CLRF   x15
33CC:  CLRF   x16
33CE:  CLRF   x17
33D0:  CLRF   x18
33D2:  CLRF   x19
33D4:  CLRF   x1A
33D6:  CLRF   x1B
33D8:  CLRF   x1C
33DA:  CLRF   x1D
33DC:  CLRF   x1E
33DE:  CLRF   x1F
33E0:  CLRF   x20
33E2:  CLRF   x21
33E4:  CLRF   x22
33E6:  CLRF   x23
33E8:  CLRF   x24
33EA:  CLRF   x25
33EC:  CLRF   x26
33EE:  CLRF   x27
33F0:  CLRF   x28
33F2:  CLRF   x29
33F4:  CLRF   x2A
33F6:  CLRF   x2B
33F8:  CLRF   x2C
33FA:  CLRF   x2D
33FC:  CLRF   x2E
33FE:  CLRF   x2F
3400:  CLRF   x30
3402:  CLRF   x31
3404:  CLRF   x32
3406:  CLRF   x33
3408:  CLRF   x34
340A:  CLRF   x35
340C:  CLRF   x36
340E:  CLRF   x37
3410:  CLRF   x38
3412:  CLRF   x39
3414:  CLRF   x3A
3416:  CLRF   x3B
3418:  CLRF   x3C
341A:  CLRF   x3D
341C:  CLRF   x3E
341E:  CLRF   x3F
3420:  CLRF   x40
3422:  CLRF   x41
3424:  CLRF   x42
3426:  CLRF   x43
3428:  CLRF   x44
342A:  CLRF   x45
342C:  CLRF   x46
342E:  CLRF   x47
3430:  CLRF   x48
3432:  CLRF   x49
3434:  CLRF   x4A
3436:  CLRF   x4B
3438:  CLRF   x4C
343A:  CLRF   x4D
343C:  CLRF   x4E
343E:  CLRF   x4F
3440:  CLRF   x50
3442:  CLRF   x51
3444:  CLRF   x52
3446:  CLRF   x53
3448:  CLRF   x54
344A:  CLRF   x55
344C:  CLRF   x56
344E:  CLRF   x57
3450:  CLRF   x58
3452:  CLRF   x59
3454:  CLRF   x5A
3456:  CLRF   x5B
3458:  CLRF   x5C
345A:  CLRF   x5D
345C:  CLRF   x5E
345E:  CLRF   x5F
3460:  CLRF   x60
3462:  CLRF   x61
3464:  CLRF   x62
3466:  CLRF   x63
3468:  CLRF   x64
346A:  CLRF   x65
346C:  CLRF   x66
346E:  CLRF   x67
3470:  CLRF   x68
3472:  CLRF   x69
3474:  CLRF   x6A
3476:  CLRF   x6B
3478:  CLRF   x6C
347A:  CLRF   x6D
347C:  CLRF   x6E
347E:  CLRF   x6F
3480:  CLRF   x70
3482:  CLRF   x71
3484:  CLRF   x72
3486:  CLRF   x73
3488:  CLRF   x74
348A:  CLRF   x75
348C:  CLRF   x76
348E:  CLRF   x77
3490:  CLRF   x78
3492:  CLRF   x79
3494:  CLRF   x7A
3496:  CLRF   x7B
3498:  CLRF   x7C
349A:  CLRF   x7D
349C:  CLRF   x7E
349E:  CLRF   x7F
34A0:  CLRF   x80
34A2:  CLRF   x81
34A4:  CLRF   x82
34A6:  CLRF   x83
34A8:  CLRF   x84
34AA:  CLRF   x85
34AC:  CLRF   x86
34AE:  CLRF   x87
34B0:  CLRF   x88
34B2:  CLRF   x89
34B4:  CLRF   x8A
34B6:  CLRF   x8B
34B8:  CLRF   x8C
34BA:  CLRF   x8D
34BC:  CLRF   x8E
34BE:  CLRF   x8F
34C0:  CLRF   x90
34C2:  CLRF   x91
34C4:  CLRF   x92
34C6:  CLRF   x93
34C8:  CLRF   x94
34CA:  CLRF   x95
34CC:  CLRF   x96
34CE:  CLRF   x97
34D0:  CLRF   x98
34D2:  CLRF   x99
34D4:  CLRF   x9A
34D6:  CLRF   x9B
34D8:  CLRF   x9C
34DA:  CLRF   x9D
34DC:  CLRF   x9E
34DE:  CLRF   x9F
34E0:  CLRF   xA0
34E2:  CLRF   xA1
34E4:  CLRF   xA2
34E6:  CLRF   xA3
34E8:  CLRF   xA4
34EA:  CLRF   xA5
34EC:  CLRF   xA6
34EE:  CLRF   xA7
34F0:  CLRF   xA8
34F2:  CLRF   xA9
34F4:  CLRF   xAA
34F6:  CLRF   xAB
34F8:  CLRF   xAC
34FA:  CLRF   xAD
34FC:  CLRF   xAE
34FE:  CLRF   xAF
3500:  CLRF   xB0
3502:  CLRF   xB1
3504:  CLRF   xB2
3506:  CLRF   xB3
3508:  CLRF   xB4
350A:  CLRF   xB5
350C:  CLRF   xB6
350E:  CLRF   xB7
3510:  CLRF   xB8
3512:  CLRF   xB9
3514:  CLRF   xBA
3516:  CLRF   xBB
3518:  CLRF   xBC
351A:  CLRF   xBD
351C:  CLRF   xBE
351E:  CLRF   xBF
3520:  CLRF   xC0
3522:  CLRF   xC1
3524:  CLRF   xC2
3526:  CLRF   xC3
3528:  CLRF   xC4
352A:  CLRF   xC5
352C:  CLRF   xC6
352E:  BCF    xC7.0
3530:  CLRF   xC9
3532:  CLRF   xCA
3534:  CLRF   xCB
3536:  CLRF   xCC
3538:  CLRF   xCD
353A:  CLRF   xCE
353C:  CLRF   xCF
353E:  CLRF   xD0
3540:  CLRF   xD1
3542:  CLRF   xD2
3544:  CLRF   xD3
3546:  CLRF   xD4
3548:  CLRF   xD5
354A:  CLRF   xD6
354C:  CLRF   xD7
354E:  CLRF   xD8
3550:  CLRF   xD9
3552:  CLRF   xDA
3554:  CLRF   xDB
3556:  CLRF   xDC
3558:  CLRF   xDD
355A:  CLRF   xDE
355C:  CLRF   xDF
355E:  CLRF   xE0
3560:  CLRF   xE1
3562:  CLRF   xE2
3564:  CLRF   xE3
3566:  CLRF   xE4
3568:  CLRF   xE5
356A:  CLRF   xE6
356C:  CLRF   xE7
356E:  CLRF   xE8
3570:  CLRF   xE9
3572:  CLRF   xEA
3574:  CLRF   xEB
3576:  CLRF   xEC
3578:  CLRF   xED
357A:  CLRF   xEE
357C:  CLRF   xEF
357E:  CLRF   xF0
3580:  CLRF   xF1
3582:  MOVLB  4
3584:  CLRF   x5D
3586:  CLRF   x5E
3588:  CLRF   x5F
358A:  CLRF   x60
358C:  CLRF   x61
358E:  CLRF   x62
3590:  CLRF   x63
3592:  CLRF   x64
3594:  CLRF   x65
3596:  CLRF   x66
3598:  CLRF   x67
359A:  CLRF   x68
359C:  CLRF   x69
359E:  CLRF   x6A
35A0:  CLRF   x6B
35A2:  CLRF   x6C
35A4:  CLRF   x6D
35A6:  CLRF   x6E
35A8:  CLRF   x6F
35AA:  CLRF   x70
35AC:  CLRF   x71
35AE:  CLRF   x72
35B0:  CLRF   x73
35B2:  CLRF   x74
35B4:  CLRF   x75
35B6:  CLRF   x76
35B8:  CLRF   x77
35BA:  CLRF   x78
35BC:  CLRF   x79
35BE:  CLRF   x7A
35C0:  CLRF   x7B
35C2:  CLRF   x7C
35C4:  CLRF   x7D
35C6:  CLRF   x7E
35C8:  CLRF   x7F
35CA:  CLRF   x80
35CC:  CLRF   x81
35CE:  CLRF   x82
35D0:  CLRF   x83
35D2:  CLRF   x84
35D4:  CLRF   x85
35D6:  CLRF   x86
35D8:  CLRF   x87
35DA:  CLRF   x88
35DC:  CLRF   x89
35DE:  CLRF   x8A
35E0:  CLRF   x8B
35E2:  CLRF   x8C
35E4:  CLRF   x8D
35E6:  CLRF   x8E
35E8:  CLRF   x8F
35EA:  CLRF   x90
35EC:  CLRF   x91
35EE:  CLRF   x92
35F0:  CLRF   x93
35F2:  CLRF   x94
35F4:  CLRF   x95
35F6:  CLRF   x96
35F8:  CLRF   x97
35FA:  CLRF   x98
35FC:  CLRF   x99
35FE:  CLRF   x9A
3600:  CLRF   x9B
3602:  CLRF   x9C
3604:  CLRF   x9D
3606:  CLRF   x9E
3608:  CLRF   x9F
360A:  CLRF   xA0
360C:  CLRF   xA1
360E:  CLRF   xA2
3610:  CLRF   xA3
3612:  CLRF   xA4
3614:  CLRF   xA5
3616:  CLRF   xA6
3618:  CLRF   xA7
361A:  CLRF   xA8
361C:  CLRF   xA9
361E:  CLRF   xAA
3620:  CLRF   xAB
3622:  CLRF   xAC
3624:  CLRF   xAD
3626:  CLRF   xAE
3628:  CLRF   xAF
362A:  CLRF   xB0
362C:  CLRF   xB1
362E:  CLRF   xB2
3630:  CLRF   xB3
3632:  CLRF   xB4
3634:  CLRF   xB5
3636:  CLRF   xB6
3638:  CLRF   xB7
363A:  CLRF   xB8
363C:  CLRF   xB9
363E:  CLRF   xBA
3640:  CLRF   xBB
3642:  CLRF   xBC
3644:  CLRF   xBD
3646:  CLRF   xBE
3648:  CLRF   xBF
364A:  CLRF   xC0
364C:  CLRF   xC1
364E:  CLRF   xC2
3650:  CLRF   xC3
3652:  CLRF   xC4
3654:  CLRF   xC5
3656:  CLRF   xC6
3658:  CLRF   xC7
365A:  CLRF   xC8
365C:  CLRF   xC9
365E:  CLRF   xCA
3660:  CLRF   xCB
3662:  CLRF   xCC
3664:  CLRF   xCD
3666:  CLRF   xCE
3668:  CLRF   xCF
366A:  CLRF   xD0
366C:  CLRF   xD1
366E:  CLRF   xD2
3670:  CLRF   xD3
3672:  CLRF   xD4
3674:  CLRF   xD5
3676:  CLRF   xD6
3678:  CLRF   xD7
367A:  CLRF   xD8
367C:  CLRF   xD9
367E:  CLRF   xDA
3680:  CLRF   xDB
3682:  CLRF   xDC
3684:  CLRF   xDD
3686:  CLRF   xDE
3688:  CLRF   xDF
368A:  CLRF   xE0
368C:  CLRF   xE1
368E:  CLRF   xE2
3690:  CLRF   xE3
3692:  CLRF   xE4
3694:  CLRF   xE5
3696:  CLRF   xE6
3698:  CLRF   xE7
369A:  CLRF   xE8
369C:  CLRF   xE9
369E:  CLRF   xEA
36A0:  CLRF   xEB
36A2:  CLRF   xEC
36A4:  CLRF   xED
36A6:  CLRF   xEE
36A8:  CLRF   xEF
36AA:  CLRF   xF0
36AC:  CLRF   xF1
36AE:  CLRF   xF2
36B0:  CLRF   xF3
36B2:  CLRF   xF4
36B4:  CLRF   xF5
36B6:  CLRF   xF6
36B8:  CLRF   xF7
36BA:  CLRF   xF8
36BC:  CLRF   xF9
36BE:  CLRF   xFA
36C0:  CLRF   xFB
36C2:  CLRF   xFC
36C4:  CLRF   xFD
36C6:  CLRF   xFE
36C8:  CLRF   xFF
36CA:  MOVLB  5
36CC:  CLRF   x00
36CE:  CLRF   x01
36D0:  CLRF   x02
36D2:  CLRF   x03
36D4:  CLRF   x04
36D6:  CLRF   x05
36D8:  CLRF   x06
36DA:  CLRF   x07
36DC:  CLRF   x08
36DE:  CLRF   x09
36E0:  CLRF   x0A
36E2:  CLRF   x0B
36E4:  CLRF   x0C
36E6:  CLRF   x0D
36E8:  CLRF   x0E
36EA:  CLRF   x0F
36EC:  CLRF   x10
36EE:  CLRF   x11
36F0:  CLRF   x12
36F2:  CLRF   x13
36F4:  CLRF   x14
36F6:  CLRF   x15
36F8:  CLRF   x16
36FA:  CLRF   x17
36FC:  CLRF   x18
36FE:  CLRF   x19
3700:  CLRF   x1A
3702:  CLRF   x1B
3704:  CLRF   x1C
3706:  CLRF   x1D
3708:  CLRF   x1E
370A:  CLRF   x1F
370C:  CLRF   x20
370E:  CLRF   x21
3710:  CLRF   x22
3712:  CLRF   x23
3714:  CLRF   x24
3716:  CLRF   x25
3718:  CLRF   x26
371A:  CLRF   x27
371C:  CLRF   x28
371E:  CLRF   x29
3720:  CLRF   x2A
3722:  CLRF   x2B
3724:  CLRF   x2C
3726:  CLRF   x2D
3728:  CLRF   x2E
372A:  CLRF   x2F
372C:  CLRF   x30
372E:  CLRF   x31
3730:  CLRF   x32
3732:  CLRF   x33
3734:  CLRF   x34
3736:  CLRF   x35
3738:  CLRF   x36
373A:  CLRF   x37
373C:  CLRF   x38
373E:  CLRF   x39
3740:  CLRF   x3A
3742:  CLRF   x3B
3744:  CLRF   x3C
3746:  CLRF   x3D
3748:  CLRF   x3E
374A:  CLRF   x3F
374C:  CLRF   x40
374E:  CLRF   x41
3750:  CLRF   x42
3752:  CLRF   x43
3754:  CLRF   x44
3756:  CLRF   x45
3758:  CLRF   x46
375A:  CLRF   x47
375C:  CLRF   x48
375E:  CLRF   x49
3760:  CLRF   x4A
3762:  CLRF   x4B
3764:  CLRF   x4C
3766:  CLRF   x4D
3768:  CLRF   x4E
376A:  CLRF   x4F
376C:  CLRF   x50
376E:  CLRF   x51
3770:  CLRF   x52
3772:  CLRF   x53
3774:  CLRF   x54
3776:  CLRF   x55
3778:  CLRF   x56
377A:  CLRF   x57
377C:  CLRF   x58
377E:  CLRF   x59
3780:  CLRF   x5A
3782:  CLRF   x5B
3784:  CLRF   x5C
3786:  CLRF   x5E
3788:  CLRF   x5F
378A:  CLRF   x60
378C:  CLRF   x61
378E:  CLRF   x62
3790:  CLRF   x63
3792:  CLRF   x64
3794:  CLRF   x65
3796:  CLRF   x66
3798:  CLRF   x67
379A:  CLRF   x68
379C:  CLRF   x69
379E:  CLRF   x75
37A0:  CLRF   x74
37A2:  MOVLW  01
37A4:  MOVWF  x80
37A6:  MOVLW  FF
37A8:  MOVWF  x7F
37AA:  MOVLW  01
37AC:  MOVWF  x82
37AE:  MOVLW  FF
37B0:  MOVWF  x81
.................... 	//addition variables 
.................... 	int16	CycleCounter; 
.................... 	int16	MaxCycles; 
.................... 	int16	cnt; 
.................... 	int16	course; 
.................... 	int16	ADC0;	//current ADC value 
.................... 	int16	Wrk0=0;	//sum mean value 
.................... 	int16	FiltFact;	//filtering factor 
.................... 	int16	StorAddr;	//storage address 
.................... 	int8	OutBufAddr;	//out buffer address 
.................... 	int32	Sum; 
.................... 	int16	Mx=0x01ff;	//mean value 
.................... 	int16	BetTrsh=0x01ff; //beta treshold 
.................... 	int16	bet_cur;//current beta value 
.................... 	 
.................... 	 
.................... 	int1	changed; 
.................... 	 
.................... 	 
.................... 	InitMcu();		//mcu init    
37B2:  MOVLB  0
37B4:  GOTO   1E8A
.................... 	BURead();		//read registers from EE 
37B8:  GOTO   1F28
.................... 	RsInit(); 
37BC:  GOTO   23FE
....................  
....................    //interrupt configuration 
....................    enable_interrupts(INT_RDA); 
37C0:  BSF    F9D.5
....................    disable_interrupts(INT_TIMER1); 
37C2:  BCF    F9D.0
....................    enable_interrupts(GLOBAL); 
37C4:  MOVLW  C0
37C6:  IORWF  FF2,F
....................    	 
....................    	output_high(TERMO); 
37C8:  BCF    F96.1
37CA:  BSF    F8D.1
....................    	//for debug !!! 
....................    	DaqState=DaqStart; 
37CC:  MOVLW  01
37CE:  MOVLB  3
37D0:  MOVWF  xF4
.................... 	//main cycle 
.................... 	while(TRUE){ 
.................... 		restart_wdt(); 
37D2:  CLRWDT
.................... 		//state procesor 
.................... 		switch(DaqState){ 
37D4:  MOVF   xF4,W
37D6:  ADDLW  FC
37D8:  BTFSC  FD8.0
37DA:  GOTO   4370
37DE:  ADDLW  04
37E0:  MOVLB  0
37E2:  GOTO   4376
.................... 			case	DaqIdle: 
.................... 				Termometer(); 
37E6:  CALL   26C4
.................... 				//wait for state changing 
.................... 				break; 
37EA:  MOVLB  3
37EC:  GOTO   4370
.................... 			case	DaqStart: 
.................... 				//prepare for measuring 
.................... 				bet_cur=0;//reset beta value 
37F0:  MOVLB  5
37F2:  CLRF   x84
37F4:  CLRF   x83
.................... 				//set input amplifiers 
.................... 				SetKU0(AmpCoef0); 
37F6:  MOVFF  3AC,587
37FA:  MOVFF  3AB,586
37FE:  MOVLB  0
3800:  GOTO   283A
.................... 				SetKU1(AmpCoef1); 
3804:  MOVFF  3B8,587
3808:  MOVFF  3B7,586
380C:  GOTO   28B6
.................... 				//zero buffers & variables 
.................... 				for(cnt=0;cnt<FWDT;cnt++){ 
3810:  MOVLB  5
3812:  CLRF   x6F
3814:  CLRF   x6E
3816:  MOVF   x6F,W
3818:  MOVLB  3
381A:  SUBWF  xC4,W
381C:  BNC   3858
381E:  BNZ   3830
3820:  MOVF   xC3,W
3822:  MOVLB  5
3824:  SUBWF  x6E,W
3826:  BTFSS  FD8.0
3828:  BRA    382E
382A:  MOVLB  3
382C:  BRA    3858
382E:  MOVLB  3
.................... 					data_filt0[cnt]=0;	//clear buffer 
3830:  BCF    FD8.0
3832:  MOVLB  5
3834:  RLCF   x6E,W
3836:  MOVWF  02
3838:  RLCF   x6F,W
383A:  MOVWF  03
383C:  MOVF   02,W
383E:  ADDLW  19
3840:  MOVWF  FE9
3842:  MOVLW  00
3844:  ADDWFC 03,W
3846:  MOVWF  FEA
3848:  CLRF   FEC
384A:  MOVF   FED,F
384C:  CLRF   FEF
.................... 					}; 
384E:  INCF   x6E,F
3850:  BTFSC  FD8.2
3852:  INCF   x6F,F
3854:  BRA    3816
3856:  MOVLB  3
.................... //				for(cnt=0;cnt<0x100;cnt++){ 
.................... //					data_hist0[cnt]=0;	//clear buffer 
.................... //					}; 
.................... 				StorAddr=0; 
3858:  MOVLB  5
385A:  CLRF   x79
385C:  CLRF   x78
.................... 				OutBufAddr=0; 
385E:  CLRF   x7A
.................... 				iWin=0; 
3860:  MOVLB  3
3862:  CLRF   xE5
.................... 				iMaxFall0=0; 
3864:  MOVLB  0
3866:  CLRF   xA2
3868:  CLRF   xA1
.................... 				iMaxRise0=0; 
386A:  CLRF   x9E
386C:  CLRF   x9D
.................... 				maxFall0=0; 
386E:  CLRF   xA0
3870:  CLRF   x9F
.................... 				maxRise0=0; 
3872:  CLRF   x9C
3874:  CLRF   x9B
.................... 				data_mean0=0; 
3876:  CLRF   x9A
3878:  CLRF   x99
.................... 				//DAC step estim 
.................... 				SawLevel=(int32)(((float)SAW_A0/1000)*f2int32); 
387A:  MOVFF  3CC,58B
387E:  MOVFF  3CB,58A
3882:  CALL   2932
3886:  MOVFF  00,586
388A:  MOVFF  01,587
388E:  MOVFF  02,588
3892:  MOVFF  03,589
3896:  MOVFF  03,58D
389A:  MOVFF  02,58C
389E:  MOVFF  01,58B
38A2:  MOVFF  00,58A
38A6:  MOVLB  5
38A8:  CLRF   x91
38AA:  CLRF   x90
38AC:  MOVLW  7A
38AE:  MOVWF  x8F
38B0:  MOVLW  88
38B2:  MOVWF  x8E
38B4:  MOVLB  0
38B6:  CALL   2968
38BA:  MOVFF  00,586
38BE:  MOVFF  01,587
38C2:  MOVFF  02,588
38C6:  MOVFF  03,589
38CA:  MOVFF  03,58D
38CE:  MOVFF  02,58C
38D2:  MOVFF  01,58B
38D6:  MOVFF  00,58A
38DA:  MOVLW  A8
38DC:  MOVLB  5
38DE:  MOVWF  x91
38E0:  MOVLW  C6
38E2:  MOVWF  x90
38E4:  MOVLW  4B
38E6:  MOVWF  x8F
38E8:  MOVLW  90
38EA:  MOVWF  x8E
38EC:  MOVLB  0
38EE:  CALL   2592
38F2:  MOVFF  03,589
38F6:  MOVFF  02,588
38FA:  MOVFF  01,587
38FE:  MOVFF  00,586
3902:  CALL   2AC6
3906:  MOVFF  03,3D0
390A:  MOVFF  02,3CF
390E:  MOVFF  01,3CE
3912:  MOVFF  00,3CD
.................... 				SawStep=(int32)(((float)SAW_A1/1000)*f2int32/(TAQ/2)); 
3916:  MOVFF  3D2,58B
391A:  MOVFF  3D1,58A
391E:  CALL   2932
3922:  MOVFF  00,586
3926:  MOVFF  01,587
392A:  MOVFF  02,588
392E:  MOVFF  03,589
3932:  MOVFF  03,58D
3936:  MOVFF  02,58C
393A:  MOVFF  01,58B
393E:  MOVFF  00,58A
3942:  MOVLB  5
3944:  CLRF   x91
3946:  CLRF   x90
3948:  MOVLW  7A
394A:  MOVWF  x8F
394C:  MOVLW  88
394E:  MOVWF  x8E
3950:  MOVLB  0
3952:  CALL   2968
3956:  MOVFF  00,586
395A:  MOVFF  01,587
395E:  MOVFF  02,588
3962:  MOVFF  03,589
3966:  MOVFF  03,58D
396A:  MOVFF  02,58C
396E:  MOVFF  01,58B
3972:  MOVFF  00,58A
3976:  MOVLW  A8
3978:  MOVLB  5
397A:  MOVWF  x91
397C:  MOVLW  C6
397E:  MOVWF  x90
3980:  MOVLW  4B
3982:  MOVWF  x8F
3984:  MOVLW  90
3986:  MOVWF  x8E
3988:  MOVLB  0
398A:  CALL   2592
398E:  MOVFF  00,586
3992:  MOVFF  01,587
3996:  MOVFF  02,588
399A:  MOVFF  03,589
399E:  BCF    FD8.0
39A0:  MOVLB  3
39A2:  RRCF   xC2,W
39A4:  MOVWF  03
39A6:  RRCF   xC1,W
39A8:  MOVWF  02
39AA:  MOVLB  5
39AC:  MOVWF  x8A
39AE:  MOVFF  03,58B
39B2:  MOVLB  0
39B4:  CALL   2932
39B8:  MOVFF  589,58D
39BC:  MOVFF  588,58C
39C0:  MOVFF  587,58B
39C4:  MOVFF  586,58A
39C8:  MOVFF  03,591
39CC:  MOVFF  02,590
39D0:  MOVFF  01,58F
39D4:  MOVFF  00,58E
39D8:  CALL   2968
39DC:  MOVFF  03,589
39E0:  MOVFF  02,588
39E4:  MOVFF  01,587
39E8:  MOVFF  00,586
39EC:  CALL   2AC6
39F0:  MOVFF  03,3D6
39F4:  MOVFF  02,3D5
39F8:  MOVFF  01,3D4
39FC:  MOVFF  00,3D3
.................... 				//next state 
.................... 				DaqState=DaqMeasure;	//set measuring state 
3A00:  MOVLW  02
3A02:  MOVLB  3
3A04:  MOVWF  xF4
.................... 				break; 
3A06:  GOTO   4370
.................... 			case	DaqMeasure: 
.................... 				//preset initial saw level 
.................... 				//fine part 
.................... //				output_low(DAC0);						//select fine DAC 
.................... //				spi_write((make8(SawLevel,1)&0x03)|0x10);	//send high part 
.................... //				spi_write(make8(SawLevel,0));				//send low part 
.................... //				output_high(DAC0);						//deselect 
.................... 				//course part 
.................... 				course=(make16(make8(SawLevel,2),make8(SawLevel,1)))>>2; 
3A0A:  MOVFF  3CF,589
3A0E:  MOVFF  3CE,588
3A12:  MOVLB  5
3A14:  RRCF   x89,W
3A16:  MOVWF  x71
3A18:  RRCF   x88,W
3A1A:  MOVWF  x70
3A1C:  RRCF   x71,F
3A1E:  RRCF   x70,F
3A20:  MOVLW  3F
3A22:  ANDWF  x71,F
.................... 				output_low(DAC1);						//select course DAC 
3A24:  BCF    F95.1
3A26:  BCF    F8C.1
.................... 				spi_write((make8(course,1)&0x0f)|0x10);	//send high part 
3A28:  MOVF   x71,W
3A2A:  ANDLW  0F
3A2C:  IORLW  10
3A2E:  MOVWF  x86
3A30:  MOVF   FC9,W
3A32:  MOVFF  586,FC9
3A36:  RRCF   FC7,W
3A38:  BNC   3A36
.................... 				spi_write(make8(course,0));				//send low part 
3A3A:  MOVFF  570,586
3A3E:  MOVF   FC9,W
3A40:  MOVFF  570,FC9
3A44:  RRCF   FC7,W
3A46:  BNC   3A44
.................... 				output_high(DAC1);						//deselect 
3A48:  BCF    F95.1
3A4A:  BSF    F8C.1
.................... 				output_low(LDAC);						//send DAC 
3A4C:  BCF    F92.7
3A4E:  BCF    F89.7
.................... 				output_high(LDAC);						//strobe				 
3A50:  BCF    F92.7
3A52:  BSF    F89.7
.................... 				//select ADC channel 
.................... 				set_adc_channel(0);	//select ch0 
3A54:  MOVLW  00
3A56:  MOVWF  01
3A58:  MOVF   FC2,W
3A5A:  ANDLW  C3
3A5C:  IORWF  01,W
3A5E:  MOVWF  FC2
.................... 				//cycle variables 
.................... 				MaxCycles=TAQ>>1;// /2 
3A60:  BCF    FD8.0
3A62:  MOVLB  3
3A64:  RRCF   xC2,W
3A66:  MOVLB  5
3A68:  MOVWF  x6D
3A6A:  MOVLB  3
3A6C:  RRCF   xC1,W
3A6E:  MOVLB  5
3A70:  MOVWF  x6C
.................... 				FiltFact=(FWDT>>1)+1;// /2 
3A72:  BCF    FD8.0
3A74:  MOVLB  3
3A76:  RRCF   xC4,W
3A78:  MOVLB  5
3A7A:  MOVWF  x87
3A7C:  MOVLB  3
3A7E:  RRCF   xC3,W
3A80:  MOVLB  5
3A82:  MOVWF  x86
3A84:  MOVLW  01
3A86:  ADDWF  x86,W
3A88:  MOVWF  x76
3A8A:  MOVLW  00
3A8C:  ADDWFC x87,W
3A8E:  MOVWF  x77
.................... 				Sum=0; 
3A90:  CLRF   x7E
3A92:  CLRF   x7D
3A94:  CLRF   x7C
3A96:  CLRF   x7B
.................... //				redFact=(int8)(TAQ>>8)-1;	//estim reduse factor /128 
.................... //				redCount=0; 
.................... //============================================================================================ 
.................... 				//rising saw part 
.................... 				//initial filtering 
.................... 				for(CycleCounter=0; CycleCounter<FiltFact; CycleCounter++){					 
3A98:  CLRF   x6B
3A9A:  CLRF   x6A
3A9C:  MOVF   x6B,W
3A9E:  SUBWF  x77,W
3AA0:  BTFSS  FD8.0
3AA2:  BRA    3BA0
3AA4:  BNZ   3AAE
3AA6:  MOVF   x76,W
3AA8:  SUBWF  x6A,W
3AAA:  BTFSC  FD8.0
3AAC:  BRA    3BA0
.................... 					restart_wdt(); 
3AAE:  CLRWDT
.................... 					//start ADC conv 
.................... 					read_adc(ADC_START_ONLY);	//start conversion 
3AB0:  BSF    FC2.1
.................... 					//estim next level 
.................... 					SawLevel+=SawStep; 
3AB2:  MOVLB  3
3AB4:  MOVF   xD3,W
3AB6:  ADDWF  xCD,F
3AB8:  MOVF   xD4,W
3ABA:  ADDWFC xCE,F
3ABC:  MOVF   xD5,W
3ABE:  ADDWFC xCF,F
3AC0:  MOVF   xD6,W
3AC2:  ADDWFC xD0,F
.................... 					//transfer new DAC value 
.................... 					//fine part 
.................... //					output_low(DAC0);						//select fine DAC 
.................... //					spi_write((make8(SawLevel,1)&0x03)|0x10);	//send high part 
.................... //					spi_write(make8(SawLevel,0));				//send low part 
.................... //					output_high(DAC0);						//deselect 
.................... 					//course part 
.................... 					course=(make16(make8(SawLevel,2),make8(SawLevel,1)))>>2; 
3AC4:  MOVFF  3CF,589
3AC8:  MOVFF  3CE,588
3ACC:  MOVLB  5
3ACE:  RRCF   x89,W
3AD0:  MOVWF  x71
3AD2:  RRCF   x88,W
3AD4:  MOVWF  x70
3AD6:  RRCF   x71,F
3AD8:  RRCF   x70,F
3ADA:  MOVLW  3F
3ADC:  ANDWF  x71,F
.................... 					output_low(DAC1);						//select course DAC 
3ADE:  BCF    F95.1
3AE0:  BCF    F8C.1
.................... 					spi_write((make8(course,1)&0x0f)|0x10);	//send high part 
3AE2:  MOVF   x71,W
3AE4:  ANDLW  0F
3AE6:  IORLW  10
3AE8:  MOVWF  x86
3AEA:  MOVF   FC9,W
3AEC:  MOVFF  586,FC9
3AF0:  RRCF   FC7,W
3AF2:  BNC   3AF0
.................... 					spi_write(make8(course,0));				//send low part 
3AF4:  MOVFF  570,586
3AF8:  MOVF   FC9,W
3AFA:  MOVFF  570,FC9
3AFE:  RRCF   FC7,W
3B00:  BNC   3AFE
.................... 					output_high(DAC1);						//deselect 
3B02:  BCF    F95.1
3B04:  BSF    F8C.1
.................... 					//wait for sync 
.................... 					//not imlem yet!!! 
.................... 					//read ADC 
.................... 					ADC0=read_adc(ADC_READ_ONLY); 
3B06:  BTFSC  FC2.1
3B08:  BRA    3B06
3B0A:  MOVFF  FC3,572
3B0E:  MOVFF  FC4,573
.................... 					//trigg LDAC 
.................... 					output_low(LDAC);						//send DAC 
3B12:  BCF    F92.7
3B14:  BCF    F89.7
.................... 					output_high(LDAC);						//strobe 
3B16:  BCF    F92.7
3B18:  BSF    F89.7
.................... 					//meaning 
.................... 					Wrk0-=data_filt0[iWin];	//calc new sum mean val 
3B1A:  BCF    FD8.0
3B1C:  MOVLB  3
3B1E:  RLCF   xE5,W
3B20:  CLRF   03
3B22:  ADDLW  19
3B24:  MOVWF  FE9
3B26:  MOVLW  00
3B28:  ADDWFC 03,W
3B2A:  MOVWF  FEA
3B2C:  MOVFF  FEC,03
3B30:  MOVF   FED,F
3B32:  MOVF   FEF,W
3B34:  MOVLB  5
3B36:  SUBWF  x74,F
3B38:  MOVF   03,W
3B3A:  SUBWFB x75,F
.................... 					Wrk0+=ADC0; 
3B3C:  MOVF   x72,W
3B3E:  ADDWF  x74,F
3B40:  MOVF   x73,W
3B42:  ADDWFC x75,F
.................... 					data_filt0[iWin]=ADC0; 
3B44:  BCF    FD8.0
3B46:  MOVLB  3
3B48:  RLCF   xE5,W
3B4A:  CLRF   03
3B4C:  ADDLW  19
3B4E:  MOVWF  FE9
3B50:  MOVLW  00
3B52:  ADDWFC 03,W
3B54:  MOVWF  FEA
3B56:  MOVFF  573,FEC
3B5A:  MOVF   FED,F
3B5C:  MOVFF  572,FEF
.................... 					//next filter value 
.................... 					if(iWin==0){ 
3B60:  MOVF   xE5,F
3B62:  BNZ   3B6C
.................... 						iWin=FWDT; 
3B64:  MOVFF  3C3,3E5
.................... 						iWin--; 
3B68:  DECF   xE5,F
.................... 						}else	iWin--; 
3B6A:  BRA    3B6E
3B6C:  DECF   xE5,F
.................... 					//calc mean value 
.................... 					data_mean0=Wrk0>>6; 
3B6E:  MOVLB  5
3B70:  RRCF   x75,W
3B72:  MOVLB  0
3B74:  MOVWF  x9A
3B76:  MOVLB  5
3B78:  RRCF   x74,W
3B7A:  MOVLB  0
3B7C:  MOVWF  x99
3B7E:  RRCF   x9A,F
3B80:  RRCF   x99,F
3B82:  RRCF   x9A,F
3B84:  RRCF   x99,F
3B86:  RRCF   x9A,F
3B88:  RRCF   x99,F
3B8A:  RRCF   x9A,F
3B8C:  RRCF   x99,F
3B8E:  RRCF   x9A,F
3B90:  RRCF   x99,F
3B92:  MOVLW  03
3B94:  ANDWF  x9A,F
.................... 					}; 
3B96:  MOVLB  5
3B98:  INCF   x6A,F
3B9A:  BTFSC  FD8.2
3B9C:  INCF   x6B,F
3B9E:  BRA    3A9C
.................... 				//============================================================================	 
.................... 				//part after intial filtering 
.................... 				for(CycleCounter=FiltFact; CycleCounter<MaxCycles; CycleCounter++){ 
3BA0:  MOVFF  577,56B
3BA4:  MOVFF  576,56A
3BA8:  MOVF   x6B,W
3BAA:  SUBWF  x6D,W
3BAC:  BTFSS  FD8.0
3BAE:  BRA    3D08
3BB0:  BNZ   3BBA
3BB2:  MOVF   x6C,W
3BB4:  SUBWF  x6A,W
3BB6:  BTFSC  FD8.0
3BB8:  BRA    3D08
.................... 					restart_wdt(); 
3BBA:  CLRWDT
.................... 					//start ADC conv 
.................... 					read_adc(ADC_START_ONLY);	//start conversion 
3BBC:  BSF    FC2.1
.................... 					//estim next level 
.................... 					SawLevel+=SawStep; 
3BBE:  MOVLB  3
3BC0:  MOVF   xD3,W
3BC2:  ADDWF  xCD,F
3BC4:  MOVF   xD4,W
3BC6:  ADDWFC xCE,F
3BC8:  MOVF   xD5,W
3BCA:  ADDWFC xCF,F
3BCC:  MOVF   xD6,W
3BCE:  ADDWFC xD0,F
.................... 					//transfer new DAC value 
.................... 					//fine part 
.................... //					output_low(DAC0);						//select fine DAC 
.................... //					spi_write((make8(SawLevel,1)&0x03)|0x10);	//send high part 
.................... //					spi_write(make8(SawLevel,0));				//send low part 
.................... //					output_high(DAC0);						//deselect 
.................... 					//course part 
.................... 					course=(make16(make8(SawLevel,2),make8(SawLevel,1)))>>2; 
3BD0:  MOVFF  3CF,589
3BD4:  MOVFF  3CE,588
3BD8:  MOVLB  5
3BDA:  RRCF   x89,W
3BDC:  MOVWF  x71
3BDE:  RRCF   x88,W
3BE0:  MOVWF  x70
3BE2:  RRCF   x71,F
3BE4:  RRCF   x70,F
3BE6:  MOVLW  3F
3BE8:  ANDWF  x71,F
.................... 					output_low(DAC1);						//select course DAC 
3BEA:  BCF    F95.1
3BEC:  BCF    F8C.1
.................... 					spi_write((make8(course,1)&0x0f)|0x10);	//send high part 
3BEE:  MOVF   x71,W
3BF0:  ANDLW  0F
3BF2:  IORLW  10
3BF4:  MOVWF  x86
3BF6:  MOVF   FC9,W
3BF8:  MOVFF  586,FC9
3BFC:  RRCF   FC7,W
3BFE:  BNC   3BFC
.................... 					spi_write(make8(course,0));				//send low part 
3C00:  MOVFF  570,586
3C04:  MOVF   FC9,W
3C06:  MOVFF  570,FC9
3C0A:  RRCF   FC7,W
3C0C:  BNC   3C0A
.................... 					output_high(DAC1);						//deselect 
3C0E:  BCF    F95.1
3C10:  BSF    F8C.1
.................... 					//wait for sync 
.................... 					//not imlem yet!!! 
.................... 					//read ADC 
.................... 					ADC0=read_adc(ADC_READ_ONLY); 
3C12:  BTFSC  FC2.1
3C14:  BRA    3C12
3C16:  MOVFF  FC3,572
3C1A:  MOVFF  FC4,573
.................... 					//trigg LDAC 
.................... 					output_low(LDAC);						//send DAC 
3C1E:  BCF    F92.7
3C20:  BCF    F89.7
.................... 					output_high(LDAC);						//strobe 
3C22:  BCF    F92.7
3C24:  BSF    F89.7
.................... 					//meaning 
.................... 					Wrk0-=data_filt0[iWin];	//calc new sum mean val 
3C26:  BCF    FD8.0
3C28:  MOVLB  3
3C2A:  RLCF   xE5,W
3C2C:  CLRF   03
3C2E:  ADDLW  19
3C30:  MOVWF  FE9
3C32:  MOVLW  00
3C34:  ADDWFC 03,W
3C36:  MOVWF  FEA
3C38:  MOVFF  FEC,03
3C3C:  MOVF   FED,F
3C3E:  MOVF   FEF,W
3C40:  MOVLB  5
3C42:  SUBWF  x74,F
3C44:  MOVF   03,W
3C46:  SUBWFB x75,F
.................... 					Wrk0+=ADC0; 
3C48:  MOVF   x72,W
3C4A:  ADDWF  x74,F
3C4C:  MOVF   x73,W
3C4E:  ADDWFC x75,F
.................... 					data_filt0[iWin]=ADC0; 
3C50:  BCF    FD8.0
3C52:  MOVLB  3
3C54:  RLCF   xE5,W
3C56:  CLRF   03
3C58:  ADDLW  19
3C5A:  MOVWF  FE9
3C5C:  MOVLW  00
3C5E:  ADDWFC 03,W
3C60:  MOVWF  FEA
3C62:  MOVFF  573,FEC
3C66:  MOVF   FED,F
3C68:  MOVFF  572,FEF
.................... 					//next filter value 
.................... 					if(iWin==0){ 
3C6C:  MOVF   xE5,F
3C6E:  BNZ   3C78
.................... 						iWin=FWDT; 
3C70:  MOVFF  3C3,3E5
.................... 						iWin--; 
3C74:  DECF   xE5,F
.................... 						}else	iWin--; 
3C76:  BRA    3C7A
3C78:  DECF   xE5,F
.................... 					//calc mean value 
.................... 					data_mean0=Wrk0>>6; 
3C7A:  MOVLB  5
3C7C:  RRCF   x75,W
3C7E:  MOVLB  0
3C80:  MOVWF  x9A
3C82:  MOVLB  5
3C84:  RRCF   x74,W
3C86:  MOVLB  0
3C88:  MOVWF  x99
3C8A:  RRCF   x9A,F
3C8C:  RRCF   x99,F
3C8E:  RRCF   x9A,F
3C90:  RRCF   x99,F
3C92:  RRCF   x9A,F
3C94:  RRCF   x99,F
3C96:  RRCF   x9A,F
3C98:  RRCF   x99,F
3C9A:  RRCF   x9A,F
3C9C:  RRCF   x99,F
3C9E:  MOVLW  03
3CA0:  ANDWF  x9A,F
.................... 					Sum+=data_mean0; 
3CA2:  MOVF   x99,W
3CA4:  MOVLB  5
3CA6:  ADDWF  x7B,F
3CA8:  MOVLB  0
3CAA:  MOVF   x9A,W
3CAC:  MOVLB  5
3CAE:  ADDWFC x7C,F
3CB0:  MOVLW  00
3CB2:  ADDWFC x7D,F
3CB4:  ADDWFC x7E,F
.................... 					//extremum 
.................... 					//estim max val 
.................... 					if(data_mean0>maxRise0){ 
3CB6:  MOVLB  0
3CB8:  MOVF   x9C,W
3CBA:  SUBWF  x9A,W
3CBC:  BNC   3CD6
3CBE:  BNZ   3CC6
3CC0:  MOVF   x99,W
3CC2:  SUBWF  x9B,W
3CC4:  BC    3CD6
.................... 						iMaxRise0=StorAddr; 
3CC6:  MOVFF  579,9E
3CCA:  MOVFF  578,9D
.................... 						maxRise0=data_mean0; 
3CCE:  MOVFF  9A,9C
3CD2:  MOVFF  99,9B
.................... 						}; 
.................... 					StorAddr++; 
3CD6:  MOVLB  5
3CD8:  INCF   x78,F
3CDA:  BTFSC  FD8.2
3CDC:  INCF   x79,F
.................... 					//beta measuring 
.................... 					if (data_mean0>BetTrsh)	bet_cur++; 
3CDE:  MOVF   x82,W
3CE0:  MOVLB  0
3CE2:  SUBWF  x9A,W
3CE4:  BNC   3CFE
3CE6:  BNZ   3CF6
3CE8:  MOVF   x99,W
3CEA:  MOVLB  5
3CEC:  SUBWF  x81,W
3CEE:  BTFSS  FD8.0
3CF0:  BRA    3CF6
3CF2:  MOVLB  0
3CF4:  BRA    3CFE
3CF6:  MOVLB  5
3CF8:  INCF   x83,F
3CFA:  BTFSC  FD8.2
3CFC:  INCF   x84,F
.................... 					};	 
3CFE:  MOVLB  5
3D00:  INCF   x6A,F
3D02:  BTFSC  FD8.2
3D04:  INCF   x6B,F
3D06:  BRA    3BA8
.................... 					 
.................... //=======================================================================================================														 
.................... 				//falling saw part 
.................... 				output_low(STAT); 
3D08:  BCF    F94.0
3D0A:  BCF    F8B.0
.................... 				MaxCycles=TAQ>>1; 
3D0C:  BCF    FD8.0
3D0E:  MOVLB  3
3D10:  RRCF   xC2,W
3D12:  MOVLB  5
3D14:  MOVWF  x6D
3D16:  MOVLB  3
3D18:  RRCF   xC1,W
3D1A:  MOVLB  5
3D1C:  MOVWF  x6C
.................... 				for(CycleCounter=0; CycleCounter<MaxCycles; CycleCounter++){ 
3D1E:  CLRF   x6B
3D20:  CLRF   x6A
3D22:  MOVF   x6B,W
3D24:  SUBWF  x6D,W
3D26:  BTFSS  FD8.0
3D28:  BRA    3E82
3D2A:  BNZ   3D34
3D2C:  MOVF   x6C,W
3D2E:  SUBWF  x6A,W
3D30:  BTFSC  FD8.0
3D32:  BRA    3E82
.................... 					restart_wdt(); 
3D34:  CLRWDT
.................... 					//start ADC conv 
.................... 					read_adc(ADC_START_ONLY);	//start conversion 
3D36:  BSF    FC2.1
.................... 					//estim next level 
.................... 					SawLevel-=SawStep; 
3D38:  MOVLB  3
3D3A:  MOVF   xD3,W
3D3C:  SUBWF  xCD,F
3D3E:  MOVF   xD4,W
3D40:  SUBWFB xCE,F
3D42:  MOVF   xD5,W
3D44:  SUBWFB xCF,F
3D46:  MOVF   xD6,W
3D48:  SUBWFB xD0,F
.................... 					//transfer new DAC value 
.................... 					//fine part 
.................... //					output_low(DAC0);						//select fine DAC 
.................... //					spi_write((make8(SawLevel,1)&0x03)|0x10);	//send high part 
.................... //					spi_write(make8(SawLevel,0));				//send low part 
.................... //					output_high(DAC0);						//deselect 
.................... 					//course part 
.................... 					course=(make16(make8(SawLevel,2),make8(SawLevel,1)))>>2; 
3D4A:  MOVFF  3CF,589
3D4E:  MOVFF  3CE,588
3D52:  MOVLB  5
3D54:  RRCF   x89,W
3D56:  MOVWF  x71
3D58:  RRCF   x88,W
3D5A:  MOVWF  x70
3D5C:  RRCF   x71,F
3D5E:  RRCF   x70,F
3D60:  MOVLW  3F
3D62:  ANDWF  x71,F
.................... 					output_low(DAC1);						//select course DAC 
3D64:  BCF    F95.1
3D66:  BCF    F8C.1
.................... 					spi_write((make8(course,1)&0x0f)|0x10);	//send high part 
3D68:  MOVF   x71,W
3D6A:  ANDLW  0F
3D6C:  IORLW  10
3D6E:  MOVWF  x86
3D70:  MOVF   FC9,W
3D72:  MOVFF  586,FC9
3D76:  RRCF   FC7,W
3D78:  BNC   3D76
.................... 					spi_write(make8(course,0));				//send low part 
3D7A:  MOVFF  570,586
3D7E:  MOVF   FC9,W
3D80:  MOVFF  570,FC9
3D84:  RRCF   FC7,W
3D86:  BNC   3D84
.................... 					output_high(DAC1);						//deselect 
3D88:  BCF    F95.1
3D8A:  BSF    F8C.1
.................... 					//wait for sync 
.................... 					//not imlem yet!!! 
.................... 					//read ADC 
.................... 					ADC0=read_adc(ADC_READ_ONLY); 
3D8C:  BTFSC  FC2.1
3D8E:  BRA    3D8C
3D90:  MOVFF  FC3,572
3D94:  MOVFF  FC4,573
.................... 					//trigg LDAC 
.................... 					output_low(LDAC);						//send DAC 
3D98:  BCF    F92.7
3D9A:  BCF    F89.7
.................... 					output_high(LDAC);						//strobe 
3D9C:  BCF    F92.7
3D9E:  BSF    F89.7
.................... 					//meaning 
.................... 					Wrk0-=data_filt0[iWin];	//calc new sum mean val 
3DA0:  BCF    FD8.0
3DA2:  MOVLB  3
3DA4:  RLCF   xE5,W
3DA6:  CLRF   03
3DA8:  ADDLW  19
3DAA:  MOVWF  FE9
3DAC:  MOVLW  00
3DAE:  ADDWFC 03,W
3DB0:  MOVWF  FEA
3DB2:  MOVFF  FEC,03
3DB6:  MOVF   FED,F
3DB8:  MOVF   FEF,W
3DBA:  MOVLB  5
3DBC:  SUBWF  x74,F
3DBE:  MOVF   03,W
3DC0:  SUBWFB x75,F
.................... 					Wrk0+=ADC0; 
3DC2:  MOVF   x72,W
3DC4:  ADDWF  x74,F
3DC6:  MOVF   x73,W
3DC8:  ADDWFC x75,F
.................... 					data_filt0[iWin]=ADC0; 
3DCA:  BCF    FD8.0
3DCC:  MOVLB  3
3DCE:  RLCF   xE5,W
3DD0:  CLRF   03
3DD2:  ADDLW  19
3DD4:  MOVWF  FE9
3DD6:  MOVLW  00
3DD8:  ADDWFC 03,W
3DDA:  MOVWF  FEA
3DDC:  MOVFF  573,FEC
3DE0:  MOVF   FED,F
3DE2:  MOVFF  572,FEF
.................... 					//next filter value 
.................... 					if(iWin==0){ 
3DE6:  MOVF   xE5,F
3DE8:  BNZ   3DF2
.................... 						iWin=FWDT; 
3DEA:  MOVFF  3C3,3E5
.................... 						iWin--; 
3DEE:  DECF   xE5,F
....................  						}else	iWin--; 
3DF0:  BRA    3DF4
3DF2:  DECF   xE5,F
.................... 					//calc mean value 
.................... 					data_mean0=Wrk0>>6; 
3DF4:  MOVLB  5
3DF6:  RRCF   x75,W
3DF8:  MOVLB  0
3DFA:  MOVWF  x9A
3DFC:  MOVLB  5
3DFE:  RRCF   x74,W
3E00:  MOVLB  0
3E02:  MOVWF  x99
3E04:  RRCF   x9A,F
3E06:  RRCF   x99,F
3E08:  RRCF   x9A,F
3E0A:  RRCF   x99,F
3E0C:  RRCF   x9A,F
3E0E:  RRCF   x99,F
3E10:  RRCF   x9A,F
3E12:  RRCF   x99,F
3E14:  RRCF   x9A,F
3E16:  RRCF   x99,F
3E18:  MOVLW  03
3E1A:  ANDWF  x9A,F
.................... 					Sum+=data_mean0; 
3E1C:  MOVF   x99,W
3E1E:  MOVLB  5
3E20:  ADDWF  x7B,F
3E22:  MOVLB  0
3E24:  MOVF   x9A,W
3E26:  MOVLB  5
3E28:  ADDWFC x7C,F
3E2A:  MOVLW  00
3E2C:  ADDWFC x7D,F
3E2E:  ADDWFC x7E,F
.................... 					//extremum 
.................... 					//estim max val 
.................... 					if(data_mean0>maxFall0){ 
3E30:  MOVLB  0
3E32:  MOVF   xA0,W
3E34:  SUBWF  x9A,W
3E36:  BNC   3E50
3E38:  BNZ   3E40
3E3A:  MOVF   x99,W
3E3C:  SUBWF  x9F,W
3E3E:  BC    3E50
.................... 						iMaxFall0=StorAddr; 
3E40:  MOVFF  579,A2
3E44:  MOVFF  578,A1
.................... 						maxFall0=data_mean0; 
3E48:  MOVFF  9A,A0
3E4C:  MOVFF  99,9F
.................... 						}; 
.................... 					StorAddr++; 
3E50:  MOVLB  5
3E52:  INCF   x78,F
3E54:  BTFSC  FD8.2
3E56:  INCF   x79,F
.................... 					//beta measuring 
.................... 					if (data_mean0>BetTrsh)	bet_cur++; 
3E58:  MOVF   x82,W
3E5A:  MOVLB  0
3E5C:  SUBWF  x9A,W
3E5E:  BNC   3E78
3E60:  BNZ   3E70
3E62:  MOVF   x99,W
3E64:  MOVLB  5
3E66:  SUBWF  x81,W
3E68:  BTFSS  FD8.0
3E6A:  BRA    3E70
3E6C:  MOVLB  0
3E6E:  BRA    3E78
3E70:  MOVLB  5
3E72:  INCF   x83,F
3E74:  BTFSC  FD8.2
3E76:  INCF   x84,F
.................... 					}; 
3E78:  MOVLB  5
3E7A:  INCF   x6A,F
3E7C:  BTFSC  FD8.2
3E7E:  INCF   x6B,F
3E80:  BRA    3D22
.................... //========================================== 
.................... 					//final part					 
.................... 				for(CycleCounter=0; CycleCounter<FiltFact; CycleCounter++){ 
3E82:  CLRF   x6B
3E84:  CLRF   x6A
3E86:  MOVF   x6B,W
3E88:  SUBWF  x77,W
3E8A:  BTFSS  FD8.0
3E8C:  BRA    3F80
3E8E:  BNZ   3E98
3E90:  MOVF   x76,W
3E92:  SUBWF  x6A,W
3E94:  BTFSC  FD8.0
3E96:  BRA    3F80
.................... 					restart_wdt(); 
3E98:  CLRWDT
.................... 					ADC0=0; 
3E9A:  CLRF   x73
3E9C:  CLRF   x72
.................... 					//meaning 
.................... 					Wrk0-=data_filt0[iWin];	//calc new sum mean val 
3E9E:  BCF    FD8.0
3EA0:  MOVLB  3
3EA2:  RLCF   xE5,W
3EA4:  CLRF   03
3EA6:  ADDLW  19
3EA8:  MOVWF  FE9
3EAA:  MOVLW  00
3EAC:  ADDWFC 03,W
3EAE:  MOVWF  FEA
3EB0:  MOVFF  FEC,03
3EB4:  MOVF   FED,F
3EB6:  MOVF   FEF,W
3EB8:  MOVLB  5
3EBA:  SUBWF  x74,F
3EBC:  MOVF   03,W
3EBE:  SUBWFB x75,F
.................... 					Wrk0+=ADC0; 
3EC0:  MOVF   x72,W
3EC2:  ADDWF  x74,F
3EC4:  MOVF   x73,W
3EC6:  ADDWFC x75,F
.................... 					data_filt0[iWin]=ADC0; 
3EC8:  BCF    FD8.0
3ECA:  MOVLB  3
3ECC:  RLCF   xE5,W
3ECE:  CLRF   03
3ED0:  ADDLW  19
3ED2:  MOVWF  FE9
3ED4:  MOVLW  00
3ED6:  ADDWFC 03,W
3ED8:  MOVWF  FEA
3EDA:  MOVFF  573,FEC
3EDE:  MOVF   FED,F
3EE0:  MOVFF  572,FEF
.................... 					//next filter value 
.................... 					if(iWin==0){ 
3EE4:  MOVF   xE5,F
3EE6:  BNZ   3EF0
.................... 						iWin=FWDT; 
3EE8:  MOVFF  3C3,3E5
.................... 						iWin--; 
3EEC:  DECF   xE5,F
.................... 						}else	iWin--; 
3EEE:  BRA    3EF2
3EF0:  DECF   xE5,F
.................... 					//calc mean value 
.................... 					data_mean0=Wrk0>>6; 
3EF2:  MOVLB  5
3EF4:  RRCF   x75,W
3EF6:  MOVLB  0
3EF8:  MOVWF  x9A
3EFA:  MOVLB  5
3EFC:  RRCF   x74,W
3EFE:  MOVLB  0
3F00:  MOVWF  x99
3F02:  RRCF   x9A,F
3F04:  RRCF   x99,F
3F06:  RRCF   x9A,F
3F08:  RRCF   x99,F
3F0A:  RRCF   x9A,F
3F0C:  RRCF   x99,F
3F0E:  RRCF   x9A,F
3F10:  RRCF   x99,F
3F12:  RRCF   x9A,F
3F14:  RRCF   x99,F
3F16:  MOVLW  03
3F18:  ANDWF  x9A,F
.................... 					Sum+=data_mean0; 
3F1A:  MOVF   x99,W
3F1C:  MOVLB  5
3F1E:  ADDWF  x7B,F
3F20:  MOVLB  0
3F22:  MOVF   x9A,W
3F24:  MOVLB  5
3F26:  ADDWFC x7C,F
3F28:  MOVLW  00
3F2A:  ADDWFC x7D,F
3F2C:  ADDWFC x7E,F
.................... 					//extremum 
.................... 					//estim max val 
.................... 					if(data_mean0>maxFall0){ 
3F2E:  MOVLB  0
3F30:  MOVF   xA0,W
3F32:  SUBWF  x9A,W
3F34:  BNC   3F4E
3F36:  BNZ   3F3E
3F38:  MOVF   x99,W
3F3A:  SUBWF  x9F,W
3F3C:  BC    3F4E
.................... 						iMaxFall0=StorAddr; 
3F3E:  MOVFF  579,A2
3F42:  MOVFF  578,A1
.................... 						maxFall0=data_mean0; 
3F46:  MOVFF  9A,A0
3F4A:  MOVFF  99,9F
.................... 						}; 
.................... 					StorAddr++; 
3F4E:  MOVLB  5
3F50:  INCF   x78,F
3F52:  BTFSC  FD8.2
3F54:  INCF   x79,F
.................... 					//beta measuring 
.................... 					if (data_mean0>BetTrsh)	bet_cur++; 
3F56:  MOVF   x82,W
3F58:  MOVLB  0
3F5A:  SUBWF  x9A,W
3F5C:  BNC   3F76
3F5E:  BNZ   3F6E
3F60:  MOVF   x99,W
3F62:  MOVLB  5
3F64:  SUBWF  x81,W
3F66:  BTFSS  FD8.0
3F68:  BRA    3F6E
3F6A:  MOVLB  0
3F6C:  BRA    3F76
3F6E:  MOVLB  5
3F70:  INCF   x83,F
3F72:  BTFSC  FD8.2
3F74:  INCF   x84,F
.................... 					}; 
3F76:  MOVLB  5
3F78:  INCF   x6A,F
3F7A:  BTFSC  FD8.2
3F7C:  INCF   x6B,F
3F7E:  BRA    3E86
.................... 				DaqState=DaqScale; 
3F80:  MOVLW  03
3F82:  MOVLB  3
3F84:  MOVWF  xF4
.................... 				break; 
3F86:  BRA    4370
.................... //======================================================================================== 
.................... 			case	DaqScale: 
.................... 				//scaling & result storing 
.................... 				//temperature 
.................... 				Termometer(); 
3F88:  CALL   26C4
.................... 				restart_wdt(); 
3F8C:  CLRWDT
.................... 				//regulator 
.................... 				if(T_GEN>(TG_CAL+Hst)){	//if temperature above rated & histeresis 
3F8E:  MOVLB  3
3F90:  MOVF   xF2,W
3F92:  ADDWF  xDF,W
3F94:  MOVWF  01
3F96:  MOVF   xF3,W
3F98:  ADDWFC xE0,W
3F9A:  MOVWF  03
3F9C:  MOVF   01,W
3F9E:  BTFSC  xCA.7
3FA0:  BRA    3FB4
3FA2:  MOVF   03,W
3FA4:  SUBWF  xCA,W
3FA6:  BNC   3FB4
3FA8:  BNZ   3FB0
3FAA:  MOVF   xC9,W
3FAC:  SUBWF  01,W
3FAE:  BC    3FB4
.................... 					output_low(TERMO);				//off heater 
3FB0:  BCF    F96.1
3FB2:  BCF    F8D.1
.................... 				}; 
.................... 				if(T_GEN<(TG_CAL-Hst)){	//if temperature below rated & histeresis 
3FB4:  MOVF   xF2,W
3FB6:  SUBWF  xDF,W
3FB8:  MOVWF  00
3FBA:  MOVF   xF3,W
3FBC:  SUBWFB xE0,W
3FBE:  MOVWF  03
3FC0:  MOVFF  00,01
3FC4:  BTFSC  xCA.7
3FC6:  BRA    3FD6
3FC8:  MOVF   xCA,W
3FCA:  SUBWF  03,W
3FCC:  BNC   3FDA
3FCE:  BNZ   3FD6
3FD0:  MOVF   01,W
3FD2:  SUBWF  xC9,W
3FD4:  BC    3FDA
.................... 					output_high(TERMO);				//on heater 
3FD6:  BCF    F96.1
3FD8:  BSF    F8D.1
.................... 				}; 
.................... 				 
.................... 				//Mx estimation 
.................... 				Mx=(int16)(Sum>>11); 
3FDA:  MOVLB  5
3FDC:  RRCF   x7E,W
3FDE:  MOVWF  02
3FE0:  RRCF   x7D,W
3FE2:  MOVWF  01
3FE4:  RRCF   x7C,W
3FE6:  MOVWF  00
3FE8:  RRCF   02,F
3FEA:  RRCF   01,F
3FEC:  RRCF   00,F
3FEE:  RRCF   02,F
3FF0:  RRCF   01,F
3FF2:  RRCF   00,F
3FF4:  MOVLW  1F
3FF6:  ANDWF  02,F
3FF8:  MOVFF  01,580
3FFC:  MOVFF  00,57F
.................... 				//amplitude - alpha 
.................... 				alp_buf0[iGam]=(MaxFall0+MaxRise0)>>1; 
4000:  BCF    FD8.0
4002:  MOVLB  3
4004:  RLCF   xC8,W
4006:  CLRF   03
4008:  ADDLW  A3
400A:  MOVWF  FE9
400C:  MOVLW  00
400E:  ADDWFC 03,W
4010:  MOVWF  FEA
4012:  MOVLB  0
4014:  MOVF   x9B,W
4016:  ADDWF  x9F,W
4018:  MOVLB  5
401A:  MOVWF  x88
401C:  MOVLB  0
401E:  MOVF   x9C,W
4020:  ADDWFC xA0,W
4022:  MOVLB  5
4024:  MOVWF  x89
4026:  BCF    FD8.0
4028:  RRCF   x89,W
402A:  MOVWF  03
402C:  RRCF   x88,W
402E:  MOVWF  FEF
4030:  MOVFF  03,FEC
.................... 				//treshold estimation 
.................... 				BetTrsh=(int16)((Mx+alp_buf0[iGam])>>1); 
4034:  BCF    FD8.0
4036:  MOVLB  3
4038:  RLCF   xC8,W
403A:  CLRF   03
403C:  ADDLW  A3
403E:  MOVWF  FE9
4040:  MOVLW  00
4042:  ADDWFC 03,W
4044:  MOVWF  FEA
4046:  MOVFF  FEC,03
404A:  MOVF   FED,F
404C:  MOVF   FEF,W
404E:  MOVLB  5
4050:  ADDWF  x7F,W
4052:  MOVWF  x86
4054:  MOVF   03,W
4056:  ADDWFC x80,W
4058:  MOVWF  x87
405A:  BCF    FD8.0
405C:  RRCF   x87,W
405E:  MOVWF  x82
4060:  RRCF   x86,W
4062:  MOVWF  x81
.................... 				//pulse width 
.................... 				bet_buf0[iGam]=bet_cur; 
4064:  BCF    FD8.0
4066:  MOVLB  3
4068:  RLCF   xC8,W
406A:  CLRF   03
406C:  ADDLW  A3
406E:  MOVWF  FE9
4070:  MOVLW  01
4072:  ADDWFC 03,W
4074:  MOVWF  FEA
4076:  MOVFF  584,FEC
407A:  MOVF   FED,F
407C:  MOVFF  583,FEF
.................... 				//gamma 
.................... 				iGamma0=iMaxFall0-iMaxRise0; 
4080:  MOVLB  0
4082:  MOVF   x9D,W
4084:  SUBWF  xA1,W
4086:  MOVLB  3
4088:  MOVWF  xA7
408A:  MOVLB  0
408C:  MOVF   x9E,W
408E:  SUBWFB xA2,W
4090:  MOVLB  3
4092:  MOVWF  xA8
.................... 				//gamma meaning 
.................... 				gam_buf0[iGam]=iGamma0; //meaning buffer 
4094:  BCF    FD8.0
4096:  RLCF   xC8,W
4098:  CLRF   03
409A:  ADDLW  A3
409C:  MOVWF  FE9
409E:  MOVLW  02
40A0:  ADDWFC 03,W
40A2:  MOVWF  FEA
40A4:  MOVFF  3A8,FEC
40A8:  MOVF   FED,F
40AA:  MOVFF  3A7,FEF
.................... 				//next index 
.................... 				if(iGam==0){ 
40AE:  MOVF   xC8,F
40B0:  BNZ   40BA
.................... 					iGam=PCOUNT-1; 
40B2:  MOVLW  01
40B4:  SUBWF  xC5,W
40B6:  MOVWF  xC8
.................... 					}else iGam--; 
40B8:  BRA    40BC
40BA:  DECF   xC8,F
.................... 				//median 
.................... 				//copy arrays				 
.................... //				memcpy(alp_sort,alp_buf0,sizeof(alp_sort)); 
.................... //				memcpy(bet_sort,bet_buf0,sizeof(bet_sort)); 
.................... //				memcpy(gam_sort,gam_buf0,sizeof(gam_sort)); 
.................... 				 
.................... 				AlpSum=0; 
40BC:  CLRF   xE9
40BE:  CLRF   xE8
40C0:  CLRF   xE7
40C2:  CLRF   xE6
.................... 				BetSum=0; 
40C4:  CLRF   xED
40C6:  CLRF   xEC
40C8:  CLRF   xEB
40CA:  CLRF   xEA
.................... 				GamSum=0; 
40CC:  CLRF   xF1
40CE:  CLRF   xF0
40D0:  CLRF   xEF
40D2:  CLRF   xEE
....................  
.................... 				for (cnt=0; cnt<PCOUNT;cnt++){ 
40D4:  MOVLB  5
40D6:  CLRF   x6F
40D8:  CLRF   x6E
40DA:  MOVF   x6F,W
40DC:  MOVLB  3
40DE:  SUBWF  xC6,W
40E0:  BNC   418A
40E2:  BNZ   40F4
40E4:  MOVF   xC5,W
40E6:  MOVLB  5
40E8:  SUBWF  x6E,W
40EA:  BTFSS  FD8.0
40EC:  BRA    40F2
40EE:  MOVLB  3
40F0:  BRA    418A
40F2:  MOVLB  3
.................... 					AlpSum+=alp_buf0[cnt]; 
40F4:  BCF    FD8.0
40F6:  MOVLB  5
40F8:  RLCF   x6E,W
40FA:  MOVWF  02
40FC:  RLCF   x6F,W
40FE:  MOVWF  03
4100:  MOVF   02,W
4102:  ADDLW  A3
4104:  MOVWF  FE9
4106:  MOVLW  00
4108:  ADDWFC 03,W
410A:  MOVWF  FEA
410C:  MOVFF  FEC,03
4110:  MOVF   FED,F
4112:  MOVF   FEF,W
4114:  MOVLB  3
4116:  ADDWF  xE6,F
4118:  MOVF   03,W
411A:  ADDWFC xE7,F
411C:  MOVLW  00
411E:  ADDWFC xE8,F
4120:  ADDWFC xE9,F
.................... 					BetSum+=bet_buf0[cnt]; 
4122:  BCF    FD8.0
4124:  MOVLB  5
4126:  RLCF   x6E,W
4128:  MOVWF  02
412A:  RLCF   x6F,W
412C:  MOVWF  03
412E:  MOVF   02,W
4130:  ADDLW  A3
4132:  MOVWF  FE9
4134:  MOVLW  01
4136:  ADDWFC 03,W
4138:  MOVWF  FEA
413A:  MOVFF  FEC,03
413E:  MOVF   FED,F
4140:  MOVF   FEF,W
4142:  MOVLB  3
4144:  ADDWF  xEA,F
4146:  MOVF   03,W
4148:  ADDWFC xEB,F
414A:  MOVLW  00
414C:  ADDWFC xEC,F
414E:  ADDWFC xED,F
.................... 					GamSum+=gam_buf0[cnt]; 
4150:  BCF    FD8.0
4152:  MOVLB  5
4154:  RLCF   x6E,W
4156:  MOVWF  02
4158:  RLCF   x6F,W
415A:  MOVWF  03
415C:  MOVF   02,W
415E:  ADDLW  A3
4160:  MOVWF  FE9
4162:  MOVLW  02
4164:  ADDWFC 03,W
4166:  MOVWF  FEA
4168:  MOVFF  FEC,03
416C:  MOVF   FED,F
416E:  MOVF   FEF,W
4170:  MOVLB  3
4172:  ADDWF  xEE,F
4174:  MOVF   03,W
4176:  ADDWFC xEF,F
4178:  MOVLW  00
417A:  ADDWFC xF0,F
417C:  ADDWFC xF1,F
.................... 				}; 
417E:  MOVLB  5
4180:  INCF   x6E,F
4182:  BTFSC  FD8.2
4184:  INCF   x6F,F
4186:  BRA    40DA
4188:  MOVLB  3
.................... 				//sorting 
.................... 				//do{ 
.................... 				//	changed=0;	//reset flag 
.................... 				//	for(cnt=1; cnt<PCOUNT; cnt++){ 
.................... 						//alpha 
.................... 				//		if(alp_sort[cnt-1]>alp_sort[cnt]){ 
.................... 				//			restart_wdt(); 
.................... 				//			changed=1;	//change exist 
.................... 				//			Wrk0=alp_sort[cnt]; 
.................... 				//			alp_sort[cnt]=alp_sort[cnt-1]; 
.................... 				//			alp_sort[cnt-1]=Wrk0; 
.................... 				//			}; 
.................... 						//beta 
.................... 				//		if(bet_sort[cnt-1]>bet_sort[cnt]){ 
.................... 				//			restart_wdt(); 
.................... 				//			changed=1;	//change exist 
.................... 				//			Wrk0=bet_sort[cnt]; 
.................... 				//			bet_sort[cnt]=bet_sort[cnt-1]; 
.................... 				//			bet_sort[cnt-1]=Wrk0; 
.................... 				//			}; 
.................... 						//gamma 
.................... 				//		if(gam_sort[cnt-1]>gam_sort[cnt]){ 
.................... 				//			restart_wdt(); 
.................... 				//			changed=1;	//change exist 
.................... 				//			Wrk0=gam_sort[cnt]; 
.................... 				//			gam_sort[cnt]=gam_sort[cnt-1]; 
.................... 				//			gam_sort[cnt-1]=Wrk0; 
.................... 				//			}; 
.................... 				//		}; 
.................... 				//	}while(changed); 
.................... 				//median estimation 
.................... 				//Wrk0=PCOUNT>>1;	//div 2 
.................... 				//alpha 
.................... 				//Amplitude0=((int16)(alp_sort[Wrk0]*2.4414))>>(AmpCoef0); 
.................... 				Wrk0=(int16)(AlpSum>>7); //divide by 128 
418A:  RRCF   xE9,W
418C:  MOVWF  03
418E:  RRCF   xE8,W
4190:  MOVWF  02
4192:  RRCF   xE7,W
4194:  MOVWF  01
4196:  RRCF   xE6,W
4198:  MOVWF  00
419A:  RRCF   03,F
419C:  RRCF   02,F
419E:  RRCF   01,F
41A0:  RRCF   00,F
41A2:  RRCF   03,F
41A4:  RRCF   02,F
41A6:  RRCF   01,F
41A8:  RRCF   00,F
41AA:  RRCF   03,F
41AC:  RRCF   02,F
41AE:  RRCF   01,F
41B0:  RRCF   00,F
41B2:  RRCF   03,F
41B4:  RRCF   02,F
41B6:  RRCF   01,F
41B8:  RRCF   00,F
41BA:  RRCF   03,F
41BC:  RRCF   02,F
41BE:  RRCF   01,F
41C0:  RRCF   00,F
41C2:  RRCF   03,F
41C4:  RRCF   02,F
41C6:  RRCF   01,F
41C8:  RRCF   00,F
41CA:  MOVLW  01
41CC:  ANDWF  03,F
41CE:  MOVFF  01,575
41D2:  MOVFF  00,574
.................... 				Amplitude0=((int16)((Wrk0*2.4414)-0))>>(AmpCoef0); 
41D6:  MOVFF  575,58B
41DA:  MOVFF  574,58A
41DE:  MOVLB  0
41E0:  CALL   2932
41E4:  MOVFF  03,58D
41E8:  MOVFF  02,58C
41EC:  MOVFF  01,58B
41F0:  MOVFF  00,58A
41F4:  MOVLW  E6
41F6:  MOVLB  5
41F8:  MOVWF  x91
41FA:  MOVLW  3F
41FC:  MOVWF  x90
41FE:  MOVLW  1C
4200:  MOVWF  x8F
4202:  MOVLW  80
4204:  MOVWF  x8E
4206:  MOVLB  0
4208:  CALL   2592
420C:  MOVFF  00,586
4210:  MOVFF  01,587
4214:  MOVFF  02,588
4218:  MOVFF  03,589
421C:  BSF    FD8.1
421E:  MOVFF  03,58D
4222:  MOVFF  02,58C
4226:  MOVFF  01,58B
422A:  MOVFF  00,58A
422E:  MOVLB  5
4230:  CLRF   x91
4232:  CLRF   x90
4234:  CLRF   x8F
4236:  CLRF   x8E
4238:  MOVLB  0
423A:  GOTO   2B08
423E:  MOVFF  03,58B
4242:  MOVFF  02,58A
4246:  MOVFF  01,589
424A:  MOVFF  00,588
424E:  CALL   2688
4252:  MOVFF  02,587
4256:  MOVFF  01,586
425A:  MOVFF  02,3A4
425E:  MOVFF  01,3A3
4262:  MOVLB  3
4264:  MOVF   xAB,W
4266:  MOVWF  00
4268:  BZ    4274
426A:  BCF    FD8.0
426C:  RRCF   xA4,F
426E:  RRCF   xA3,F
4270:  DECFSZ 00,F
4272:  BRA    426A
.................... 				//beta 
.................... 				//PulseWdt0=bet_sort[Wrk0]+bet_sort[Wrk0]>>2; 
.................... 				Wrk0=(int16)(BetSum>>7); //divide by 128 
4274:  RRCF   xED,W
4276:  MOVWF  03
4278:  RRCF   xEC,W
427A:  MOVWF  02
427C:  RRCF   xEB,W
427E:  MOVWF  01
4280:  RRCF   xEA,W
4282:  MOVWF  00
4284:  RRCF   03,F
4286:  RRCF   02,F
4288:  RRCF   01,F
428A:  RRCF   00,F
428C:  RRCF   03,F
428E:  RRCF   02,F
4290:  RRCF   01,F
4292:  RRCF   00,F
4294:  RRCF   03,F
4296:  RRCF   02,F
4298:  RRCF   01,F
429A:  RRCF   00,F
429C:  RRCF   03,F
429E:  RRCF   02,F
42A0:  RRCF   01,F
42A2:  RRCF   00,F
42A4:  RRCF   03,F
42A6:  RRCF   02,F
42A8:  RRCF   01,F
42AA:  RRCF   00,F
42AC:  RRCF   03,F
42AE:  RRCF   02,F
42B0:  RRCF   01,F
42B2:  RRCF   00,F
42B4:  MOVLW  01
42B6:  ANDWF  03,F
42B8:  MOVFF  01,575
42BC:  MOVFF  00,574
.................... 				PulseWdt0=(Wrk0<<0)+(Wrk0>>2); //mult by 1.25 
42C0:  MOVLB  5
42C2:  RRCF   x75,W
42C4:  MOVWF  03
42C6:  RRCF   x74,W
42C8:  MOVWF  02
42CA:  RRCF   03,F
42CC:  RRCF   02,F
42CE:  MOVLW  3F
42D0:  ANDWF  03,F
42D2:  MOVF   02,W
42D4:  ADDWF  x74,W
42D6:  MOVLB  3
42D8:  MOVWF  xA5
42DA:  MOVF   03,W
42DC:  MOVLB  5
42DE:  ADDWFC x75,W
42E0:  MOVLB  3
42E2:  MOVWF  xA6
.................... 				//gamma 
.................... 				//Gamma0=gam_sort[Wrk0]; 
.................... 				Gamma0=(int16)(GamSum>>7); //divide by 128 
42E4:  RRCF   xF1,W
42E6:  MOVWF  03
42E8:  RRCF   xF0,W
42EA:  MOVWF  02
42EC:  RRCF   xEF,W
42EE:  MOVWF  01
42F0:  RRCF   xEE,W
42F2:  MOVWF  00
42F4:  RRCF   03,F
42F6:  RRCF   02,F
42F8:  RRCF   01,F
42FA:  RRCF   00,F
42FC:  RRCF   03,F
42FE:  RRCF   02,F
4300:  RRCF   01,F
4302:  RRCF   00,F
4304:  RRCF   03,F
4306:  RRCF   02,F
4308:  RRCF   01,F
430A:  RRCF   00,F
430C:  RRCF   03,F
430E:  RRCF   02,F
4310:  RRCF   01,F
4312:  RRCF   00,F
4314:  RRCF   03,F
4316:  RRCF   02,F
4318:  RRCF   01,F
431A:  RRCF   00,F
431C:  RRCF   03,F
431E:  RRCF   02,F
4320:  RRCF   01,F
4322:  RRCF   00,F
4324:  MOVLW  01
4326:  ANDWF  03,F
4328:  MOVFF  01,3AA
432C:  MOVFF  00,3A9
.................... 				Gamma0=(Gamma0<<1)+(Gamma0>>1);//multiplying by 2.5 
4330:  BCF    FD8.0
4332:  RLCF   xA9,W
4334:  MOVLB  5
4336:  MOVWF  x86
4338:  MOVLB  3
433A:  RLCF   xAA,W
433C:  MOVLB  5
433E:  MOVWF  x87
4340:  BCF    FD8.0
4342:  MOVLB  3
4344:  RRCF   xAA,W
4346:  MOVWF  03
4348:  RRCF   xA9,W
434A:  MOVLB  5
434C:  ADDWF  x86,W
434E:  MOVLB  3
4350:  MOVWF  xA9
4352:  MOVF   03,W
4354:  MOVLB  5
4356:  ADDWFC x87,W
4358:  MOVLB  3
435A:  MOVWF  xAA
.................... 				//repeat testing 
.................... 				if(OneCycle){ 
435C:  BTFSS  xC7.0
435E:  BRA    4364
.................... 					DaqState=DaqIdle;	//if one cycle  - next-idle 
4360:  CLRF   xF4
.................... 					}else DaqState=DaqStart;//else normal measuring 
4362:  BRA    4368
4364:  MOVLW  01
4366:  MOVWF  xF4
.................... 				output_high(STAT); 
4368:  BCF    F94.0
436A:  BSF    F8B.0
.................... //				Calc();// addition calculations 
.................... 				break;			 
436C:  BRA    4370
436E:  MOVLB  3
.................... 	}; 
.................... 	//		 
.................... 	}; 
4370:  GOTO   37D2
.................... } 
4374:  BRA    4374

Configuration Fuses:
   Word  1: C800   IESO FCMEN INTRC_IO
   Word  2: 0019   NOBROWNOUT WDT1 NOWDT BORV20 NOPUT
   Word  3: 0700   PBADEN CCP2C1 LPT1OSC NOMCLR
   Word  4: 0000   NOSTVREN DEBUG NOLVP NOXINST
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB

   Some fuses have been forced to be compatible with the ICD debugger.

ROM data:
F00000: FC 08 E8 03 01 00 01 00 00 08 80 00 40 00 00 4B 
F00010: 01 00 C4 09 C4 09 B8 0B 00 00 00 00 00 7F 00 00 
F00020: 00 00 00 00 00 00 00 00 
