CCS PCH C Compiler, Version 4.110, 5967               26-дек-15 01:59

               Filename: C:\Projects\MWT-3\SPM3Firmware\spm3.lst

               ROM used: 16514 bytes (52%)
                         Largest free fragment is 15418
               RAM used: 1304 (86%) at main() level
                         1340 (88%) worst case
               Stack:    5 worst case (2 in main + 3 for interrupts)

*
0000:  GOTO   2DFE
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  F9D.0
0056:  GOTO   0060
005A:  BTFSC  F9E.0
005C:  GOTO   1922
0060:  BTFSS  F9D.5
0062:  GOTO   006C
0066:  BTFSC  F9E.5
0068:  GOTO   0370
006C:  MOVFF  0E,00
0070:  MOVFF  0F,01
0074:  MOVFF  10,02
0078:  MOVFF  11,03
007C:  MOVFF  0C,FE9
0080:  MOVFF  07,FEA
0084:  BSF    07.7
0086:  MOVFF  08,FE1
008A:  MOVFF  09,FE2
008E:  MOVFF  0A,FD9
0092:  MOVFF  0B,FDA
0096:  MOVFF  12,FF3
009A:  MOVFF  13,FF4
009E:  MOVFF  14,FFA
00A2:  MOVFF  15,FF5
00A6:  MOVFF  16,FF6
00AA:  MOVFF  17,FF7
00AE:  MOVF   04,W
00B0:  MOVFF  06,FE0
00B4:  MOVFF  05,FD8
00B8:  RETFIE 0
.................... #include "spm3.h" 
.................... #include <18F4520.h> 
.................... //////// Standard Header file for the PIC18F4520 device //////////////// 
.................... #device PIC18F4520 
.................... #list 
....................  
.................... #device ICD=TRUE 
.................... #device adc=10 
.................... #FUSES WDT                      //Watch Dog Timer  
.................... #FUSES WDT1                     //Watch Dog Timer uses 1:1 Postscale 
.................... #FUSES INTRC_IO                 //Internal RC Osc, no CLKOUT 
.................... #FUSES NOPROTECT                //Code not protected from reading 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... //#FUSES BORV20                   //Brownout reset at 2.0V 
.................... #FUSES PUT                      //Power Up Timer 
.................... #FUSES NOCPD                    //No EE protection 
.................... #FUSES STVREN                   //Stack full/underflow will cause reset 
.................... #FUSES NODEBUG                  //No Debug mode for ICD 
.................... #FUSES LVP                      //Low Voltage Programming on B3(PIC16) or B5(PIC18) 
.................... #FUSES NOWRT                    //Program memory not write protected 
.................... #FUSES NOWRTD                   //Data EEPROM not write protected 
.................... #FUSES IESO                     //Internal External Switch Over mode enabled 
.................... #FUSES FCMEN                    //Fail-safe clock monitor enabled 
.................... #FUSES PBADEN                   //PORTB pins are configured as analog input channels on RESET 
.................... #FUSES NOWRTC                   //configuration not registers write protected 
.................... #FUSES NOWRTB                   //Boot block not write protected 
.................... #FUSES NOEBTR                   //Memory not protected from table reads 
.................... #FUSES NOEBTRB                  //Boot block not protected from table reads 
.................... #FUSES NOCPB                    //No Boot Block code protection 
.................... #FUSES LPT1OSC                  //Timer1 configured for low-power operation 
.................... #FUSES NOMCLR                   //Master Clear pin enabled 
.................... #FUSES XINST                    //Extended set extension and Indexed Addressing mode enabled 
....................  
.................... #use delay(clock=32000000,RESTART_WDT) 
*
18CE:  MOVLW  05
18D0:  MOVWF  FEA
18D2:  MOVLW  33
18D4:  MOVWF  FE9
18D6:  MOVF   FEF,W
18D8:  BZ    18FC
18DA:  MOVLW  0A
18DC:  MOVWF  01
18DE:  MOVLW  BF
18E0:  MOVWF  00
18E2:  CLRWDT
18E4:  DECFSZ 00,F
18E6:  BRA    18E2
18E8:  DECFSZ 01,F
18EA:  BRA    18DE
18EC:  MOVLW  5E
18EE:  MOVWF  00
18F0:  DECFSZ 00,F
18F2:  BRA    18F0
18F4:  BRA    18F6
18F6:  CLRWDT
18F8:  DECFSZ FEF,F
18FA:  BRA    18DA
18FC:  GOTO   1DA0 (RETURN)
.................... #define S0   PIN_A0 
.................... #define S1   PIN_A1 
.................... #define T0   PIN_A2 
.................... #define Uref   PIN_A3 
.................... #define T1   PIN_A4 
.................... #define T2   PIN_A5 
.................... #define DIR   PIN_A6 
.................... #define LDAC   PIN_A7 
.................... #define STAT   PIN_C0 
.................... #define MEM0   PIN_C1 
.................... #define MEM1   PIN_C2 
.................... #define SCK   PIN_C3 
.................... #define SDI   PIN_C4 
.................... #define SDO   PIN_C5 
.................... #define TX   PIN_C6 
.................... #define RX   PIN_C7 
.................... #define DAC0   PIN_D0 
.................... #define DAC1   PIN_D1 
.................... #define KU1   PIN_D4 
.................... #define KU0   PIN_D5 
.................... #define SYNC_POS   PIN_E0 
.................... #define TERMO   PIN_E1 
....................  
....................  
....................  
.................... #include "ee_var.h" 
.................... //SPM-3 EEPROM storage structure 
.................... //define adresses of EEPROM locations 
.................... /*		LocName		Addr	Discr			*/ 
.................... /*==========================================*/ 
.................... #define	EE_SAW_A0	0x00	//define saw level 
.................... #define	EE_SAW_A1	0x02	//define saw amplitude 
.................... #define	EE_KU0		0x04	//amp coeff for in0 
.................... #define	EE_KU1		0x06	//amp coeff for in1 
.................... #define	EE_TAQ		0x08	//number of DAQ points 
.................... #define	EE_PCOUNT	0x0A	//num of measures for meaning 
.................... #define	EE_FWDT		0x0C 
.................... #define	EE_Speed	0x0E	//serial device speed 
.................... #define	EE_Host		0x10	//host address & serial number	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<!!! Device ID!!! 
.................... #define	EE_T0_CAL	0x12	//cal temperature of cn0  
.................... #define	EE_T1_CAL	0x14	//cal temperature of cn1  
.................... #define	EE_TG_CAL	0x16	//cal temperature of generator  
.................... #define	EE_KGT		0x18	//termo coeff of generator 
.................... #define	EE_KGU		0x1C	//voltage coeff of generator 
.................... #define	EE_KST0		0x20	//termo coeff of cn0 
.................... #define	EE_KST1		0x24	//termo coeff of cn1 
....................  
.................... //EEPROM data definition 
.................... #ROM	0xf00000={0000,	//EE_SAW_A0 
.................... 				  20000,	//EE_SAW_A1 
.................... 				  0x0001,	//EE_KU0				   
.................... 				  0x0001,	//EE_KU1 
.................... 				  0x0800,	//EE_TAQ 
.................... 				  0x0080,	//EE_PCOUNT 
.................... 				  0x0004,	//EE_FWDT 
.................... 				  0x4B00,	//EE_Speed 
.................... 				  0x0001,	//EE_Host				   
.................... 				  0x09C4,	//EE_TO_CAL 
.................... 				  0x09C4,	//EE_T1_CAL 
.................... 				  0x0BB8,	//EE_TG_CAL 
.................... 				  0x0000,	//EE_KGT 
.................... 				  0x0000, 
.................... 				  0x7F00,	//EE_KGU 
.................... 				  0x0000, 
.................... 				  0x0000,	//EE_KST0 
.................... 				  0x0000, 
.................... 				  0x0000,	//EE_KST1 
.................... 				  0x0000 
.................... } 
.................... // 
....................  
....................  
.................... //directives 
.................... //#USE FAST_IO(A) 
.................... //#USE FAST_IO(C) 
.................... //#USE FAST_IO(D) 
....................  
.................... //const 
.................... float const volts2dac = 4096.0 / 20.0; // use for value from volts to DAC conversion 
....................  
.................... //variables 
.................... //buffers 
.................... //channel 0 
.................... static int16 data_filt0[64];		//filtering buffer for ch0 
.................... static int16 data_mean0;			//mean value 
.................... static int16 maxRise0;			//max value at rising saw 
.................... static int16 iMaxRise0;			//index of maximum at rising saw 
.................... static int16 maxFall0;			//max value at falling saw 
.................... static int16 iMaxFall0;			//index of maximum at falling saw 
.................... static int16 alp_buf0[128];		//alpha meaning buffer 
.................... static int16 bet_buf0[128];		//beta meaning buffer 
.................... static int16 gam_buf0[128];		//gamma meaning buffer 
.................... static int16 Amplitude0;			//amplitude in B*1000 
.................... static int16 PulseWdt0;			//pulse width in uS/10 
.................... static int16 Gamma0;				//gamma in uS/10 
.................... static int16 AmpCoef0;			//input amplifier coeff 
.................... static float KST0;				// 
.................... static int16 T0_CAL;				// 
.................... static signed int16 T_SR0;				//temperature of cn0 
.................... static int16 Gamma1;				//gamma in uS/10 
.................... static int16 AmpCoef1;			//input amplifier coeff 
.................... static float KST1;				// 
.................... static int16 T1_CAL;				// 
.................... static signed int16 T_SR1;				//temperature of cn1 
....................  
.................... //common 
.................... static int16 TAQ;		//number of data samples at measuring period 
.................... static int16 FWDT;				//filering window width 
.................... static int16 PCOUNT;				//measuring periods for meaning 
.................... static int1 OneCycle;			//one cycle flag 
.................... static int8 iGam = 0;				//gamma meaning index 
....................  
.................... //saw 
.................... static signed int16 T_GEN;//generator temperature 
.................... static int16 SAW_A0;				//level of saw 
.................... static int16 sawStartLevel;			//current saw level 
.................... static int16 SAW_A1;				//saw amplitude 
.................... static int16 sawEndLevel;			//saw step 
.................... static float KGT;				// 
.................... static float KGU;				// 
.................... static int16 TG_CAL;				// 
....................  
.................... //communication 
.................... static int16 Speed;				//USART speed 
.................... static int16 Addr;				//own USART host adress 
....................  
.................... //filtering 
.................... static int8 iWin;				//meaning window index 
.................... static int32 AlpSum; 
.................... static int32 BetSum; 
.................... static int32 GamSum; 
....................  
.................... //temperature regulator 
.................... static int16 Hst = 50;				//Histeresis 
....................  
.................... //states 
.................... enum daq_states 
.................... { 
.................... 	DaqIdle,		//idle state - state after daq stop 
.................... 	DaqStart,		//cyclic mesuring start for one cycle 
.................... 	DaqMeasure,		//measuring 
.................... 	DaqScale,		//scaling measured values 
.................... 	DaqEnd			//ending measuring cycle 
.................... }; 
.................... int8 DaqState;	//Daq procedure state 
.................... // 
.................... //math variables 
.................... /*float kgv; 
.................... float Va; 
.................... float delta_gamma, delta_gamma2; 
.................... float T_0, T_G, T_G_k; 
.................... float Gam0, Gam0_k; 
.................... float k1, tsn; 
.................... float W; 
.................... float Haw0, Haw0_k; 
.................... float AA, BB, a0, a1, a2, a3, a4, a5; 
.................... float Am0, Am0_k; 
.................... float T_S0, T_S0_k; 
.................... */ 
....................  
.................... //procedures 
.................... //mathematics 
.................... /*char Calc() // Humidity calculation 
....................  { 
....................  float difftime0; 
....................  //coeff validation 
....................  if (kgv == 0) 
....................  kgv = 1; 
....................  if (Va == 0) 
....................  Va = 1; 
....................  // 
....................  delta_gamma = (kgt / kgv) * (T_0 / Va) * (T_G - T_G_k);	//generator temperature correction 
....................  delta_gamma2 = k1 * (T_S0 - tsn);	//object temperature correction 
....................  difftime0 = (Gam0 - Gam0_k);	//addition parameter estimation 
....................  difftime0 = difftime0 + delta_gamma + delta_gamma2;	//adding corecction 
....................  //main regression 
....................  W = AA 
....................  + BB 
....................  * (a0 + a1 * (Am0 - Am0_k) * 10 
....................  + a2 * (Haw0 - Haw0_k) / 1000 
....................  + a3 * difftime0 / 1000 + a4 * (T_G - T_G_k) / 100 
....................  + a5 * (T_S0 - T_S0_k) / 100); 
....................  
....................  return 0; 
....................  }*/ 
....................  
.................... //Peripherals setup 
.................... void InitMcu(void) 
.................... {		//initialization of MCU 
....................  
.................... 	//oscillator configuration 
.................... 	setup_oscillator(OSC_32MHZ | OSC_NORMAL | OSC_31250); 
*
1EDA:  MOVLW  70
1EDC:  MOVWF  FD3
1EDE:  MOVLW  C0
1EE0:  MOVWF  F9B
1EE2:  MOVF   FD3,W
.................... 	//disable PSP 
.................... 	setup_psp(PSP_DISABLED); 
1EE4:  BCF    F96.4
.................... 	//WDT config 
.................... 	setup_wdt(WDT_OFF); 
1EE6:  BCF    FD1.0
.................... 	//disable comparators 
.................... 	setup_comparator(NC_NC_NC_NC); 
1EE8:  MOVLW  07
1EEA:  MOVWF  FB4
1EEC:  MOVF   F92,W
1EEE:  MOVWF  F92
1EF0:  CLRWDT
1EF2:  MOVLW  1A
1EF4:  MOVWF  00
1EF6:  DECFSZ 00,F
1EF8:  BRA    1EF6
1EFA:  MOVF   FB4,W
1EFC:  BCF    FA1.6
.................... 	setup_vref(FALSE); 
1EFE:  CLRF   FB5
....................  
.................... 	//config ADC module 
.................... 	setup_adc_ports(AN0_TO_AN5 | VSS_VREF); 
1F00:  MOVF   FC1,W
1F02:  ANDLW  C0
1F04:  IORLW  19
1F06:  MOVWF  FC1
.................... 	setup_adc(ADC_CLOCK_DIV_16 | ADC_TAD_MUL_2); 
1F08:  MOVF   FC0,W
1F0A:  ANDLW  C0
1F0C:  IORLW  0D
1F0E:  MOVWF  FC0
1F10:  BSF    FC0.7
1F12:  BSF    FC2.0
....................  
.................... 	//port configuration 
.................... 	set_tris_a(0x3f); 
1F14:  MOVLW  3F
1F16:  MOVWF  F92
.................... 	set_tris_c(0xf8); 
1F18:  MOVLW  F8
1F1A:  MOVWF  F94
.................... 	set_tris_d(0x00); 
1F1C:  MOVLW  00
1F1E:  MOVWF  F95
....................  
.................... 	//set high all selectors 
.................... 	output_high(LDAC); 
1F20:  BCF    F92.7
1F22:  BSF    F89.7
.................... 	output_high(MEM0); 
1F24:  BCF    F94.1
1F26:  BSF    F8B.1
.................... 	output_high(MEM1); 
1F28:  BCF    F94.2
1F2A:  BSF    F8B.2
.................... 	output_high(DAC0); 
1F2C:  BCF    F95.0
1F2E:  BSF    F8C.0
.................... 	output_high(DAC1); 
1F30:  BCF    F95.1
1F32:  BSF    F8C.1
.................... 	output_high(KU0); 
1F34:  BCF    F95.5
1F36:  BSF    F8C.5
.................... 	output_high(KU1); 
1F38:  BCF    F95.4
1F3A:  BSF    F8C.4
.................... 	output_high(STAT); 
1F3C:  BCF    F94.0
1F3E:  BSF    F8B.0
....................  
.................... 	//timers configuration 
.................... 	setup_timer_0(RTCC_INTERNAL); 
1F40:  MOVLW  80
1F42:  MOVWF  FD5
....................  
.................... 	setup_timer_1(T1_INTERNAL | T1_DIV_BY_8); 
1F44:  MOVLW  B5
1F46:  MOVWF  FCD
....................  
.................... 	setup_timer_2(T2_DISABLED, 0, 1); 
1F48:  MOVLW  00
1F4A:  MOVWF  FCA
1F4C:  MOVLW  00
1F4E:  MOVWF  FCB
....................  
.................... 	setup_timer_3(T3_INTERNAL | T3_DIV_BY_1); 
1F50:  MOVLW  85
1F52:  MOVWF  FB1
....................  
.................... 	//setup communications 
.................... 	//setup usart 
.................... 	output_low(DIR);	//enable receiving 
1F54:  BCF    F92.6
1F56:  BCF    F89.6
....................  
.................... 	//SPI configuration 
.................... 	setup_spi(SPI_MASTER | SPI_CLK_DIV_4 | SPI_H_TO_L); 
1F58:  BCF    FC6.5
1F5A:  BCF    F94.5
1F5C:  BSF    F94.4
1F5E:  BCF    F94.3
1F60:  MOVLW  30
1F62:  MOVWF  FC6
1F64:  MOVLW  40
1F66:  MOVWF  FC7
....................  
.................... 	//interrupt configuration 
.................... 	enable_interrupts(INT_RDA); 
1F68:  BSF    F9D.5
....................  
.................... 	enable_interrupts(GLOBAL); 
1F6A:  MOVLW  C0
1F6C:  IORWF  FF2,F
....................  
.................... 	//States reset 
.................... 	DaqState = DaqIdle;	//initial state 
1F6E:  MOVLB  3
1F70:  CLRF   xEE
.................... } 
1F72:  MOVLB  0
1F74:  GOTO   382A (RETURN)
.................... // 
.................... //read registers from EE 
.................... void BURead(void) 
.................... {	//back up read 
.................... 	int32 temp; 
....................  
.................... 	//reading 
.................... 	SAW_A0 = make16(read_eeprom(EE_SAW_A0 + 1), read_eeprom(EE_SAW_A0)); //rise saw level 
1F78:  MOVFF  FF2,51B
1F7C:  BCF    FF2.7
1F7E:  MOVLW  01
1F80:  MOVWF  FA9
1F82:  BCF    FA6.6
1F84:  BCF    FA6.7
1F86:  BSF    FA6.0
1F88:  MOVF   FA8,W
1F8A:  MOVLB  5
1F8C:  BTFSC  x1B.7
1F8E:  BSF    FF2.7
1F90:  MOVWF  x1C
1F92:  MOVFF  FF2,51D
1F96:  BCF    FF2.7
1F98:  CLRF   FA9
1F9A:  BCF    FA6.6
1F9C:  BCF    FA6.7
1F9E:  BSF    FA6.0
1FA0:  MOVF   FA8,W
1FA2:  BTFSC  x1D.7
1FA4:  BSF    FF2.7
1FA6:  MOVWF  x1E
1FA8:  MOVFF  51C,3CA
1FAC:  MOVFF  51E,3C9
.................... 	SAW_A1 = make16(read_eeprom(EE_SAW_A1 + 1), read_eeprom(EE_SAW_A1)); //rise saw amplitude 
1FB0:  MOVFF  FF2,51B
1FB4:  BCF    FF2.7
1FB6:  MOVLW  03
1FB8:  MOVWF  FA9
1FBA:  BCF    FA6.6
1FBC:  BCF    FA6.7
1FBE:  BSF    FA6.0
1FC0:  MOVF   FA8,W
1FC2:  BTFSC  x1B.7
1FC4:  BSF    FF2.7
1FC6:  MOVWF  x1C
1FC8:  MOVFF  FF2,51D
1FCC:  BCF    FF2.7
1FCE:  MOVLW  02
1FD0:  MOVWF  FA9
1FD2:  BCF    FA6.6
1FD4:  BCF    FA6.7
1FD6:  BSF    FA6.0
1FD8:  MOVF   FA8,W
1FDA:  BTFSC  x1D.7
1FDC:  BSF    FF2.7
1FDE:  MOVWF  x1E
1FE0:  MOVFF  51C,3CE
1FE4:  MOVFF  51E,3CD
.................... 	AmpCoef0 = make16(read_eeprom(EE_KU0 + 1), read_eeprom(EE_KU0)); // 
1FE8:  MOVFF  FF2,51B
1FEC:  BCF    FF2.7
1FEE:  MOVLW  05
1FF0:  MOVWF  FA9
1FF2:  BCF    FA6.6
1FF4:  BCF    FA6.7
1FF6:  BSF    FA6.0
1FF8:  MOVF   FA8,W
1FFA:  BTFSC  x1B.7
1FFC:  BSF    FF2.7
1FFE:  MOVWF  x1C
2000:  MOVFF  FF2,51D
2004:  BCF    FF2.7
2006:  MOVLW  04
2008:  MOVWF  FA9
200A:  BCF    FA6.6
200C:  BCF    FA6.7
200E:  BSF    FA6.0
2010:  MOVF   FA8,W
2012:  BTFSC  x1D.7
2014:  BSF    FF2.7
2016:  MOVWF  x1E
2018:  MOVFF  51C,3AA
201C:  MOVFF  51E,3A9
.................... 	AmpCoef1 = make16(read_eeprom(EE_KU1 + 1), read_eeprom(EE_KU1)); // 
2020:  MOVFF  FF2,51B
2024:  BCF    FF2.7
2026:  MOVLW  07
2028:  MOVWF  FA9
202A:  BCF    FA6.6
202C:  BCF    FA6.7
202E:  BSF    FA6.0
2030:  MOVF   FA8,W
2032:  BTFSC  x1B.7
2034:  BSF    FF2.7
2036:  MOVWF  x1C
2038:  MOVFF  FF2,51D
203C:  BCF    FF2.7
203E:  MOVLW  06
2040:  MOVWF  FA9
2042:  BCF    FA6.6
2044:  BCF    FA6.7
2046:  BSF    FA6.0
2048:  MOVF   FA8,W
204A:  BTFSC  x1D.7
204C:  BSF    FF2.7
204E:  MOVWF  x1E
2050:  MOVFF  51C,3B6
2054:  MOVFF  51E,3B5
.................... 	TAQ = make16(read_eeprom(EE_TAQ + 1), read_eeprom(EE_TAQ)); // 
2058:  MOVFF  FF2,51B
205C:  BCF    FF2.7
205E:  MOVLW  09
2060:  MOVWF  FA9
2062:  BCF    FA6.6
2064:  BCF    FA6.7
2066:  BSF    FA6.0
2068:  MOVF   FA8,W
206A:  BTFSC  x1B.7
206C:  BSF    FF2.7
206E:  MOVWF  x1C
2070:  MOVFF  FF2,51D
2074:  BCF    FF2.7
2076:  MOVLW  08
2078:  MOVWF  FA9
207A:  BCF    FA6.6
207C:  BCF    FA6.7
207E:  BSF    FA6.0
2080:  MOVF   FA8,W
2082:  BTFSC  x1D.7
2084:  BSF    FF2.7
2086:  MOVWF  x1E
2088:  MOVFF  51C,3C0
208C:  MOVFF  51E,3BF
.................... 	PCOUNT = make16(read_eeprom(EE_PCOUNT + 1), read_eeprom(EE_PCOUNT)); // 
2090:  MOVFF  FF2,51B
2094:  BCF    FF2.7
2096:  MOVLW  0B
2098:  MOVWF  FA9
209A:  BCF    FA6.6
209C:  BCF    FA6.7
209E:  BSF    FA6.0
20A0:  MOVF   FA8,W
20A2:  BTFSC  x1B.7
20A4:  BSF    FF2.7
20A6:  MOVWF  x1C
20A8:  MOVFF  FF2,51D
20AC:  BCF    FF2.7
20AE:  MOVLW  0A
20B0:  MOVWF  FA9
20B2:  BCF    FA6.6
20B4:  BCF    FA6.7
20B6:  BSF    FA6.0
20B8:  MOVF   FA8,W
20BA:  BTFSC  x1D.7
20BC:  BSF    FF2.7
20BE:  MOVWF  x1E
20C0:  MOVFF  51C,3C4
20C4:  MOVFF  51E,3C3
.................... 	FWDT = make16(read_eeprom(EE_FWDT + 1), read_eeprom(EE_FWDT)); // 
20C8:  MOVFF  FF2,51B
20CC:  BCF    FF2.7
20CE:  MOVLW  0D
20D0:  MOVWF  FA9
20D2:  BCF    FA6.6
20D4:  BCF    FA6.7
20D6:  BSF    FA6.0
20D8:  MOVF   FA8,W
20DA:  BTFSC  x1B.7
20DC:  BSF    FF2.7
20DE:  MOVWF  x1C
20E0:  MOVFF  FF2,51D
20E4:  BCF    FF2.7
20E6:  MOVLW  0C
20E8:  MOVWF  FA9
20EA:  BCF    FA6.6
20EC:  BCF    FA6.7
20EE:  BSF    FA6.0
20F0:  MOVF   FA8,W
20F2:  BTFSC  x1D.7
20F4:  BSF    FF2.7
20F6:  MOVWF  x1E
20F8:  MOVFF  51C,3C2
20FC:  MOVFF  51E,3C1
.................... 	Speed = make16(read_eeprom(EE_Speed + 1), read_eeprom(EE_Speed)); // 
2100:  MOVFF  FF2,51B
2104:  BCF    FF2.7
2106:  MOVLW  0F
2108:  MOVWF  FA9
210A:  BCF    FA6.6
210C:  BCF    FA6.7
210E:  BSF    FA6.0
2110:  MOVF   FA8,W
2112:  BTFSC  x1B.7
2114:  BSF    FF2.7
2116:  MOVWF  x1C
2118:  MOVFF  FF2,51D
211C:  BCF    FF2.7
211E:  MOVLW  0E
2120:  MOVWF  FA9
2122:  BCF    FA6.6
2124:  BCF    FA6.7
2126:  BSF    FA6.0
2128:  MOVF   FA8,W
212A:  BTFSC  x1D.7
212C:  BSF    FF2.7
212E:  MOVWF  x1E
2130:  MOVFF  51C,3DC
2134:  MOVFF  51E,3DB
.................... 	Addr = make16(read_eeprom(EE_Host + 1), read_eeprom(EE_Host)); // 
2138:  MOVFF  FF2,51B
213C:  BCF    FF2.7
213E:  MOVLW  11
2140:  MOVWF  FA9
2142:  BCF    FA6.6
2144:  BCF    FA6.7
2146:  BSF    FA6.0
2148:  MOVF   FA8,W
214A:  BTFSC  x1B.7
214C:  BSF    FF2.7
214E:  MOVWF  x1C
2150:  MOVFF  FF2,51D
2154:  BCF    FF2.7
2156:  MOVLW  10
2158:  MOVWF  FA9
215A:  BCF    FA6.6
215C:  BCF    FA6.7
215E:  BSF    FA6.0
2160:  MOVF   FA8,W
2162:  BTFSC  x1D.7
2164:  BSF    FF2.7
2166:  MOVWF  x1E
2168:  MOVFF  51C,3DE
216C:  MOVFF  51E,3DD
.................... 	T0_CAL = make32(read_eeprom(EE_T0_CAL + 1), read_eeprom(EE_T0_CAL)); // 
2170:  MOVFF  FF2,51B
2174:  BCF    FF2.7
2176:  MOVLW  13
2178:  MOVWF  FA9
217A:  BCF    FA6.6
217C:  BCF    FA6.7
217E:  BSF    FA6.0
2180:  MOVF   FA8,W
2182:  BTFSC  x1B.7
2184:  BSF    FF2.7
2186:  MOVWF  x1C
2188:  MOVFF  FF2,51D
218C:  BCF    FF2.7
218E:  MOVLW  12
2190:  MOVWF  FA9
2192:  BCF    FA6.6
2194:  BCF    FA6.7
2196:  BSF    FA6.0
2198:  MOVF   FA8,W
219A:  BTFSC  x1D.7
219C:  BSF    FF2.7
219E:  MOVWF  x1E
21A0:  MOVFF  51C,3B0
21A4:  MOVFF  51E,3AF
.................... 	T1_CAL = make16(read_eeprom(EE_T1_CAL + 1), read_eeprom(EE_T1_CAL)); // 
21A8:  MOVFF  FF2,51B
21AC:  BCF    FF2.7
21AE:  MOVLW  15
21B0:  MOVWF  FA9
21B2:  BCF    FA6.6
21B4:  BCF    FA6.7
21B6:  BSF    FA6.0
21B8:  MOVF   FA8,W
21BA:  BTFSC  x1B.7
21BC:  BSF    FF2.7
21BE:  MOVWF  x1C
21C0:  MOVFF  FF2,51D
21C4:  BCF    FF2.7
21C6:  MOVLW  14
21C8:  MOVWF  FA9
21CA:  BCF    FA6.6
21CC:  BCF    FA6.7
21CE:  BSF    FA6.0
21D0:  MOVF   FA8,W
21D2:  BTFSC  x1D.7
21D4:  BSF    FF2.7
21D6:  MOVWF  x1E
21D8:  MOVFF  51C,3BC
21DC:  MOVFF  51E,3BB
.................... 	TG_CAL = make16(read_eeprom(EE_TG_CAL + 1), read_eeprom(EE_TG_CAL)); // 
21E0:  MOVFF  FF2,51B
21E4:  BCF    FF2.7
21E6:  MOVLW  17
21E8:  MOVWF  FA9
21EA:  BCF    FA6.6
21EC:  BCF    FA6.7
21EE:  BSF    FA6.0
21F0:  MOVF   FA8,W
21F2:  BTFSC  x1B.7
21F4:  BSF    FF2.7
21F6:  MOVWF  x1C
21F8:  MOVFF  FF2,51D
21FC:  BCF    FF2.7
21FE:  MOVLW  16
2200:  MOVWF  FA9
2202:  BCF    FA6.6
2204:  BCF    FA6.7
2206:  BSF    FA6.0
2208:  MOVF   FA8,W
220A:  BTFSC  x1D.7
220C:  BSF    FF2.7
220E:  MOVWF  x1E
2210:  MOVFF  51C,3DA
2214:  MOVFF  51E,3D9
.................... 	temp = make32(read_eeprom(EE_KGT + 2), read_eeprom(EE_KGT + 3), 
.................... 		read_eeprom(EE_KGT), read_eeprom(EE_KGT + 1)); // 
2218:  MOVFF  FF2,51B
221C:  BCF    FF2.7
221E:  MOVLW  1A
2220:  MOVWF  FA9
2222:  BCF    FA6.6
2224:  BCF    FA6.7
2226:  BSF    FA6.0
2228:  MOVF   FA8,W
222A:  BTFSC  x1B.7
222C:  BSF    FF2.7
222E:  MOVWF  x1C
2230:  MOVFF  FF2,51D
2234:  BCF    FF2.7
2236:  MOVLW  1B
2238:  MOVWF  FA9
223A:  BCF    FA6.6
223C:  BCF    FA6.7
223E:  BSF    FA6.0
2240:  MOVF   FA8,W
2242:  BTFSC  x1D.7
2244:  BSF    FF2.7
2246:  MOVWF  x1E
2248:  MOVFF  FF2,51F
224C:  BCF    FF2.7
224E:  MOVLW  18
2250:  MOVWF  FA9
2252:  BCF    FA6.6
2254:  BCF    FA6.7
2256:  BSF    FA6.0
2258:  MOVF   FA8,W
225A:  BTFSC  x1F.7
225C:  BSF    FF2.7
225E:  MOVWF  x20
2260:  MOVFF  FF2,521
2264:  BCF    FF2.7
2266:  MOVLW  19
2268:  MOVWF  FA9
226A:  BCF    FA6.6
226C:  BCF    FA6.7
226E:  BSF    FA6.0
2270:  MOVF   FA8,W
2272:  BTFSC  x21.7
2274:  BSF    FF2.7
2276:  MOVWF  x22
2278:  MOVFF  51C,51A
227C:  MOVFF  51E,519
2280:  MOVFF  520,518
2284:  MOVFF  522,517
.................... 	memcpy(&KGT, &temp, 4); 
2288:  MOVLW  03
228A:  MOVWF  FEA
228C:  MOVLW  D1
228E:  MOVWF  FE9
2290:  MOVLW  05
2292:  MOVWF  FE2
2294:  MOVLW  17
2296:  MOVWF  FE1
2298:  MOVLW  04
229A:  MOVWF  01
229C:  MOVFF  FE6,FEE
22A0:  DECFSZ 01,F
22A2:  BRA    229C
.................... 	temp = make32(read_eeprom(EE_KGU + 2), read_eeprom(EE_KGU + 3), 
.................... 		read_eeprom(EE_KGU), read_eeprom(EE_KGU + 1)); // 
22A4:  MOVFF  FF2,51B
22A8:  BCF    FF2.7
22AA:  MOVLW  1E
22AC:  MOVWF  FA9
22AE:  BCF    FA6.6
22B0:  BCF    FA6.7
22B2:  BSF    FA6.0
22B4:  MOVF   FA8,W
22B6:  BTFSC  x1B.7
22B8:  BSF    FF2.7
22BA:  MOVWF  x1C
22BC:  MOVFF  FF2,51D
22C0:  BCF    FF2.7
22C2:  MOVLW  1F
22C4:  MOVWF  FA9
22C6:  BCF    FA6.6
22C8:  BCF    FA6.7
22CA:  BSF    FA6.0
22CC:  MOVF   FA8,W
22CE:  BTFSC  x1D.7
22D0:  BSF    FF2.7
22D2:  MOVWF  x1E
22D4:  MOVFF  FF2,51F
22D8:  BCF    FF2.7
22DA:  MOVLW  1C
22DC:  MOVWF  FA9
22DE:  BCF    FA6.6
22E0:  BCF    FA6.7
22E2:  BSF    FA6.0
22E4:  MOVF   FA8,W
22E6:  BTFSC  x1F.7
22E8:  BSF    FF2.7
22EA:  MOVWF  x20
22EC:  MOVFF  FF2,521
22F0:  BCF    FF2.7
22F2:  MOVLW  1D
22F4:  MOVWF  FA9
22F6:  BCF    FA6.6
22F8:  BCF    FA6.7
22FA:  BSF    FA6.0
22FC:  MOVF   FA8,W
22FE:  BTFSC  x21.7
2300:  BSF    FF2.7
2302:  MOVWF  x22
2304:  MOVFF  51C,51A
2308:  MOVFF  51E,519
230C:  MOVFF  520,518
2310:  MOVFF  522,517
.................... 	memcpy(&KGU, &temp, 4); 
2314:  MOVLW  03
2316:  MOVWF  FEA
2318:  MOVLW  D5
231A:  MOVWF  FE9
231C:  MOVLW  05
231E:  MOVWF  FE2
2320:  MOVLW  17
2322:  MOVWF  FE1
2324:  MOVLW  04
2326:  MOVWF  01
2328:  MOVFF  FE6,FEE
232C:  DECFSZ 01,F
232E:  BRA    2328
.................... 	temp = make32(read_eeprom(EE_KST0 + 2), read_eeprom(EE_KST0 + 3), 
.................... 		read_eeprom(EE_KST0), read_eeprom(EE_KST0 + 1)); // 
2330:  MOVFF  FF2,51B
2334:  BCF    FF2.7
2336:  MOVLW  22
2338:  MOVWF  FA9
233A:  BCF    FA6.6
233C:  BCF    FA6.7
233E:  BSF    FA6.0
2340:  MOVF   FA8,W
2342:  BTFSC  x1B.7
2344:  BSF    FF2.7
2346:  MOVWF  x1C
2348:  MOVFF  FF2,51D
234C:  BCF    FF2.7
234E:  MOVLW  23
2350:  MOVWF  FA9
2352:  BCF    FA6.6
2354:  BCF    FA6.7
2356:  BSF    FA6.0
2358:  MOVF   FA8,W
235A:  BTFSC  x1D.7
235C:  BSF    FF2.7
235E:  MOVWF  x1E
2360:  MOVFF  FF2,51F
2364:  BCF    FF2.7
2366:  MOVLW  20
2368:  MOVWF  FA9
236A:  BCF    FA6.6
236C:  BCF    FA6.7
236E:  BSF    FA6.0
2370:  MOVF   FA8,W
2372:  BTFSC  x1F.7
2374:  BSF    FF2.7
2376:  MOVWF  x20
2378:  MOVFF  FF2,521
237C:  BCF    FF2.7
237E:  MOVLW  21
2380:  MOVWF  FA9
2382:  BCF    FA6.6
2384:  BCF    FA6.7
2386:  BSF    FA6.0
2388:  MOVF   FA8,W
238A:  BTFSC  x21.7
238C:  BSF    FF2.7
238E:  MOVWF  x22
2390:  MOVFF  51C,51A
2394:  MOVFF  51E,519
2398:  MOVFF  520,518
239C:  MOVFF  522,517
.................... 	memcpy(&KST0, &temp, 4); 
23A0:  MOVLW  03
23A2:  MOVWF  FEA
23A4:  MOVLW  AB
23A6:  MOVWF  FE9
23A8:  MOVLW  05
23AA:  MOVWF  FE2
23AC:  MOVLW  17
23AE:  MOVWF  FE1
23B0:  MOVLW  04
23B2:  MOVWF  01
23B4:  MOVFF  FE6,FEE
23B8:  DECFSZ 01,F
23BA:  BRA    23B4
.................... 	temp = make32(read_eeprom(EE_KST1 + 2), read_eeprom(EE_KST1 + 3), 
.................... 		read_eeprom(EE_KST1), read_eeprom(EE_KST1 + 1)); // 
23BC:  MOVFF  FF2,51B
23C0:  BCF    FF2.7
23C2:  MOVLW  26
23C4:  MOVWF  FA9
23C6:  BCF    FA6.6
23C8:  BCF    FA6.7
23CA:  BSF    FA6.0
23CC:  MOVF   FA8,W
23CE:  BTFSC  x1B.7
23D0:  BSF    FF2.7
23D2:  MOVWF  x1C
23D4:  MOVFF  FF2,51D
23D8:  BCF    FF2.7
23DA:  MOVLW  27
23DC:  MOVWF  FA9
23DE:  BCF    FA6.6
23E0:  BCF    FA6.7
23E2:  BSF    FA6.0
23E4:  MOVF   FA8,W
23E6:  BTFSC  x1D.7
23E8:  BSF    FF2.7
23EA:  MOVWF  x1E
23EC:  MOVFF  FF2,51F
23F0:  BCF    FF2.7
23F2:  MOVLW  24
23F4:  MOVWF  FA9
23F6:  BCF    FA6.6
23F8:  BCF    FA6.7
23FA:  BSF    FA6.0
23FC:  MOVF   FA8,W
23FE:  BTFSC  x1F.7
2400:  BSF    FF2.7
2402:  MOVWF  x20
2404:  MOVFF  FF2,521
2408:  BCF    FF2.7
240A:  MOVLW  25
240C:  MOVWF  FA9
240E:  BCF    FA6.6
2410:  BCF    FA6.7
2412:  BSF    FA6.0
2414:  MOVF   FA8,W
2416:  BTFSC  x21.7
2418:  BSF    FF2.7
241A:  MOVWF  x22
241C:  MOVFF  51C,51A
2420:  MOVFF  51E,519
2424:  MOVFF  520,518
2428:  MOVFF  522,517
.................... 	memcpy(&KST1, &temp, 4); 
242C:  MOVLW  03
242E:  MOVWF  FEA
2430:  MOVLW  B7
2432:  MOVWF  FE9
2434:  MOVLW  05
2436:  MOVWF  FE2
2438:  MOVLW  17
243A:  MOVWF  FE1
243C:  MOVLW  04
243E:  MOVWF  01
2440:  MOVFF  FE6,FEE
2444:  DECFSZ 01,F
2446:  BRA    2440
.................... } 
2448:  MOVLB  0
244A:  GOTO   382E (RETURN)
.................... // 
.................... //write registers to EE 
.................... void BUWrite(void) 
.................... {	//back up write 
.................... 	int32 temp; 
....................  
.................... 	setup_wdt(WDT_OFF); 
*
1174:  BCF    FD1.0
....................  
.................... 	//writing 
.................... 	//int16 
.................... 	write_eeprom(EE_SAW_A0, make8(SAW_A0, 0)); 
1176:  MOVFF  3C9,537
117A:  CLRF   FA9
117C:  MOVFF  537,FA8
1180:  BCF    FA6.6
1182:  BCF    FA6.7
1184:  BSF    FA6.2
1186:  MOVF   FF2,W
1188:  MOVWF  00
118A:  BCF    FF2.7
118C:  MOVLB  F
118E:  MOVLW  55
1190:  MOVWF  FA7
1192:  MOVLW  AA
1194:  MOVWF  FA7
1196:  BSF    FA6.1
1198:  BTFSC  FA6.1
119A:  BRA    1198
119C:  BCF    FA6.2
119E:  MOVF   00,W
11A0:  IORWF  FF2,F
.................... 	write_eeprom(EE_SAW_A0 + 1, make8(SAW_A0, 1)); 
11A2:  MOVFF  3CA,537
11A6:  MOVLW  01
11A8:  MOVWF  FA9
11AA:  MOVFF  3CA,FA8
11AE:  BCF    FA6.6
11B0:  BCF    FA6.7
11B2:  BSF    FA6.2
11B4:  MOVFF  FF2,00
11B8:  BCF    FF2.7
11BA:  MOVLW  55
11BC:  MOVWF  FA7
11BE:  MOVLW  AA
11C0:  MOVWF  FA7
11C2:  BSF    FA6.1
11C4:  BTFSC  FA6.1
11C6:  BRA    11C4
11C8:  BCF    FA6.2
11CA:  MOVF   00,W
11CC:  IORWF  FF2,F
.................... 	write_eeprom(EE_SAW_A1, make8(SAW_A1, 0)); 
11CE:  MOVFF  3CD,537
11D2:  MOVLW  02
11D4:  MOVWF  FA9
11D6:  MOVFF  3CD,FA8
11DA:  BCF    FA6.6
11DC:  BCF    FA6.7
11DE:  BSF    FA6.2
11E0:  MOVFF  FF2,00
11E4:  BCF    FF2.7
11E6:  MOVLW  55
11E8:  MOVWF  FA7
11EA:  MOVLW  AA
11EC:  MOVWF  FA7
11EE:  BSF    FA6.1
11F0:  BTFSC  FA6.1
11F2:  BRA    11F0
11F4:  BCF    FA6.2
11F6:  MOVF   00,W
11F8:  IORWF  FF2,F
.................... 	write_eeprom(EE_SAW_A1 + 1, make8(SAW_A1, 1)); 
11FA:  MOVFF  3CE,537
11FE:  MOVLW  03
1200:  MOVWF  FA9
1202:  MOVFF  3CE,FA8
1206:  BCF    FA6.6
1208:  BCF    FA6.7
120A:  BSF    FA6.2
120C:  MOVFF  FF2,00
1210:  BCF    FF2.7
1212:  MOVLW  55
1214:  MOVWF  FA7
1216:  MOVLW  AA
1218:  MOVWF  FA7
121A:  BSF    FA6.1
121C:  BTFSC  FA6.1
121E:  BRA    121C
1220:  BCF    FA6.2
1222:  MOVF   00,W
1224:  IORWF  FF2,F
.................... 	write_eeprom(EE_KU0, make8(AmpCoef0, 0)); 
1226:  MOVFF  3A9,537
122A:  MOVLW  04
122C:  MOVWF  FA9
122E:  MOVFF  3A9,FA8
1232:  BCF    FA6.6
1234:  BCF    FA6.7
1236:  BSF    FA6.2
1238:  MOVFF  FF2,00
123C:  BCF    FF2.7
123E:  MOVLW  55
1240:  MOVWF  FA7
1242:  MOVLW  AA
1244:  MOVWF  FA7
1246:  BSF    FA6.1
1248:  BTFSC  FA6.1
124A:  BRA    1248
124C:  BCF    FA6.2
124E:  MOVF   00,W
1250:  IORWF  FF2,F
.................... 	write_eeprom(EE_KU0 + 1, make8(AmpCoef0, 1)); 
1252:  MOVFF  3AA,537
1256:  MOVLW  05
1258:  MOVWF  FA9
125A:  MOVFF  3AA,FA8
125E:  BCF    FA6.6
1260:  BCF    FA6.7
1262:  BSF    FA6.2
1264:  MOVFF  FF2,00
1268:  BCF    FF2.7
126A:  MOVLW  55
126C:  MOVWF  FA7
126E:  MOVLW  AA
1270:  MOVWF  FA7
1272:  BSF    FA6.1
1274:  BTFSC  FA6.1
1276:  BRA    1274
1278:  BCF    FA6.2
127A:  MOVF   00,W
127C:  IORWF  FF2,F
.................... 	write_eeprom(EE_KU1, make8(AmpCoef1, 0)); 
127E:  MOVFF  3B5,537
1282:  MOVLW  06
1284:  MOVWF  FA9
1286:  MOVFF  3B5,FA8
128A:  BCF    FA6.6
128C:  BCF    FA6.7
128E:  BSF    FA6.2
1290:  MOVFF  FF2,00
1294:  BCF    FF2.7
1296:  MOVLW  55
1298:  MOVWF  FA7
129A:  MOVLW  AA
129C:  MOVWF  FA7
129E:  BSF    FA6.1
12A0:  BTFSC  FA6.1
12A2:  BRA    12A0
12A4:  BCF    FA6.2
12A6:  MOVF   00,W
12A8:  IORWF  FF2,F
.................... 	write_eeprom(EE_KU1 + 1, make8(AmpCoef1, 1)); 
12AA:  MOVFF  3B6,537
12AE:  MOVLW  07
12B0:  MOVWF  FA9
12B2:  MOVFF  3B6,FA8
12B6:  BCF    FA6.6
12B8:  BCF    FA6.7
12BA:  BSF    FA6.2
12BC:  MOVFF  FF2,00
12C0:  BCF    FF2.7
12C2:  MOVLW  55
12C4:  MOVWF  FA7
12C6:  MOVLW  AA
12C8:  MOVWF  FA7
12CA:  BSF    FA6.1
12CC:  BTFSC  FA6.1
12CE:  BRA    12CC
12D0:  BCF    FA6.2
12D2:  MOVF   00,W
12D4:  IORWF  FF2,F
.................... 	write_eeprom(EE_TAQ, make8(TAQ, 0)); 
12D6:  MOVFF  3BF,537
12DA:  MOVLW  08
12DC:  MOVWF  FA9
12DE:  MOVFF  3BF,FA8
12E2:  BCF    FA6.6
12E4:  BCF    FA6.7
12E6:  BSF    FA6.2
12E8:  MOVFF  FF2,00
12EC:  BCF    FF2.7
12EE:  MOVLW  55
12F0:  MOVWF  FA7
12F2:  MOVLW  AA
12F4:  MOVWF  FA7
12F6:  BSF    FA6.1
12F8:  BTFSC  FA6.1
12FA:  BRA    12F8
12FC:  BCF    FA6.2
12FE:  MOVF   00,W
1300:  IORWF  FF2,F
.................... 	write_eeprom(EE_TAQ + 1, make8(TAQ, 1)); 
1302:  MOVFF  3C0,537
1306:  MOVLW  09
1308:  MOVWF  FA9
130A:  MOVFF  3C0,FA8
130E:  BCF    FA6.6
1310:  BCF    FA6.7
1312:  BSF    FA6.2
1314:  MOVFF  FF2,00
1318:  BCF    FF2.7
131A:  MOVLW  55
131C:  MOVWF  FA7
131E:  MOVLW  AA
1320:  MOVWF  FA7
1322:  BSF    FA6.1
1324:  BTFSC  FA6.1
1326:  BRA    1324
1328:  BCF    FA6.2
132A:  MOVF   00,W
132C:  IORWF  FF2,F
.................... 	write_eeprom(EE_PCOUNT, make8(PCOUNT, 0)); 
132E:  MOVFF  3C3,537
1332:  MOVLW  0A
1334:  MOVWF  FA9
1336:  MOVFF  3C3,FA8
133A:  BCF    FA6.6
133C:  BCF    FA6.7
133E:  BSF    FA6.2
1340:  MOVFF  FF2,00
1344:  BCF    FF2.7
1346:  MOVLW  55
1348:  MOVWF  FA7
134A:  MOVLW  AA
134C:  MOVWF  FA7
134E:  BSF    FA6.1
1350:  BTFSC  FA6.1
1352:  BRA    1350
1354:  BCF    FA6.2
1356:  MOVF   00,W
1358:  IORWF  FF2,F
.................... 	write_eeprom(EE_PCOUNT + 1, make8(PCOUNT, 1)); 
135A:  MOVFF  3C4,537
135E:  MOVLW  0B
1360:  MOVWF  FA9
1362:  MOVFF  3C4,FA8
1366:  BCF    FA6.6
1368:  BCF    FA6.7
136A:  BSF    FA6.2
136C:  MOVFF  FF2,00
1370:  BCF    FF2.7
1372:  MOVLW  55
1374:  MOVWF  FA7
1376:  MOVLW  AA
1378:  MOVWF  FA7
137A:  BSF    FA6.1
137C:  BTFSC  FA6.1
137E:  BRA    137C
1380:  BCF    FA6.2
1382:  MOVF   00,W
1384:  IORWF  FF2,F
.................... 	write_eeprom(EE_FWDT, make8(FWDT, 0)); 
1386:  MOVFF  3C1,537
138A:  MOVLW  0C
138C:  MOVWF  FA9
138E:  MOVFF  3C1,FA8
1392:  BCF    FA6.6
1394:  BCF    FA6.7
1396:  BSF    FA6.2
1398:  MOVFF  FF2,00
139C:  BCF    FF2.7
139E:  MOVLW  55
13A0:  MOVWF  FA7
13A2:  MOVLW  AA
13A4:  MOVWF  FA7
13A6:  BSF    FA6.1
13A8:  BTFSC  FA6.1
13AA:  BRA    13A8
13AC:  BCF    FA6.2
13AE:  MOVF   00,W
13B0:  IORWF  FF2,F
.................... 	write_eeprom(EE_FWDT + 1, make8(FWDT, 1)); 
13B2:  MOVFF  3C2,537
13B6:  MOVLW  0D
13B8:  MOVWF  FA9
13BA:  MOVFF  3C2,FA8
13BE:  BCF    FA6.6
13C0:  BCF    FA6.7
13C2:  BSF    FA6.2
13C4:  MOVFF  FF2,00
13C8:  BCF    FF2.7
13CA:  MOVLW  55
13CC:  MOVWF  FA7
13CE:  MOVLW  AA
13D0:  MOVWF  FA7
13D2:  BSF    FA6.1
13D4:  BTFSC  FA6.1
13D6:  BRA    13D4
13D8:  BCF    FA6.2
13DA:  MOVF   00,W
13DC:  IORWF  FF2,F
.................... 	write_eeprom(EE_Speed, make8(Speed, 0)); 
13DE:  MOVFF  3DB,537
13E2:  MOVLW  0E
13E4:  MOVWF  FA9
13E6:  MOVFF  3DB,FA8
13EA:  BCF    FA6.6
13EC:  BCF    FA6.7
13EE:  BSF    FA6.2
13F0:  MOVFF  FF2,00
13F4:  BCF    FF2.7
13F6:  MOVLW  55
13F8:  MOVWF  FA7
13FA:  MOVLW  AA
13FC:  MOVWF  FA7
13FE:  BSF    FA6.1
1400:  BTFSC  FA6.1
1402:  BRA    1400
1404:  BCF    FA6.2
1406:  MOVF   00,W
1408:  IORWF  FF2,F
.................... 	write_eeprom(EE_Speed + 1, make8(Speed, 1)); 
140A:  MOVFF  3DC,537
140E:  MOVLW  0F
1410:  MOVWF  FA9
1412:  MOVFF  3DC,FA8
1416:  BCF    FA6.6
1418:  BCF    FA6.7
141A:  BSF    FA6.2
141C:  MOVFF  FF2,00
1420:  BCF    FF2.7
1422:  MOVLW  55
1424:  MOVWF  FA7
1426:  MOVLW  AA
1428:  MOVWF  FA7
142A:  BSF    FA6.1
142C:  BTFSC  FA6.1
142E:  BRA    142C
1430:  BCF    FA6.2
1432:  MOVF   00,W
1434:  IORWF  FF2,F
.................... 	write_eeprom(EE_Host, make8(Addr, 0)); 
1436:  MOVFF  3DD,537
143A:  MOVLW  10
143C:  MOVWF  FA9
143E:  MOVFF  3DD,FA8
1442:  BCF    FA6.6
1444:  BCF    FA6.7
1446:  BSF    FA6.2
1448:  MOVFF  FF2,00
144C:  BCF    FF2.7
144E:  MOVLW  55
1450:  MOVWF  FA7
1452:  MOVLW  AA
1454:  MOVWF  FA7
1456:  BSF    FA6.1
1458:  BTFSC  FA6.1
145A:  BRA    1458
145C:  BCF    FA6.2
145E:  MOVF   00,W
1460:  IORWF  FF2,F
.................... 	write_eeprom(EE_Host + 1, make8(Addr, 1)); 
1462:  MOVFF  3DE,537
1466:  MOVLW  11
1468:  MOVWF  FA9
146A:  MOVFF  3DE,FA8
146E:  BCF    FA6.6
1470:  BCF    FA6.7
1472:  BSF    FA6.2
1474:  MOVFF  FF2,00
1478:  BCF    FF2.7
147A:  MOVLW  55
147C:  MOVWF  FA7
147E:  MOVLW  AA
1480:  MOVWF  FA7
1482:  BSF    FA6.1
1484:  BTFSC  FA6.1
1486:  BRA    1484
1488:  BCF    FA6.2
148A:  MOVF   00,W
148C:  IORWF  FF2,F
.................... 	write_eeprom(EE_T0_CAL, make8(T0_CAL, 0)); 
148E:  MOVFF  3AF,537
1492:  MOVLW  12
1494:  MOVWF  FA9
1496:  MOVFF  3AF,FA8
149A:  BCF    FA6.6
149C:  BCF    FA6.7
149E:  BSF    FA6.2
14A0:  MOVFF  FF2,00
14A4:  BCF    FF2.7
14A6:  MOVLW  55
14A8:  MOVWF  FA7
14AA:  MOVLW  AA
14AC:  MOVWF  FA7
14AE:  BSF    FA6.1
14B0:  BTFSC  FA6.1
14B2:  BRA    14B0
14B4:  BCF    FA6.2
14B6:  MOVF   00,W
14B8:  IORWF  FF2,F
.................... 	write_eeprom(EE_T0_CAL + 1, make8(T0_CAL, 1)); 
14BA:  MOVFF  3B0,537
14BE:  MOVLW  13
14C0:  MOVWF  FA9
14C2:  MOVFF  3B0,FA8
14C6:  BCF    FA6.6
14C8:  BCF    FA6.7
14CA:  BSF    FA6.2
14CC:  MOVFF  FF2,00
14D0:  BCF    FF2.7
14D2:  MOVLW  55
14D4:  MOVWF  FA7
14D6:  MOVLW  AA
14D8:  MOVWF  FA7
14DA:  BSF    FA6.1
14DC:  BTFSC  FA6.1
14DE:  BRA    14DC
14E0:  BCF    FA6.2
14E2:  MOVF   00,W
14E4:  IORWF  FF2,F
.................... 	write_eeprom(EE_T1_CAL, make8(T1_CAL, 0)); 
14E6:  MOVFF  3BB,537
14EA:  MOVLW  14
14EC:  MOVWF  FA9
14EE:  MOVFF  3BB,FA8
14F2:  BCF    FA6.6
14F4:  BCF    FA6.7
14F6:  BSF    FA6.2
14F8:  MOVFF  FF2,00
14FC:  BCF    FF2.7
14FE:  MOVLW  55
1500:  MOVWF  FA7
1502:  MOVLW  AA
1504:  MOVWF  FA7
1506:  BSF    FA6.1
1508:  BTFSC  FA6.1
150A:  BRA    1508
150C:  BCF    FA6.2
150E:  MOVF   00,W
1510:  IORWF  FF2,F
.................... 	write_eeprom(EE_T1_CAL + 1, make8(T1_CAL, 1)); 
1512:  MOVFF  3BC,537
1516:  MOVLW  15
1518:  MOVWF  FA9
151A:  MOVFF  3BC,FA8
151E:  BCF    FA6.6
1520:  BCF    FA6.7
1522:  BSF    FA6.2
1524:  MOVFF  FF2,00
1528:  BCF    FF2.7
152A:  MOVLW  55
152C:  MOVWF  FA7
152E:  MOVLW  AA
1530:  MOVWF  FA7
1532:  BSF    FA6.1
1534:  BTFSC  FA6.1
1536:  BRA    1534
1538:  BCF    FA6.2
153A:  MOVF   00,W
153C:  IORWF  FF2,F
.................... 	write_eeprom(EE_TG_CAL, make8(TG_CAL, 0)); 
153E:  MOVFF  3D9,537
1542:  MOVLW  16
1544:  MOVWF  FA9
1546:  MOVFF  3D9,FA8
154A:  BCF    FA6.6
154C:  BCF    FA6.7
154E:  BSF    FA6.2
1550:  MOVFF  FF2,00
1554:  BCF    FF2.7
1556:  MOVLW  55
1558:  MOVWF  FA7
155A:  MOVLW  AA
155C:  MOVWF  FA7
155E:  BSF    FA6.1
1560:  BTFSC  FA6.1
1562:  BRA    1560
1564:  BCF    FA6.2
1566:  MOVF   00,W
1568:  IORWF  FF2,F
.................... 	write_eeprom(EE_TG_CAL + 1, make8(TG_CAL, 1)); 
156A:  MOVFF  3DA,537
156E:  MOVLW  17
1570:  MOVWF  FA9
1572:  MOVFF  3DA,FA8
1576:  BCF    FA6.6
1578:  BCF    FA6.7
157A:  BSF    FA6.2
157C:  MOVFF  FF2,00
1580:  BCF    FF2.7
1582:  MOVLW  55
1584:  MOVWF  FA7
1586:  MOVLW  AA
1588:  MOVWF  FA7
158A:  BSF    FA6.1
158C:  BTFSC  FA6.1
158E:  BRA    158C
1590:  BCF    FA6.2
1592:  MOVF   00,W
1594:  IORWF  FF2,F
....................  
.................... 	//float 
.................... 	memcpy(&temp, &KGT, 4); 
1596:  MOVLW  05
1598:  MOVWF  FEA
159A:  MOVLW  33
159C:  MOVWF  FE9
159E:  MOVLW  03
15A0:  MOVWF  FE2
15A2:  MOVLW  D1
15A4:  MOVWF  FE1
15A6:  MOVLW  04
15A8:  MOVWF  01
15AA:  MOVFF  FE6,FEE
15AE:  DECFSZ 01,F
15B0:  BRA    15AA
.................... 	write_eeprom(EE_KGT + 2, make8(temp, 3)); 
15B2:  MOVFF  536,537
15B6:  MOVLW  1A
15B8:  MOVWF  FA9
15BA:  MOVFF  536,FA8
15BE:  BCF    FA6.6
15C0:  BCF    FA6.7
15C2:  BSF    FA6.2
15C4:  MOVFF  FF2,00
15C8:  BCF    FF2.7
15CA:  MOVLW  55
15CC:  MOVWF  FA7
15CE:  MOVLW  AA
15D0:  MOVWF  FA7
15D2:  BSF    FA6.1
15D4:  BTFSC  FA6.1
15D6:  BRA    15D4
15D8:  BCF    FA6.2
15DA:  MOVF   00,W
15DC:  IORWF  FF2,F
.................... 	write_eeprom(EE_KGT + 3, make8(temp, 2)); 
15DE:  MOVFF  535,537
15E2:  MOVLW  1B
15E4:  MOVWF  FA9
15E6:  MOVFF  535,FA8
15EA:  BCF    FA6.6
15EC:  BCF    FA6.7
15EE:  BSF    FA6.2
15F0:  MOVFF  FF2,00
15F4:  BCF    FF2.7
15F6:  MOVLW  55
15F8:  MOVWF  FA7
15FA:  MOVLW  AA
15FC:  MOVWF  FA7
15FE:  BSF    FA6.1
1600:  BTFSC  FA6.1
1602:  BRA    1600
1604:  BCF    FA6.2
1606:  MOVF   00,W
1608:  IORWF  FF2,F
.................... 	write_eeprom(EE_KGT, make8(temp, 1)); 
160A:  MOVFF  534,537
160E:  MOVLW  18
1610:  MOVWF  FA9
1612:  MOVFF  534,FA8
1616:  BCF    FA6.6
1618:  BCF    FA6.7
161A:  BSF    FA6.2
161C:  MOVFF  FF2,00
1620:  BCF    FF2.7
1622:  MOVLW  55
1624:  MOVWF  FA7
1626:  MOVLW  AA
1628:  MOVWF  FA7
162A:  BSF    FA6.1
162C:  BTFSC  FA6.1
162E:  BRA    162C
1630:  BCF    FA6.2
1632:  MOVF   00,W
1634:  IORWF  FF2,F
.................... 	write_eeprom(EE_KGT + 1, make8(temp, 0)); 
1636:  MOVFF  533,537
163A:  MOVLW  19
163C:  MOVWF  FA9
163E:  MOVFF  533,FA8
1642:  BCF    FA6.6
1644:  BCF    FA6.7
1646:  BSF    FA6.2
1648:  MOVFF  FF2,00
164C:  BCF    FF2.7
164E:  MOVLW  55
1650:  MOVWF  FA7
1652:  MOVLW  AA
1654:  MOVWF  FA7
1656:  BSF    FA6.1
1658:  BTFSC  FA6.1
165A:  BRA    1658
165C:  BCF    FA6.2
165E:  MOVF   00,W
1660:  IORWF  FF2,F
....................  
.................... 	memcpy(&temp, &KGU, 4); 
1662:  MOVLW  05
1664:  MOVWF  FEA
1666:  MOVLW  33
1668:  MOVWF  FE9
166A:  MOVLW  03
166C:  MOVWF  FE2
166E:  MOVLW  D5
1670:  MOVWF  FE1
1672:  MOVLW  04
1674:  MOVWF  01
1676:  MOVFF  FE6,FEE
167A:  DECFSZ 01,F
167C:  BRA    1676
.................... 	write_eeprom(EE_KGU + 2, make8(temp, 3)); 
167E:  MOVFF  536,537
1682:  MOVLW  1E
1684:  MOVWF  FA9
1686:  MOVFF  536,FA8
168A:  BCF    FA6.6
168C:  BCF    FA6.7
168E:  BSF    FA6.2
1690:  MOVFF  FF2,00
1694:  BCF    FF2.7
1696:  MOVLW  55
1698:  MOVWF  FA7
169A:  MOVLW  AA
169C:  MOVWF  FA7
169E:  BSF    FA6.1
16A0:  BTFSC  FA6.1
16A2:  BRA    16A0
16A4:  BCF    FA6.2
16A6:  MOVF   00,W
16A8:  IORWF  FF2,F
.................... 	write_eeprom(EE_KGU + 3, make8(temp, 2)); 
16AA:  MOVFF  535,537
16AE:  MOVLW  1F
16B0:  MOVWF  FA9
16B2:  MOVFF  535,FA8
16B6:  BCF    FA6.6
16B8:  BCF    FA6.7
16BA:  BSF    FA6.2
16BC:  MOVFF  FF2,00
16C0:  BCF    FF2.7
16C2:  MOVLW  55
16C4:  MOVWF  FA7
16C6:  MOVLW  AA
16C8:  MOVWF  FA7
16CA:  BSF    FA6.1
16CC:  BTFSC  FA6.1
16CE:  BRA    16CC
16D0:  BCF    FA6.2
16D2:  MOVF   00,W
16D4:  IORWF  FF2,F
.................... 	write_eeprom(EE_KGU, make8(temp, 1)); 
16D6:  MOVFF  534,537
16DA:  MOVLW  1C
16DC:  MOVWF  FA9
16DE:  MOVFF  534,FA8
16E2:  BCF    FA6.6
16E4:  BCF    FA6.7
16E6:  BSF    FA6.2
16E8:  MOVFF  FF2,00
16EC:  BCF    FF2.7
16EE:  MOVLW  55
16F0:  MOVWF  FA7
16F2:  MOVLW  AA
16F4:  MOVWF  FA7
16F6:  BSF    FA6.1
16F8:  BTFSC  FA6.1
16FA:  BRA    16F8
16FC:  BCF    FA6.2
16FE:  MOVF   00,W
1700:  IORWF  FF2,F
.................... 	write_eeprom(EE_KGU + 1, make8(temp, 0)); 
1702:  MOVFF  533,537
1706:  MOVLW  1D
1708:  MOVWF  FA9
170A:  MOVFF  533,FA8
170E:  BCF    FA6.6
1710:  BCF    FA6.7
1712:  BSF    FA6.2
1714:  MOVFF  FF2,00
1718:  BCF    FF2.7
171A:  MOVLW  55
171C:  MOVWF  FA7
171E:  MOVLW  AA
1720:  MOVWF  FA7
1722:  BSF    FA6.1
1724:  BTFSC  FA6.1
1726:  BRA    1724
1728:  BCF    FA6.2
172A:  MOVF   00,W
172C:  IORWF  FF2,F
....................  
.................... 	memcpy(&temp, &KGT, 4); 
172E:  MOVLW  05
1730:  MOVWF  FEA
1732:  MOVLW  33
1734:  MOVWF  FE9
1736:  MOVLW  03
1738:  MOVWF  FE2
173A:  MOVLW  D1
173C:  MOVWF  FE1
173E:  MOVLW  04
1740:  MOVWF  01
1742:  MOVFF  FE6,FEE
1746:  DECFSZ 01,F
1748:  BRA    1742
.................... 	write_eeprom(EE_KST0 + 2, make8(temp, 3)); 
174A:  MOVFF  536,537
174E:  MOVLW  22
1750:  MOVWF  FA9
1752:  MOVFF  536,FA8
1756:  BCF    FA6.6
1758:  BCF    FA6.7
175A:  BSF    FA6.2
175C:  MOVFF  FF2,00
1760:  BCF    FF2.7
1762:  MOVLW  55
1764:  MOVWF  FA7
1766:  MOVLW  AA
1768:  MOVWF  FA7
176A:  BSF    FA6.1
176C:  BTFSC  FA6.1
176E:  BRA    176C
1770:  BCF    FA6.2
1772:  MOVF   00,W
1774:  IORWF  FF2,F
.................... 	write_eeprom(EE_KST0 + 3, make8(temp, 2)); 
1776:  MOVFF  535,537
177A:  MOVLW  23
177C:  MOVWF  FA9
177E:  MOVFF  535,FA8
1782:  BCF    FA6.6
1784:  BCF    FA6.7
1786:  BSF    FA6.2
1788:  MOVFF  FF2,00
178C:  BCF    FF2.7
178E:  MOVLW  55
1790:  MOVWF  FA7
1792:  MOVLW  AA
1794:  MOVWF  FA7
1796:  BSF    FA6.1
1798:  BTFSC  FA6.1
179A:  BRA    1798
179C:  BCF    FA6.2
179E:  MOVF   00,W
17A0:  IORWF  FF2,F
.................... 	write_eeprom(EE_KST0, make8(temp, 1)); 
17A2:  MOVFF  534,537
17A6:  MOVLW  20
17A8:  MOVWF  FA9
17AA:  MOVFF  534,FA8
17AE:  BCF    FA6.6
17B0:  BCF    FA6.7
17B2:  BSF    FA6.2
17B4:  MOVFF  FF2,00
17B8:  BCF    FF2.7
17BA:  MOVLW  55
17BC:  MOVWF  FA7
17BE:  MOVLW  AA
17C0:  MOVWF  FA7
17C2:  BSF    FA6.1
17C4:  BTFSC  FA6.1
17C6:  BRA    17C4
17C8:  BCF    FA6.2
17CA:  MOVF   00,W
17CC:  IORWF  FF2,F
.................... 	write_eeprom(EE_KST0 + 1, make8(temp, 0)); 
17CE:  MOVFF  533,537
17D2:  MOVLW  21
17D4:  MOVWF  FA9
17D6:  MOVFF  533,FA8
17DA:  BCF    FA6.6
17DC:  BCF    FA6.7
17DE:  BSF    FA6.2
17E0:  MOVFF  FF2,00
17E4:  BCF    FF2.7
17E6:  MOVLW  55
17E8:  MOVWF  FA7
17EA:  MOVLW  AA
17EC:  MOVWF  FA7
17EE:  BSF    FA6.1
17F0:  BTFSC  FA6.1
17F2:  BRA    17F0
17F4:  BCF    FA6.2
17F6:  MOVF   00,W
17F8:  IORWF  FF2,F
....................  
.................... 	memcpy(&temp, &KGT, 4); 
17FA:  MOVLW  05
17FC:  MOVWF  FEA
17FE:  MOVLW  33
1800:  MOVWF  FE9
1802:  MOVLW  03
1804:  MOVWF  FE2
1806:  MOVLW  D1
1808:  MOVWF  FE1
180A:  MOVLW  04
180C:  MOVWF  01
180E:  MOVFF  FE6,FEE
1812:  DECFSZ 01,F
1814:  BRA    180E
.................... 	write_eeprom(EE_KST1 + 2, make8(temp, 3)); 
1816:  MOVFF  536,537
181A:  MOVLW  26
181C:  MOVWF  FA9
181E:  MOVFF  536,FA8
1822:  BCF    FA6.6
1824:  BCF    FA6.7
1826:  BSF    FA6.2
1828:  MOVFF  FF2,00
182C:  BCF    FF2.7
182E:  MOVLW  55
1830:  MOVWF  FA7
1832:  MOVLW  AA
1834:  MOVWF  FA7
1836:  BSF    FA6.1
1838:  BTFSC  FA6.1
183A:  BRA    1838
183C:  BCF    FA6.2
183E:  MOVF   00,W
1840:  IORWF  FF2,F
.................... 	write_eeprom(EE_KST1 + 3, make8(temp, 2)); 
1842:  MOVFF  535,537
1846:  MOVLW  27
1848:  MOVWF  FA9
184A:  MOVFF  535,FA8
184E:  BCF    FA6.6
1850:  BCF    FA6.7
1852:  BSF    FA6.2
1854:  MOVFF  FF2,00
1858:  BCF    FF2.7
185A:  MOVLW  55
185C:  MOVWF  FA7
185E:  MOVLW  AA
1860:  MOVWF  FA7
1862:  BSF    FA6.1
1864:  BTFSC  FA6.1
1866:  BRA    1864
1868:  BCF    FA6.2
186A:  MOVF   00,W
186C:  IORWF  FF2,F
.................... 	write_eeprom(EE_KST1, make8(temp, 1)); 
186E:  MOVFF  534,537
1872:  MOVLW  24
1874:  MOVWF  FA9
1876:  MOVFF  534,FA8
187A:  BCF    FA6.6
187C:  BCF    FA6.7
187E:  BSF    FA6.2
1880:  MOVFF  FF2,00
1884:  BCF    FF2.7
1886:  MOVLW  55
1888:  MOVWF  FA7
188A:  MOVLW  AA
188C:  MOVWF  FA7
188E:  BSF    FA6.1
1890:  BTFSC  FA6.1
1892:  BRA    1890
1894:  BCF    FA6.2
1896:  MOVF   00,W
1898:  IORWF  FF2,F
.................... 	write_eeprom(EE_KST1 + 1, make8(temp, 0)); 
189A:  MOVFF  533,537
189E:  MOVLW  25
18A0:  MOVWF  FA9
18A2:  MOVFF  533,FA8
18A6:  BCF    FA6.6
18A8:  BCF    FA6.7
18AA:  BSF    FA6.2
18AC:  MOVFF  FF2,00
18B0:  BCF    FF2.7
18B2:  MOVLW  55
18B4:  MOVWF  FA7
18B6:  MOVLW  AA
18B8:  MOVWF  FA7
18BA:  BSF    FA6.1
18BC:  BTFSC  FA6.1
18BE:  BRA    18BC
18C0:  BCF    FA6.2
18C2:  MOVF   00,W
18C4:  IORWF  FF2,F
....................  
.................... 	setup_wdt(WDT_ON); 
18C6:  BSF    FD1.0
.................... } 
18C8:  MOVLB  0
18CA:  GOTO   1C32 (RETURN)
....................  
.................... //temperature measuring 
.................... void Termometer(void) 
.................... { 
.................... 	signed int16 
.................... 		temp; 
....................  
.................... 	//generator 
.................... 	set_adc_channel(2);	//select generator channel 
*
2714:  MOVLW  08
2716:  MOVWF  01
2718:  MOVF   FC2,W
271A:  ANDLW  C3
271C:  IORWF  01,W
271E:  MOVWF  FC2
.................... 	delay_us(10);		//small wait 
2720:  CLRWDT
2722:  MOVLW  1A
2724:  MOVWF  00
2726:  DECFSZ 00,F
2728:  BRA    2726
.................... 	temp = read_adc();	//read value 
272A:  BSF    FC2.1
272C:  BTFSC  FC2.1
272E:  BRA    272C
2730:  MOVFF  FC4,518
2734:  MOVLB  5
2736:  MOVFF  FC3,517
.................... 	T_GEN = (signed int16)((temp - 205)*24.414); 
273A:  MOVLW  CD
273C:  SUBWF  x17,W
273E:  MOVWF  x19
2740:  MOVLW  00
2742:  SUBWFB x18,W
2744:  MOVWF  x1A
2746:  MOVWF  x1C
2748:  MOVFF  519,51B
274C:  MOVLB  0
274E:  RCALL  2592
2750:  MOVFF  03,51F
2754:  MOVFF  02,51E
2758:  MOVFF  01,51D
275C:  MOVFF  00,51C
2760:  MOVLW  DF
2762:  MOVLB  5
2764:  MOVWF  x23
2766:  MOVLW  4F
2768:  MOVWF  x22
276A:  MOVLW  43
276C:  MOVWF  x21
276E:  MOVLW  83
2770:  MOVWF  x20
2772:  MOVLB  0
2774:  RCALL  25E2
2776:  MOVFF  03,51C
277A:  MOVFF  02,51B
277E:  MOVFF  01,51A
2782:  MOVFF  00,519
2786:  RCALL  26D8
2788:  MOVFF  02,3C8
278C:  MOVFF  01,3C7
....................  
.................... 	//t0 
.................... 	set_adc_channel(5);	//select generator channel 
2790:  MOVLW  14
2792:  MOVWF  01
2794:  MOVF   FC2,W
2796:  ANDLW  C3
2798:  IORWF  01,W
279A:  MOVWF  FC2
.................... 	delay_us(10);		//small wait 
279C:  CLRWDT
279E:  MOVLW  1A
27A0:  MOVWF  00
27A2:  DECFSZ 00,F
27A4:  BRA    27A2
.................... 	temp = read_adc();	//read value 
27A6:  BSF    FC2.1
27A8:  BTFSC  FC2.1
27AA:  BRA    27A8
27AC:  MOVFF  FC4,518
27B0:  MOVLB  5
27B2:  MOVFF  FC3,517
.................... 	T_SR0 = (signed int16)((temp - 205)*24.414); 
27B6:  MOVLW  CD
27B8:  SUBWF  x17,W
27BA:  MOVWF  x19
27BC:  MOVLW  00
27BE:  SUBWFB x18,W
27C0:  MOVWF  x1A
27C2:  MOVWF  x1C
27C4:  MOVFF  519,51B
27C8:  MOVLB  0
27CA:  RCALL  2592
27CC:  MOVFF  03,51F
27D0:  MOVFF  02,51E
27D4:  MOVFF  01,51D
27D8:  MOVFF  00,51C
27DC:  MOVLW  DF
27DE:  MOVLB  5
27E0:  MOVWF  x23
27E2:  MOVLW  4F
27E4:  MOVWF  x22
27E6:  MOVLW  43
27E8:  MOVWF  x21
27EA:  MOVLW  83
27EC:  MOVWF  x20
27EE:  MOVLB  0
27F0:  RCALL  25E2
27F2:  MOVFF  03,51C
27F6:  MOVFF  02,51B
27FA:  MOVFF  01,51A
27FE:  MOVFF  00,519
2802:  RCALL  26D8
2804:  MOVFF  02,3B2
2808:  MOVFF  01,3B1
....................  
.................... 	//t1 
.................... 	set_adc_channel(4);	//select generator channel 
280C:  MOVLW  10
280E:  MOVWF  01
2810:  MOVF   FC2,W
2812:  ANDLW  C3
2814:  IORWF  01,W
2816:  MOVWF  FC2
.................... 	delay_us(10);		//small wait 
2818:  CLRWDT
281A:  MOVLW  1A
281C:  MOVWF  00
281E:  DECFSZ 00,F
2820:  BRA    281E
.................... 	temp = read_adc();	//read value 
2822:  BSF    FC2.1
2824:  BTFSC  FC2.1
2826:  BRA    2824
2828:  MOVFF  FC4,518
282C:  MOVLB  5
282E:  MOVFF  FC3,517
.................... 	T_SR1 = (signed int16)((temp - 205)*24.414); 
2832:  MOVLW  CD
2834:  SUBWF  x17,W
2836:  MOVWF  x19
2838:  MOVLW  00
283A:  SUBWFB x18,W
283C:  MOVWF  x1A
283E:  MOVWF  x1C
2840:  MOVFF  519,51B
2844:  MOVLB  0
2846:  RCALL  2592
2848:  MOVFF  03,51F
284C:  MOVFF  02,51E
2850:  MOVFF  01,51D
2854:  MOVFF  00,51C
2858:  MOVLW  DF
285A:  MOVLB  5
285C:  MOVWF  x23
285E:  MOVLW  4F
2860:  MOVWF  x22
2862:  MOVLW  43
2864:  MOVWF  x21
2866:  MOVLW  83
2868:  MOVWF  x20
286A:  MOVLB  0
286C:  RCALL  25E2
286E:  MOVFF  03,51C
2872:  MOVFF  02,51B
2876:  MOVFF  01,51A
287A:  MOVFF  00,519
287E:  RCALL  26D8
2880:  MOVFF  02,3BE
2884:  MOVFF  01,3BD
.................... } 
2888:  RETLW  00
....................  
.................... //DAC setting 
.................... void SetSawDac(int16 level) { 
....................  
.................... 	output_low(DAC1);			//select course DAC 
*
2B16:  BCF    F95.1
2B18:  BCF    F8C.1
.................... 	spi_write((make8(level, 1) & 0x0f) | 0x10);	//send high part 
2B1A:  MOVLB  5
2B1C:  MOVF   x18,W
2B1E:  ANDLW  0F
2B20:  IORLW  10
2B22:  MOVWF  x19
2B24:  MOVF   FC9,W
2B26:  MOVFF  519,FC9
2B2A:  RRCF   FC7,W
2B2C:  BNC   2B2A
.................... 	spi_write(make8(level, 0));		//send low part 
2B2E:  MOVFF  517,519
2B32:  MOVF   FC9,W
2B34:  MOVFF  517,FC9
2B38:  RRCF   FC7,W
2B3A:  BNC   2B38
.................... 	output_high(DAC1);			//deselect 
2B3C:  BCF    F95.1
2B3E:  BSF    F8C.1
.................... 	output_low(LDAC);			//send DAC 
2B40:  BCF    F92.7
2B42:  BCF    F89.7
.................... 	output_high(LDAC);			//strobe 
2B44:  BCF    F92.7
2B46:  BSF    F89.7
.................... } 
2B48:  MOVLB  0
2B4A:  RETLW  00
....................  
.................... //KU setting 
.................... void SetKU0(int16 coeff) 
.................... { 
.................... 	int16 dacval; 
.................... 	setup_wdt(WDT_OFF); 
*
288A:  BCF    FD1.0
.................... 	if ((coeff < 1) & (coeff > 6)) 
288C:  MOVLB  5
288E:  MOVF   x17,F
2890:  BNZ   2896
2892:  MOVF   x18,F
2894:  BZ    289A
2896:  MOVLW  00
2898:  BRA    289C
289A:  MOVLW  01
289C:  MOVWF  x1B
289E:  MOVF   x18,F
28A0:  BNZ   28AC
28A2:  MOVF   x17,W
28A4:  SUBLW  06
28A6:  BNC   28AC
28A8:  MOVLW  00
28AA:  BRA    28AE
28AC:  MOVLW  01
28AE:  ANDWF  x1B,W
28B0:  BZ    28B8
.................... 		coeff = 1; 
28B2:  CLRF   x18
28B4:  MOVLW  01
28B6:  MOVWF  x17
.................... 	dacval = (0x1fff >> coeff) | 0x7000; 
28B8:  MOVLW  1F
28BA:  MOVWF  x1C
28BC:  MOVLW  FF
28BE:  MOVWF  x1B
28C0:  MOVF   x17,W
28C2:  MOVWF  00
28C4:  BZ    28D0
28C6:  BCF    FD8.0
28C8:  RRCF   x1C,F
28CA:  RRCF   x1B,F
28CC:  DECFSZ 00,F
28CE:  BRA    28C6
28D0:  MOVF   x1B,W
28D2:  MOVWF  x19
28D4:  MOVF   x1C,W
28D6:  IORLW  70
28D8:  MOVWF  x1A
.................... 	output_low(KU0);				//select KU0 DAC 
28DA:  BCF    F95.5
28DC:  BCF    F8C.5
.................... 	spi_write(make8(dacval, 1));		//send high part 
28DE:  MOVFF  51A,51B
28E2:  MOVF   FC9,W
28E4:  MOVFF  51A,FC9
28E8:  RRCF   FC7,W
28EA:  BNC   28E8
.................... 	spi_write(make8(dacval, 0));		//send low part 
28EC:  MOVFF  519,51B
28F0:  MOVF   FC9,W
28F2:  MOVFF  519,FC9
28F6:  RRCF   FC7,W
28F8:  BNC   28F6
.................... 	output_high(KU0);				//deselect 
28FA:  BCF    F95.5
28FC:  BSF    F8C.5
.................... 	setup_wdt(WDT_ON); 
28FE:  BSF    FD1.0
.................... } 
2900:  MOVLB  0
2902:  GOTO   3876 (RETURN)
....................  
.................... void SetKU1(int16 coeff) 
.................... { 
.................... 	int16 dacval; 
.................... 	setup_wdt(WDT_OFF); 
2906:  BCF    FD1.0
.................... 	if ((coeff < 1) & (coeff > 6)) 
2908:  MOVLB  5
290A:  MOVF   x17,F
290C:  BNZ   2912
290E:  MOVF   x18,F
2910:  BZ    2916
2912:  MOVLW  00
2914:  BRA    2918
2916:  MOVLW  01
2918:  MOVWF  x1B
291A:  MOVF   x18,F
291C:  BNZ   2928
291E:  MOVF   x17,W
2920:  SUBLW  06
2922:  BNC   2928
2924:  MOVLW  00
2926:  BRA    292A
2928:  MOVLW  01
292A:  ANDWF  x1B,W
292C:  BZ    2934
.................... 		coeff = 1; 
292E:  CLRF   x18
2930:  MOVLW  01
2932:  MOVWF  x17
.................... 	dacval = (0x1fff >> coeff) | 0x7000; 
2934:  MOVLW  1F
2936:  MOVWF  x1C
2938:  MOVLW  FF
293A:  MOVWF  x1B
293C:  MOVF   x17,W
293E:  MOVWF  00
2940:  BZ    294C
2942:  BCF    FD8.0
2944:  RRCF   x1C,F
2946:  RRCF   x1B,F
2948:  DECFSZ 00,F
294A:  BRA    2942
294C:  MOVF   x1B,W
294E:  MOVWF  x19
2950:  MOVF   x1C,W
2952:  IORLW  70
2954:  MOVWF  x1A
.................... 	output_low(KU1);				//select KU0 DAC 
2956:  BCF    F95.4
2958:  BCF    F8C.4
.................... 	spi_write(make8(dacval, 1));		//send high part 
295A:  MOVFF  51A,51B
295E:  MOVF   FC9,W
2960:  MOVFF  51A,FC9
2964:  RRCF   FC7,W
2966:  BNC   2964
.................... 	spi_write(make8(dacval, 0));		//send low part 
2968:  MOVFF  519,51B
296C:  MOVF   FC9,W
296E:  MOVFF  519,FC9
2972:  RRCF   FC7,W
2974:  BNC   2972
.................... 	output_high(KU1);				//deselect 
2976:  BCF    F95.4
2978:  BSF    F8C.4
.................... 	setup_wdt(WDT_ON); 
297A:  BSF    FD1.0
.................... } 
297C:  MOVLB  0
297E:  GOTO   3882 (RETURN)
....................  
.................... //ISR 
.................... #include	"modbus_isr.h" 
.................... //modbus realization 
.................... // 
.................... //values 
.................... enum modbus_exceptions{ 
.................... 	illegal_function=1, 
.................... 	illegal_data_address=2, 
.................... 	illegal_data_value=3, 
.................... 	slave_device_failure=4, 
.................... 	acknowledge=5, 
.................... 	slave_device_busy=6 
.................... }; 
.................... static 	int8	MB_Buffer[256];		//incoming buffer 
.................... static	int8	MB_Length=0;			//message length 
.................... static	int16	ValidReq;			//valid req count 
.................... static	int16	CRCReq;				//CRC error count 
.................... static	int16	ExcReq;				//ecxcept error count 
.................... // 
.................... //CRC table 
.................... /* Table of CRC values for high–order byte */ 
.................... const int8 modbus_auchCRCHi[] = { 
....................    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 
....................    0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 
....................    0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 
....................    0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 
....................    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 
....................    0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 
....................    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 
....................    0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 
....................    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 
....................    0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 
....................    0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 
....................    0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 
....................    0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 
....................    0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 
....................    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 
....................    0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 
....................    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 
....................    0x40 
.................... }; 
....................  
.................... /* Table of CRC values for low–order byte */ 
.................... const int8 modbus_auchCRCLo[] = { 
....................    0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4, 
....................    0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09, 
....................    0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 
....................    0x1D, 0x1C, 0xDC, 0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3, 
....................    0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7, 
....................    0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A, 
....................    0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 
....................    0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26, 
....................    0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2, 
....................    0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F, 
....................    0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB, 
....................    0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5, 
....................    0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91, 
....................    0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C, 
....................    0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88, 
....................    0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C, 
....................    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80, 
....................    0x40 
.................... }; 
.................... //procedures 
.................... // 
.................... // 
.................... //UART preset 
.................... #USE RS232(baud=9600, xmit=TX, rcv=RX, enable=DIR, parity=N) 
*
1900:  BCF    F92.6
1902:  BSF    F89.6
1904:  BTFSS  F9E.4
1906:  BRA    1904
1908:  MOVLB  5
190A:  MOVFF  534,FAD
190E:  NOP   
1910:  BCF    F92.6
1912:  BSF    F89.6
1914:  BTFSS  FAC.1
1916:  BRA    1914
1918:  BCF    F92.6
191A:  BCF    F89.6
191C:  MOVLB  0
191E:  GOTO   1EB4 (RETURN)
.................... void	RsInit(void){ 
.................... 	MB_Length=0;	//set clear buffer 
*
244E:  MOVLB  4
2450:  CLRF   xEF
.................... 	//select rate 
.................... 	switch(Speed){ 
2452:  MOVLB  3
2454:  MOVF   xDB,W
2456:  MOVWF  00
2458:  MOVF   xDC,W
245A:  MOVWF  03
245C:  MOVLW  04
245E:  SUBWF  03,W
2460:  BNZ   246C
2462:  MOVLW  B0
2464:  SUBWF  00,W
2466:  MOVLB  0
2468:  BZ    24DC
246A:  MOVLB  3
246C:  MOVLW  07
246E:  SUBWF  03,W
2470:  BNZ   247C
2472:  MOVLW  08
2474:  SUBWF  00,W
2476:  MOVLB  0
2478:  BZ    24F0
247A:  MOVLB  3
247C:  MOVLW  09
247E:  SUBWF  03,W
2480:  BNZ   248C
2482:  MOVLW  60
2484:  SUBWF  00,W
2486:  MOVLB  0
2488:  BZ    2504
248A:  MOVLB  3
248C:  MOVLW  12
248E:  SUBWF  03,W
2490:  BNZ   249C
2492:  MOVLW  C0
2494:  SUBWF  00,W
2496:  MOVLB  0
2498:  BZ    2518
249A:  MOVLB  3
249C:  MOVLW  1C
249E:  SUBWF  03,W
24A0:  BNZ   24AC
24A2:  MOVLW  20
24A4:  SUBWF  00,W
24A6:  MOVLB  0
24A8:  BZ    252C
24AA:  MOVLB  3
24AC:  MOVLW  25
24AE:  SUBWF  03,W
24B0:  BNZ   24BC
24B2:  MOVLW  80
24B4:  SUBWF  00,W
24B6:  MOVLB  0
24B8:  BZ    2540
24BA:  MOVLB  3
24BC:  MOVLW  38
24BE:  SUBWF  03,W
24C0:  BNZ   24CC
24C2:  MOVLW  40
24C4:  SUBWF  00,W
24C6:  MOVLB  0
24C8:  BZ    2554
24CA:  MOVLB  3
24CC:  MOVLW  4B
24CE:  SUBWF  03,W
24D0:  BNZ   24DA
24D2:  MOVF   00,F
24D4:  MOVLB  0
24D6:  BZ    2564
24D8:  MOVLB  3
24DA:  BRA    257A
.................... 		case	1200:	setup_uart(1200); 
24DC:  BSF    FB8.3
24DE:  MOVLW  0A
24E0:  MOVWF  FAF
24E2:  MOVLW  1A
24E4:  MOVWF  FB0
24E6:  MOVLW  A6
24E8:  MOVWF  FAC
24EA:  NOP   
24EC:  NOP   
.................... 						break; 
24EE:  BRA    258C
.................... 		case	1800:	setup_uart(1800); 
24F0:  BSF    FB8.3
24F2:  MOVLW  5B
24F4:  MOVWF  FAF
24F6:  MOVLW  11
24F8:  MOVWF  FB0
24FA:  MOVLW  A6
24FC:  MOVWF  FAC
24FE:  NOP   
2500:  NOP   
.................... 						break; 
2502:  BRA    258C
.................... 		case	2400:	setup_uart(2400); 
2504:  BSF    FB8.3
2506:  MOVLW  04
2508:  MOVWF  FAF
250A:  MOVLW  0D
250C:  MOVWF  FB0
250E:  MOVLW  A6
2510:  MOVWF  FAC
2512:  NOP   
2514:  NOP   
.................... 						break; 
2516:  BRA    258C
.................... 		case	4800:	setup_uart(4800); 
2518:  BSF    FB8.3
251A:  MOVLW  82
251C:  MOVWF  FAF
251E:  MOVLW  06
2520:  MOVWF  FB0
2522:  MOVLW  A6
2524:  MOVWF  FAC
2526:  NOP   
2528:  NOP   
.................... 						break; 
252A:  BRA    258C
.................... 		case	7200:	setup_uart(7200); 
252C:  BSF    FB8.3
252E:  MOVLW  56
2530:  MOVWF  FAF
2532:  MOVLW  04
2534:  MOVWF  FB0
2536:  MOVLW  A6
2538:  MOVWF  FAC
253A:  NOP   
253C:  NOP   
.................... 						break; 
253E:  BRA    258C
.................... 		case	9600:	setup_uart(9600); 
2540:  BSF    FB8.3
2542:  MOVLW  40
2544:  MOVWF  FAF
2546:  MOVLW  03
2548:  MOVWF  FB0
254A:  MOVLW  A6
254C:  MOVWF  FAC
254E:  NOP   
2550:  NOP   
.................... 						break; 
2552:  BRA    258C
.................... 		case	14400:	setup_uart(14400); 
2554:  BCF    FB8.3
2556:  MOVLW  8A
2558:  MOVWF  FAF
255A:  MOVLW  A6
255C:  MOVWF  FAC
255E:  NOP   
2560:  NOP   
.................... 						break; 
2562:  BRA    258C
.................... 		case	19200:	setup_uart(19200); 
2564:  BSF    FB8.3
2566:  MOVLW  A0
2568:  MOVWF  FAF
256A:  MOVLW  01
256C:  MOVWF  FB0
256E:  MOVLW  A6
2570:  MOVWF  FAC
2572:  NOP   
2574:  NOP   
.................... 						break; 
2576:  BRA    258C
2578:  MOVLB  3
.................... 		default:		setup_uart(9600); 
257A:  BSF    FB8.3
257C:  MOVLW  40
257E:  MOVWF  FAF
2580:  MOVLW  03
2582:  MOVWF  FB0
2584:  MOVLW  A6
2586:  MOVWF  FAC
2588:  NOP   
258A:  NOP   
258C:  MOVLB  0
.................... 	};	 
.................... //	dmy=getc(); 
.................... } 
258E:  GOTO   3832 (RETURN)
.................... // 
....................  
.................... //usart settings 
....................  
.................... //usart interrupt vector - packet interception 
.................... #INT_RDA 
.................... void	Incoming(void){ 
.................... 	MB_Buffer[MB_Length]=getc();	//read stream 
*
0370:  CLRF   03
0372:  MOVLB  4
0374:  MOVF   xEF,W
0376:  ADDLW  EF
0378:  MOVWF  FE9
037A:  MOVLW  03
037C:  ADDWFC 03,W
037E:  MOVWF  FEA
0380:  BTFSS  F9E.5
0382:  BRA    0380
0384:  MOVFF  FAE,FEF
.................... 	MB_Length++;					//set new point 
0388:  INCF   xEF,F
.................... 	output_low(STAT); 
038A:  BCF    F94.0
038C:  BCF    F8B.0
.................... 	set_timer1((int16)(0xffff-35000000/Speed));	//set wait time 
038E:  BCF    FD8.1
0390:  MOVLW  02
0392:  MOVLB  5
0394:  MOVWF  x2F
0396:  MOVLW  16
0398:  MOVWF  x2E
039A:  MOVLW  0E
039C:  MOVWF  x2D
039E:  MOVLW  C0
03A0:  MOVWF  x2C
03A2:  CLRF   x33
03A4:  CLRF   x32
03A6:  MOVFF  3DC,531
03AA:  MOVFF  3DB,530
03AE:  MOVLB  0
03B0:  BRA    02DA
03B2:  MOVLW  FF
03B4:  BSF    FD8.0
03B6:  SUBFWB 00,F
03B8:  SUBFWB 01,F
03BA:  MOVLW  00
03BC:  SUBFWB 02,F
03BE:  SUBFWB 03,F
03C0:  MOVFF  01,FCF
03C4:  MOVFF  00,FCE
.................... 	clear_interrupt(INT_TIMER1);		//clear timer 1 int 
03C8:  BCF    F9E.0
.................... 	enable_interrupts(INT_TIMER1);	//enable timer 1 interrupt 
03CA:  BSF    F9D.0
.................... //	clear_interrupt(int_rda);		//clear interrupt flag 
.................... } 
.................... // 
.................... //calculate CRC16 : 1st - buffer, 2d - length of data 
03CC:  BCF    F9E.5
03CE:  GOTO   006C
.................... int16	ModbusCRC(int8 * buf, int8 len){ 
03D2:  MOVLW  FF
03D4:  MOVLB  5
03D6:  MOVWF  x39
03D8:  MOVWF  x3A
.................... 	int8	i,index; 
.................... 	int8	CRC_Low=0xff,CRC_High=0xff; 
.................... 	// 
.................... 	for(i=0; i<len; i++){ 
03DA:  CLRF   x37
03DC:  MOVF   x36,W
03DE:  SUBWF  x37,W
03E0:  BC    041A
.................... 		index=CRC_High^buf[i]; 
03E2:  CLRF   03
03E4:  MOVF   x37,W
03E6:  ADDWF  x34,W
03E8:  MOVWF  FE9
03EA:  MOVF   x35,W
03EC:  ADDWFC 03,W
03EE:  MOVWF  FEA
03F0:  MOVF   FEF,W
03F2:  XORWF  x3A,W
03F4:  MOVWF  x38
.................... 		CRC_High=CRC_Low^modbus_auchCRCHi[index]; 
03F6:  CLRF   03
03F8:  MOVF   x38,W
03FA:  MOVLB  0
03FC:  RCALL  00BA
03FE:  MOVWF  01
0400:  MOVLB  5
0402:  MOVF   x39,W
0404:  XORWF  01,W
0406:  MOVWF  x3A
.................... 		CRC_Low=modbus_auchCRCLo[index]; 
0408:  CLRF   03
040A:  MOVF   x38,W
040C:  MOVLB  0
040E:  RCALL  01CA
0410:  MOVFF  FE8,539
.................... 	} 
0414:  MOVLB  5
0416:  INCF   x37,F
0418:  BRA    03DC
.................... 	// 
.................... 	return	make16(CRC_High,CRC_Low); 
041A:  MOVFF  53A,03
041E:  MOVFF  539,01
0422:  MOVFF  53A,02
.................... } 
0426:  MOVLB  0
0428:  RETLW  00
.................... //read registers 
.................... static int16	CRCr,CRCc; 
.................... static int8	j; 
.................... // 
....................  
.................... //add register data 
.................... void	AddRegData(int8 regist){ 
.................... 	int32	flcopy; 
.................... 	restart_wdt(); 
042A:  CLRWDT
.................... 			switch(regist){ 
042C:  MOVLB  5
042E:  MOVF   x33,W
0430:  XORLW  00
0432:  MOVLB  0
0434:  BZ    04E6
0436:  XORLW  01
0438:  BTFSC  FD8.2
043A:  BRA    051E
043C:  XORLW  03
043E:  BTFSC  FD8.2
0440:  BRA    0556
0442:  XORLW  01
0444:  BTFSC  FD8.2
0446:  BRA    058E
0448:  XORLW  07
044A:  BTFSC  FD8.2
044C:  BRA    05BA
044E:  XORLW  01
0450:  BTFSC  FD8.2
0452:  BRA    05F2
0454:  XORLW  03
0456:  BTFSC  FD8.2
0458:  BRA    061E
045A:  XORLW  01
045C:  BTFSC  FD8.2
045E:  BRA    0656
0460:  XORLW  0F
0462:  BTFSC  FD8.2
0464:  BRA    068E
0466:  XORLW  01
0468:  BTFSC  FD8.2
046A:  BRA    06C6
046C:  XORLW  03
046E:  BTFSC  FD8.2
0470:  BRA    06F2
0472:  XORLW  01
0474:  BTFSC  FD8.2
0476:  BRA    071E
0478:  XORLW  07
047A:  BTFSC  FD8.2
047C:  BRA    0756
047E:  XORLW  01
0480:  BTFSC  FD8.2
0482:  BRA    078E
0484:  XORLW  03
0486:  BTFSC  FD8.2
0488:  BRA    07C6
048A:  XORLW  01
048C:  BTFSC  FD8.2
048E:  BRA    07FE
0490:  XORLW  1F
0492:  BTFSC  FD8.2
0494:  BRA    0836
0496:  XORLW  01
0498:  BTFSC  FD8.2
049A:  BRA    086E
049C:  XORLW  03
049E:  BTFSC  FD8.2
04A0:  BRA    08A6
04A2:  XORLW  01
04A4:  BTFSC  FD8.2
04A6:  BRA    08DE
04A8:  XORLW  07
04AA:  BTFSC  FD8.2
04AC:  BRA    0916
04AE:  XORLW  01
04B0:  BTFSC  FD8.2
04B2:  BRA    0946
04B4:  XORLW  03
04B6:  BTFSC  FD8.2
04B8:  BRA    0976
04BA:  XORLW  01
04BC:  BTFSC  FD8.2
04BE:  BRA    09A6
04C0:  XORLW  0F
04C2:  BTFSC  FD8.2
04C4:  BRA    0A2A
04C6:  XORLW  01
04C8:  BTFSC  FD8.2
04CA:  BRA    0AAE
04CC:  XORLW  03
04CE:  BTFSC  FD8.2
04D0:  BRA    0B32
04D2:  XORLW  01
04D4:  BTFSC  FD8.2
04D6:  BRA    0B82
04D8:  XORLW  07
04DA:  BTFSC  FD8.2
04DC:  BRA    0BBA
04DE:  XORLW  01
04E0:  BTFSC  FD8.2
04E2:  BRA    0BF2
04E4:  BRA    0C2A
.................... 				case 0x00:	//gamma 0					 
.................... 					MB_Buffer[j]=make8(Gamma0,1);	//high part 
04E6:  CLRF   03
04E8:  MOVLB  4
04EA:  MOVF   xFA,W
04EC:  ADDLW  EF
04EE:  MOVWF  FE9
04F0:  MOVLW  03
04F2:  ADDWFC 03,W
04F4:  MOVWF  FEA
04F6:  MOVLB  3
04F8:  MOVFF  3A8,FEF
.................... 					j++; 
04FC:  MOVLB  4
04FE:  INCF   xFA,F
.................... 					MB_Buffer[j]=make8(Gamma0,0);	//low part 
0500:  CLRF   03
0502:  MOVF   xFA,W
0504:  ADDLW  EF
0506:  MOVWF  FE9
0508:  MOVLW  03
050A:  ADDWFC 03,W
050C:  MOVWF  FEA
050E:  MOVLB  3
0510:  MOVFF  3A7,FEF
.................... 					j++; 
0514:  MOVLB  4
0516:  INCF   xFA,F
.................... 					MB_Length+=2; 
0518:  MOVLW  02
051A:  ADDWF  xEF,F
.................... 					break; 
051C:  BRA    0C46
.................... 				case 0x01:	//gamma1 
.................... 					MB_Buffer[j]=make8(Gamma1,1);	//high part 
051E:  CLRF   03
0520:  MOVLB  4
0522:  MOVF   xFA,W
0524:  ADDLW  EF
0526:  MOVWF  FE9
0528:  MOVLW  03
052A:  ADDWFC 03,W
052C:  MOVWF  FEA
052E:  MOVLB  3
0530:  MOVFF  3B4,FEF
.................... 					j++; 
0534:  MOVLB  4
0536:  INCF   xFA,F
.................... 					MB_Buffer[j]=make8(Gamma1,0);	//low part 
0538:  CLRF   03
053A:  MOVF   xFA,W
053C:  ADDLW  EF
053E:  MOVWF  FE9
0540:  MOVLW  03
0542:  ADDWFC 03,W
0544:  MOVWF  FEA
0546:  MOVLB  3
0548:  MOVFF  3B3,FEF
.................... 					j++; 
054C:  MOVLB  4
054E:  INCF   xFA,F
.................... 					MB_Length+=2; 
0550:  MOVLW  02
0552:  ADDWF  xEF,F
.................... 					break; 
0554:  BRA    0C46
.................... 				case 0x02:	//pulse width 1/2 amp				 
.................... 					MB_Buffer[j]=make8(PulseWdt0,1);	//high part 
0556:  CLRF   03
0558:  MOVLB  4
055A:  MOVF   xFA,W
055C:  ADDLW  EF
055E:  MOVWF  FE9
0560:  MOVLW  03
0562:  ADDWFC 03,W
0564:  MOVWF  FEA
0566:  MOVLB  3
0568:  MOVFF  3A6,FEF
.................... 					j++; 
056C:  MOVLB  4
056E:  INCF   xFA,F
.................... 					MB_Buffer[j]=make8(PulseWdt0,0);	//low part 
0570:  CLRF   03
0572:  MOVF   xFA,W
0574:  ADDLW  EF
0576:  MOVWF  FE9
0578:  MOVLW  03
057A:  ADDWFC 03,W
057C:  MOVWF  FEA
057E:  MOVLB  3
0580:  MOVFF  3A5,FEF
.................... 					j++; 
0584:  MOVLB  4
0586:  INCF   xFA,F
.................... 					MB_Length+=2; 
0588:  MOVLW  02
058A:  ADDWF  xEF,F
.................... 					break; 
058C:  BRA    0C46
.................... 				case 0x03:	//pulse width 1/2 amp 
.................... 					MB_Buffer[j]=0;	//high part 
058E:  CLRF   03
0590:  MOVLB  4
0592:  MOVF   xFA,W
0594:  ADDLW  EF
0596:  MOVWF  FE9
0598:  MOVLW  03
059A:  ADDWFC 03,W
059C:  MOVWF  FEA
059E:  CLRF   FEF
.................... 					j++; 
05A0:  INCF   xFA,F
.................... 					MB_Buffer[j]=0;	//low part 
05A2:  CLRF   03
05A4:  MOVF   xFA,W
05A6:  ADDLW  EF
05A8:  MOVWF  FE9
05AA:  MOVLW  03
05AC:  ADDWFC 03,W
05AE:  MOVWF  FEA
05B0:  CLRF   FEF
.................... 					j++; 
05B2:  INCF   xFA,F
.................... 					MB_Length+=2; 
05B4:  MOVLW  02
05B6:  ADDWF  xEF,F
.................... 					break; 
05B8:  BRA    0C46
.................... 				case 0x04:	//pulse amplitude			 
.................... 					MB_Buffer[j]=make8(Amplitude0,1);	//high part 
05BA:  CLRF   03
05BC:  MOVLB  4
05BE:  MOVF   xFA,W
05C0:  ADDLW  EF
05C2:  MOVWF  FE9
05C4:  MOVLW  03
05C6:  ADDWFC 03,W
05C8:  MOVWF  FEA
05CA:  MOVLB  3
05CC:  MOVFF  3A4,FEF
.................... 					j++; 
05D0:  MOVLB  4
05D2:  INCF   xFA,F
.................... 					MB_Buffer[j]=make8(Amplitude0,0);	//low part 
05D4:  CLRF   03
05D6:  MOVF   xFA,W
05D8:  ADDLW  EF
05DA:  MOVWF  FE9
05DC:  MOVLW  03
05DE:  ADDWFC 03,W
05E0:  MOVWF  FEA
05E2:  MOVLB  3
05E4:  MOVFF  3A3,FEF
.................... 					j++; 
05E8:  MOVLB  4
05EA:  INCF   xFA,F
.................... 					MB_Length+=2; 
05EC:  MOVLW  02
05EE:  ADDWF  xEF,F
.................... 					break; 
05F0:  BRA    0C46
.................... 				case 0x05:	//pulse amplitude				 
.................... 					MB_Buffer[j]=0;	//high part 
05F2:  CLRF   03
05F4:  MOVLB  4
05F6:  MOVF   xFA,W
05F8:  ADDLW  EF
05FA:  MOVWF  FE9
05FC:  MOVLW  03
05FE:  ADDWFC 03,W
0600:  MOVWF  FEA
0602:  CLRF   FEF
.................... 					j++; 
0604:  INCF   xFA,F
.................... 					MB_Buffer[j]=0;	//low part 
0606:  CLRF   03
0608:  MOVF   xFA,W
060A:  ADDLW  EF
060C:  MOVWF  FE9
060E:  MOVLW  03
0610:  ADDWFC 03,W
0612:  MOVWF  FEA
0614:  CLRF   FEF
.................... 					j++; 
0616:  INCF   xFA,F
.................... 					MB_Length+=2; 
0618:  MOVLW  02
061A:  ADDWF  xEF,F
.................... 					break; 
061C:  BRA    0C46
.................... 				case 0x06:	//temp of gen				 
.................... 					MB_Buffer[j]=make8(T_GEN,1);	//high part 
061E:  CLRF   03
0620:  MOVLB  4
0622:  MOVF   xFA,W
0624:  ADDLW  EF
0626:  MOVWF  FE9
0628:  MOVLW  03
062A:  ADDWFC 03,W
062C:  MOVWF  FEA
062E:  MOVLB  3
0630:  MOVFF  3C8,FEF
.................... 					j++; 
0634:  MOVLB  4
0636:  INCF   xFA,F
.................... 					MB_Buffer[j]=make8(T_GEN,0);	//low part 
0638:  CLRF   03
063A:  MOVF   xFA,W
063C:  ADDLW  EF
063E:  MOVWF  FE9
0640:  MOVLW  03
0642:  ADDWFC 03,W
0644:  MOVWF  FEA
0646:  MOVLB  3
0648:  MOVFF  3C7,FEF
.................... 					j++; 
064C:  MOVLB  4
064E:  INCF   xFA,F
.................... 					MB_Length+=2; 
0650:  MOVLW  02
0652:  ADDWF  xEF,F
.................... 					break; 
0654:  BRA    0C46
.................... 				case 0x07:	//temp 0					 
.................... 					MB_Buffer[j]=make8(T_SR0,1);	//high part 
0656:  CLRF   03
0658:  MOVLB  4
065A:  MOVF   xFA,W
065C:  ADDLW  EF
065E:  MOVWF  FE9
0660:  MOVLW  03
0662:  ADDWFC 03,W
0664:  MOVWF  FEA
0666:  MOVLB  3
0668:  MOVFF  3B2,FEF
.................... 					j++; 
066C:  MOVLB  4
066E:  INCF   xFA,F
.................... 					MB_Buffer[j]=make8(T_SR0,0);	//low part 
0670:  CLRF   03
0672:  MOVF   xFA,W
0674:  ADDLW  EF
0676:  MOVWF  FE9
0678:  MOVLW  03
067A:  ADDWFC 03,W
067C:  MOVWF  FEA
067E:  MOVLB  3
0680:  MOVFF  3B1,FEF
.................... 					j++; 
0684:  MOVLB  4
0686:  INCF   xFA,F
.................... 					MB_Length+=2; 
0688:  MOVLW  02
068A:  ADDWF  xEF,F
.................... 					break; 
068C:  BRA    0C46
.................... 				case 0x08:	//temp 1 
.................... 					MB_Buffer[j]=make8(T_SR1,1);	//high part 
068E:  CLRF   03
0690:  MOVLB  4
0692:  MOVF   xFA,W
0694:  ADDLW  EF
0696:  MOVWF  FE9
0698:  MOVLW  03
069A:  ADDWFC 03,W
069C:  MOVWF  FEA
069E:  MOVLB  3
06A0:  MOVFF  3BE,FEF
.................... 					j++; 
06A4:  MOVLB  4
06A6:  INCF   xFA,F
.................... 					MB_Buffer[j]=make8(T_SR1,0);	//low part 
06A8:  CLRF   03
06AA:  MOVF   xFA,W
06AC:  ADDLW  EF
06AE:  MOVWF  FE9
06B0:  MOVLW  03
06B2:  ADDWFC 03,W
06B4:  MOVWF  FEA
06B6:  MOVLB  3
06B8:  MOVFF  3BD,FEF
.................... 					j++; 
06BC:  MOVLB  4
06BE:  INCF   xFA,F
.................... 					MB_Length+=2; 
06C0:  MOVLW  02
06C2:  ADDWF  xEF,F
.................... 					break; 
06C4:  BRA    0C46
.................... 				case 0x09:	//dummy command					 
.................... 					MB_Buffer[j]=0x00;	//high part 
06C6:  CLRF   03
06C8:  MOVLB  4
06CA:  MOVF   xFA,W
06CC:  ADDLW  EF
06CE:  MOVWF  FE9
06D0:  MOVLW  03
06D2:  ADDWFC 03,W
06D4:  MOVWF  FEA
06D6:  CLRF   FEF
.................... 					j++; 
06D8:  INCF   xFA,F
.................... 					MB_Buffer[j]=0x00;	//low part 
06DA:  CLRF   03
06DC:  MOVF   xFA,W
06DE:  ADDLW  EF
06E0:  MOVWF  FE9
06E2:  MOVLW  03
06E4:  ADDWFC 03,W
06E6:  MOVWF  FEA
06E8:  CLRF   FEF
.................... 					j++; 
06EA:  INCF   xFA,F
.................... 					MB_Length+=2; 
06EC:  MOVLW  02
06EE:  ADDWF  xEF,F
.................... 					break; 
06F0:  BRA    0C46
.................... 				case 0x0A:	//dummy command					 
.................... 					MB_Buffer[j]=0x00;	//high part 
06F2:  CLRF   03
06F4:  MOVLB  4
06F6:  MOVF   xFA,W
06F8:  ADDLW  EF
06FA:  MOVWF  FE9
06FC:  MOVLW  03
06FE:  ADDWFC 03,W
0700:  MOVWF  FEA
0702:  CLRF   FEF
.................... 					j++; 
0704:  INCF   xFA,F
.................... 					MB_Buffer[j]=0x00;	//low part 
0706:  CLRF   03
0708:  MOVF   xFA,W
070A:  ADDLW  EF
070C:  MOVWF  FE9
070E:  MOVLW  03
0710:  ADDWFC 03,W
0712:  MOVWF  FEA
0714:  CLRF   FEF
.................... 					j++; 
0716:  INCF   xFA,F
.................... 					MB_Length+=2; 
0718:  MOVLW  02
071A:  ADDWF  xEF,F
.................... 					break; 
071C:  BRA    0C46
.................... 				case 0x0B:	//saw level 
.................... 					MB_Buffer[j]=make8(SAW_A0,1);	//high part 
071E:  CLRF   03
0720:  MOVLB  4
0722:  MOVF   xFA,W
0724:  ADDLW  EF
0726:  MOVWF  FE9
0728:  MOVLW  03
072A:  ADDWFC 03,W
072C:  MOVWF  FEA
072E:  MOVLB  3
0730:  MOVFF  3CA,FEF
.................... 					j++; 
0734:  MOVLB  4
0736:  INCF   xFA,F
.................... 					MB_Buffer[j]=make8(SAW_A0,0);	//low part 
0738:  CLRF   03
073A:  MOVF   xFA,W
073C:  ADDLW  EF
073E:  MOVWF  FE9
0740:  MOVLW  03
0742:  ADDWFC 03,W
0744:  MOVWF  FEA
0746:  MOVLB  3
0748:  MOVFF  3C9,FEF
.................... 					j++; 
074C:  MOVLB  4
074E:  INCF   xFA,F
.................... 					MB_Length+=2; 
0750:  MOVLW  02
0752:  ADDWF  xEF,F
.................... 					break; 
0754:  BRA    0C46
.................... 				case 0x0C:	//saw amplitude			 
.................... 					MB_Buffer[j]=make8(SAW_A1,1);	//high part 
0756:  CLRF   03
0758:  MOVLB  4
075A:  MOVF   xFA,W
075C:  ADDLW  EF
075E:  MOVWF  FE9
0760:  MOVLW  03
0762:  ADDWFC 03,W
0764:  MOVWF  FEA
0766:  MOVLB  3
0768:  MOVFF  3CE,FEF
.................... 					j++; 
076C:  MOVLB  4
076E:  INCF   xFA,F
.................... 					MB_Buffer[j]=make8(SAW_A1,0);	//low part 
0770:  CLRF   03
0772:  MOVF   xFA,W
0774:  ADDLW  EF
0776:  MOVWF  FE9
0778:  MOVLW  03
077A:  ADDWFC 03,W
077C:  MOVWF  FEA
077E:  MOVLB  3
0780:  MOVFF  3CD,FEF
.................... 					j++; 
0784:  MOVLB  4
0786:  INCF   xFA,F
.................... 					MB_Length+=2; 
0788:  MOVLW  02
078A:  ADDWF  xEF,F
.................... 					break; 
078C:  BRA    0C46
.................... 				case 0x0D:	//input coef 0					 
.................... 					MB_Buffer[j]=make8(AmpCoef0,1);	//high part 
078E:  CLRF   03
0790:  MOVLB  4
0792:  MOVF   xFA,W
0794:  ADDLW  EF
0796:  MOVWF  FE9
0798:  MOVLW  03
079A:  ADDWFC 03,W
079C:  MOVWF  FEA
079E:  MOVLB  3
07A0:  MOVFF  3AA,FEF
.................... 					j++; 
07A4:  MOVLB  4
07A6:  INCF   xFA,F
.................... 					MB_Buffer[j]=make8(AmpCoef0,0);	//low part 
07A8:  CLRF   03
07AA:  MOVF   xFA,W
07AC:  ADDLW  EF
07AE:  MOVWF  FE9
07B0:  MOVLW  03
07B2:  ADDWFC 03,W
07B4:  MOVWF  FEA
07B6:  MOVLB  3
07B8:  MOVFF  3A9,FEF
.................... 					j++; 
07BC:  MOVLB  4
07BE:  INCF   xFA,F
.................... 					MB_Length+=2; 
07C0:  MOVLW  02
07C2:  ADDWF  xEF,F
.................... 					break; 
07C4:  BRA    0C46
.................... 				case 0x0E:	//input coef 1 
.................... 					MB_Buffer[j]=make8(AmpCoef1,1);	//high part 
07C6:  CLRF   03
07C8:  MOVLB  4
07CA:  MOVF   xFA,W
07CC:  ADDLW  EF
07CE:  MOVWF  FE9
07D0:  MOVLW  03
07D2:  ADDWFC 03,W
07D4:  MOVWF  FEA
07D6:  MOVLB  3
07D8:  MOVFF  3B6,FEF
.................... 					j++; 
07DC:  MOVLB  4
07DE:  INCF   xFA,F
.................... 					MB_Buffer[j]=make8(AmpCoef1,0);	//low part 
07E0:  CLRF   03
07E2:  MOVF   xFA,W
07E4:  ADDLW  EF
07E6:  MOVWF  FE9
07E8:  MOVLW  03
07EA:  ADDWFC 03,W
07EC:  MOVWF  FEA
07EE:  MOVLB  3
07F0:  MOVFF  3B5,FEF
.................... 					j++; 
07F4:  MOVLB  4
07F6:  INCF   xFA,F
.................... 					MB_Length+=2; 
07F8:  MOVLW  02
07FA:  ADDWF  xEF,F
.................... 					break; 
07FC:  BRA    0C46
.................... 				case 0x0F:	//measure points 
.................... 					MB_Buffer[j]=make8(TAQ,1);	//high part 
07FE:  CLRF   03
0800:  MOVLB  4
0802:  MOVF   xFA,W
0804:  ADDLW  EF
0806:  MOVWF  FE9
0808:  MOVLW  03
080A:  ADDWFC 03,W
080C:  MOVWF  FEA
080E:  MOVLB  3
0810:  MOVFF  3C0,FEF
.................... 					j++; 
0814:  MOVLB  4
0816:  INCF   xFA,F
.................... 					MB_Buffer[j]=make8(TAQ,0);	//low part 
0818:  CLRF   03
081A:  MOVF   xFA,W
081C:  ADDLW  EF
081E:  MOVWF  FE9
0820:  MOVLW  03
0822:  ADDWFC 03,W
0824:  MOVWF  FEA
0826:  MOVLB  3
0828:  MOVFF  3BF,FEF
.................... 					j++; 
082C:  MOVLB  4
082E:  INCF   xFA,F
.................... 					MB_Length+=2; 
0830:  MOVLW  02
0832:  ADDWF  xEF,F
.................... 					break; 
0834:  BRA    0C46
.................... 				case 0x10:	//filter width				 
.................... 					MB_Buffer[j]=make8(FWDT,1);	//high part 
0836:  CLRF   03
0838:  MOVLB  4
083A:  MOVF   xFA,W
083C:  ADDLW  EF
083E:  MOVWF  FE9
0840:  MOVLW  03
0842:  ADDWFC 03,W
0844:  MOVWF  FEA
0846:  MOVLB  3
0848:  MOVFF  3C2,FEF
.................... 					j++; 
084C:  MOVLB  4
084E:  INCF   xFA,F
.................... 					MB_Buffer[j]=make8(FWDT,0);	//low part 
0850:  CLRF   03
0852:  MOVF   xFA,W
0854:  ADDLW  EF
0856:  MOVWF  FE9
0858:  MOVLW  03
085A:  ADDWFC 03,W
085C:  MOVWF  FEA
085E:  MOVLB  3
0860:  MOVFF  3C1,FEF
.................... 					j++; 
0864:  MOVLB  4
0866:  INCF   xFA,F
.................... 					MB_Length+=2; 
0868:  MOVLW  02
086A:  ADDWF  xEF,F
.................... 					break; 
086C:  BRA    0C46
.................... 				case 0x11:	//measures count 
.................... 					MB_Buffer[j]=make8(PCOUNT,1);	//high part 
086E:  CLRF   03
0870:  MOVLB  4
0872:  MOVF   xFA,W
0874:  ADDLW  EF
0876:  MOVWF  FE9
0878:  MOVLW  03
087A:  ADDWFC 03,W
087C:  MOVWF  FEA
087E:  MOVLB  3
0880:  MOVFF  3C4,FEF
.................... 					j++; 
0884:  MOVLB  4
0886:  INCF   xFA,F
.................... 					MB_Buffer[j]=make8(PCOUNT,0);	//low part 
0888:  CLRF   03
088A:  MOVF   xFA,W
088C:  ADDLW  EF
088E:  MOVWF  FE9
0890:  MOVLW  03
0892:  ADDWFC 03,W
0894:  MOVWF  FEA
0896:  MOVLB  3
0898:  MOVFF  3C3,FEF
.................... 					j++; 
089C:  MOVLB  4
089E:  INCF   xFA,F
.................... 					MB_Length+=2; 
08A0:  MOVLW  02
08A2:  ADDWF  xEF,F
.................... 					break; 
08A4:  BRA    0C46
.................... 				case 0x12:	//speed register 
.................... 					MB_Buffer[j]=make8(Speed,1);	//high part 
08A6:  CLRF   03
08A8:  MOVLB  4
08AA:  MOVF   xFA,W
08AC:  ADDLW  EF
08AE:  MOVWF  FE9
08B0:  MOVLW  03
08B2:  ADDWFC 03,W
08B4:  MOVWF  FEA
08B6:  MOVLB  3
08B8:  MOVFF  3DC,FEF
.................... 					j++; 
08BC:  MOVLB  4
08BE:  INCF   xFA,F
.................... 					MB_Buffer[j]=make8(Speed,0);	//low part 
08C0:  CLRF   03
08C2:  MOVF   xFA,W
08C4:  ADDLW  EF
08C6:  MOVWF  FE9
08C8:  MOVLW  03
08CA:  ADDWFC 03,W
08CC:  MOVWF  FEA
08CE:  MOVLB  3
08D0:  MOVFF  3DB,FEF
.................... 					j++; 
08D4:  MOVLB  4
08D6:  INCF   xFA,F
.................... 					MB_Length+=2; 
08D8:  MOVLW  02
08DA:  ADDWF  xEF,F
.................... 					break; 
08DC:  BRA    0C46
.................... 				case 0x13:	//host address register 
.................... 					MB_Buffer[j]=make8(Addr,1);	//high part 
08DE:  CLRF   03
08E0:  MOVLB  4
08E2:  MOVF   xFA,W
08E4:  ADDLW  EF
08E6:  MOVWF  FE9
08E8:  MOVLW  03
08EA:  ADDWFC 03,W
08EC:  MOVWF  FEA
08EE:  MOVLB  3
08F0:  MOVFF  3DE,FEF
.................... 					j++; 
08F4:  MOVLB  4
08F6:  INCF   xFA,F
.................... 					MB_Buffer[j]=make8(Addr,0);	//low part 
08F8:  CLRF   03
08FA:  MOVF   xFA,W
08FC:  ADDLW  EF
08FE:  MOVWF  FE9
0900:  MOVLW  03
0902:  ADDWFC 03,W
0904:  MOVWF  FEA
0906:  MOVLB  3
0908:  MOVFF  3DD,FEF
.................... 					j++;								 
090C:  MOVLB  4
090E:  INCF   xFA,F
.................... 					MB_Length+=2; 
0910:  MOVLW  02
0912:  ADDWF  xEF,F
.................... 					break; 
0914:  BRA    0C46
.................... 				case 0x14:	//Valid request register 
.................... 					MB_Buffer[j]=make8(ValidReq,1);	//high part 
0916:  CLRF   03
0918:  MOVLB  4
091A:  MOVF   xFA,W
091C:  ADDLW  EF
091E:  MOVWF  FE9
0920:  MOVLW  03
0922:  ADDWFC 03,W
0924:  MOVWF  FEA
0926:  MOVFF  4F1,FEF
.................... 					j++; 
092A:  INCF   xFA,F
.................... 					MB_Buffer[j]=make8(ValidReq,0);	//low part 
092C:  CLRF   03
092E:  MOVF   xFA,W
0930:  ADDLW  EF
0932:  MOVWF  FE9
0934:  MOVLW  03
0936:  ADDWFC 03,W
0938:  MOVWF  FEA
093A:  MOVFF  4F0,FEF
.................... 					j++;								 
093E:  INCF   xFA,F
.................... 					MB_Length+=2; 
0940:  MOVLW  02
0942:  ADDWF  xEF,F
.................... 					break; 
0944:  BRA    0C46
.................... 				case 0x15:	//CRC error register 
.................... 					MB_Buffer[j]=make8(CRCReq,1);	//high part 
0946:  CLRF   03
0948:  MOVLB  4
094A:  MOVF   xFA,W
094C:  ADDLW  EF
094E:  MOVWF  FE9
0950:  MOVLW  03
0952:  ADDWFC 03,W
0954:  MOVWF  FEA
0956:  MOVFF  4F3,FEF
.................... 					j++; 
095A:  INCF   xFA,F
.................... 					MB_Buffer[j]=make8(CRCReq,0);	//low part 
095C:  CLRF   03
095E:  MOVF   xFA,W
0960:  ADDLW  EF
0962:  MOVWF  FE9
0964:  MOVLW  03
0966:  ADDWFC 03,W
0968:  MOVWF  FEA
096A:  MOVFF  4F2,FEF
.................... 					j++;								 
096E:  INCF   xFA,F
.................... 					MB_Length+=2; 
0970:  MOVLW  02
0972:  ADDWF  xEF,F
.................... 					break; 
0974:  BRA    0C46
.................... 				case 0x16:	//Exception register 
.................... 					MB_Buffer[j]=make8(ExcReq,1);	//high part 
0976:  CLRF   03
0978:  MOVLB  4
097A:  MOVF   xFA,W
097C:  ADDLW  EF
097E:  MOVWF  FE9
0980:  MOVLW  03
0982:  ADDWFC 03,W
0984:  MOVWF  FEA
0986:  MOVFF  4F5,FEF
.................... 					j++; 
098A:  INCF   xFA,F
.................... 					MB_Buffer[j]=make8(ExcReq,0);	//low part 
098C:  CLRF   03
098E:  MOVF   xFA,W
0990:  ADDLW  EF
0992:  MOVWF  FE9
0994:  MOVLW  03
0996:  ADDWFC 03,W
0998:  MOVWF  FEA
099A:  MOVFF  4F4,FEF
.................... 					j++;								 
099E:  INCF   xFA,F
.................... 					MB_Length+=2; 
09A0:  MOVLW  02
09A2:  ADDWF  xEF,F
.................... 					break; 
09A4:  BRA    0C46
.................... 				case 0x17:	//KGT				 
.................... 					//copy 
.................... 					memcpy(&flcopy,&KGT,4); 
09A6:  MOVLW  05
09A8:  MOVWF  FEA
09AA:  MOVLW  34
09AC:  MOVWF  FE9
09AE:  MOVLW  03
09B0:  MOVWF  FE2
09B2:  MOVLW  D1
09B4:  MOVWF  FE1
09B6:  MOVLW  04
09B8:  MOVWF  01
09BA:  MOVFF  FE6,FEE
09BE:  DECFSZ 01,F
09C0:  BRA    09BA
.................... 					//store to buf 
.................... 					MB_Buffer[j]=make8(flcopy,0);	//high part 
09C2:  CLRF   03
09C4:  MOVLB  4
09C6:  MOVF   xFA,W
09C8:  ADDLW  EF
09CA:  MOVWF  FE9
09CC:  MOVLW  03
09CE:  ADDWFC 03,W
09D0:  MOVWF  FEA
09D2:  MOVLB  5
09D4:  MOVFF  534,FEF
.................... 					j++; 
09D8:  MOVLB  4
09DA:  INCF   xFA,F
.................... 					MB_Buffer[j]=make8(flcopy,1);	//high part 
09DC:  CLRF   03
09DE:  MOVF   xFA,W
09E0:  ADDLW  EF
09E2:  MOVWF  FE9
09E4:  MOVLW  03
09E6:  ADDWFC 03,W
09E8:  MOVWF  FEA
09EA:  MOVLB  5
09EC:  MOVFF  535,FEF
.................... 					j++; 
09F0:  MOVLB  4
09F2:  INCF   xFA,F
.................... 					MB_Buffer[j]=make8(flcopy,2);	//high part 
09F4:  CLRF   03
09F6:  MOVF   xFA,W
09F8:  ADDLW  EF
09FA:  MOVWF  FE9
09FC:  MOVLW  03
09FE:  ADDWFC 03,W
0A00:  MOVWF  FEA
0A02:  MOVLB  5
0A04:  MOVFF  536,FEF
.................... 					j++; 
0A08:  MOVLB  4
0A0A:  INCF   xFA,F
.................... 					MB_Buffer[j]=make8(flcopy,3);	//high part 
0A0C:  CLRF   03
0A0E:  MOVF   xFA,W
0A10:  ADDLW  EF
0A12:  MOVWF  FE9
0A14:  MOVLW  03
0A16:  ADDWFC 03,W
0A18:  MOVWF  FEA
0A1A:  MOVLB  5
0A1C:  MOVFF  537,FEF
.................... 					j++; 
0A20:  MOVLB  4
0A22:  INCF   xFA,F
.................... 					MB_Length+=4; 
0A24:  MOVLW  04
0A26:  ADDWF  xEF,F
.................... 					break; 
0A28:  BRA    0C46
.................... 				case 0x18:	//KGU				 
.................... 					//copy 
.................... 					memcpy(&flcopy,&KGU,4); 
0A2A:  MOVLW  05
0A2C:  MOVWF  FEA
0A2E:  MOVLW  34
0A30:  MOVWF  FE9
0A32:  MOVLW  03
0A34:  MOVWF  FE2
0A36:  MOVLW  D5
0A38:  MOVWF  FE1
0A3A:  MOVLW  04
0A3C:  MOVWF  01
0A3E:  MOVFF  FE6,FEE
0A42:  DECFSZ 01,F
0A44:  BRA    0A3E
.................... 					//store to buf 
.................... 					MB_Buffer[j]=make8(flcopy,0);	//high part 
0A46:  CLRF   03
0A48:  MOVLB  4
0A4A:  MOVF   xFA,W
0A4C:  ADDLW  EF
0A4E:  MOVWF  FE9
0A50:  MOVLW  03
0A52:  ADDWFC 03,W
0A54:  MOVWF  FEA
0A56:  MOVLB  5
0A58:  MOVFF  534,FEF
.................... 					j++; 
0A5C:  MOVLB  4
0A5E:  INCF   xFA,F
.................... 					MB_Buffer[j]=make8(flcopy,1);	//high part 
0A60:  CLRF   03
0A62:  MOVF   xFA,W
0A64:  ADDLW  EF
0A66:  MOVWF  FE9
0A68:  MOVLW  03
0A6A:  ADDWFC 03,W
0A6C:  MOVWF  FEA
0A6E:  MOVLB  5
0A70:  MOVFF  535,FEF
.................... 					j++; 
0A74:  MOVLB  4
0A76:  INCF   xFA,F
.................... 					MB_Buffer[j]=make8(flcopy,2);	//high part 
0A78:  CLRF   03
0A7A:  MOVF   xFA,W
0A7C:  ADDLW  EF
0A7E:  MOVWF  FE9
0A80:  MOVLW  03
0A82:  ADDWFC 03,W
0A84:  MOVWF  FEA
0A86:  MOVLB  5
0A88:  MOVFF  536,FEF
.................... 					j++; 
0A8C:  MOVLB  4
0A8E:  INCF   xFA,F
.................... 					MB_Buffer[j]=make8(flcopy,3);	//high part 
0A90:  CLRF   03
0A92:  MOVF   xFA,W
0A94:  ADDLW  EF
0A96:  MOVWF  FE9
0A98:  MOVLW  03
0A9A:  ADDWFC 03,W
0A9C:  MOVWF  FEA
0A9E:  MOVLB  5
0AA0:  MOVFF  537,FEF
.................... 					j++; 
0AA4:  MOVLB  4
0AA6:  INCF   xFA,F
.................... 					MB_Length+=4; 
0AA8:  MOVLW  04
0AAA:  ADDWF  xEF,F
.................... 					break; 
0AAC:  BRA    0C46
.................... 				case 0x19:	//KST0 
.................... 					//copy 
.................... 					memcpy(&flcopy,&KST0,4); 
0AAE:  MOVLW  05
0AB0:  MOVWF  FEA
0AB2:  MOVLW  34
0AB4:  MOVWF  FE9
0AB6:  MOVLW  03
0AB8:  MOVWF  FE2
0ABA:  MOVLW  AB
0ABC:  MOVWF  FE1
0ABE:  MOVLW  04
0AC0:  MOVWF  01
0AC2:  MOVFF  FE6,FEE
0AC6:  DECFSZ 01,F
0AC8:  BRA    0AC2
.................... 					//store to buf 
.................... 					MB_Buffer[j]=make8(flcopy,0);	//high part 
0ACA:  CLRF   03
0ACC:  MOVLB  4
0ACE:  MOVF   xFA,W
0AD0:  ADDLW  EF
0AD2:  MOVWF  FE9
0AD4:  MOVLW  03
0AD6:  ADDWFC 03,W
0AD8:  MOVWF  FEA
0ADA:  MOVLB  5
0ADC:  MOVFF  534,FEF
.................... 					j++; 
0AE0:  MOVLB  4
0AE2:  INCF   xFA,F
.................... 					MB_Buffer[j]=make8(flcopy,1);	//high part 
0AE4:  CLRF   03
0AE6:  MOVF   xFA,W
0AE8:  ADDLW  EF
0AEA:  MOVWF  FE9
0AEC:  MOVLW  03
0AEE:  ADDWFC 03,W
0AF0:  MOVWF  FEA
0AF2:  MOVLB  5
0AF4:  MOVFF  535,FEF
.................... 					j++; 
0AF8:  MOVLB  4
0AFA:  INCF   xFA,F
.................... 					MB_Buffer[j]=make8(flcopy,2);	//high part 
0AFC:  CLRF   03
0AFE:  MOVF   xFA,W
0B00:  ADDLW  EF
0B02:  MOVWF  FE9
0B04:  MOVLW  03
0B06:  ADDWFC 03,W
0B08:  MOVWF  FEA
0B0A:  MOVLB  5
0B0C:  MOVFF  536,FEF
.................... 					j++; 
0B10:  MOVLB  4
0B12:  INCF   xFA,F
.................... 					MB_Buffer[j]=make8(flcopy,3);	//high part 
0B14:  CLRF   03
0B16:  MOVF   xFA,W
0B18:  ADDLW  EF
0B1A:  MOVWF  FE9
0B1C:  MOVLW  03
0B1E:  ADDWFC 03,W
0B20:  MOVWF  FEA
0B22:  MOVLB  5
0B24:  MOVFF  537,FEF
.................... 					j++; 
0B28:  MOVLB  4
0B2A:  INCF   xFA,F
.................... 					MB_Length+=4; 
0B2C:  MOVLW  04
0B2E:  ADDWF  xEF,F
.................... 					break; 
0B30:  BRA    0C46
.................... 				case 0x1A:	//KST1				 
.................... 					MB_Buffer[j]=0x00;	//high part 
0B32:  CLRF   03
0B34:  MOVLB  4
0B36:  MOVF   xFA,W
0B38:  ADDLW  EF
0B3A:  MOVWF  FE9
0B3C:  MOVLW  03
0B3E:  ADDWFC 03,W
0B40:  MOVWF  FEA
0B42:  CLRF   FEF
.................... 					j++; 
0B44:  INCF   xFA,F
.................... 					MB_Buffer[j]=0x00;	//low part 
0B46:  CLRF   03
0B48:  MOVF   xFA,W
0B4A:  ADDLW  EF
0B4C:  MOVWF  FE9
0B4E:  MOVLW  03
0B50:  ADDWFC 03,W
0B52:  MOVWF  FEA
0B54:  CLRF   FEF
.................... 					j++; 
0B56:  INCF   xFA,F
.................... 					MB_Buffer[j]=0x00;	//low part 
0B58:  CLRF   03
0B5A:  MOVF   xFA,W
0B5C:  ADDLW  EF
0B5E:  MOVWF  FE9
0B60:  MOVLW  03
0B62:  ADDWFC 03,W
0B64:  MOVWF  FEA
0B66:  CLRF   FEF
.................... 					j++; 
0B68:  INCF   xFA,F
.................... 					MB_Buffer[j]=0x00;	//low part 
0B6A:  CLRF   03
0B6C:  MOVF   xFA,W
0B6E:  ADDLW  EF
0B70:  MOVWF  FE9
0B72:  MOVLW  03
0B74:  ADDWFC 03,W
0B76:  MOVWF  FEA
0B78:  CLRF   FEF
.................... 					j++; 
0B7A:  INCF   xFA,F
.................... 					MB_Length+=4; 
0B7C:  MOVLW  04
0B7E:  ADDWF  xEF,F
.................... 					break; 
0B80:  BRA    0C46
.................... 				case 0x1B:	//T0_CAL 
.................... 					MB_Buffer[j]=make8(T0_CAL,1);	//high part 
0B82:  CLRF   03
0B84:  MOVLB  4
0B86:  MOVF   xFA,W
0B88:  ADDLW  EF
0B8A:  MOVWF  FE9
0B8C:  MOVLW  03
0B8E:  ADDWFC 03,W
0B90:  MOVWF  FEA
0B92:  MOVLB  3
0B94:  MOVFF  3B0,FEF
.................... 					j++; 
0B98:  MOVLB  4
0B9A:  INCF   xFA,F
.................... 					MB_Buffer[j]=make8(T0_CAL,0);	//low part 
0B9C:  CLRF   03
0B9E:  MOVF   xFA,W
0BA0:  ADDLW  EF
0BA2:  MOVWF  FE9
0BA4:  MOVLW  03
0BA6:  ADDWFC 03,W
0BA8:  MOVWF  FEA
0BAA:  MOVLB  3
0BAC:  MOVFF  3AF,FEF
.................... 					j++;								 
0BB0:  MOVLB  4
0BB2:  INCF   xFA,F
.................... 					MB_Length+=2; 
0BB4:  MOVLW  02
0BB6:  ADDWF  xEF,F
.................... 					break; 
0BB8:  BRA    0C46
.................... 				case 0x1C:	//T1_CAL 
.................... 					MB_Buffer[j]=make8(T1_CAL,1);	//high part 
0BBA:  CLRF   03
0BBC:  MOVLB  4
0BBE:  MOVF   xFA,W
0BC0:  ADDLW  EF
0BC2:  MOVWF  FE9
0BC4:  MOVLW  03
0BC6:  ADDWFC 03,W
0BC8:  MOVWF  FEA
0BCA:  MOVLB  3
0BCC:  MOVFF  3BC,FEF
.................... 					j++; 
0BD0:  MOVLB  4
0BD2:  INCF   xFA,F
.................... 					MB_Buffer[j]=make8(T1_CAL,0);	//low part 
0BD4:  CLRF   03
0BD6:  MOVF   xFA,W
0BD8:  ADDLW  EF
0BDA:  MOVWF  FE9
0BDC:  MOVLW  03
0BDE:  ADDWFC 03,W
0BE0:  MOVWF  FEA
0BE2:  MOVLB  3
0BE4:  MOVFF  3BB,FEF
.................... 					j++;								 
0BE8:  MOVLB  4
0BEA:  INCF   xFA,F
.................... 					MB_Length+=2; 
0BEC:  MOVLW  02
0BEE:  ADDWF  xEF,F
.................... 					break; 
0BF0:  BRA    0C46
.................... 				case 0x1D:	//TG_CAL 
.................... 					MB_Buffer[j]=make8(TG_CAL,1);	//high part 
0BF2:  CLRF   03
0BF4:  MOVLB  4
0BF6:  MOVF   xFA,W
0BF8:  ADDLW  EF
0BFA:  MOVWF  FE9
0BFC:  MOVLW  03
0BFE:  ADDWFC 03,W
0C00:  MOVWF  FEA
0C02:  MOVLB  3
0C04:  MOVFF  3DA,FEF
.................... 					j++; 
0C08:  MOVLB  4
0C0A:  INCF   xFA,F
.................... 					MB_Buffer[j]=make8(TG_CAL,0);	//low part 
0C0C:  CLRF   03
0C0E:  MOVF   xFA,W
0C10:  ADDLW  EF
0C12:  MOVWF  FE9
0C14:  MOVLW  03
0C16:  ADDWFC 03,W
0C18:  MOVWF  FEA
0C1A:  MOVLB  3
0C1C:  MOVFF  3D9,FEF
.................... 					j++;								 
0C20:  MOVLB  4
0C22:  INCF   xFA,F
.................... 					MB_Length+=2; 
0C24:  MOVLW  02
0C26:  ADDWF  xEF,F
.................... 					break; 
0C28:  BRA    0C46
.................... 				default:	//no valid registers							 
.................... 					MB_Buffer[1]|=0x80; 
0C2A:  MOVLB  3
0C2C:  BSF    xF0.7
.................... 					MB_Buffer[2]=illegal_data_value; 
0C2E:  MOVLW  03
0C30:  MOVWF  xF1
.................... 					MB_Length=5; 
0C32:  MOVLW  05
0C34:  MOVLB  4
0C36:  MOVWF  xEF
.................... 					ExcReq++; 
0C38:  INCF   xF4,F
0C3A:  BTFSC  FD8.2
0C3C:  INCF   xF5,F
.................... 					ValidReq--;  
0C3E:  MOVF   xF0,W
0C40:  BTFSC  FD8.2
0C42:  DECF   xF1,F
0C44:  DECF   xF0,F
.................... 			};	 
.................... } 
0C46:  MOVLB  0
0C48:  GOTO   1B96 (RETURN)
.................... // 
.................... static	int8	bytecount; 
.................... //write registers 
.................... void	SetRegData(int8 reg){ 
.................... 	int32	flcopy; 
.................... 	restart_wdt(); 
0C4C:  CLRWDT
.................... 			switch(reg){ 
0C4E:  MOVLB  5
0C50:  MOVF   x33,W
0C52:  XORLW  00
0C54:  MOVLB  0
0C56:  BZ    0CFA
0C58:  XORLW  01
0C5A:  BZ    0D02
0C5C:  XORLW  03
0C5E:  BZ    0D0A
0C60:  XORLW  01
0C62:  BZ    0D12
0C64:  XORLW  07
0C66:  BZ    0D1A
0C68:  XORLW  01
0C6A:  BZ    0D22
0C6C:  XORLW  03
0C6E:  BZ    0D2A
0C70:  XORLW  01
0C72:  BZ    0D32
0C74:  XORLW  0F
0C76:  BTFSC  FD8.2
0C78:  BRA    0D3A
0C7A:  XORLW  01
0C7C:  BTFSC  FD8.2
0C7E:  BRA    0D42
0C80:  XORLW  03
0C82:  BTFSC  FD8.2
0C84:  BRA    0D4A
0C86:  XORLW  01
0C88:  BTFSC  FD8.2
0C8A:  BRA    0D52
0C8C:  XORLW  07
0C8E:  BTFSC  FD8.2
0C90:  BRA    0D88
0C92:  XORLW  01
0C94:  BTFSC  FD8.2
0C96:  BRA    0DBE
0C98:  XORLW  03
0C9A:  BTFSC  FD8.2
0C9C:  BRA    0DF4
0C9E:  XORLW  01
0CA0:  BTFSC  FD8.2
0CA2:  BRA    0E2A
0CA4:  XORLW  1F
0CA6:  BTFSC  FD8.2
0CA8:  BRA    0E60
0CAA:  XORLW  01
0CAC:  BTFSC  FD8.2
0CAE:  BRA    0E96
0CB0:  XORLW  03
0CB2:  BTFSC  FD8.2
0CB4:  BRA    0ECC
0CB6:  XORLW  01
0CB8:  BTFSC  FD8.2
0CBA:  BRA    0ED4
0CBC:  XORLW  07
0CBE:  BTFSC  FD8.2
0CC0:  BRA    0F0A
0CC2:  XORLW  01
0CC4:  BTFSC  FD8.2
0CC6:  BRA    0F12
0CC8:  XORLW  03
0CCA:  BTFSC  FD8.2
0CCC:  BRA    0F1A
0CCE:  XORLW  01
0CD0:  BTFSC  FD8.2
0CD2:  BRA    0F22
0CD4:  XORLW  0F
0CD6:  BTFSC  FD8.2
0CD8:  BRA    0FA4
0CDA:  XORLW  01
0CDC:  BTFSC  FD8.2
0CDE:  BRA    1026
0CE0:  XORLW  03
0CE2:  BTFSC  FD8.2
0CE4:  BRA    10A8
0CE6:  XORLW  01
0CE8:  BTFSC  FD8.2
0CEA:  BRA    10B0
0CEC:  XORLW  07
0CEE:  BTFSC  FD8.2
0CF0:  BRA    10E6
0CF2:  XORLW  01
0CF4:  BTFSC  FD8.2
0CF6:  BRA    111C
0CF8:  BRA    1152
.................... 				case 0x00:	//dummy command					 
.................... 					j+=2;	//set next data 
0CFA:  MOVLW  02
0CFC:  MOVLB  4
0CFE:  ADDWF  xFA,F
.................... 					break; 
0D00:  BRA    116E
.................... 				case 0x01:	//dummy command					 
.................... 					j+=2;	//set next data 
0D02:  MOVLW  02
0D04:  MOVLB  4
0D06:  ADDWF  xFA,F
.................... 					break; 
0D08:  BRA    116E
.................... 				case 0x02:	//dummy command					 
.................... 					j+=2;	//set next data 
0D0A:  MOVLW  02
0D0C:  MOVLB  4
0D0E:  ADDWF  xFA,F
.................... 					break; 
0D10:  BRA    116E
.................... 				case 0x03:	//dummy command					 
.................... 					j+=2;	//set next data 
0D12:  MOVLW  02
0D14:  MOVLB  4
0D16:  ADDWF  xFA,F
.................... 					break; 
0D18:  BRA    116E
.................... 				case 0x04:	//dummy command					 
.................... 					j+=2;	//set next data 
0D1A:  MOVLW  02
0D1C:  MOVLB  4
0D1E:  ADDWF  xFA,F
.................... 					break; 
0D20:  BRA    116E
.................... 				case 0x05:	//dummy command					 
.................... 					j+=2;	//set next data 
0D22:  MOVLW  02
0D24:  MOVLB  4
0D26:  ADDWF  xFA,F
.................... 					break; 
0D28:  BRA    116E
.................... 				case 0x06:	//dummy command					 
.................... 					j+=2;	//set next data 
0D2A:  MOVLW  02
0D2C:  MOVLB  4
0D2E:  ADDWF  xFA,F
.................... 					break; 
0D30:  BRA    116E
.................... 				case 0x07:	//dummy command					 
.................... 					j+=2;	//set next data 
0D32:  MOVLW  02
0D34:  MOVLB  4
0D36:  ADDWF  xFA,F
.................... 					break; 
0D38:  BRA    116E
.................... 				case 0x08:	//dummy command					 
.................... 					j+=2;	//set next data 
0D3A:  MOVLW  02
0D3C:  MOVLB  4
0D3E:  ADDWF  xFA,F
.................... 					break; 
0D40:  BRA    116E
.................... 				case 0x09:	//dummy command					 
.................... 					j+=2;	//set next data 
0D42:  MOVLW  02
0D44:  MOVLB  4
0D46:  ADDWF  xFA,F
.................... 					break; 
0D48:  BRA    116E
.................... 				case 0x0A:	//dummy command					 
.................... 					j+=2;	//set next data 
0D4A:  MOVLW  02
0D4C:  MOVLB  4
0D4E:  ADDWF  xFA,F
.................... 					break; 
0D50:  BRA    116E
.................... 				case 0x0B:	//SAW_A0 
.................... 					//read data from buffer 
.................... 					SAW_A0=make16(MB_Buffer[j],MB_Buffer[j+1]); 
0D52:  CLRF   03
0D54:  MOVLB  4
0D56:  MOVF   xFA,W
0D58:  ADDLW  EF
0D5A:  MOVWF  FE9
0D5C:  MOVLW  03
0D5E:  ADDWFC 03,W
0D60:  MOVWF  FEA
0D62:  MOVFF  FEF,538
0D66:  MOVLW  01
0D68:  ADDWF  xFA,W
0D6A:  CLRF   03
0D6C:  ADDLW  EF
0D6E:  MOVWF  FE9
0D70:  MOVLW  03
0D72:  ADDWFC 03,W
0D74:  MOVWF  FEA
0D76:  MOVFF  FEF,539
0D7A:  MOVFF  538,3CA
0D7E:  MOVFF  539,3C9
.................... 					j+=2;	//set next data 
0D82:  MOVLW  02
0D84:  ADDWF  xFA,F
.................... 					break; 
0D86:  BRA    116E
.................... 				case 0x0C:	//SAW_A1 
.................... 					//read data from buffer 
.................... 					SAW_A1=make16(MB_Buffer[j],MB_Buffer[j+1]); 
0D88:  CLRF   03
0D8A:  MOVLB  4
0D8C:  MOVF   xFA,W
0D8E:  ADDLW  EF
0D90:  MOVWF  FE9
0D92:  MOVLW  03
0D94:  ADDWFC 03,W
0D96:  MOVWF  FEA
0D98:  MOVFF  FEF,538
0D9C:  MOVLW  01
0D9E:  ADDWF  xFA,W
0DA0:  CLRF   03
0DA2:  ADDLW  EF
0DA4:  MOVWF  FE9
0DA6:  MOVLW  03
0DA8:  ADDWFC 03,W
0DAA:  MOVWF  FEA
0DAC:  MOVFF  FEF,539
0DB0:  MOVFF  538,3CE
0DB4:  MOVFF  539,3CD
.................... 					j+=2;	//set next data 
0DB8:  MOVLW  02
0DBA:  ADDWF  xFA,F
.................... 					break; 
0DBC:  BRA    116E
.................... 				case 0x0D:	//KU0 
.................... 					//read data from buffer 
.................... 					AmpCoef0=make16(MB_Buffer[j],MB_Buffer[j+1]); 
0DBE:  CLRF   03
0DC0:  MOVLB  4
0DC2:  MOVF   xFA,W
0DC4:  ADDLW  EF
0DC6:  MOVWF  FE9
0DC8:  MOVLW  03
0DCA:  ADDWFC 03,W
0DCC:  MOVWF  FEA
0DCE:  MOVFF  FEF,538
0DD2:  MOVLW  01
0DD4:  ADDWF  xFA,W
0DD6:  CLRF   03
0DD8:  ADDLW  EF
0DDA:  MOVWF  FE9
0DDC:  MOVLW  03
0DDE:  ADDWFC 03,W
0DE0:  MOVWF  FEA
0DE2:  MOVFF  FEF,539
0DE6:  MOVFF  538,3AA
0DEA:  MOVFF  539,3A9
.................... 					j+=2;	//set next data 
0DEE:  MOVLW  02
0DF0:  ADDWF  xFA,F
.................... 					break; 
0DF2:  BRA    116E
.................... 				case 0x0E:	//KU1 
.................... 					//read data from buffer 
.................... 					AmpCoef1=make16(MB_Buffer[j],MB_Buffer[j+1]); 
0DF4:  CLRF   03
0DF6:  MOVLB  4
0DF8:  MOVF   xFA,W
0DFA:  ADDLW  EF
0DFC:  MOVWF  FE9
0DFE:  MOVLW  03
0E00:  ADDWFC 03,W
0E02:  MOVWF  FEA
0E04:  MOVFF  FEF,538
0E08:  MOVLW  01
0E0A:  ADDWF  xFA,W
0E0C:  CLRF   03
0E0E:  ADDLW  EF
0E10:  MOVWF  FE9
0E12:  MOVLW  03
0E14:  ADDWFC 03,W
0E16:  MOVWF  FEA
0E18:  MOVFF  FEF,539
0E1C:  MOVFF  538,3B6
0E20:  MOVFF  539,3B5
.................... 					j+=2;	//set next data 
0E24:  MOVLW  02
0E26:  ADDWF  xFA,F
.................... 					break; 
0E28:  BRA    116E
.................... 				case 0x0F:	//TAQ 
.................... 					//read data from buffer 
.................... 					TAQ=make16(MB_Buffer[j],MB_Buffer[j+1]); 
0E2A:  CLRF   03
0E2C:  MOVLB  4
0E2E:  MOVF   xFA,W
0E30:  ADDLW  EF
0E32:  MOVWF  FE9
0E34:  MOVLW  03
0E36:  ADDWFC 03,W
0E38:  MOVWF  FEA
0E3A:  MOVFF  FEF,538
0E3E:  MOVLW  01
0E40:  ADDWF  xFA,W
0E42:  CLRF   03
0E44:  ADDLW  EF
0E46:  MOVWF  FE9
0E48:  MOVLW  03
0E4A:  ADDWFC 03,W
0E4C:  MOVWF  FEA
0E4E:  MOVFF  FEF,539
0E52:  MOVFF  538,3C0
0E56:  MOVFF  539,3BF
.................... 					j+=2;	//set next data 
0E5A:  MOVLW  02
0E5C:  ADDWF  xFA,F
.................... 					break; 
0E5E:  BRA    116E
.................... 				case 0x10:	//FWDT 
.................... 					//read data from buffer 
.................... 					FWDT=make16(MB_Buffer[j],MB_Buffer[j+1]); 
0E60:  CLRF   03
0E62:  MOVLB  4
0E64:  MOVF   xFA,W
0E66:  ADDLW  EF
0E68:  MOVWF  FE9
0E6A:  MOVLW  03
0E6C:  ADDWFC 03,W
0E6E:  MOVWF  FEA
0E70:  MOVFF  FEF,538
0E74:  MOVLW  01
0E76:  ADDWF  xFA,W
0E78:  CLRF   03
0E7A:  ADDLW  EF
0E7C:  MOVWF  FE9
0E7E:  MOVLW  03
0E80:  ADDWFC 03,W
0E82:  MOVWF  FEA
0E84:  MOVFF  FEF,539
0E88:  MOVFF  538,3C2
0E8C:  MOVFF  539,3C1
.................... 					j+=2;	//set next data 
0E90:  MOVLW  02
0E92:  ADDWF  xFA,F
.................... 					break; 
0E94:  BRA    116E
.................... 				case 0x11:	//PCOUNT 
.................... 					//read data from buffer 
.................... 					PCOUNT=make16(MB_Buffer[j],MB_Buffer[j+1]); 
0E96:  CLRF   03
0E98:  MOVLB  4
0E9A:  MOVF   xFA,W
0E9C:  ADDLW  EF
0E9E:  MOVWF  FE9
0EA0:  MOVLW  03
0EA2:  ADDWFC 03,W
0EA4:  MOVWF  FEA
0EA6:  MOVFF  FEF,538
0EAA:  MOVLW  01
0EAC:  ADDWF  xFA,W
0EAE:  CLRF   03
0EB0:  ADDLW  EF
0EB2:  MOVWF  FE9
0EB4:  MOVLW  03
0EB6:  ADDWFC 03,W
0EB8:  MOVWF  FEA
0EBA:  MOVFF  FEF,539
0EBE:  MOVFF  538,3C4
0EC2:  MOVFF  539,3C3
.................... 					j+=2;	//set next data 
0EC6:  MOVLW  02
0EC8:  ADDWF  xFA,F
.................... 					break; 
0ECA:  BRA    116E
.................... 				case 0x12:	// 
.................... 					j+=2;	//set next data 
0ECC:  MOVLW  02
0ECE:  MOVLB  4
0ED0:  ADDWF  xFA,F
.................... 					break; 
0ED2:  BRA    116E
.................... 				case 0x13:	// 
.................... 					Addr=make16(MB_Buffer[j],MB_Buffer[j+1]); 
0ED4:  CLRF   03
0ED6:  MOVLB  4
0ED8:  MOVF   xFA,W
0EDA:  ADDLW  EF
0EDC:  MOVWF  FE9
0EDE:  MOVLW  03
0EE0:  ADDWFC 03,W
0EE2:  MOVWF  FEA
0EE4:  MOVFF  FEF,538
0EE8:  MOVLW  01
0EEA:  ADDWF  xFA,W
0EEC:  CLRF   03
0EEE:  ADDLW  EF
0EF0:  MOVWF  FE9
0EF2:  MOVLW  03
0EF4:  ADDWFC 03,W
0EF6:  MOVWF  FEA
0EF8:  MOVFF  FEF,539
0EFC:  MOVFF  538,3DE
0F00:  MOVFF  539,3DD
.................... 					j+=2;	//set next data 
0F04:  MOVLW  02
0F06:  ADDWF  xFA,F
.................... 					break; 
0F08:  BRA    116E
.................... 				case 0x14:	//Valid request register	- no acton 
.................... 					j+=2;	//set next data 
0F0A:  MOVLW  02
0F0C:  MOVLB  4
0F0E:  ADDWF  xFA,F
.................... 					break; 
0F10:  BRA    116E
.................... 				case 0x15:	//CRC error register - no action 
.................... 					j+=2;	//set next data 
0F12:  MOVLW  02
0F14:  MOVLB  4
0F16:  ADDWF  xFA,F
.................... 					break; 
0F18:  BRA    116E
.................... 				case 0x16:	//Exception register - no action 
.................... 					j+=2;	//set next data 
0F1A:  MOVLW  02
0F1C:  MOVLB  4
0F1E:  ADDWF  xFA,F
.................... 					break; 
0F20:  BRA    116E
.................... 				case 0x17:	//KGT 
.................... 					flcopy=make32(MB_Buffer[j+3],MB_Buffer[j+2],MB_Buffer[j+1],MB_Buffer[j]); 
0F22:  MOVLW  03
0F24:  MOVLB  4
0F26:  ADDWF  xFA,W
0F28:  CLRF   03
0F2A:  ADDLW  EF
0F2C:  MOVWF  FE9
0F2E:  MOVLW  03
0F30:  ADDWFC 03,W
0F32:  MOVWF  FEA
0F34:  MOVFF  FEF,538
0F38:  MOVLW  02
0F3A:  ADDWF  xFA,W
0F3C:  CLRF   03
0F3E:  ADDLW  EF
0F40:  MOVWF  FE9
0F42:  MOVLW  03
0F44:  ADDWFC 03,W
0F46:  MOVWF  FEA
0F48:  MOVFF  FEF,539
0F4C:  MOVLW  01
0F4E:  ADDWF  xFA,W
0F50:  CLRF   03
0F52:  ADDLW  EF
0F54:  MOVWF  FE9
0F56:  MOVLW  03
0F58:  ADDWFC 03,W
0F5A:  MOVWF  FEA
0F5C:  MOVFF  FEF,53A
0F60:  CLRF   03
0F62:  MOVF   xFA,W
0F64:  ADDLW  EF
0F66:  MOVWF  FE9
0F68:  MOVLW  03
0F6A:  ADDWFC 03,W
0F6C:  MOVWF  FEA
0F6E:  MOVFF  FEF,53B
0F72:  MOVFF  538,537
0F76:  MOVFF  539,536
0F7A:  MOVFF  53A,535
0F7E:  MOVFF  53B,534
.................... 					memcpy(&KGT,&flcopy,4); 
0F82:  MOVLW  03
0F84:  MOVWF  FEA
0F86:  MOVLW  D1
0F88:  MOVWF  FE9
0F8A:  MOVLW  05
0F8C:  MOVWF  FE2
0F8E:  MOVLW  34
0F90:  MOVWF  FE1
0F92:  MOVLW  04
0F94:  MOVWF  01
0F96:  MOVFF  FE6,FEE
0F9A:  DECFSZ 01,F
0F9C:  BRA    0F96
.................... 					j+=4;	//set next data 
0F9E:  MOVLW  04
0FA0:  ADDWF  xFA,F
.................... 					break; 
0FA2:  BRA    116E
.................... 				case 0x18:	//KGU 
.................... 					flcopy=make32(MB_Buffer[j+3],MB_Buffer[j+2],MB_Buffer[j+1],MB_Buffer[j]); 
0FA4:  MOVLW  03
0FA6:  MOVLB  4
0FA8:  ADDWF  xFA,W
0FAA:  CLRF   03
0FAC:  ADDLW  EF
0FAE:  MOVWF  FE9
0FB0:  MOVLW  03
0FB2:  ADDWFC 03,W
0FB4:  MOVWF  FEA
0FB6:  MOVFF  FEF,538
0FBA:  MOVLW  02
0FBC:  ADDWF  xFA,W
0FBE:  CLRF   03
0FC0:  ADDLW  EF
0FC2:  MOVWF  FE9
0FC4:  MOVLW  03
0FC6:  ADDWFC 03,W
0FC8:  MOVWF  FEA
0FCA:  MOVFF  FEF,539
0FCE:  MOVLW  01
0FD0:  ADDWF  xFA,W
0FD2:  CLRF   03
0FD4:  ADDLW  EF
0FD6:  MOVWF  FE9
0FD8:  MOVLW  03
0FDA:  ADDWFC 03,W
0FDC:  MOVWF  FEA
0FDE:  MOVFF  FEF,53A
0FE2:  CLRF   03
0FE4:  MOVF   xFA,W
0FE6:  ADDLW  EF
0FE8:  MOVWF  FE9
0FEA:  MOVLW  03
0FEC:  ADDWFC 03,W
0FEE:  MOVWF  FEA
0FF0:  MOVFF  FEF,53B
0FF4:  MOVFF  538,537
0FF8:  MOVFF  539,536
0FFC:  MOVFF  53A,535
1000:  MOVFF  53B,534
.................... 					memcpy(&KGU,&flcopy,4); 
1004:  MOVLW  03
1006:  MOVWF  FEA
1008:  MOVLW  D5
100A:  MOVWF  FE9
100C:  MOVLW  05
100E:  MOVWF  FE2
1010:  MOVLW  34
1012:  MOVWF  FE1
1014:  MOVLW  04
1016:  MOVWF  01
1018:  MOVFF  FE6,FEE
101C:  DECFSZ 01,F
101E:  BRA    1018
.................... 					j+=4;	//set next data 
1020:  MOVLW  04
1022:  ADDWF  xFA,F
.................... 					break; 
1024:  BRA    116E
.................... 				case 0x19:	//KST0 
.................... 					flcopy=make32(MB_Buffer[j+3],MB_Buffer[j+2],MB_Buffer[j+1],MB_Buffer[j]); 
1026:  MOVLW  03
1028:  MOVLB  4
102A:  ADDWF  xFA,W
102C:  CLRF   03
102E:  ADDLW  EF
1030:  MOVWF  FE9
1032:  MOVLW  03
1034:  ADDWFC 03,W
1036:  MOVWF  FEA
1038:  MOVFF  FEF,538
103C:  MOVLW  02
103E:  ADDWF  xFA,W
1040:  CLRF   03
1042:  ADDLW  EF
1044:  MOVWF  FE9
1046:  MOVLW  03
1048:  ADDWFC 03,W
104A:  MOVWF  FEA
104C:  MOVFF  FEF,539
1050:  MOVLW  01
1052:  ADDWF  xFA,W
1054:  CLRF   03
1056:  ADDLW  EF
1058:  MOVWF  FE9
105A:  MOVLW  03
105C:  ADDWFC 03,W
105E:  MOVWF  FEA
1060:  MOVFF  FEF,53A
1064:  CLRF   03
1066:  MOVF   xFA,W
1068:  ADDLW  EF
106A:  MOVWF  FE9
106C:  MOVLW  03
106E:  ADDWFC 03,W
1070:  MOVWF  FEA
1072:  MOVFF  FEF,53B
1076:  MOVFF  538,537
107A:  MOVFF  539,536
107E:  MOVFF  53A,535
1082:  MOVFF  53B,534
.................... 					memcpy(&KST0,&flcopy,4); 
1086:  MOVLW  03
1088:  MOVWF  FEA
108A:  MOVLW  AB
108C:  MOVWF  FE9
108E:  MOVLW  05
1090:  MOVWF  FE2
1092:  MOVLW  34
1094:  MOVWF  FE1
1096:  MOVLW  04
1098:  MOVWF  01
109A:  MOVFF  FE6,FEE
109E:  DECFSZ 01,F
10A0:  BRA    109A
.................... 					j+=4;	//set next data 
10A2:  MOVLW  04
10A4:  ADDWF  xFA,F
.................... 					break; 
10A6:  BRA    116E
.................... 				case 0x1A:	//dummy command			 
.................... 					j+=4;	//set next data 
10A8:  MOVLW  04
10AA:  MOVLB  4
10AC:  ADDWF  xFA,F
.................... 					break; 
10AE:  BRA    116E
.................... 				case 0x1B:	//T0_CAL 
.................... 					//read data from buffer 
.................... 					T0_CAL=make16(MB_Buffer[j],MB_Buffer[j+1]); 
10B0:  CLRF   03
10B2:  MOVLB  4
10B4:  MOVF   xFA,W
10B6:  ADDLW  EF
10B8:  MOVWF  FE9
10BA:  MOVLW  03
10BC:  ADDWFC 03,W
10BE:  MOVWF  FEA
10C0:  MOVFF  FEF,538
10C4:  MOVLW  01
10C6:  ADDWF  xFA,W
10C8:  CLRF   03
10CA:  ADDLW  EF
10CC:  MOVWF  FE9
10CE:  MOVLW  03
10D0:  ADDWFC 03,W
10D2:  MOVWF  FEA
10D4:  MOVFF  FEF,539
10D8:  MOVFF  538,3B0
10DC:  MOVFF  539,3AF
.................... 					j+=2;	//set next data 
10E0:  MOVLW  02
10E2:  ADDWF  xFA,F
.................... 					break; 
10E4:  BRA    116E
.................... 				case 0x1C:	//T1_CAL 
.................... 					//read data from buffer 
.................... 					T1_CAL=make16(MB_Buffer[j],MB_Buffer[j+1]); 
10E6:  CLRF   03
10E8:  MOVLB  4
10EA:  MOVF   xFA,W
10EC:  ADDLW  EF
10EE:  MOVWF  FE9
10F0:  MOVLW  03
10F2:  ADDWFC 03,W
10F4:  MOVWF  FEA
10F6:  MOVFF  FEF,538
10FA:  MOVLW  01
10FC:  ADDWF  xFA,W
10FE:  CLRF   03
1100:  ADDLW  EF
1102:  MOVWF  FE9
1104:  MOVLW  03
1106:  ADDWFC 03,W
1108:  MOVWF  FEA
110A:  MOVFF  FEF,539
110E:  MOVFF  538,3BC
1112:  MOVFF  539,3BB
.................... 					j+=2;	//set next data 
1116:  MOVLW  02
1118:  ADDWF  xFA,F
.................... 					break; 
111A:  BRA    116E
.................... 				case 0x1D:	//TG_CAL 
.................... 					//read data from buffer 
.................... 					TG_CAL=make16(MB_Buffer[j],MB_Buffer[j+1]); 
111C:  CLRF   03
111E:  MOVLB  4
1120:  MOVF   xFA,W
1122:  ADDLW  EF
1124:  MOVWF  FE9
1126:  MOVLW  03
1128:  ADDWFC 03,W
112A:  MOVWF  FEA
112C:  MOVFF  FEF,538
1130:  MOVLW  01
1132:  ADDWF  xFA,W
1134:  CLRF   03
1136:  ADDLW  EF
1138:  MOVWF  FE9
113A:  MOVLW  03
113C:  ADDWFC 03,W
113E:  MOVWF  FEA
1140:  MOVFF  FEF,539
1144:  MOVFF  538,3DA
1148:  MOVFF  539,3D9
.................... 					j+=2;	//set next data 
114C:  MOVLW  02
114E:  ADDWF  xFA,F
.................... 					break; 
1150:  BRA    116E
.................... 				default:	//no valid registers							 
.................... 					MB_Buffer[1]|=0x80; 
1152:  MOVLB  3
1154:  BSF    xF0.7
.................... 					MB_Buffer[2]=illegal_data_value; 
1156:  MOVLW  03
1158:  MOVWF  xF1
.................... 					MB_Length=5; 
115A:  MOVLW  05
115C:  MOVLB  4
115E:  MOVWF  xEF
.................... 					ExcReq++; 
1160:  INCF   xF4,F
1162:  BTFSC  FD8.2
1164:  INCF   xF5,F
.................... 					ValidReq--; 
1166:  MOVF   xF0,W
1168:  BTFSC  FD8.2
116A:  DECF   xF1,F
116C:  DECF   xF0,F
.................... 			};	 
.................... } 
116E:  MOVLB  0
1170:  GOTO   1BFA (RETURN)
.................... // 
.................... //timer 2 interrupt vector - packet recognition 
.................... #INT_TIMER1 
.................... void	Reaction(void){ 
.................... 	int8	StAddr,EnAddr;	 
.................... 	int8	bytecount; 
.................... 	int16	k,l; 
.................... 	//end of tramsmittion process 
.................... 	disable_interrupts(INT_RDA); 
*
1922:  BCF    F9D.5
.................... 	output_high(STAT);	//on led 
1924:  BCF    F94.0
1926:  BSF    F8B.0
.................... 	// 
.................... 	if (MB_Length<4)	goto exit;	//exit if to small 
1928:  MOVLB  4
192A:  MOVF   xEF,W
192C:  SUBLW  03
192E:  BNC   1932
1930:  BRA    1EC2
.................... 	//detect adress 
.................... 	if((MB_Buffer[0]!=make8(Addr,0))&&(MB_Buffer[0]!=0))	goto exit;	//if not broadcast & not qwn address - then exit 
1932:  MOVLB  3
1934:  MOVF   xDD,W
1936:  SUBWF  xEF,W
1938:  BZ    1942
193A:  MOVF   xEF,F
193C:  BZ    1942
193E:  MOVLB  4
1940:  BRA    1EC2
.................... 	//calculate CRC 
.................... 	CRCc=ModbusCRC(MB_Buffer,MB_Length-2); 
1942:  MOVLW  02
1944:  MOVLB  4
1946:  SUBWF  xEF,W
1948:  MOVLB  5
194A:  MOVWF  x33
194C:  MOVLW  03
194E:  MOVWF  x35
1950:  MOVLW  EF
1952:  MOVWF  x34
1954:  MOVFF  533,536
1958:  MOVLB  0
195A:  CALL   03D2
195E:  MOVFF  02,4F9
1962:  MOVFF  01,4F8
.................... 	CRCr=make16(MB_Buffer[MB_Length-2],MB_Buffer[MB_Length-1]); 
1966:  MOVLW  02
1968:  MOVLB  4
196A:  SUBWF  xEF,W
196C:  CLRF   03
196E:  ADDLW  EF
1970:  MOVWF  FE9
1972:  MOVLW  03
1974:  ADDWFC 03,W
1976:  MOVWF  FEA
1978:  MOVFF  FEF,533
197C:  MOVLW  01
197E:  SUBWF  xEF,W
1980:  CLRF   03
1982:  ADDLW  EF
1984:  MOVWF  FE9
1986:  MOVLW  03
1988:  ADDWFC 03,W
198A:  MOVWF  FEA
198C:  MOVFF  FEF,534
1990:  MOVFF  533,4F7
1994:  MOVFF  534,4F6
.................... 	// 
.................... 	if(CRCc!=CRCr){				//if error CRC then exit 
1998:  MOVF   xF6,W
199A:  SUBWF  xF8,W
199C:  BNZ   19A4
199E:  MOVF   xF7,W
19A0:  SUBWF  xF9,W
19A2:  BZ    19AC
.................... 		CRCReq++;	 
19A4:  INCF   xF2,F
19A6:  BTFSC  FD8.2
19A8:  INCF   xF3,F
.................... 		goto exit; 
19AA:  BRA    1EC2
.................... 	}; 
.................... 	//proceed command 
.................... 	//analizing function code 
.................... 	switch(MB_Buffer[1]){ 
19AC:  MOVLB  3
19AE:  MOVF   xF0,W
19B0:  XORLW  42
19B2:  MOVLB  0
19B4:  BZ    19DC
19B6:  XORLW  01
19B8:  BTFSC  FD8.2
19BA:  BRA    1A9E
19BC:  XORLW  07
19BE:  BTFSC  FD8.2
19C0:  BRA    1B5E
19C2:  XORLW  01
19C4:  BTFSC  FD8.2
19C6:  BRA    1BBA
19C8:  XORLW  20
19CA:  BTFSC  FD8.2
19CC:  BRA    1C24
19CE:  XORLW  0F
19D0:  BTFSC  FD8.2
19D2:  BRA    1C56
19D4:  XORLW  01
19D6:  BTFSC  FD8.2
19D8:  BRA    1DC2
19DA:  BRA    1E22
.................... 		//CMODE 
.................... 		case	0x42: 
.................... 				if(MB_Length==5){ 
19DC:  MOVLB  4
19DE:  MOVF   xEF,W
19E0:  SUBLW  05
19E2:  BNZ   1A88
.................... 					switch(MB_Buffer[2]){ 
19E4:  MOVLB  3
19E6:  MOVF   xF1,W
19E8:  XORLW  00
19EA:  MOVLB  0
19EC:  BZ    19F8
19EE:  XORLW  01
19F0:  BZ    1A0E
19F2:  XORLW  03
19F4:  BZ    1A6C
19F6:  BRA    1A72
.................... 						case	0x00:	//normal cycle 
.................... 							OneCycle=0;	//clear one cycle flag 
19F8:  MOVLB  3
19FA:  BCF    xC5.0
.................... 							DaqState=DaqStart;	//start new measuring 
19FC:  MOVLW  01
19FE:  MOVWF  xEE
.................... 							MB_Length=4; 
1A00:  MOVLW  04
1A02:  MOVLB  4
1A04:  MOVWF  xEF
.................... 							ValidReq++; 
1A06:  INCF   xF0,F
1A08:  BTFSC  FD8.2
1A0A:  INCF   xF1,F
.................... 							break; 
1A0C:  BRA    1A86
.................... 						case	0x01: 
.................... 							OneCycle=1;	//set one cycle flag 
1A0E:  MOVLB  3
1A10:  BSF    xC5.0
.................... 							DaqState=DaqStart;	//set new cycle 
1A12:  MOVLW  01
1A14:  MOVWF  xEE
.................... 							for(k=0; k<PCOUNT; k++){ 
1A16:  MOVLB  5
1A18:  CLRF   x30
1A1A:  CLRF   x2F
1A1C:  MOVF   x30,W
1A1E:  MOVLB  3
1A20:  SUBWF  xC4,W
1A22:  BNC   1A5E
1A24:  BNZ   1A36
1A26:  MOVF   xC3,W
1A28:  MOVLB  5
1A2A:  SUBWF  x2F,W
1A2C:  BTFSS  FD8.0
1A2E:  BRA    1A34
1A30:  MOVLB  3
1A32:  BRA    1A5E
1A34:  MOVLB  3
.................... 								gam_buf0[k]=0;	//clear measuring buffer 
1A36:  BCF    FD8.0
1A38:  MOVLB  5
1A3A:  RLCF   x2F,W
1A3C:  MOVWF  02
1A3E:  RLCF   x30,W
1A40:  MOVWF  03
1A42:  MOVF   02,W
1A44:  ADDLW  A3
1A46:  MOVWF  FE9
1A48:  MOVLW  02
1A4A:  ADDWFC 03,W
1A4C:  MOVWF  FEA
1A4E:  CLRF   FEC
1A50:  MOVF   FED,F
1A52:  CLRF   FEF
.................... 								}; 
1A54:  INCF   x2F,F
1A56:  BTFSC  FD8.2
1A58:  INCF   x30,F
1A5A:  BRA    1A1C
1A5C:  MOVLB  3
.................... 							MB_Length=4; 
1A5E:  MOVLW  04
1A60:  MOVLB  4
1A62:  MOVWF  xEF
.................... 							ValidReq++; 
1A64:  INCF   xF0,F
1A66:  BTFSC  FD8.2
1A68:  INCF   xF1,F
.................... 							break; 
1A6A:  BRA    1A86
.................... 						case	0x02:	//reset mcu 
.................... 							reset_cpu(); 
1A6C:  RESET
.................... 							break; 
1A6E:  MOVLB  4
1A70:  BRA    1A86
.................... 						default: 
.................... 						MB_Buffer[1]|=0x80; 
1A72:  MOVLB  3
1A74:  BSF    xF0.7
.................... 						MB_Buffer[2]=illegal_data_value; 
1A76:  MOVLW  03
1A78:  MOVWF  xF1
.................... 						ExcReq++; 
1A7A:  MOVLB  4
1A7C:  INCF   xF4,F
1A7E:  BTFSC  FD8.2
1A80:  INCF   xF5,F
.................... 						MB_Length=5; 
1A82:  MOVLW  05
1A84:  MOVWF  xEF
.................... 						}; 
.................... 					}else{ 
1A86:  BRA    1A9C
.................... 					MB_Buffer[1]|=0x80; 
1A88:  MOVLB  3
1A8A:  BSF    xF0.7
.................... 					MB_Buffer[2]=illegal_data_address; 
1A8C:  MOVLW  02
1A8E:  MOVWF  xF1
.................... 					MB_Length=5; 
1A90:  MOVLW  05
1A92:  MOVLB  4
1A94:  MOVWF  xEF
.................... 					ExcReq++; 
1A96:  INCF   xF4,F
1A98:  BTFSC  FD8.2
1A9A:  INCF   xF5,F
.................... 					}; 
.................... 				break; 
1A9C:  BRA    1E36
.................... 		//read buffer 
.................... 		case	0x43: 
.................... 				if(MB_Length==7){ 
1A9E:  MOVLB  4
1AA0:  MOVF   xEF,W
1AA2:  SUBLW  07
1AA4:  BNZ   1B48
.................... 					switch(MB_Buffer[3]){ 
1AA6:  MOVLB  3
1AA8:  MOVF   xF2,W
1AAA:  XORLW  00
1AAC:  MOVLB  0
1AAE:  BZ    1AB6
1AB0:  XORLW  01
1AB2:  BZ    1AF4
1AB4:  BRA    1B32
.................... 						case	0x00:	//channel 0 
.................... 							//pack 
.................... 							l=2; 
1AB6:  MOVLB  5
1AB8:  CLRF   x32
1ABA:  MOVLW  02
1ABC:  MOVWF  x31
.................... 							for(k=0; k<0x100; k+=2){ 
1ABE:  CLRF   x30
1AC0:  CLRF   x2F
1AC2:  MOVF   x30,W
1AC4:  SUBLW  00
1AC6:  BNC   1AE6
.................... 								MB_Buffer[l]=0; 
1AC8:  MOVLW  EF
1ACA:  ADDWF  x31,W
1ACC:  MOVWF  FE9
1ACE:  MOVLW  03
1AD0:  ADDWFC x32,W
1AD2:  MOVWF  FEA
1AD4:  CLRF   FEF
.................... 								l++; 
1AD6:  INCF   x31,F
1AD8:  BTFSC  FD8.2
1ADA:  INCF   x32,F
.................... 								}; 
1ADC:  MOVLW  02
1ADE:  ADDWF  x2F,F
1AE0:  MOVLW  00
1AE2:  ADDWFC x30,F
1AE4:  BRA    1AC2
.................... 							MB_Length=132; 
1AE6:  MOVLW  84
1AE8:  MOVLB  4
1AEA:  MOVWF  xEF
.................... 							ValidReq++; 
1AEC:  INCF   xF0,F
1AEE:  BTFSC  FD8.2
1AF0:  INCF   xF1,F
.................... 							break; 
1AF2:  BRA    1B46
.................... 						case	0x01:	//channel 1 
.................... 							//pack 
.................... 							l=2; 
1AF4:  MOVLB  5
1AF6:  CLRF   x32
1AF8:  MOVLW  02
1AFA:  MOVWF  x31
.................... 							for(k=0; k<0x100; k+=2){ 
1AFC:  CLRF   x30
1AFE:  CLRF   x2F
1B00:  MOVF   x30,W
1B02:  SUBLW  00
1B04:  BNC   1B24
.................... 								MB_Buffer[l]=0; 
1B06:  MOVLW  EF
1B08:  ADDWF  x31,W
1B0A:  MOVWF  FE9
1B0C:  MOVLW  03
1B0E:  ADDWFC x32,W
1B10:  MOVWF  FEA
1B12:  CLRF   FEF
.................... 								l++; 
1B14:  INCF   x31,F
1B16:  BTFSC  FD8.2
1B18:  INCF   x32,F
.................... 								}; 
1B1A:  MOVLW  02
1B1C:  ADDWF  x2F,F
1B1E:  MOVLW  00
1B20:  ADDWFC x30,F
1B22:  BRA    1B00
.................... 							MB_Length=132; 
1B24:  MOVLW  84
1B26:  MOVLB  4
1B28:  MOVWF  xEF
.................... 							ValidReq++; 
1B2A:  INCF   xF0,F
1B2C:  BTFSC  FD8.2
1B2E:  INCF   xF1,F
.................... 							break; 
1B30:  BRA    1B46
.................... 						default:						 
.................... 						MB_Buffer[1]|=0x80; 
1B32:  MOVLB  3
1B34:  BSF    xF0.7
.................... 						MB_Buffer[2]=illegal_data_value; 
1B36:  MOVLW  03
1B38:  MOVWF  xF1
.................... 						ExcReq++; 
1B3A:  MOVLB  4
1B3C:  INCF   xF4,F
1B3E:  BTFSC  FD8.2
1B40:  INCF   xF5,F
.................... 						MB_Length=5; 
1B42:  MOVLW  05
1B44:  MOVWF  xEF
.................... 						}; 
.................... 					}else{ 
1B46:  BRA    1B5C
.................... 					MB_Buffer[1]|=0x80; 
1B48:  MOVLB  3
1B4A:  BSF    xF0.7
.................... 					MB_Buffer[2]=illegal_data_address; 
1B4C:  MOVLW  02
1B4E:  MOVWF  xF1
.................... 					MB_Length=5; 
1B50:  MOVLW  05
1B52:  MOVLB  4
1B54:  MOVWF  xEF
.................... 					ExcReq++; 
1B56:  INCF   xF4,F
1B58:  BTFSC  FD8.2
1B5A:  INCF   xF5,F
.................... 					}; 
.................... 				break; 
1B5C:  BRA    1E36
.................... 		//get registers 
.................... 		case	0x44: 
.................... 				if(MB_Length==7){ 
1B5E:  MOVLB  4
1B60:  MOVF   xEF,W
1B62:  SUBLW  07
1B64:  BNZ   1BA0
.................... 					//valig req propose 
.................... 					MB_Length=4; 
1B66:  MOVLW  04
1B68:  MOVWF  xEF
.................... 					ValidReq++; 
1B6A:  INCF   xF0,F
1B6C:  BTFSC  FD8.2
1B6E:  INCF   xF1,F
.................... 					//action 
.................... 					//forming answer 
.................... 					j=2;	//set start answer pointer 
1B70:  MOVLW  02
1B72:  MOVWF  xFA
.................... 					StAddr=MB_Buffer[3]; 
1B74:  MOVFF  3F2,52C
.................... 					EnAddr=(MB_Buffer[3]+MB_Buffer[4]); 
1B78:  MOVLB  3
1B7A:  MOVF   xF3,W
1B7C:  ADDWF  xF2,W
1B7E:  MOVLB  5
1B80:  MOVWF  x2D
.................... 					for(bytecount=StAddr; bytecount<EnAddr; bytecount++){ 
1B82:  MOVFF  52C,52E
1B86:  MOVF   x2D,W
1B88:  SUBWF  x2E,W
1B8A:  BC    1B9C
.................... 						AddRegData(bytecount);		//get registers						 
1B8C:  MOVFF  52E,533
1B90:  MOVLB  0
1B92:  GOTO   042A
.................... 					}; 
1B96:  MOVLB  5
1B98:  INCF   x2E,F
1B9A:  BRA    1B86
.................... 					}else{ 
1B9C:  BRA    1BB6
1B9E:  MOVLB  4
.................... 					MB_Buffer[1]|=0x80; 
1BA0:  MOVLB  3
1BA2:  BSF    xF0.7
.................... 					MB_Buffer[2]=illegal_data_address; 
1BA4:  MOVLW  02
1BA6:  MOVWF  xF1
.................... 					MB_Length=5; 
1BA8:  MOVLW  05
1BAA:  MOVLB  4
1BAC:  MOVWF  xEF
.................... 					ExcReq++; 
1BAE:  INCF   xF4,F
1BB0:  BTFSC  FD8.2
1BB2:  INCF   xF5,F
1BB4:  MOVLB  5
.................... 					};		 
.................... 				break; 
1BB6:  MOVLB  4
1BB8:  BRA    1E36
.................... 		//set registers 
.................... 		case	0x45: 
.................... 				if((MB_Length>=8)&&(!(MB_Length&0x01))){ 
1BBA:  MOVLB  4
1BBC:  MOVF   xEF,W
1BBE:  SUBLW  07
1BC0:  BC    1C0E
1BC2:  BTFSC  xEF.0
1BC4:  BRA    1C0E
.................... 					//action 
.................... 					j=4;	//set start answer pointer 
1BC6:  MOVLW  04
1BC8:  MOVWF  xFA
.................... 					StAddr=MB_Buffer[3]; 
1BCA:  MOVFF  3F2,52C
.................... 					EnAddr=MB_Length-2; 
1BCE:  MOVLW  02
1BD0:  SUBWF  xEF,W
1BD2:  MOVLB  5
1BD4:  MOVWF  x2D
.................... 					//valig req propose 
.................... 					MB_Length=4; 
1BD6:  MOVLW  04
1BD8:  MOVLB  4
1BDA:  MOVWF  xEF
.................... 					ValidReq++; 
1BDC:  INCF   xF0,F
1BDE:  BTFSC  FD8.2
1BE0:  INCF   xF1,F
.................... 					for(bytecount=StAddr; j<EnAddr; bytecount++){ 
1BE2:  MOVFF  52C,52E
1BE6:  MOVLB  5
1BE8:  MOVF   x2D,W
1BEA:  MOVLB  4
1BEC:  SUBWF  xFA,W
1BEE:  BC    1C02
.................... 						SetRegData(bytecount);		//get registers 
1BF0:  MOVFF  52E,533
1BF4:  MOVLB  0
1BF6:  GOTO   0C4C
.................... 					}; 
1BFA:  MOVLB  5
1BFC:  INCF   x2E,F
1BFE:  BRA    1BE8
1C00:  MOVLB  4
.................... 					//forming answer 
.................... 					MB_Length=4; 
1C02:  MOVLW  04
1C04:  MOVWF  xEF
.................... 					ValidReq++; 
1C06:  INCF   xF0,F
1C08:  BTFSC  FD8.2
1C0A:  INCF   xF1,F
.................... 					}else{ 
1C0C:  BRA    1C22
.................... 					MB_Buffer[1]|=0x80; 
1C0E:  MOVLB  3
1C10:  BSF    xF0.7
.................... 					MB_Buffer[2]=illegal_data_address; 
1C12:  MOVLW  02
1C14:  MOVWF  xF1
.................... 					MB_Length=5; 
1C16:  MOVLW  05
1C18:  MOVLB  4
1C1A:  MOVWF  xEF
.................... 					ExcReq++; 
1C1C:  INCF   xF4,F
1C1E:  BTFSC  FD8.2
1C20:  INCF   xF5,F
.................... 					};		 
.................... 				break; 
1C22:  BRA    1E36
.................... 		//write to EEPROM command 
.................... 		case	0x65: 
.................... 				if(MB_Length==4){ 
1C24:  MOVLB  4
1C26:  MOVF   xEF,W
1C28:  SUBLW  04
1C2A:  BNZ   1C40
.................... 					BUWrite(); 
1C2C:  MOVLB  0
1C2E:  GOTO   1174
.................... 					MB_Length=4; 
1C32:  MOVLW  04
1C34:  MOVLB  4
1C36:  MOVWF  xEF
.................... 					ValidReq++; 
1C38:  INCF   xF0,F
1C3A:  BTFSC  FD8.2
1C3C:  INCF   xF1,F
.................... 					}else{ 
1C3E:  BRA    1C54
.................... 					MB_Buffer[1]|=0x80; 
1C40:  MOVLB  3
1C42:  BSF    xF0.7
.................... 					MB_Buffer[2]=illegal_data_address; 
1C44:  MOVLW  02
1C46:  MOVWF  xF1
.................... 					MB_Length=5; 
1C48:  MOVLW  05
1C4A:  MOVLB  4
1C4C:  MOVWF  xEF
.................... 					ExcReq++; 
1C4E:  INCF   xF4,F
1C50:  BTFSC  FD8.2
1C52:  INCF   xF5,F
.................... 					};		 
.................... 				break; 
1C54:  BRA    1E36
.................... 		//set speed 
.................... 		case	0x6A: 
.................... 				if(MB_Length==5){ 
1C56:  MOVLB  4
1C58:  MOVF   xEF,W
1C5A:  SUBLW  05
1C5C:  BTFSS  FD8.2
1C5E:  BRA    1DA8
.................... 					MB_Length=4; 
1C60:  MOVLW  04
1C62:  MOVWF  xEF
.................... 					ValidReq++; 
1C64:  INCF   xF0,F
1C66:  BTFSC  FD8.2
1C68:  INCF   xF1,F
.................... 					switch(MB_Buffer[2]){ 
1C6A:  MOVLB  3
1C6C:  MOVF   xF1,W
1C6E:  XORLW  00
1C70:  MOVLB  0
1C72:  BZ    1C92
1C74:  XORLW  01
1C76:  BZ    1CB0
1C78:  XORLW  03
1C7A:  BZ    1CCE
1C7C:  XORLW  01
1C7E:  BZ    1CEC
1C80:  XORLW  07
1C82:  BZ    1D0A
1C84:  XORLW  01
1C86:  BZ    1D28
1C88:  XORLW  03
1C8A:  BZ    1D46
1C8C:  XORLW  01
1C8E:  BZ    1D60
1C90:  BRA    1D7C
.................... 						case	0x00:	//1200 
.................... 							Speed=1200; 
1C92:  MOVLW  04
1C94:  MOVLB  3
1C96:  MOVWF  xDC
1C98:  MOVLW  B0
1C9A:  MOVWF  xDB
.................... 							setup_uart(1200); 
1C9C:  BSF    FB8.3
1C9E:  MOVLW  0A
1CA0:  MOVWF  FAF
1CA2:  MOVLW  1A
1CA4:  MOVWF  FB0
1CA6:  MOVLW  A6
1CA8:  MOVWF  FAC
1CAA:  NOP   
1CAC:  NOP   
.................... 							break; 
1CAE:  BRA    1D92
.................... 						case	0x01:	//1800 
.................... 							Speed=1800; 
1CB0:  MOVLW  07
1CB2:  MOVLB  3
1CB4:  MOVWF  xDC
1CB6:  MOVLW  08
1CB8:  MOVWF  xDB
.................... 							setup_uart(1800); 
1CBA:  BSF    FB8.3
1CBC:  MOVLW  5B
1CBE:  MOVWF  FAF
1CC0:  MOVLW  11
1CC2:  MOVWF  FB0
1CC4:  MOVLW  A6
1CC6:  MOVWF  FAC
1CC8:  NOP   
1CCA:  NOP   
.................... 							break; 
1CCC:  BRA    1D92
.................... 						case	0x02:	//2400 
.................... 							Speed=2400; 
1CCE:  MOVLW  09
1CD0:  MOVLB  3
1CD2:  MOVWF  xDC
1CD4:  MOVLW  60
1CD6:  MOVWF  xDB
.................... 							setup_uart(2400); 
1CD8:  BSF    FB8.3
1CDA:  MOVLW  04
1CDC:  MOVWF  FAF
1CDE:  MOVLW  0D
1CE0:  MOVWF  FB0
1CE2:  MOVLW  A6
1CE4:  MOVWF  FAC
1CE6:  NOP   
1CE8:  NOP   
.................... 							break; 
1CEA:  BRA    1D92
.................... 						case	0x03:	//4800 
.................... 							Speed=4800; 
1CEC:  MOVLW  12
1CEE:  MOVLB  3
1CF0:  MOVWF  xDC
1CF2:  MOVLW  C0
1CF4:  MOVWF  xDB
.................... 							setup_uart(4800); 
1CF6:  BSF    FB8.3
1CF8:  MOVLW  82
1CFA:  MOVWF  FAF
1CFC:  MOVLW  06
1CFE:  MOVWF  FB0
1D00:  MOVLW  A6
1D02:  MOVWF  FAC
1D04:  NOP   
1D06:  NOP   
.................... 							break; 
1D08:  BRA    1D92
.................... 						case	0x04:	//7200 
.................... 							Speed=7200; 
1D0A:  MOVLW  1C
1D0C:  MOVLB  3
1D0E:  MOVWF  xDC
1D10:  MOVLW  20
1D12:  MOVWF  xDB
.................... 							setup_uart(7200); 
1D14:  BSF    FB8.3
1D16:  MOVLW  56
1D18:  MOVWF  FAF
1D1A:  MOVLW  04
1D1C:  MOVWF  FB0
1D1E:  MOVLW  A6
1D20:  MOVWF  FAC
1D22:  NOP   
1D24:  NOP   
.................... 							break; 
1D26:  BRA    1D92
.................... 						case	0x05:	//9600 
.................... 							Speed=9600; 
1D28:  MOVLW  25
1D2A:  MOVLB  3
1D2C:  MOVWF  xDC
1D2E:  MOVLW  80
1D30:  MOVWF  xDB
.................... 							setup_uart(9600); 
1D32:  BSF    FB8.3
1D34:  MOVLW  40
1D36:  MOVWF  FAF
1D38:  MOVLW  03
1D3A:  MOVWF  FB0
1D3C:  MOVLW  A6
1D3E:  MOVWF  FAC
1D40:  NOP   
1D42:  NOP   
.................... 							break; 
1D44:  BRA    1D92
.................... 						case	0x06:	//14400 
.................... 							Speed=14400; 
1D46:  MOVLW  38
1D48:  MOVLB  3
1D4A:  MOVWF  xDC
1D4C:  MOVLW  40
1D4E:  MOVWF  xDB
.................... 							setup_uart(14400); 
1D50:  BCF    FB8.3
1D52:  MOVLW  8A
1D54:  MOVWF  FAF
1D56:  MOVLW  A6
1D58:  MOVWF  FAC
1D5A:  NOP   
1D5C:  NOP   
.................... 							break; 
1D5E:  BRA    1D92
.................... 						case	0x07:	//19200 
.................... 							Speed=19200; 
1D60:  MOVLW  4B
1D62:  MOVLB  3
1D64:  MOVWF  xDC
1D66:  CLRF   xDB
.................... 							setup_uart(19200); 
1D68:  BSF    FB8.3
1D6A:  MOVLW  A0
1D6C:  MOVWF  FAF
1D6E:  MOVLW  01
1D70:  MOVWF  FB0
1D72:  MOVLW  A6
1D74:  MOVWF  FAC
1D76:  NOP   
1D78:  NOP   
.................... 							break; 
1D7A:  BRA    1D92
.................... 						default: 
.................... 							MB_Buffer[1]|=0x80; 
1D7C:  MOVLB  3
1D7E:  BSF    xF0.7
.................... 							MB_Buffer[2]=illegal_data_value; 
1D80:  MOVLW  03
1D82:  MOVWF  xF1
.................... 							MB_Length=5; 
1D84:  MOVLW  05
1D86:  MOVLB  4
1D88:  MOVWF  xEF
.................... 							ExcReq++; 
1D8A:  INCF   xF4,F
1D8C:  BTFSC  FD8.2
1D8E:  INCF   xF5,F
1D90:  MOVLB  3
.................... 					}; 
.................... 					output_toggle(STAT); 
1D92:  BCF    F94.0
1D94:  BTG    F8B.0
.................... 					//pause for master 
.................... 					delay_ms(100); 
1D96:  MOVLW  64
1D98:  MOVLB  5
1D9A:  MOVWF  x33
1D9C:  MOVLB  0
1D9E:  BRA    18CE
.................... 					output_toggle(STAT);					 
1DA0:  BCF    F94.0
1DA2:  BTG    F8B.0
.................... 					}else{ 
1DA4:  BRA    1DBE
1DA6:  MOVLB  4
.................... 					MB_Buffer[1]|=0x80; 
1DA8:  MOVLB  3
1DAA:  BSF    xF0.7
.................... 					MB_Buffer[2]=illegal_data_address; 
1DAC:  MOVLW  02
1DAE:  MOVWF  xF1
.................... 					MB_Length=5; 
1DB0:  MOVLW  05
1DB2:  MOVLB  4
1DB4:  MOVWF  xEF
.................... 					ExcReq++; 
1DB6:  INCF   xF4,F
1DB8:  BTFSC  FD8.2
1DBA:  INCF   xF5,F
1DBC:  MOVLB  0
.................... 					};		 
.................... 				break; 
1DBE:  MOVLB  4
1DC0:  BRA    1E36
.................... 		//send id 
.................... 		case	0x6B: 
.................... 				if(MB_Length==4){ 
1DC2:  MOVLB  4
1DC4:  MOVF   xEF,W
1DC6:  SUBLW  04
1DC8:  BNZ   1E0C
.................... 					MB_Buffer[2]="M"; 
1DCA:  MOVLW  4D
1DCC:  MOVLB  3
1DCE:  MOVWF  xF1
.................... 					MB_Buffer[3]="W"; 
1DD0:  MOVLW  57
1DD2:  MOVWF  xF2
.................... 					MB_Buffer[4]="T"; 
1DD4:  MOVLW  54
1DD6:  MOVWF  xF3
.................... 					MB_Buffer[5]="-"; 
1DD8:  MOVLW  2D
1DDA:  MOVWF  xF4
.................... 					MB_Buffer[6]="S"; 
1DDC:  MOVLW  53
1DDE:  MOVWF  xF5
.................... 					MB_Buffer[7]="P"; 
1DE0:  MOVLW  50
1DE2:  MOVWF  xF6
.................... 					MB_Buffer[8]="M"; 
1DE4:  MOVLW  4D
1DE6:  MOVWF  xF7
.................... 					MB_Buffer[9]="3"; 
1DE8:  MOVLW  33
1DEA:  MOVWF  xF8
.................... 					MB_Buffer[10]="v"; 
1DEC:  MOVLW  76
1DEE:  MOVWF  xF9
.................... 					MB_Buffer[11]="1"; 
1DF0:  MOVLW  31
1DF2:  MOVWF  xFA
.................... 					MB_Buffer[12]="."; 
1DF4:  MOVLW  2E
1DF6:  MOVWF  xFB
.................... 					MB_Buffer[13]="0"; 
1DF8:  MOVLW  30
1DFA:  MOVWF  xFC
.................... 					MB_Buffer[14]="0"; 
1DFC:  MOVWF  xFD
.................... 					MB_Length=16; 
1DFE:  MOVLW  10
1E00:  MOVLB  4
1E02:  MOVWF  xEF
.................... 					ValidReq++; 
1E04:  INCF   xF0,F
1E06:  BTFSC  FD8.2
1E08:  INCF   xF1,F
.................... 					}else{ 
1E0A:  BRA    1E20
.................... 					MB_Buffer[1]|=0x80; 
1E0C:  MOVLB  3
1E0E:  BSF    xF0.7
.................... 					MB_Buffer[2]=illegal_data_address; 
1E10:  MOVLW  02
1E12:  MOVWF  xF1
.................... 					MB_Length=5; 
1E14:  MOVLW  05
1E16:  MOVLB  4
1E18:  MOVWF  xEF
.................... 					ExcReq++; 
1E1A:  INCF   xF4,F
1E1C:  BTFSC  FD8.2
1E1E:  INCF   xF5,F
.................... 					};		 
.................... 				break; 
1E20:  BRA    1E36
.................... 		//not recognized 
.................... 		default:		//not recognized command 
.................... 		MB_Buffer[1]|=0x80;	//set error code 
1E22:  MOVLB  3
1E24:  BSF    xF0.7
.................... 		MB_Buffer[2]=illegal_function; 
1E26:  MOVLW  01
1E28:  MOVWF  xF1
.................... 		MB_Length=5; 
1E2A:  MOVLW  05
1E2C:  MOVLB  4
1E2E:  MOVWF  xEF
.................... 		ExcReq++; 
1E30:  INCF   xF4,F
1E32:  BTFSC  FD8.2
1E34:  INCF   xF5,F
.................... 	};	 
.................... 	//send answer 
.................... 	if(MB_Buffer[0]!=0){	//if unicast req - then send answer 
1E36:  MOVLB  3
1E38:  MOVF   xEF,F
1E3A:  BZ    1EC4
.................... 	CRCc=ModbusCRC(MB_Buffer,MB_Length-2);	//calc CRC 
1E3C:  MOVLW  02
1E3E:  MOVLB  4
1E40:  SUBWF  xEF,W
1E42:  MOVLB  5
1E44:  MOVWF  x33
1E46:  MOVLW  03
1E48:  MOVWF  x35
1E4A:  MOVLW  EF
1E4C:  MOVWF  x34
1E4E:  MOVFF  533,536
1E52:  MOVLB  0
1E54:  CALL   03D2
1E58:  MOVFF  02,4F9
1E5C:  MOVFF  01,4F8
.................... 	MB_Buffer[MB_Length-2]=make8(CRCc,1);	//high CRC 
1E60:  MOVLW  02
1E62:  MOVLB  4
1E64:  SUBWF  xEF,W
1E66:  CLRF   03
1E68:  ADDLW  EF
1E6A:  MOVWF  FE9
1E6C:  MOVLW  03
1E6E:  ADDWFC 03,W
1E70:  MOVWF  FEA
1E72:  MOVFF  4F9,FEF
.................... 	MB_Buffer[MB_Length-1]=make8(CRCc,0);	//low CRC 
1E76:  MOVLW  01
1E78:  SUBWF  xEF,W
1E7A:  CLRF   03
1E7C:  ADDLW  EF
1E7E:  MOVWF  FE9
1E80:  MOVLW  03
1E82:  ADDWFC 03,W
1E84:  MOVWF  FEA
1E86:  MOVFF  4F8,FEF
.................... 	//send 
.................... 	for(bytecount=0; bytecount<MB_Length; bytecount++){ 
1E8A:  MOVLB  5
1E8C:  CLRF   x2E
1E8E:  MOVLB  4
1E90:  MOVF   xEF,W
1E92:  MOVLB  5
1E94:  SUBWF  x2E,W
1E96:  BC    1EBE
.................... 		restart_wdt(); 
1E98:  CLRWDT
.................... 		putc(MB_Buffer[bytecount]); 
1E9A:  CLRF   03
1E9C:  MOVF   x2E,W
1E9E:  ADDLW  EF
1EA0:  MOVWF  FE9
1EA2:  MOVLW  03
1EA4:  ADDWFC 03,W
1EA6:  MOVWF  FEA
1EA8:  MOVFF  FEF,533
1EAC:  MOVFF  533,534
1EB0:  MOVLB  0
1EB2:  BRA    1900
.................... 		output_low(STAT);	//toggle led 
1EB4:  BCF    F94.0
1EB6:  BCF    F8B.0
.................... 		}; 
1EB8:  MOVLB  5
1EBA:  INCF   x2E,F
1EBC:  BRA    1E8E
.................... 		goto exit; 
1EBE:  MOVLB  4
1EC0:  BRA    1EC2
1EC2:  MOVLB  3
.................... 	};	 
.................... 	// 
.................... 	 
.................... exit:	//exit 
.................... 	output_high(STAT);	//on led 
1EC4:  BCF    F94.0
1EC6:  BSF    F8B.0
.................... 	MB_Length=0; 
1EC8:  MOVLB  4
1ECA:  CLRF   xEF
.................... 	clear_interrupt(INT_RDA);	 
.................... 	clear_interrupt(INT_TIMER1);	 
1ECC:  BCF    F9E.0
.................... 	disable_interrupts(INT_TIMER1);	 
1ECE:  BCF    F9D.0
.................... 	enable_interrupts(INT_RDA); 
1ED0:  BSF    F9D.5
.................... } 
.................... // 
....................  
....................  
1ED2:  BCF    F9E.0
1ED4:  MOVLB  0
1ED6:  GOTO   006C
.................... void main(void) 
.................... { 
*
2DFE:  CLRF   FF8
2E00:  BCF    FD0.7
2E02:  BSF    07.7
2E04:  CLRF   FEA
2E06:  CLRF   FE9
2E08:  MOVLW  70
2E0A:  MOVWF  FD3
2E0C:  MOVLW  40
2E0E:  MOVWF  F9B
2E10:  MOVF   FD3,W
2E12:  MOVLB  3
2E14:  CLRF   xC6
2E16:  CLRF   xED
2E18:  MOVLW  32
2E1A:  MOVWF  xEC
2E1C:  MOVLB  4
2E1E:  CLRF   xEF
2E20:  BCF    F92.6
2E22:  BCF    F89.6
2E24:  BSF    FB8.3
2E26:  MOVLW  40
2E28:  MOVWF  FAF
2E2A:  MOVLW  03
2E2C:  MOVWF  FB0
2E2E:  MOVLW  A6
2E30:  MOVWF  FAC
2E32:  MOVLW  90
2E34:  MOVWF  FAB
2E36:  NOP   
2E38:  NOP   
2E3A:  MOVF   FC1,W
2E3C:  ANDLW  C0
2E3E:  IORLW  0F
2E40:  MOVWF  FC1
2E42:  MOVLW  07
2E44:  MOVWF  FB4
2E46:  CLRF   19
2E48:  CLRF   1A
2E4A:  CLRF   1B
2E4C:  CLRF   1C
2E4E:  CLRF   1D
2E50:  CLRF   1E
2E52:  CLRF   1F
2E54:  CLRF   20
2E56:  CLRF   21
2E58:  CLRF   22
2E5A:  CLRF   23
2E5C:  CLRF   24
2E5E:  CLRF   25
2E60:  CLRF   26
2E62:  CLRF   27
2E64:  CLRF   28
2E66:  CLRF   29
2E68:  CLRF   2A
2E6A:  CLRF   2B
2E6C:  CLRF   2C
2E6E:  CLRF   2D
2E70:  CLRF   2E
2E72:  CLRF   2F
2E74:  CLRF   30
2E76:  CLRF   31
2E78:  CLRF   32
2E7A:  CLRF   33
2E7C:  CLRF   34
2E7E:  CLRF   35
2E80:  CLRF   36
2E82:  CLRF   37
2E84:  CLRF   38
2E86:  CLRF   39
2E88:  CLRF   3A
2E8A:  CLRF   3B
2E8C:  CLRF   3C
2E8E:  CLRF   3D
2E90:  CLRF   3E
2E92:  CLRF   3F
2E94:  CLRF   40
2E96:  CLRF   41
2E98:  CLRF   42
2E9A:  CLRF   43
2E9C:  CLRF   44
2E9E:  CLRF   45
2EA0:  CLRF   46
2EA2:  CLRF   47
2EA4:  CLRF   48
2EA6:  CLRF   49
2EA8:  CLRF   4A
2EAA:  CLRF   4B
2EAC:  CLRF   4C
2EAE:  CLRF   4D
2EB0:  CLRF   4E
2EB2:  CLRF   4F
2EB4:  CLRF   50
2EB6:  CLRF   51
2EB8:  CLRF   52
2EBA:  CLRF   53
2EBC:  CLRF   54
2EBE:  CLRF   55
2EC0:  CLRF   56
2EC2:  CLRF   57
2EC4:  CLRF   58
2EC6:  CLRF   59
2EC8:  CLRF   5A
2ECA:  CLRF   5B
2ECC:  CLRF   5C
2ECE:  CLRF   5D
2ED0:  CLRF   5E
2ED2:  CLRF   5F
2ED4:  CLRF   60
2ED6:  CLRF   61
2ED8:  CLRF   62
2EDA:  CLRF   63
2EDC:  CLRF   64
2EDE:  CLRF   65
2EE0:  CLRF   66
2EE2:  CLRF   67
2EE4:  CLRF   68
2EE6:  CLRF   69
2EE8:  CLRF   6A
2EEA:  CLRF   6B
2EEC:  CLRF   6C
2EEE:  CLRF   6D
2EF0:  CLRF   6E
2EF2:  CLRF   6F
2EF4:  CLRF   70
2EF6:  CLRF   71
2EF8:  CLRF   72
2EFA:  CLRF   73
2EFC:  CLRF   74
2EFE:  CLRF   75
2F00:  CLRF   76
2F02:  CLRF   77
2F04:  CLRF   78
2F06:  CLRF   79
2F08:  CLRF   7A
2F0A:  CLRF   7B
2F0C:  CLRF   7C
2F0E:  CLRF   7D
2F10:  CLRF   7E
2F12:  CLRF   7F
2F14:  MOVLB  0
2F16:  CLRF   x80
2F18:  CLRF   x81
2F1A:  CLRF   x82
2F1C:  CLRF   x83
2F1E:  CLRF   x84
2F20:  CLRF   x85
2F22:  CLRF   x86
2F24:  CLRF   x87
2F26:  CLRF   x88
2F28:  CLRF   x89
2F2A:  CLRF   x8A
2F2C:  CLRF   x8B
2F2E:  CLRF   x8C
2F30:  CLRF   x8D
2F32:  CLRF   x8E
2F34:  CLRF   x8F
2F36:  CLRF   x90
2F38:  CLRF   x91
2F3A:  CLRF   x92
2F3C:  CLRF   x93
2F3E:  CLRF   x94
2F40:  CLRF   x95
2F42:  CLRF   x96
2F44:  CLRF   x97
2F46:  CLRF   x98
2F48:  CLRF   x99
2F4A:  CLRF   x9A
2F4C:  CLRF   x9B
2F4E:  CLRF   x9C
2F50:  CLRF   x9D
2F52:  CLRF   x9E
2F54:  CLRF   x9F
2F56:  CLRF   xA0
2F58:  CLRF   xA1
2F5A:  CLRF   xA2
2F5C:  CLRF   xA3
2F5E:  CLRF   xA4
2F60:  CLRF   xA5
2F62:  CLRF   xA6
2F64:  CLRF   xA7
2F66:  CLRF   xA8
2F68:  CLRF   xA9
2F6A:  CLRF   xAA
2F6C:  CLRF   xAB
2F6E:  CLRF   xAC
2F70:  CLRF   xAD
2F72:  CLRF   xAE
2F74:  CLRF   xAF
2F76:  CLRF   xB0
2F78:  CLRF   xB1
2F7A:  CLRF   xB2
2F7C:  CLRF   xB3
2F7E:  CLRF   xB4
2F80:  CLRF   xB5
2F82:  CLRF   xB6
2F84:  CLRF   xB7
2F86:  CLRF   xB8
2F88:  CLRF   xB9
2F8A:  CLRF   xBA
2F8C:  CLRF   xBB
2F8E:  CLRF   xBC
2F90:  CLRF   xBD
2F92:  CLRF   xBE
2F94:  CLRF   xBF
2F96:  CLRF   xC0
2F98:  CLRF   xC1
2F9A:  CLRF   xC2
2F9C:  CLRF   xC3
2F9E:  CLRF   xC4
2FA0:  CLRF   xC5
2FA2:  CLRF   xC6
2FA4:  CLRF   xC7
2FA6:  CLRF   xC8
2FA8:  CLRF   xC9
2FAA:  CLRF   xCA
2FAC:  CLRF   xCB
2FAE:  CLRF   xCC
2FB0:  CLRF   xCD
2FB2:  CLRF   xCE
2FB4:  CLRF   xCF
2FB6:  CLRF   xD0
2FB8:  CLRF   xD1
2FBA:  CLRF   xD2
2FBC:  CLRF   xD3
2FBE:  CLRF   xD4
2FC0:  CLRF   xD5
2FC2:  CLRF   xD6
2FC4:  CLRF   xD7
2FC6:  CLRF   xD8
2FC8:  CLRF   xD9
2FCA:  CLRF   xDA
2FCC:  CLRF   xDB
2FCE:  CLRF   xDC
2FD0:  CLRF   xDD
2FD2:  CLRF   xDE
2FD4:  CLRF   xDF
2FD6:  CLRF   xE0
2FD8:  CLRF   xE1
2FDA:  CLRF   xE2
2FDC:  CLRF   xE3
2FDE:  CLRF   xE4
2FE0:  CLRF   xE5
2FE2:  CLRF   xE6
2FE4:  CLRF   xE7
2FE6:  CLRF   xE8
2FE8:  CLRF   xE9
2FEA:  CLRF   xEA
2FEC:  CLRF   xEB
2FEE:  CLRF   xEC
2FF0:  CLRF   xED
2FF2:  CLRF   xEE
2FF4:  CLRF   xEF
2FF6:  CLRF   xF0
2FF8:  CLRF   xF1
2FFA:  CLRF   xF2
2FFC:  CLRF   xF3
2FFE:  CLRF   xF4
3000:  CLRF   xF5
3002:  CLRF   xF6
3004:  CLRF   xF7
3006:  CLRF   xF8
3008:  CLRF   xF9
300A:  CLRF   xFA
300C:  CLRF   xFB
300E:  CLRF   xFC
3010:  CLRF   xFD
3012:  CLRF   xFE
3014:  CLRF   xFF
3016:  MOVLB  1
3018:  CLRF   x00
301A:  CLRF   x01
301C:  CLRF   x02
301E:  CLRF   x03
3020:  CLRF   x04
3022:  CLRF   x05
3024:  CLRF   x06
3026:  CLRF   x07
3028:  CLRF   x08
302A:  CLRF   x09
302C:  CLRF   x0A
302E:  CLRF   x0B
3030:  CLRF   x0C
3032:  CLRF   x0D
3034:  CLRF   x0E
3036:  CLRF   x0F
3038:  CLRF   x10
303A:  CLRF   x11
303C:  CLRF   x12
303E:  CLRF   x13
3040:  CLRF   x14
3042:  CLRF   x15
3044:  CLRF   x16
3046:  CLRF   x17
3048:  CLRF   x18
304A:  CLRF   x19
304C:  CLRF   x1A
304E:  CLRF   x1B
3050:  CLRF   x1C
3052:  CLRF   x1D
3054:  CLRF   x1E
3056:  CLRF   x1F
3058:  CLRF   x20
305A:  CLRF   x21
305C:  CLRF   x22
305E:  CLRF   x23
3060:  CLRF   x24
3062:  CLRF   x25
3064:  CLRF   x26
3066:  CLRF   x27
3068:  CLRF   x28
306A:  CLRF   x29
306C:  CLRF   x2A
306E:  CLRF   x2B
3070:  CLRF   x2C
3072:  CLRF   x2D
3074:  CLRF   x2E
3076:  CLRF   x2F
3078:  CLRF   x30
307A:  CLRF   x31
307C:  CLRF   x32
307E:  CLRF   x33
3080:  CLRF   x34
3082:  CLRF   x35
3084:  CLRF   x36
3086:  CLRF   x37
3088:  CLRF   x38
308A:  CLRF   x39
308C:  CLRF   x3A
308E:  CLRF   x3B
3090:  CLRF   x3C
3092:  CLRF   x3D
3094:  CLRF   x3E
3096:  CLRF   x3F
3098:  CLRF   x40
309A:  CLRF   x41
309C:  CLRF   x42
309E:  CLRF   x43
30A0:  CLRF   x44
30A2:  CLRF   x45
30A4:  CLRF   x46
30A6:  CLRF   x47
30A8:  CLRF   x48
30AA:  CLRF   x49
30AC:  CLRF   x4A
30AE:  CLRF   x4B
30B0:  CLRF   x4C
30B2:  CLRF   x4D
30B4:  CLRF   x4E
30B6:  CLRF   x4F
30B8:  CLRF   x50
30BA:  CLRF   x51
30BC:  CLRF   x52
30BE:  CLRF   x53
30C0:  CLRF   x54
30C2:  CLRF   x55
30C4:  CLRF   x56
30C6:  CLRF   x57
30C8:  CLRF   x58
30CA:  CLRF   x59
30CC:  CLRF   x5A
30CE:  CLRF   x5B
30D0:  CLRF   x5C
30D2:  CLRF   x5D
30D4:  CLRF   x5E
30D6:  CLRF   x5F
30D8:  CLRF   x60
30DA:  CLRF   x61
30DC:  CLRF   x62
30DE:  CLRF   x63
30E0:  CLRF   x64
30E2:  CLRF   x65
30E4:  CLRF   x66
30E6:  CLRF   x67
30E8:  CLRF   x68
30EA:  CLRF   x69
30EC:  CLRF   x6A
30EE:  CLRF   x6B
30F0:  CLRF   x6C
30F2:  CLRF   x6D
30F4:  CLRF   x6E
30F6:  CLRF   x6F
30F8:  CLRF   x70
30FA:  CLRF   x71
30FC:  CLRF   x72
30FE:  CLRF   x73
3100:  CLRF   x74
3102:  CLRF   x75
3104:  CLRF   x76
3106:  CLRF   x77
3108:  CLRF   x78
310A:  CLRF   x79
310C:  CLRF   x7A
310E:  CLRF   x7B
3110:  CLRF   x7C
3112:  CLRF   x7D
3114:  CLRF   x7E
3116:  CLRF   x7F
3118:  CLRF   x80
311A:  CLRF   x81
311C:  CLRF   x82
311E:  CLRF   x83
3120:  CLRF   x84
3122:  CLRF   x85
3124:  CLRF   x86
3126:  CLRF   x87
3128:  CLRF   x88
312A:  CLRF   x89
312C:  CLRF   x8A
312E:  CLRF   x8B
3130:  CLRF   x8C
3132:  CLRF   x8D
3134:  CLRF   x8E
3136:  CLRF   x8F
3138:  CLRF   x90
313A:  CLRF   x91
313C:  CLRF   x92
313E:  CLRF   x93
3140:  CLRF   x94
3142:  CLRF   x95
3144:  CLRF   x96
3146:  CLRF   x97
3148:  CLRF   x98
314A:  CLRF   x99
314C:  CLRF   x9A
314E:  CLRF   x9B
3150:  CLRF   x9C
3152:  CLRF   x9D
3154:  CLRF   x9E
3156:  CLRF   x9F
3158:  CLRF   xA0
315A:  CLRF   xA1
315C:  CLRF   xA2
315E:  CLRF   xA3
3160:  CLRF   xA4
3162:  CLRF   xA5
3164:  CLRF   xA6
3166:  CLRF   xA7
3168:  CLRF   xA8
316A:  CLRF   xA9
316C:  CLRF   xAA
316E:  CLRF   xAB
3170:  CLRF   xAC
3172:  CLRF   xAD
3174:  CLRF   xAE
3176:  CLRF   xAF
3178:  CLRF   xB0
317A:  CLRF   xB1
317C:  CLRF   xB2
317E:  CLRF   xB3
3180:  CLRF   xB4
3182:  CLRF   xB5
3184:  CLRF   xB6
3186:  CLRF   xB7
3188:  CLRF   xB8
318A:  CLRF   xB9
318C:  CLRF   xBA
318E:  CLRF   xBB
3190:  CLRF   xBC
3192:  CLRF   xBD
3194:  CLRF   xBE
3196:  CLRF   xBF
3198:  CLRF   xC0
319A:  CLRF   xC1
319C:  CLRF   xC2
319E:  CLRF   xC3
31A0:  CLRF   xC4
31A2:  CLRF   xC5
31A4:  CLRF   xC6
31A6:  CLRF   xC7
31A8:  CLRF   xC8
31AA:  CLRF   xC9
31AC:  CLRF   xCA
31AE:  CLRF   xCB
31B0:  CLRF   xCC
31B2:  CLRF   xCD
31B4:  CLRF   xCE
31B6:  CLRF   xCF
31B8:  CLRF   xD0
31BA:  CLRF   xD1
31BC:  CLRF   xD2
31BE:  CLRF   xD3
31C0:  CLRF   xD4
31C2:  CLRF   xD5
31C4:  CLRF   xD6
31C6:  CLRF   xD7
31C8:  CLRF   xD8
31CA:  CLRF   xD9
31CC:  CLRF   xDA
31CE:  CLRF   xDB
31D0:  CLRF   xDC
31D2:  CLRF   xDD
31D4:  CLRF   xDE
31D6:  CLRF   xDF
31D8:  CLRF   xE0
31DA:  CLRF   xE1
31DC:  CLRF   xE2
31DE:  CLRF   xE3
31E0:  CLRF   xE4
31E2:  CLRF   xE5
31E4:  CLRF   xE6
31E6:  CLRF   xE7
31E8:  CLRF   xE8
31EA:  CLRF   xE9
31EC:  CLRF   xEA
31EE:  CLRF   xEB
31F0:  CLRF   xEC
31F2:  CLRF   xED
31F4:  CLRF   xEE
31F6:  CLRF   xEF
31F8:  CLRF   xF0
31FA:  CLRF   xF1
31FC:  CLRF   xF2
31FE:  CLRF   xF3
3200:  CLRF   xF4
3202:  CLRF   xF5
3204:  CLRF   xF6
3206:  CLRF   xF7
3208:  CLRF   xF8
320A:  CLRF   xF9
320C:  CLRF   xFA
320E:  CLRF   xFB
3210:  CLRF   xFC
3212:  CLRF   xFD
3214:  CLRF   xFE
3216:  CLRF   xFF
3218:  MOVLB  2
321A:  CLRF   x00
321C:  CLRF   x01
321E:  CLRF   x02
3220:  CLRF   x03
3222:  CLRF   x04
3224:  CLRF   x05
3226:  CLRF   x06
3228:  CLRF   x07
322A:  CLRF   x08
322C:  CLRF   x09
322E:  CLRF   x0A
3230:  CLRF   x0B
3232:  CLRF   x0C
3234:  CLRF   x0D
3236:  CLRF   x0E
3238:  CLRF   x0F
323A:  CLRF   x10
323C:  CLRF   x11
323E:  CLRF   x12
3240:  CLRF   x13
3242:  CLRF   x14
3244:  CLRF   x15
3246:  CLRF   x16
3248:  CLRF   x17
324A:  CLRF   x18
324C:  CLRF   x19
324E:  CLRF   x1A
3250:  CLRF   x1B
3252:  CLRF   x1C
3254:  CLRF   x1D
3256:  CLRF   x1E
3258:  CLRF   x1F
325A:  CLRF   x20
325C:  CLRF   x21
325E:  CLRF   x22
3260:  CLRF   x23
3262:  CLRF   x24
3264:  CLRF   x25
3266:  CLRF   x26
3268:  CLRF   x27
326A:  CLRF   x28
326C:  CLRF   x29
326E:  CLRF   x2A
3270:  CLRF   x2B
3272:  CLRF   x2C
3274:  CLRF   x2D
3276:  CLRF   x2E
3278:  CLRF   x2F
327A:  CLRF   x30
327C:  CLRF   x31
327E:  CLRF   x32
3280:  CLRF   x33
3282:  CLRF   x34
3284:  CLRF   x35
3286:  CLRF   x36
3288:  CLRF   x37
328A:  CLRF   x38
328C:  CLRF   x39
328E:  CLRF   x3A
3290:  CLRF   x3B
3292:  CLRF   x3C
3294:  CLRF   x3D
3296:  CLRF   x3E
3298:  CLRF   x3F
329A:  CLRF   x40
329C:  CLRF   x41
329E:  CLRF   x42
32A0:  CLRF   x43
32A2:  CLRF   x44
32A4:  CLRF   x45
32A6:  CLRF   x46
32A8:  CLRF   x47
32AA:  CLRF   x48
32AC:  CLRF   x49
32AE:  CLRF   x4A
32B0:  CLRF   x4B
32B2:  CLRF   x4C
32B4:  CLRF   x4D
32B6:  CLRF   x4E
32B8:  CLRF   x4F
32BA:  CLRF   x50
32BC:  CLRF   x51
32BE:  CLRF   x52
32C0:  CLRF   x53
32C2:  CLRF   x54
32C4:  CLRF   x55
32C6:  CLRF   x56
32C8:  CLRF   x57
32CA:  CLRF   x58
32CC:  CLRF   x59
32CE:  CLRF   x5A
32D0:  CLRF   x5B
32D2:  CLRF   x5C
32D4:  CLRF   x5D
32D6:  CLRF   x5E
32D8:  CLRF   x5F
32DA:  CLRF   x60
32DC:  CLRF   x61
32DE:  CLRF   x62
32E0:  CLRF   x63
32E2:  CLRF   x64
32E4:  CLRF   x65
32E6:  CLRF   x66
32E8:  CLRF   x67
32EA:  CLRF   x68
32EC:  CLRF   x69
32EE:  CLRF   x6A
32F0:  CLRF   x6B
32F2:  CLRF   x6C
32F4:  CLRF   x6D
32F6:  CLRF   x6E
32F8:  CLRF   x6F
32FA:  CLRF   x70
32FC:  CLRF   x71
32FE:  CLRF   x72
3300:  CLRF   x73
3302:  CLRF   x74
3304:  CLRF   x75
3306:  CLRF   x76
3308:  CLRF   x77
330A:  CLRF   x78
330C:  CLRF   x79
330E:  CLRF   x7A
3310:  CLRF   x7B
3312:  CLRF   x7C
3314:  CLRF   x7D
3316:  CLRF   x7E
3318:  CLRF   x7F
331A:  CLRF   x80
331C:  CLRF   x81
331E:  CLRF   x82
3320:  CLRF   x83
3322:  CLRF   x84
3324:  CLRF   x85
3326:  CLRF   x86
3328:  CLRF   x87
332A:  CLRF   x88
332C:  CLRF   x89
332E:  CLRF   x8A
3330:  CLRF   x8B
3332:  CLRF   x8C
3334:  CLRF   x8D
3336:  CLRF   x8E
3338:  CLRF   x8F
333A:  CLRF   x90
333C:  CLRF   x91
333E:  CLRF   x92
3340:  CLRF   x93
3342:  CLRF   x94
3344:  CLRF   x95
3346:  CLRF   x96
3348:  CLRF   x97
334A:  CLRF   x98
334C:  CLRF   x99
334E:  CLRF   x9A
3350:  CLRF   x9B
3352:  CLRF   x9C
3354:  CLRF   x9D
3356:  CLRF   x9E
3358:  CLRF   x9F
335A:  CLRF   xA0
335C:  CLRF   xA1
335E:  CLRF   xA2
3360:  CLRF   xA3
3362:  CLRF   xA4
3364:  CLRF   xA5
3366:  CLRF   xA6
3368:  CLRF   xA7
336A:  CLRF   xA8
336C:  CLRF   xA9
336E:  CLRF   xAA
3370:  CLRF   xAB
3372:  CLRF   xAC
3374:  CLRF   xAD
3376:  CLRF   xAE
3378:  CLRF   xAF
337A:  CLRF   xB0
337C:  CLRF   xB1
337E:  CLRF   xB2
3380:  CLRF   xB3
3382:  CLRF   xB4
3384:  CLRF   xB5
3386:  CLRF   xB6
3388:  CLRF   xB7
338A:  CLRF   xB8
338C:  CLRF   xB9
338E:  CLRF   xBA
3390:  CLRF   xBB
3392:  CLRF   xBC
3394:  CLRF   xBD
3396:  CLRF   xBE
3398:  CLRF   xBF
339A:  CLRF   xC0
339C:  CLRF   xC1
339E:  CLRF   xC2
33A0:  CLRF   xC3
33A2:  CLRF   xC4
33A4:  CLRF   xC5
33A6:  CLRF   xC6
33A8:  CLRF   xC7
33AA:  CLRF   xC8
33AC:  CLRF   xC9
33AE:  CLRF   xCA
33B0:  CLRF   xCB
33B2:  CLRF   xCC
33B4:  CLRF   xCD
33B6:  CLRF   xCE
33B8:  CLRF   xCF
33BA:  CLRF   xD0
33BC:  CLRF   xD1
33BE:  CLRF   xD2
33C0:  CLRF   xD3
33C2:  CLRF   xD4
33C4:  CLRF   xD5
33C6:  CLRF   xD6
33C8:  CLRF   xD7
33CA:  CLRF   xD8
33CC:  CLRF   xD9
33CE:  CLRF   xDA
33D0:  CLRF   xDB
33D2:  CLRF   xDC
33D4:  CLRF   xDD
33D6:  CLRF   xDE
33D8:  CLRF   xDF
33DA:  CLRF   xE0
33DC:  CLRF   xE1
33DE:  CLRF   xE2
33E0:  CLRF   xE3
33E2:  CLRF   xE4
33E4:  CLRF   xE5
33E6:  CLRF   xE6
33E8:  CLRF   xE7
33EA:  CLRF   xE8
33EC:  CLRF   xE9
33EE:  CLRF   xEA
33F0:  CLRF   xEB
33F2:  CLRF   xEC
33F4:  CLRF   xED
33F6:  CLRF   xEE
33F8:  CLRF   xEF
33FA:  CLRF   xF0
33FC:  CLRF   xF1
33FE:  CLRF   xF2
3400:  CLRF   xF3
3402:  CLRF   xF4
3404:  CLRF   xF5
3406:  CLRF   xF6
3408:  CLRF   xF7
340A:  CLRF   xF8
340C:  CLRF   xF9
340E:  CLRF   xFA
3410:  CLRF   xFB
3412:  CLRF   xFC
3414:  CLRF   xFD
3416:  CLRF   xFE
3418:  CLRF   xFF
341A:  MOVLB  3
341C:  CLRF   x00
341E:  CLRF   x01
3420:  CLRF   x02
3422:  CLRF   x03
3424:  CLRF   x04
3426:  CLRF   x05
3428:  CLRF   x06
342A:  CLRF   x07
342C:  CLRF   x08
342E:  CLRF   x09
3430:  CLRF   x0A
3432:  CLRF   x0B
3434:  CLRF   x0C
3436:  CLRF   x0D
3438:  CLRF   x0E
343A:  CLRF   x0F
343C:  CLRF   x10
343E:  CLRF   x11
3440:  CLRF   x12
3442:  CLRF   x13
3444:  CLRF   x14
3446:  CLRF   x15
3448:  CLRF   x16
344A:  CLRF   x17
344C:  CLRF   x18
344E:  CLRF   x19
3450:  CLRF   x1A
3452:  CLRF   x1B
3454:  CLRF   x1C
3456:  CLRF   x1D
3458:  CLRF   x1E
345A:  CLRF   x1F
345C:  CLRF   x20
345E:  CLRF   x21
3460:  CLRF   x22
3462:  CLRF   x23
3464:  CLRF   x24
3466:  CLRF   x25
3468:  CLRF   x26
346A:  CLRF   x27
346C:  CLRF   x28
346E:  CLRF   x29
3470:  CLRF   x2A
3472:  CLRF   x2B
3474:  CLRF   x2C
3476:  CLRF   x2D
3478:  CLRF   x2E
347A:  CLRF   x2F
347C:  CLRF   x30
347E:  CLRF   x31
3480:  CLRF   x32
3482:  CLRF   x33
3484:  CLRF   x34
3486:  CLRF   x35
3488:  CLRF   x36
348A:  CLRF   x37
348C:  CLRF   x38
348E:  CLRF   x39
3490:  CLRF   x3A
3492:  CLRF   x3B
3494:  CLRF   x3C
3496:  CLRF   x3D
3498:  CLRF   x3E
349A:  CLRF   x3F
349C:  CLRF   x40
349E:  CLRF   x41
34A0:  CLRF   x42
34A2:  CLRF   x43
34A4:  CLRF   x44
34A6:  CLRF   x45
34A8:  CLRF   x46
34AA:  CLRF   x47
34AC:  CLRF   x48
34AE:  CLRF   x49
34B0:  CLRF   x4A
34B2:  CLRF   x4B
34B4:  CLRF   x4C
34B6:  CLRF   x4D
34B8:  CLRF   x4E
34BA:  CLRF   x4F
34BC:  CLRF   x50
34BE:  CLRF   x51
34C0:  CLRF   x52
34C2:  CLRF   x53
34C4:  CLRF   x54
34C6:  CLRF   x55
34C8:  CLRF   x56
34CA:  CLRF   x57
34CC:  CLRF   x58
34CE:  CLRF   x59
34D0:  CLRF   x5A
34D2:  CLRF   x5B
34D4:  CLRF   x5C
34D6:  CLRF   x5D
34D8:  CLRF   x5E
34DA:  CLRF   x5F
34DC:  CLRF   x60
34DE:  CLRF   x61
34E0:  CLRF   x62
34E2:  CLRF   x63
34E4:  CLRF   x64
34E6:  CLRF   x65
34E8:  CLRF   x66
34EA:  CLRF   x67
34EC:  CLRF   x68
34EE:  CLRF   x69
34F0:  CLRF   x6A
34F2:  CLRF   x6B
34F4:  CLRF   x6C
34F6:  CLRF   x6D
34F8:  CLRF   x6E
34FA:  CLRF   x6F
34FC:  CLRF   x70
34FE:  CLRF   x71
3500:  CLRF   x72
3502:  CLRF   x73
3504:  CLRF   x74
3506:  CLRF   x75
3508:  CLRF   x76
350A:  CLRF   x77
350C:  CLRF   x78
350E:  CLRF   x79
3510:  CLRF   x7A
3512:  CLRF   x7B
3514:  CLRF   x7C
3516:  CLRF   x7D
3518:  CLRF   x7E
351A:  CLRF   x7F
351C:  CLRF   x80
351E:  CLRF   x81
3520:  CLRF   x82
3522:  CLRF   x83
3524:  CLRF   x84
3526:  CLRF   x85
3528:  CLRF   x86
352A:  CLRF   x87
352C:  CLRF   x88
352E:  CLRF   x89
3530:  CLRF   x8A
3532:  CLRF   x8B
3534:  CLRF   x8C
3536:  CLRF   x8D
3538:  CLRF   x8E
353A:  CLRF   x8F
353C:  CLRF   x90
353E:  CLRF   x91
3540:  CLRF   x92
3542:  CLRF   x93
3544:  CLRF   x94
3546:  CLRF   x95
3548:  CLRF   x96
354A:  CLRF   x97
354C:  CLRF   x98
354E:  CLRF   x99
3550:  CLRF   x9A
3552:  CLRF   x9B
3554:  CLRF   x9C
3556:  CLRF   x9D
3558:  CLRF   x9E
355A:  CLRF   x9F
355C:  CLRF   xA0
355E:  CLRF   xA1
3560:  CLRF   xA2
3562:  CLRF   xA3
3564:  CLRF   xA4
3566:  CLRF   xA5
3568:  CLRF   xA6
356A:  CLRF   xA7
356C:  CLRF   xA8
356E:  CLRF   xA9
3570:  CLRF   xAA
3572:  CLRF   xAB
3574:  CLRF   xAC
3576:  CLRF   xAD
3578:  CLRF   xAE
357A:  CLRF   xAF
357C:  CLRF   xB0
357E:  CLRF   xB1
3580:  CLRF   xB2
3582:  CLRF   xB3
3584:  CLRF   xB4
3586:  CLRF   xB5
3588:  CLRF   xB6
358A:  CLRF   xB7
358C:  CLRF   xB8
358E:  CLRF   xB9
3590:  CLRF   xBA
3592:  CLRF   xBB
3594:  CLRF   xBC
3596:  CLRF   xBD
3598:  CLRF   xBE
359A:  CLRF   xBF
359C:  CLRF   xC0
359E:  CLRF   xC1
35A0:  CLRF   xC2
35A2:  CLRF   xC3
35A4:  CLRF   xC4
35A6:  BCF    xC5.0
35A8:  CLRF   xC7
35AA:  CLRF   xC8
35AC:  CLRF   xC9
35AE:  CLRF   xCA
35B0:  CLRF   xCB
35B2:  CLRF   xCC
35B4:  CLRF   xCD
35B6:  CLRF   xCE
35B8:  CLRF   xCF
35BA:  CLRF   xD0
35BC:  CLRF   xD1
35BE:  CLRF   xD2
35C0:  CLRF   xD3
35C2:  CLRF   xD4
35C4:  CLRF   xD5
35C6:  CLRF   xD6
35C8:  CLRF   xD7
35CA:  CLRF   xD8
35CC:  CLRF   xD9
35CE:  CLRF   xDA
35D0:  CLRF   xDB
35D2:  CLRF   xDC
35D4:  CLRF   xDD
35D6:  CLRF   xDE
35D8:  CLRF   xDF
35DA:  CLRF   xE0
35DC:  CLRF   xE1
35DE:  CLRF   xE2
35E0:  CLRF   xE3
35E2:  CLRF   xE4
35E4:  CLRF   xE5
35E6:  CLRF   xE6
35E8:  CLRF   xE7
35EA:  CLRF   xE8
35EC:  CLRF   xE9
35EE:  CLRF   xEA
35F0:  CLRF   xEB
35F2:  CLRF   xEF
35F4:  CLRF   xF0
35F6:  CLRF   xF1
35F8:  CLRF   xF2
35FA:  CLRF   xF3
35FC:  CLRF   xF4
35FE:  CLRF   xF5
3600:  CLRF   xF6
3602:  CLRF   xF7
3604:  CLRF   xF8
3606:  CLRF   xF9
3608:  CLRF   xFA
360A:  CLRF   xFB
360C:  CLRF   xFC
360E:  CLRF   xFD
3610:  CLRF   xFE
3612:  CLRF   xFF
3614:  MOVLB  4
3616:  CLRF   x00
3618:  CLRF   x01
361A:  CLRF   x02
361C:  CLRF   x03
361E:  CLRF   x04
3620:  CLRF   x05
3622:  CLRF   x06
3624:  CLRF   x07
3626:  CLRF   x08
3628:  CLRF   x09
362A:  CLRF   x0A
362C:  CLRF   x0B
362E:  CLRF   x0C
3630:  CLRF   x0D
3632:  CLRF   x0E
3634:  CLRF   x0F
3636:  CLRF   x10
3638:  CLRF   x11
363A:  CLRF   x12
363C:  CLRF   x13
363E:  CLRF   x14
3640:  CLRF   x15
3642:  CLRF   x16
3644:  CLRF   x17
3646:  CLRF   x18
3648:  CLRF   x19
364A:  CLRF   x1A
364C:  CLRF   x1B
364E:  CLRF   x1C
3650:  CLRF   x1D
3652:  CLRF   x1E
3654:  CLRF   x1F
3656:  CLRF   x20
3658:  CLRF   x21
365A:  CLRF   x22
365C:  CLRF   x23
365E:  CLRF   x24
3660:  CLRF   x25
3662:  CLRF   x26
3664:  CLRF   x27
3666:  CLRF   x28
3668:  CLRF   x29
366A:  CLRF   x2A
366C:  CLRF   x2B
366E:  CLRF   x2C
3670:  CLRF   x2D
3672:  CLRF   x2E
3674:  CLRF   x2F
3676:  CLRF   x30
3678:  CLRF   x31
367A:  CLRF   x32
367C:  CLRF   x33
367E:  CLRF   x34
3680:  CLRF   x35
3682:  CLRF   x36
3684:  CLRF   x37
3686:  CLRF   x38
3688:  CLRF   x39
368A:  CLRF   x3A
368C:  CLRF   x3B
368E:  CLRF   x3C
3690:  CLRF   x3D
3692:  CLRF   x3E
3694:  CLRF   x3F
3696:  CLRF   x40
3698:  CLRF   x41
369A:  CLRF   x42
369C:  CLRF   x43
369E:  CLRF   x44
36A0:  CLRF   x45
36A2:  CLRF   x46
36A4:  CLRF   x47
36A6:  CLRF   x48
36A8:  CLRF   x49
36AA:  CLRF   x4A
36AC:  CLRF   x4B
36AE:  CLRF   x4C
36B0:  CLRF   x4D
36B2:  CLRF   x4E
36B4:  CLRF   x4F
36B6:  CLRF   x50
36B8:  CLRF   x51
36BA:  CLRF   x52
36BC:  CLRF   x53
36BE:  CLRF   x54
36C0:  CLRF   x55
36C2:  CLRF   x56
36C4:  CLRF   x57
36C6:  CLRF   x58
36C8:  CLRF   x59
36CA:  CLRF   x5A
36CC:  CLRF   x5B
36CE:  CLRF   x5C
36D0:  CLRF   x5D
36D2:  CLRF   x5E
36D4:  CLRF   x5F
36D6:  CLRF   x60
36D8:  CLRF   x61
36DA:  CLRF   x62
36DC:  CLRF   x63
36DE:  CLRF   x64
36E0:  CLRF   x65
36E2:  CLRF   x66
36E4:  CLRF   x67
36E6:  CLRF   x68
36E8:  CLRF   x69
36EA:  CLRF   x6A
36EC:  CLRF   x6B
36EE:  CLRF   x6C
36F0:  CLRF   x6D
36F2:  CLRF   x6E
36F4:  CLRF   x6F
36F6:  CLRF   x70
36F8:  CLRF   x71
36FA:  CLRF   x72
36FC:  CLRF   x73
36FE:  CLRF   x74
3700:  CLRF   x75
3702:  CLRF   x76
3704:  CLRF   x77
3706:  CLRF   x78
3708:  CLRF   x79
370A:  CLRF   x7A
370C:  CLRF   x7B
370E:  CLRF   x7C
3710:  CLRF   x7D
3712:  CLRF   x7E
3714:  CLRF   x7F
3716:  CLRF   x80
3718:  CLRF   x81
371A:  CLRF   x82
371C:  CLRF   x83
371E:  CLRF   x84
3720:  CLRF   x85
3722:  CLRF   x86
3724:  CLRF   x87
3726:  CLRF   x88
3728:  CLRF   x89
372A:  CLRF   x8A
372C:  CLRF   x8B
372E:  CLRF   x8C
3730:  CLRF   x8D
3732:  CLRF   x8E
3734:  CLRF   x8F
3736:  CLRF   x90
3738:  CLRF   x91
373A:  CLRF   x92
373C:  CLRF   x93
373E:  CLRF   x94
3740:  CLRF   x95
3742:  CLRF   x96
3744:  CLRF   x97
3746:  CLRF   x98
3748:  CLRF   x99
374A:  CLRF   x9A
374C:  CLRF   x9B
374E:  CLRF   x9C
3750:  CLRF   x9D
3752:  CLRF   x9E
3754:  CLRF   x9F
3756:  CLRF   xA0
3758:  CLRF   xA1
375A:  CLRF   xA2
375C:  CLRF   xA3
375E:  CLRF   xA4
3760:  CLRF   xA5
3762:  CLRF   xA6
3764:  CLRF   xA7
3766:  CLRF   xA8
3768:  CLRF   xA9
376A:  CLRF   xAA
376C:  CLRF   xAB
376E:  CLRF   xAC
3770:  CLRF   xAD
3772:  CLRF   xAE
3774:  CLRF   xAF
3776:  CLRF   xB0
3778:  CLRF   xB1
377A:  CLRF   xB2
377C:  CLRF   xB3
377E:  CLRF   xB4
3780:  CLRF   xB5
3782:  CLRF   xB6
3784:  CLRF   xB7
3786:  CLRF   xB8
3788:  CLRF   xB9
378A:  CLRF   xBA
378C:  CLRF   xBB
378E:  CLRF   xBC
3790:  CLRF   xBD
3792:  CLRF   xBE
3794:  CLRF   xBF
3796:  CLRF   xC0
3798:  CLRF   xC1
379A:  CLRF   xC2
379C:  CLRF   xC3
379E:  CLRF   xC4
37A0:  CLRF   xC5
37A2:  CLRF   xC6
37A4:  CLRF   xC7
37A6:  CLRF   xC8
37A8:  CLRF   xC9
37AA:  CLRF   xCA
37AC:  CLRF   xCB
37AE:  CLRF   xCC
37B0:  CLRF   xCD
37B2:  CLRF   xCE
37B4:  CLRF   xCF
37B6:  CLRF   xD0
37B8:  CLRF   xD1
37BA:  CLRF   xD2
37BC:  CLRF   xD3
37BE:  CLRF   xD4
37C0:  CLRF   xD5
37C2:  CLRF   xD6
37C4:  CLRF   xD7
37C6:  CLRF   xD8
37C8:  CLRF   xD9
37CA:  CLRF   xDA
37CC:  CLRF   xDB
37CE:  CLRF   xDC
37D0:  CLRF   xDD
37D2:  CLRF   xDE
37D4:  CLRF   xDF
37D6:  CLRF   xE0
37D8:  CLRF   xE1
37DA:  CLRF   xE2
37DC:  CLRF   xE3
37DE:  CLRF   xE4
37E0:  CLRF   xE5
37E2:  CLRF   xE6
37E4:  CLRF   xE7
37E6:  CLRF   xE8
37E8:  CLRF   xE9
37EA:  CLRF   xEA
37EC:  CLRF   xEB
37EE:  CLRF   xEC
37F0:  CLRF   xED
37F2:  CLRF   xEE
37F4:  CLRF   xF0
37F6:  CLRF   xF1
37F8:  CLRF   xF2
37FA:  CLRF   xF3
37FC:  CLRF   xF4
37FE:  CLRF   xF5
3800:  CLRF   xF6
3802:  CLRF   xF7
3804:  CLRF   xF8
3806:  CLRF   xF9
3808:  CLRF   xFA
380A:  CLRF   xFB
380C:  CLRF   xFD
380E:  CLRF   xFC
3810:  MOVLB  5
3812:  CLRF   x03
3814:  CLRF   x02
3816:  MOVLW  01
3818:  MOVWF  x0C
381A:  MOVLW  FF
381C:  MOVWF  x0B
381E:  CLRF   x10
3820:  MOVLW  01
3822:  MOVWF  x0F
.................... 	//addition variables 
.................... 	int16 maxCycles = 0; 
.................... 	int16 cnt; 
.................... 	int16 ADC0;	//current ADC value 
.................... 	int16 Wrk0 = 0;	//sum mean value 
.................... 	int16 StorAddr;	//storage address 
.................... 	int8 OutBufAddr;	//out buffer address 
.................... 	int32 Sum; 
.................... 	int16 BetTrsh = 0x01ff; //beta treshold 
.................... 	int16 bet_cur; //current beta value 
.................... 	int16 filterWidth = 1; 
.................... 	int16 sawLevel; 
....................  
.................... 	InitMcu();		//mcu init 
3824:  MOVLB  0
3826:  GOTO   1EDA
.................... 	BURead();		//read registers from EE 
382A:  GOTO   1F78
.................... 	RsInit(); 
382E:  GOTO   244E
....................  
.................... 	//interrupt configuration 
.................... 	enable_interrupts(INT_RDA); 
3832:  BSF    F9D.5
.................... 	disable_interrupts(INT_TIMER1); 
3834:  BCF    F9D.0
.................... 	enable_interrupts(GLOBAL); 
3836:  MOVLW  C0
3838:  IORWF  FF2,F
....................  
.................... 	output_high(TERMO); 
383A:  BCF    F96.1
383C:  BSF    F8D.1
....................  
.................... 	DaqState = DaqStart; 
383E:  MOVLW  01
3840:  MOVLB  3
3842:  MOVWF  xEE
.................... 	//main cycle 
.................... 	while (TRUE) 
.................... 	{ 
.................... 		restart_wdt(); 
3844:  CLRWDT
.................... 		//state procesor 
.................... 		switch (DaqState) 
.................... 		{ 
3846:  MOVF   xEE,W
3848:  ADDLW  FC
384A:  BTFSC  FD8.0
384C:  GOTO   405E
3850:  ADDLW  04
3852:  MOVLB  0
3854:  GOTO   4064
.................... 		case DaqIdle: 
.................... 			Termometer(); 
3858:  CALL   2714
.................... 			//wait for state changing 
.................... 			break; 
385C:  MOVLB  3
385E:  GOTO   405E
....................  
.................... 		case DaqStart: 
.................... 			//prepare for measuring 
.................... 			bet_cur = 0;		//reset beta value 
3862:  MOVLB  5
3864:  CLRF   x0E
3866:  CLRF   x0D
....................  
.................... 			//set input amplifiers 
.................... 			SetKU0(AmpCoef0); 
3868:  MOVFF  3AA,518
386C:  MOVFF  3A9,517
3870:  MOVLB  0
3872:  GOTO   288A
.................... 			SetKU1(AmpCoef1); 
3876:  MOVFF  3B6,518
387A:  MOVFF  3B5,517
387E:  GOTO   2906
....................  
.................... 			//filtering window setup 
.................... 			if (FWDT > 0 && FWDT < 7) 
3882:  MOVLB  3
3884:  MOVF   xC1,F
3886:  BNZ   388C
3888:  MOVF   xC2,F
388A:  BZ    38BC
388C:  MOVF   xC2,F
388E:  BNZ   38BC
3890:  MOVF   xC1,W
3892:  SUBLW  06
3894:  BNC   38BC
.................... 			{ 
.................... 				filterWidth = (int16)(0x0001 << FWDT); //power 2 for FWDT factor 
3896:  MOVLB  5
3898:  CLRF   x10
389A:  MOVLW  01
389C:  MOVWF  x0F
389E:  MOVLB  3
38A0:  MOVF   xC1,W
38A2:  MOVWF  00
38A4:  BZ    38BA
38A6:  BCF    FD8.0
38A8:  MOVLB  5
38AA:  RLCF   x0F,F
38AC:  RLCF   x10,F
38AE:  DECFSZ 00,F
38B0:  BRA    38B4
38B2:  BRA    38B8
38B4:  MOVLB  3
38B6:  BRA    38A6
38B8:  MOVLB  3
.................... 			} 
.................... 			else 
38BA:  BRA    38C4
.................... 				filterWidth = 1; 
38BC:  MOVLB  5
38BE:  CLRF   x10
38C0:  MOVLW  01
38C2:  MOVWF  x0F
....................  
.................... 			//zero buffers & variables 
.................... 			for (cnt = 0; cnt < filterWidth; cnt++) 
38C4:  MOVLB  4
38C6:  CLRF   xFF
38C8:  CLRF   xFE
38CA:  MOVF   xFF,W
38CC:  MOVLB  5
38CE:  SUBWF  x10,W
38D0:  BNC   390C
38D2:  BNZ   38E4
38D4:  MOVF   x0F,W
38D6:  MOVLB  4
38D8:  SUBWF  xFE,W
38DA:  BTFSS  FD8.0
38DC:  BRA    38E2
38DE:  MOVLB  5
38E0:  BRA    390C
38E2:  MOVLB  5
.................... 			{ 
.................... 				data_filt0[cnt] = 0;	//clear buffer 
38E4:  BCF    FD8.0
38E6:  MOVLB  4
38E8:  RLCF   xFE,W
38EA:  MOVWF  02
38EC:  RLCF   xFF,W
38EE:  MOVWF  03
38F0:  MOVF   02,W
38F2:  ADDLW  19
38F4:  MOVWF  FE9
38F6:  MOVLW  00
38F8:  ADDWFC 03,W
38FA:  MOVWF  FEA
38FC:  CLRF   FEC
38FE:  MOVF   FED,F
3900:  CLRF   FEF
.................... 			} 
3902:  INCF   xFE,F
3904:  BTFSC  FD8.2
3906:  INCF   xFF,F
3908:  BRA    38CA
390A:  MOVLB  5
....................  
.................... 			StorAddr = 0; 
390C:  CLRF   x05
390E:  CLRF   x04
.................... 			OutBufAddr = 0; 
3910:  CLRF   x06
.................... 			iWin = 0; 
3912:  MOVLB  3
3914:  CLRF   xDF
.................... 			iMaxFall0 = 0; 
3916:  MOVLB  0
3918:  CLRF   xA2
391A:  CLRF   xA1
.................... 			iMaxRise0 = 0; 
391C:  CLRF   x9E
391E:  CLRF   x9D
.................... 			maxFall0 = 0; 
3920:  CLRF   xA0
3922:  CLRF   x9F
.................... 			maxRise0 = 0; 
3924:  CLRF   x9C
3926:  CLRF   x9B
.................... 			data_mean0 = 0; 
3928:  CLRF   x9A
392A:  CLRF   x99
....................  
.................... 			//DAC parameters initialization 
.................... 			sawStartLevel = (int16)(((float)SAW_A0 / 1000) * volts2dac); //convert to ADC discretes 
392C:  MOVFF  3CA,51D
3930:  MOVFF  3C9,51C
3934:  CALL   2982
3938:  MOVFF  00,513
393C:  MOVFF  01,514
3940:  MOVFF  02,515
3944:  MOVFF  03,516
3948:  MOVFF  03,51F
394C:  MOVFF  02,51E
3950:  MOVFF  01,51D
3954:  MOVFF  00,51C
3958:  MOVLB  5
395A:  CLRF   x23
395C:  CLRF   x22
395E:  MOVLW  7A
3960:  MOVWF  x21
3962:  MOVLW  88
3964:  MOVWF  x20
3966:  MOVLB  0
3968:  CALL   29B8
396C:  MOVFF  00,513
3970:  MOVFF  01,514
3974:  MOVFF  02,515
3978:  MOVFF  03,516
397C:  MOVFF  03,51F
3980:  MOVFF  02,51E
3984:  MOVFF  01,51D
3988:  MOVFF  00,51C
398C:  MOVLW  CD
398E:  MOVLB  5
3990:  MOVWF  x23
3992:  MOVLW  CC
3994:  MOVWF  x22
3996:  MOVLW  4C
3998:  MOVWF  x21
399A:  MOVLW  86
399C:  MOVWF  x20
399E:  MOVLB  0
39A0:  CALL   25E2
39A4:  MOVFF  03,51C
39A8:  MOVFF  02,51B
39AC:  MOVFF  01,51A
39B0:  MOVFF  00,519
39B4:  CALL   26D8
39B8:  MOVFF  02,3CC
39BC:  MOVFF  01,3CB
....................  
.................... 			sawEndLevel = sawStartLevel 
.................... 				+ (int16)(((float)SAW_A1 / 1000) * volts2dac); 
39C0:  MOVFF  3CE,51D
39C4:  MOVFF  3CD,51C
39C8:  CALL   2982
39CC:  MOVFF  00,513
39D0:  MOVFF  01,514
39D4:  MOVFF  02,515
39D8:  MOVFF  03,516
39DC:  MOVFF  03,51F
39E0:  MOVFF  02,51E
39E4:  MOVFF  01,51D
39E8:  MOVFF  00,51C
39EC:  MOVLB  5
39EE:  CLRF   x23
39F0:  CLRF   x22
39F2:  MOVLW  7A
39F4:  MOVWF  x21
39F6:  MOVLW  88
39F8:  MOVWF  x20
39FA:  MOVLB  0
39FC:  CALL   29B8
3A00:  MOVFF  00,513
3A04:  MOVFF  01,514
3A08:  MOVFF  02,515
3A0C:  MOVFF  03,516
3A10:  MOVFF  03,51F
3A14:  MOVFF  02,51E
3A18:  MOVFF  01,51D
3A1C:  MOVFF  00,51C
3A20:  MOVLW  CD
3A22:  MOVLB  5
3A24:  MOVWF  x23
3A26:  MOVLW  CC
3A28:  MOVWF  x22
3A2A:  MOVLW  4C
3A2C:  MOVWF  x21
3A2E:  MOVLW  86
3A30:  MOVWF  x20
3A32:  MOVLB  0
3A34:  CALL   25E2
3A38:  MOVFF  03,51C
3A3C:  MOVFF  02,51B
3A40:  MOVFF  01,51A
3A44:  MOVFF  00,519
3A48:  CALL   26D8
3A4C:  MOVF   01,W
3A4E:  MOVLB  3
3A50:  ADDWF  xCB,W
3A52:  MOVWF  xCF
3A54:  MOVF   02,W
3A56:  ADDWFC xCC,W
3A58:  MOVWF  xD0
....................  
.................... 			if (sawEndLevel >= 4096){ 
3A5A:  MOVF   xD0,W
3A5C:  SUBLW  0F
3A5E:  BC    3A68
.................... 				sawEndLevel = 4095; 
3A60:  MOVLW  0F
3A62:  MOVWF  xD0
3A64:  MOVLW  FF
3A66:  MOVWF  xCF
.................... 			} 
.................... 				 
....................  
.................... 			//next state 
.................... 			DaqState = DaqMeasure;	//set measuring state 
3A68:  MOVLW  02
3A6A:  MOVWF  xEE
.................... 			break; 
3A6C:  BRA    405E
....................  
.................... 		case DaqMeasure: 
.................... 			//indicate 
.................... 			output_toggle(STAT); 
3A6E:  BCF    F94.0
3A70:  BTG    F8B.0
....................  
.................... 			//set initial DAC level 
.................... 			SetSawDac(sawStartLevel); 
3A72:  MOVFF  3CC,518
3A76:  MOVFF  3CB,517
3A7A:  CALL   2B16
....................  
.................... 			//read data from ADC 
.................... 			//select ADC channel 
.................... 			set_adc_channel(0);	//select ch0 
3A7E:  MOVLW  00
3A80:  MOVWF  01
3A82:  MOVF   FC2,W
3A84:  ANDLW  C3
3A86:  IORWF  01,W
3A88:  MOVWF  FC2
....................  
.................... 			Sum = 0; 
3A8A:  MOVLB  5
3A8C:  CLRF   x0A
3A8E:  CLRF   x09
3A90:  CLRF   x08
3A92:  CLRF   x07
....................  
.................... 			// Rising saw part 
.................... 			for (sawLevel = sawStartLevel; sawLevel <= sawEndLevel; sawLevel++) 
3A94:  MOVFF  3CC,512
3A98:  MOVFF  3CB,511
3A9C:  MOVF   x12,W
3A9E:  MOVLB  3
3AA0:  SUBWF  xD0,W
3AA2:  BTFSS  FD8.0
3AA4:  BRA    3BCE
3AA6:  BNZ   3AB4
3AA8:  MOVLB  5
3AAA:  MOVF   x11,W
3AAC:  MOVLB  3
3AAE:  SUBWF  xCF,W
3AB0:  BTFSS  FD8.0
3AB2:  BRA    3BCE
.................... 			{ 
....................  
.................... 				restart_wdt(); 
3AB4:  CLRWDT
....................  
.................... 				read_adc(ADC_START_ONLY); //start conversion 
3AB6:  BSF    FC2.1
....................  
.................... 				SetSawDac(sawLevel);	//set next saw level 
3AB8:  MOVFF  512,518
3ABC:  MOVFF  511,517
3AC0:  MOVLB  0
3AC2:  CALL   2B16
....................  
.................... 				ADC0 = read_adc(ADC_READ_ONLY); //read measured value 
3AC6:  BTFSC  FC2.1
3AC8:  BRA    3AC6
3ACA:  MOVFF  FC4,501
3ACE:  MOVLB  5
3AD0:  MOVFF  FC3,500
....................  
.................... 				//filtering 
.................... 				Wrk0 -= data_filt0[iWin];	//calc new sum mean val 
3AD4:  BCF    FD8.0
3AD6:  MOVLB  3
3AD8:  RLCF   xDF,W
3ADA:  CLRF   03
3ADC:  ADDLW  19
3ADE:  MOVWF  FE9
3AE0:  MOVLW  00
3AE2:  ADDWFC 03,W
3AE4:  MOVWF  FEA
3AE6:  MOVFF  FEC,03
3AEA:  MOVF   FED,F
3AEC:  MOVF   FEF,W
3AEE:  MOVLB  5
3AF0:  SUBWF  x02,F
3AF2:  MOVF   03,W
3AF4:  SUBWFB x03,F
.................... 				if (Wrk0<0) 
.................... 				{ 
.................... 					Wrk0 = 0; 
.................... 				} 
.................... 				 
.................... 				Wrk0 += ADC0; 
3AF6:  MOVF   x00,W
3AF8:  ADDWF  x02,F
3AFA:  MOVF   x01,W
3AFC:  ADDWFC x03,F
.................... 				data_filt0[iWin] = ADC0; 
3AFE:  BCF    FD8.0
3B00:  MOVLB  3
3B02:  RLCF   xDF,W
3B04:  CLRF   03
3B06:  ADDLW  19
3B08:  MOVWF  FE9
3B0A:  MOVLW  00
3B0C:  ADDWFC 03,W
3B0E:  MOVWF  FEA
3B10:  MOVFF  501,FEC
3B14:  MOVF   FED,F
3B16:  MOVFF  500,FEF
....................  
.................... 				//next filter value 
.................... 				if (iWin == (filterWidth - 1)) 
3B1A:  MOVLW  01
3B1C:  MOVLB  5
3B1E:  SUBWF  x0F,W
3B20:  MOVWF  00
3B22:  MOVLW  00
3B24:  SUBWFB x10,W
3B26:  MOVWF  03
3B28:  MOVF   00,W
3B2A:  MOVLB  3
3B2C:  SUBWF  xDF,W
3B2E:  BNZ   3B38
3B30:  MOVF   03,F
3B32:  BNZ   3B38
.................... 				{ 
.................... 					iWin = 0; 
3B34:  CLRF   xDF
.................... 				} 
.................... 				else 
3B36:  BRA    3B3A
.................... 					iWin++; 
3B38:  INCF   xDF,F
.................... 					 
.................... 				//cycle meaning 
.................... 				/*Wrk0=0; 
.................... 				int8 i; 
.................... 				for (i = 0; i<filterWidth; i++) 
.................... 				{ 
.................... 					Wrk0 +=data_filt0[i]; 
.................... 				}*/ 
.................... 					 
....................  
.................... 				//calc mean value 
.................... 				data_mean0 = Wrk0 >> FWDT; //divide by filterWidth = 2^FWDT 
3B3A:  MOVFF  503,9A
3B3E:  MOVFF  502,99
3B42:  MOVF   xC1,W
3B44:  MOVWF  00
3B46:  BZ    3B5C
3B48:  BCF    FD8.0
3B4A:  MOVLB  0
3B4C:  RRCF   x9A,F
3B4E:  RRCF   x99,F
3B50:  DECFSZ 00,F
3B52:  BRA    3B56
3B54:  BRA    3B5A
3B56:  MOVLB  3
3B58:  BRA    3B48
3B5A:  MOVLB  3
.................... 				Sum += data_mean0; 
3B5C:  MOVLB  0
3B5E:  MOVF   x99,W
3B60:  MOVLB  5
3B62:  ADDWF  x07,F
3B64:  MOVLB  0
3B66:  MOVF   x9A,W
3B68:  MOVLB  5
3B6A:  ADDWFC x08,F
3B6C:  MOVLW  00
3B6E:  ADDWFC x09,F
3B70:  ADDWFC x0A,F
....................  
.................... 				//extremum 
.................... 				//estim max val 
.................... 				if (data_mean0 > maxRise0) 
3B72:  MOVLB  0
3B74:  MOVF   x9C,W
3B76:  SUBWF  x9A,W
3B78:  BNC   3B92
3B7A:  BNZ   3B82
3B7C:  MOVF   x99,W
3B7E:  SUBWF  x9B,W
3B80:  BC    3B92
.................... 				{ 
.................... 					iMaxRise0 = StorAddr; 
3B82:  MOVFF  505,9E
3B86:  MOVFF  504,9D
.................... 					maxRise0 = data_mean0; 
3B8A:  MOVFF  9A,9C
3B8E:  MOVFF  99,9B
.................... 				}; 
....................  
.................... 				StorAddr++; 
3B92:  MOVLB  5
3B94:  INCF   x04,F
3B96:  BTFSC  FD8.2
3B98:  INCF   x05,F
....................  
.................... 				//beta measuring 
.................... 				if (data_mean0 > BetTrsh) 
3B9A:  MOVF   x0C,W
3B9C:  MOVLB  0
3B9E:  SUBWF  x9A,W
3BA0:  BNC   3BBA
3BA2:  BNZ   3BB2
3BA4:  MOVF   x99,W
3BA6:  MOVLB  5
3BA8:  SUBWF  x0B,W
3BAA:  BTFSS  FD8.0
3BAC:  BRA    3BB2
3BAE:  MOVLB  0
3BB0:  BRA    3BBA
.................... 					bet_cur++; 
3BB2:  MOVLB  5
3BB4:  INCF   x0D,F
3BB6:  BTFSC  FD8.2
3BB8:  INCF   x0E,F
....................  
.................... 				maxCycles++; //add cycle count 
3BBA:  MOVLB  4
3BBC:  INCF   xFC,F
3BBE:  BTFSC  FD8.2
3BC0:  INCF   xFD,F
....................  
.................... 			} 
3BC2:  MOVLB  5
3BC4:  INCF   x11,F
3BC6:  BTFSC  FD8.2
3BC8:  INCF   x12,F
3BCA:  BRA    3A9C
3BCC:  MOVLB  3
....................  
.................... 			DaqState = DaqScale; 
3BCE:  MOVLW  03
3BD0:  MOVWF  xEE
.................... 			break; 
3BD2:  BRA    405E
....................  
.................... 		case DaqScale: 
.................... 			//scaling & result storing 
....................  
.................... 			//temperature 
.................... 			Termometer(); 
3BD4:  CALL   2714
.................... 			restart_wdt(); 
3BD8:  CLRWDT
....................  
.................... 			//regulator 
.................... 			if (T_GEN > (TG_CAL + Hst)) 
3BDA:  MOVLB  3
3BDC:  MOVF   xEC,W
3BDE:  ADDWF  xD9,W
3BE0:  MOVWF  01
3BE2:  MOVF   xED,W
3BE4:  ADDWFC xDA,W
3BE6:  MOVWF  03
3BE8:  MOVF   01,W
3BEA:  BTFSC  xC8.7
3BEC:  BRA    3C00
3BEE:  MOVF   03,W
3BF0:  SUBWF  xC8,W
3BF2:  BNC   3C00
3BF4:  BNZ   3BFC
3BF6:  MOVF   xC7,W
3BF8:  SUBWF  01,W
3BFA:  BC    3C00
.................... 			{ //if temperature above rated & histeresis 
.................... 				output_low(TERMO);				//off heater 
3BFC:  BCF    F96.1
3BFE:  BCF    F8D.1
.................... 			} 
....................  
.................... 			if (T_GEN < (TG_CAL - Hst)) 
3C00:  MOVF   xEC,W
3C02:  SUBWF  xD9,W
3C04:  MOVWF  00
3C06:  MOVF   xED,W
3C08:  SUBWFB xDA,W
3C0A:  MOVWF  03
3C0C:  MOVFF  00,01
3C10:  BTFSC  xC8.7
3C12:  BRA    3C22
3C14:  MOVF   xC8,W
3C16:  SUBWF  03,W
3C18:  BNC   3C26
3C1A:  BNZ   3C22
3C1C:  MOVF   01,W
3C1E:  SUBWF  xC7,W
3C20:  BC    3C26
.................... 			{			//if temperature below rated & histeresis 
.................... 				output_high(TERMO);				//on heater 
3C22:  BCF    F96.1
3C24:  BSF    F8D.1
.................... 			} 
....................  
.................... 			//amplitude - alpha 
.................... 			alp_buf0[iGam] = maxRise0; 
3C26:  BCF    FD8.0
3C28:  RLCF   xC6,W
3C2A:  CLRF   03
3C2C:  ADDLW  A3
3C2E:  MOVWF  FE9
3C30:  MOVLW  00
3C32:  ADDWFC 03,W
3C34:  MOVWF  FEA
3C36:  MOVFF  9C,FEC
3C3A:  MOVF   FED,F
3C3C:  MOVFF  9B,FEF
....................  
.................... 			//treshold estimation 
.................... 			BetTrsh = (int16)(alp_buf0[iGam] >> 1); 
3C40:  BCF    FD8.0
3C42:  RLCF   xC6,W
3C44:  CLRF   03
3C46:  ADDLW  A3
3C48:  MOVWF  FE9
3C4A:  MOVLW  00
3C4C:  ADDWFC 03,W
3C4E:  MOVWF  FEA
3C50:  MOVFF  FEC,514
3C54:  MOVF   FED,F
3C56:  MOVFF  FEF,513
3C5A:  BCF    FD8.0
3C5C:  MOVLB  5
3C5E:  RRCF   x14,W
3C60:  MOVWF  x0C
3C62:  RRCF   x13,W
3C64:  MOVWF  x0B
....................  
.................... 			//pulse width 
.................... 			bet_buf0[iGam] = bet_cur; 
3C66:  BCF    FD8.0
3C68:  MOVLB  3
3C6A:  RLCF   xC6,W
3C6C:  CLRF   03
3C6E:  ADDLW  A3
3C70:  MOVWF  FE9
3C72:  MOVLW  01
3C74:  ADDWFC 03,W
3C76:  MOVWF  FEA
3C78:  MOVFF  50E,FEC
3C7C:  MOVF   FED,F
3C7E:  MOVFF  50D,FEF
....................  
.................... 			//gamma meaning 
.................... 			gam_buf0[iGam] = iMaxRise0; //meaning buffer 
3C82:  BCF    FD8.0
3C84:  RLCF   xC6,W
3C86:  CLRF   03
3C88:  ADDLW  A3
3C8A:  MOVWF  FE9
3C8C:  MOVLW  02
3C8E:  ADDWFC 03,W
3C90:  MOVWF  FEA
3C92:  MOVFF  9E,FEC
3C96:  MOVF   FED,F
3C98:  MOVFF  9D,FEF
....................  
.................... 			//next index 
.................... 			if (iGam == 0) 
3C9C:  MOVF   xC6,F
3C9E:  BNZ   3CA8
.................... 			{ 
.................... 				iGam = PCOUNT - 1; 
3CA0:  MOVLW  01
3CA2:  SUBWF  xC3,W
3CA4:  MOVWF  xC6
.................... 			} 
.................... 			else 
3CA6:  BRA    3CAA
.................... 				iGam--; 
3CA8:  DECF   xC6,F
....................  
.................... 			AlpSum = 0; 
3CAA:  CLRF   xE3
3CAC:  CLRF   xE2
3CAE:  CLRF   xE1
3CB0:  CLRF   xE0
.................... 			BetSum = 0; 
3CB2:  CLRF   xE7
3CB4:  CLRF   xE6
3CB6:  CLRF   xE5
3CB8:  CLRF   xE4
.................... 			GamSum = 0; 
3CBA:  CLRF   xEB
3CBC:  CLRF   xEA
3CBE:  CLRF   xE9
3CC0:  CLRF   xE8
....................  
.................... 			for (cnt = 0; cnt < PCOUNT; cnt++) 
3CC2:  MOVLB  4
3CC4:  CLRF   xFF
3CC6:  CLRF   xFE
3CC8:  MOVF   xFF,W
3CCA:  MOVLB  3
3CCC:  SUBWF  xC4,W
3CCE:  BNC   3D78
3CD0:  BNZ   3CE2
3CD2:  MOVF   xC3,W
3CD4:  MOVLB  4
3CD6:  SUBWF  xFE,W
3CD8:  BTFSS  FD8.0
3CDA:  BRA    3CE0
3CDC:  MOVLB  3
3CDE:  BRA    3D78
3CE0:  MOVLB  3
.................... 			{ 
.................... 				AlpSum += alp_buf0[cnt]; 
3CE2:  BCF    FD8.0
3CE4:  MOVLB  4
3CE6:  RLCF   xFE,W
3CE8:  MOVWF  02
3CEA:  RLCF   xFF,W
3CEC:  MOVWF  03
3CEE:  MOVF   02,W
3CF0:  ADDLW  A3
3CF2:  MOVWF  FE9
3CF4:  MOVLW  00
3CF6:  ADDWFC 03,W
3CF8:  MOVWF  FEA
3CFA:  MOVFF  FEC,03
3CFE:  MOVF   FED,F
3D00:  MOVF   FEF,W
3D02:  MOVLB  3
3D04:  ADDWF  xE0,F
3D06:  MOVF   03,W
3D08:  ADDWFC xE1,F
3D0A:  MOVLW  00
3D0C:  ADDWFC xE2,F
3D0E:  ADDWFC xE3,F
.................... 				BetSum += bet_buf0[cnt]; 
3D10:  BCF    FD8.0
3D12:  MOVLB  4
3D14:  RLCF   xFE,W
3D16:  MOVWF  02
3D18:  RLCF   xFF,W
3D1A:  MOVWF  03
3D1C:  MOVF   02,W
3D1E:  ADDLW  A3
3D20:  MOVWF  FE9
3D22:  MOVLW  01
3D24:  ADDWFC 03,W
3D26:  MOVWF  FEA
3D28:  MOVFF  FEC,03
3D2C:  MOVF   FED,F
3D2E:  MOVF   FEF,W
3D30:  MOVLB  3
3D32:  ADDWF  xE4,F
3D34:  MOVF   03,W
3D36:  ADDWFC xE5,F
3D38:  MOVLW  00
3D3A:  ADDWFC xE6,F
3D3C:  ADDWFC xE7,F
.................... 				GamSum += gam_buf0[cnt]; 
3D3E:  BCF    FD8.0
3D40:  MOVLB  4
3D42:  RLCF   xFE,W
3D44:  MOVWF  02
3D46:  RLCF   xFF,W
3D48:  MOVWF  03
3D4A:  MOVF   02,W
3D4C:  ADDLW  A3
3D4E:  MOVWF  FE9
3D50:  MOVLW  02
3D52:  ADDWFC 03,W
3D54:  MOVWF  FEA
3D56:  MOVFF  FEC,03
3D5A:  MOVF   FED,F
3D5C:  MOVF   FEF,W
3D5E:  MOVLB  3
3D60:  ADDWF  xE8,F
3D62:  MOVF   03,W
3D64:  ADDWFC xE9,F
3D66:  MOVLW  00
3D68:  ADDWFC xEA,F
3D6A:  ADDWFC xEB,F
.................... 			} 
3D6C:  MOVLB  4
3D6E:  INCF   xFE,F
3D70:  BTFSC  FD8.2
3D72:  INCF   xFF,F
3D74:  BRA    3CC8
3D76:  MOVLB  3
....................  
.................... 			//alpha 
.................... 			Amplitude0 = ((int16)(((float)(AlpSum >> 7) * 2.4414) - 0)) >> (AmpCoef0); //divide sum by 128 and conver to volts with amplify coeff 
3D78:  RRCF   xE3,W
3D7A:  MOVWF  03
3D7C:  RRCF   xE2,W
3D7E:  MOVWF  02
3D80:  RRCF   xE1,W
3D82:  MOVWF  01
3D84:  RRCF   xE0,W
3D86:  MOVWF  00
3D88:  RRCF   03,F
3D8A:  RRCF   02,F
3D8C:  RRCF   01,F
3D8E:  RRCF   00,F
3D90:  RRCF   03,F
3D92:  RRCF   02,F
3D94:  RRCF   01,F
3D96:  RRCF   00,F
3D98:  RRCF   03,F
3D9A:  RRCF   02,F
3D9C:  RRCF   01,F
3D9E:  RRCF   00,F
3DA0:  RRCF   03,F
3DA2:  RRCF   02,F
3DA4:  RRCF   01,F
3DA6:  RRCF   00,F
3DA8:  RRCF   03,F
3DAA:  RRCF   02,F
3DAC:  RRCF   01,F
3DAE:  RRCF   00,F
3DB0:  RRCF   03,F
3DB2:  RRCF   02,F
3DB4:  RRCF   01,F
3DB6:  RRCF   00,F
3DB8:  MOVLW  01
3DBA:  ANDWF  03,F
3DBC:  MOVFF  03,51B
3DC0:  MOVFF  02,51A
3DC4:  MOVFF  01,519
3DC8:  MOVFF  00,518
3DCC:  MOVLB  0
3DCE:  CALL   2B4C
3DD2:  MOVFF  00,514
3DD6:  MOVFF  01,515
3DDA:  MOVFF  02,516
3DDE:  MOVFF  03,517
3DE2:  MOVFF  03,51F
3DE6:  MOVFF  02,51E
3DEA:  MOVFF  01,51D
3DEE:  MOVFF  00,51C
3DF2:  MOVLW  E6
3DF4:  MOVLB  5
3DF6:  MOVWF  x23
3DF8:  MOVLW  3F
3DFA:  MOVWF  x22
3DFC:  MOVLW  1C
3DFE:  MOVWF  x21
3E00:  MOVLW  80
3E02:  MOVWF  x20
3E04:  MOVLB  0
3E06:  CALL   25E2
3E0A:  MOVFF  00,514
3E0E:  MOVFF  01,515
3E12:  MOVFF  02,516
3E16:  MOVFF  03,517
3E1A:  BSF    FD8.1
3E1C:  MOVFF  03,51F
3E20:  MOVFF  02,51E
3E24:  MOVFF  01,51D
3E28:  MOVFF  00,51C
3E2C:  MOVLB  5
3E2E:  CLRF   x23
3E30:  CLRF   x22
3E32:  CLRF   x21
3E34:  CLRF   x20
3E36:  MOVLB  0
3E38:  GOTO   2B84
3E3C:  MOVFF  03,51C
3E40:  MOVFF  02,51B
3E44:  MOVFF  01,51A
3E48:  MOVFF  00,519
3E4C:  CALL   26D8
3E50:  MOVFF  02,515
3E54:  MOVFF  01,514
3E58:  MOVFF  02,3A4
3E5C:  MOVFF  01,3A3
3E60:  MOVLB  3
3E62:  MOVF   xA9,W
3E64:  MOVWF  00
3E66:  BZ    3E72
3E68:  BCF    FD8.0
3E6A:  RRCF   xA4,F
3E6C:  RRCF   xA3,F
3E6E:  DECFSZ 00,F
3E70:  BRA    3E68
....................  
.................... 			//beta 
.................... 			PulseWdt0 = (int16)((float)(BetSum >> 7) * 10000.0 / maxCycles); //divide sum by 128 and norming 
3E72:  RRCF   xE7,W
3E74:  MOVWF  03
3E76:  RRCF   xE6,W
3E78:  MOVWF  02
3E7A:  RRCF   xE5,W
3E7C:  MOVWF  01
3E7E:  RRCF   xE4,W
3E80:  MOVWF  00
3E82:  RRCF   03,F
3E84:  RRCF   02,F
3E86:  RRCF   01,F
3E88:  RRCF   00,F
3E8A:  RRCF   03,F
3E8C:  RRCF   02,F
3E8E:  RRCF   01,F
3E90:  RRCF   00,F
3E92:  RRCF   03,F
3E94:  RRCF   02,F
3E96:  RRCF   01,F
3E98:  RRCF   00,F
3E9A:  RRCF   03,F
3E9C:  RRCF   02,F
3E9E:  RRCF   01,F
3EA0:  RRCF   00,F
3EA2:  RRCF   03,F
3EA4:  RRCF   02,F
3EA6:  RRCF   01,F
3EA8:  RRCF   00,F
3EAA:  RRCF   03,F
3EAC:  RRCF   02,F
3EAE:  RRCF   01,F
3EB0:  RRCF   00,F
3EB2:  MOVLW  01
3EB4:  ANDWF  03,F
3EB6:  MOVFF  03,51B
3EBA:  MOVFF  02,51A
3EBE:  MOVFF  01,519
3EC2:  MOVFF  00,518
3EC6:  MOVLB  0
3EC8:  CALL   2B4C
3ECC:  MOVFF  00,514
3ED0:  MOVFF  01,515
3ED4:  MOVFF  02,516
3ED8:  MOVFF  03,517
3EDC:  MOVFF  03,51F
3EE0:  MOVFF  02,51E
3EE4:  MOVFF  01,51D
3EE8:  MOVFF  00,51C
3EEC:  MOVLB  5
3EEE:  CLRF   x23
3EF0:  MOVLW  40
3EF2:  MOVWF  x22
3EF4:  MOVLW  1C
3EF6:  MOVWF  x21
3EF8:  MOVLW  8C
3EFA:  MOVWF  x20
3EFC:  MOVLB  0
3EFE:  CALL   25E2
3F02:  MOVFF  00,514
3F06:  MOVFF  01,515
3F0A:  MOVFF  02,516
3F0E:  MOVFF  03,517
3F12:  MOVFF  4FD,51D
3F16:  MOVFF  4FC,51C
3F1A:  CALL   2982
3F1E:  MOVFF  517,51F
3F22:  MOVFF  516,51E
3F26:  MOVFF  515,51D
3F2A:  MOVFF  514,51C
3F2E:  MOVFF  03,523
3F32:  MOVFF  02,522
3F36:  MOVFF  01,521
3F3A:  MOVFF  00,520
3F3E:  CALL   29B8
3F42:  MOVFF  03,51C
3F46:  MOVFF  02,51B
3F4A:  MOVFF  01,51A
3F4E:  MOVFF  00,519
3F52:  CALL   26D8
3F56:  MOVFF  02,3A6
3F5A:  MOVFF  01,3A5
....................  
.................... 			//gamma 
.................... 			Gamma0 = (int16)((float)(GamSum >> 7) * 10000.0 / maxCycles); //divide sum by 128 and norming 
3F5E:  MOVLB  3
3F60:  RRCF   xEB,W
3F62:  MOVWF  03
3F64:  RRCF   xEA,W
3F66:  MOVWF  02
3F68:  RRCF   xE9,W
3F6A:  MOVWF  01
3F6C:  RRCF   xE8,W
3F6E:  MOVWF  00
3F70:  RRCF   03,F
3F72:  RRCF   02,F
3F74:  RRCF   01,F
3F76:  RRCF   00,F
3F78:  RRCF   03,F
3F7A:  RRCF   02,F
3F7C:  RRCF   01,F
3F7E:  RRCF   00,F
3F80:  RRCF   03,F
3F82:  RRCF   02,F
3F84:  RRCF   01,F
3F86:  RRCF   00,F
3F88:  RRCF   03,F
3F8A:  RRCF   02,F
3F8C:  RRCF   01,F
3F8E:  RRCF   00,F
3F90:  RRCF   03,F
3F92:  RRCF   02,F
3F94:  RRCF   01,F
3F96:  RRCF   00,F
3F98:  RRCF   03,F
3F9A:  RRCF   02,F
3F9C:  RRCF   01,F
3F9E:  RRCF   00,F
3FA0:  MOVLW  01
3FA2:  ANDWF  03,F
3FA4:  MOVFF  03,51B
3FA8:  MOVFF  02,51A
3FAC:  MOVFF  01,519
3FB0:  MOVFF  00,518
3FB4:  MOVLB  0
3FB6:  CALL   2B4C
3FBA:  MOVFF  00,514
3FBE:  MOVFF  01,515
3FC2:  MOVFF  02,516
3FC6:  MOVFF  03,517
3FCA:  MOVFF  03,51F
3FCE:  MOVFF  02,51E
3FD2:  MOVFF  01,51D
3FD6:  MOVFF  00,51C
3FDA:  MOVLB  5
3FDC:  CLRF   x23
3FDE:  MOVLW  40
3FE0:  MOVWF  x22
3FE2:  MOVLW  1C
3FE4:  MOVWF  x21
3FE6:  MOVLW  8C
3FE8:  MOVWF  x20
3FEA:  MOVLB  0
3FEC:  CALL   25E2
3FF0:  MOVFF  00,514
3FF4:  MOVFF  01,515
3FF8:  MOVFF  02,516
3FFC:  MOVFF  03,517
4000:  MOVFF  4FD,51D
4004:  MOVFF  4FC,51C
4008:  CALL   2982
400C:  MOVFF  517,51F
4010:  MOVFF  516,51E
4014:  MOVFF  515,51D
4018:  MOVFF  514,51C
401C:  MOVFF  03,523
4020:  MOVFF  02,522
4024:  MOVFF  01,521
4028:  MOVFF  00,520
402C:  CALL   29B8
4030:  MOVFF  03,51C
4034:  MOVFF  02,51B
4038:  MOVFF  01,51A
403C:  MOVFF  00,519
4040:  CALL   26D8
4044:  MOVFF  02,3A8
4048:  MOVFF  01,3A7
....................  
.................... 			//repeat testing 
.................... 			if (OneCycle) 
404C:  MOVLB  3
404E:  BTFSS  xC5.0
4050:  BRA    4056
.................... 			{ 
.................... 				DaqState = DaqIdle;	//if one cycle  - next-idle 
4052:  CLRF   xEE
.................... 			} 
.................... 			else 
4054:  BRA    405A
.................... 				DaqState = DaqStart;	//else normal measuring 
4056:  MOVLW  01
4058:  MOVWF  xEE
.................... 	 
.................... 			break; 
405A:  BRA    405E
405C:  MOVLB  3
.................... 		} 
.................... 	} 
405E:  GOTO   3844
.................... } 
4062:  BRA    4062

Configuration Fuses:
   Word  1: C800   IESO FCMEN INTRC_IO
   Word  2: 0019   NOBROWNOUT WDT1 NOWDT BORV20 NOPUT
   Word  3: 0700   PBADEN CCP2C1 LPT1OSC NOMCLR
   Word  4: 0000   NOSTVREN DEBUG NOLVP NOXINST
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB

   Some fuses have been forced to be compatible with the ICD debugger.

ROM data:
F00000: 00 00 20 4E 01 00 01 00 00 08 80 00 04 00 00 4B 
F00010: 01 00 C4 09 C4 09 B8 0B 00 00 00 00 00 7F 00 00 
F00020: 00 00 00 00 00 00 00 00 
