CCS PCH C Compiler, Version 4.110, 5967               25-дек-15 01:35

               Filename: C:\Projects\MWT-3\SPM3Firmware\spm3.lst

               ROM used: 16382 bytes (51%)
                         Largest free fragment is 15550
               RAM used: 1409 (92%) at main() level
                         1441 (95%) worst case
               Stack:    5 worst case (2 in main + 3 for interrupts)

*
0000:  GOTO   2E0A
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  F9D.0
0056:  GOTO   0060
005A:  BTFSC  F9E.0
005C:  GOTO   18EE
0060:  BTFSS  F9D.5
0062:  GOTO   006C
0066:  BTFSC  F9E.5
0068:  GOTO   036E
006C:  MOVFF  0E,00
0070:  MOVFF  0F,01
0074:  MOVFF  10,02
0078:  MOVFF  11,03
007C:  MOVFF  0C,FE9
0080:  MOVFF  07,FEA
0084:  BSF    07.7
0086:  MOVFF  08,FE1
008A:  MOVFF  09,FE2
008E:  MOVFF  0A,FD9
0092:  MOVFF  0B,FDA
0096:  MOVFF  12,FF3
009A:  MOVFF  13,FF4
009E:  MOVFF  14,FFA
00A2:  MOVFF  15,FF5
00A6:  MOVFF  16,FF6
00AA:  MOVFF  17,FF7
00AE:  MOVF   04,W
00B0:  MOVFF  06,FE0
00B4:  MOVFF  05,FD8
00B8:  RETFIE 0
.................... #include "spm3.h" 
.................... #include <18F4520.h> 
.................... //////// Standard Header file for the PIC18F4520 device //////////////// 
.................... #device PIC18F4520 
.................... #list 
....................  
.................... #device ICD=TRUE 
.................... #device adc=10 
.................... #FUSES WDT                      //Watch Dog Timer  
.................... #FUSES WDT1                     //Watch Dog Timer uses 1:1 Postscale 
.................... #FUSES INTRC_IO                 //Internal RC Osc, no CLKOUT 
.................... #FUSES NOPROTECT                //Code not protected from reading 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... //#FUSES BORV20                   //Brownout reset at 2.0V 
.................... #FUSES PUT                      //Power Up Timer 
.................... #FUSES NOCPD                    //No EE protection 
.................... #FUSES STVREN                   //Stack full/underflow will cause reset 
.................... #FUSES NODEBUG                  //No Debug mode for ICD 
.................... #FUSES LVP                      //Low Voltage Programming on B3(PIC16) or B5(PIC18) 
.................... #FUSES NOWRT                    //Program memory not write protected 
.................... #FUSES NOWRTD                   //Data EEPROM not write protected 
.................... #FUSES IESO                     //Internal External Switch Over mode enabled 
.................... #FUSES FCMEN                    //Fail-safe clock monitor enabled 
.................... #FUSES PBADEN                   //PORTB pins are configured as analog input channels on RESET 
.................... #FUSES NOWRTC                   //configuration not registers write protected 
.................... #FUSES NOWRTB                   //Boot block not write protected 
.................... #FUSES NOEBTR                   //Memory not protected from table reads 
.................... #FUSES NOEBTRB                  //Boot block not protected from table reads 
.................... #FUSES NOCPB                    //No Boot Block code protection 
.................... #FUSES LPT1OSC                  //Timer1 configured for low-power operation 
.................... #FUSES NOMCLR                   //Master Clear pin enabled 
.................... #FUSES XINST                    //Extended set extension and Indexed Addressing mode enabled 
....................  
.................... #use delay(clock=32000000,RESTART_WDT) 
*
189A:  MOVLW  05
189C:  MOVWF  FEA
189E:  MOVLW  98
18A0:  MOVWF  FE9
18A2:  MOVF   FEF,W
18A4:  BZ    18C8
18A6:  MOVLW  0A
18A8:  MOVWF  01
18AA:  MOVLW  BF
18AC:  MOVWF  00
18AE:  CLRWDT
18B0:  DECFSZ 00,F
18B2:  BRA    18AE
18B4:  DECFSZ 01,F
18B6:  BRA    18AA
18B8:  MOVLW  5E
18BA:  MOVWF  00
18BC:  DECFSZ 00,F
18BE:  BRA    18BC
18C0:  BRA    18C2
18C2:  CLRWDT
18C4:  DECFSZ FEF,F
18C6:  BRA    18A6
18C8:  GOTO   1D58 (RETURN)
.................... #define S0   PIN_A0 
.................... #define S1   PIN_A1 
.................... #define T0   PIN_A2 
.................... #define Uref   PIN_A3 
.................... #define T1   PIN_A4 
.................... #define T2   PIN_A5 
.................... #define DIR   PIN_A6 
.................... #define LDAC   PIN_A7 
.................... #define STAT   PIN_C0 
.................... #define MEM0   PIN_C1 
.................... #define MEM1   PIN_C2 
.................... #define SCK   PIN_C3 
.................... #define SDI   PIN_C4 
.................... #define SDO   PIN_C5 
.................... #define TX   PIN_C6 
.................... #define RX   PIN_C7 
.................... #define DAC0   PIN_D0 
.................... #define DAC1   PIN_D1 
.................... #define KU1   PIN_D4 
.................... #define KU0   PIN_D5 
.................... #define SYNC_POS   PIN_E0 
.................... #define TERMO   PIN_E1 
....................  
....................  
....................  
.................... #include "ee_var.h" 
.................... //SPM-3 EEPROM storage structure 
.................... //define adresses of EEPROM locations 
.................... /*		LocName		Addr	Discr			*/ 
.................... /*==========================================*/ 
.................... #define	EE_SAW_A0	0x00	//define saw level 
.................... #define	EE_SAW_A1	0x02	//define saw amplitude 
.................... #define	EE_KU0		0x04	//amp coeff for in0 
.................... #define	EE_KU1		0x06	//amp coeff for in1 
.................... #define	EE_TAQ		0x08	//number of DAQ points 
.................... #define	EE_PCOUNT	0x0A	//num of measures for meaning 
.................... #define	EE_FWDT		0x0C 
.................... #define	EE_Speed	0x0E	//serial device speed 
.................... #define	EE_Host		0x10	//host address & serial number	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<!!! Device ID!!! 
.................... #define	EE_T0_CAL	0x12	//cal temperature of cn0  
.................... #define	EE_T1_CAL	0x14	//cal temperature of cn1  
.................... #define	EE_TG_CAL	0x16	//cal temperature of generator  
.................... #define	EE_KGT		0x18	//termo coeff of generator 
.................... #define	EE_KGU		0x1C	//voltage coeff of generator 
.................... #define	EE_KST0		0x20	//termo coeff of cn0 
.................... #define	EE_KST1		0x24	//termo coeff of cn1 
....................  
.................... //EEPROM data definition 
.................... #ROM	0xf00000={2300,	//EE_SAW_A0 
.................... 				  0x03E8,	//EE_SAW_A1 
.................... 				  0x0001,	//EE_KU0				   
.................... 				  0x0001,	//EE_KU1 
.................... 				  0x0800,	//EE_TAQ 
.................... 				  0x0080,	//EE_PCOUNT 
.................... 				  0x0040,	//EE_FWDT 
.................... 				  0x4B00,	//EE_Speed 
.................... 				  0x0001,	//EE_Host				   
.................... 				  0x09C4,	//EE_TO_CAL 
.................... 				  0x09C4,	//EE_T1_CAL 
.................... 				  0x0BB8,	//EE_TG_CAL 
.................... 				  0x0000,	//EE_KGT 
.................... 				  0x0000, 
.................... 				  0x7F00,	//EE_KGU 
.................... 				  0x0000, 
.................... 				  0x0000,	//EE_KST0 
.................... 				  0x0000, 
.................... 				  0x0000,	//EE_KST1 
.................... 				  0x0000 
.................... } 
.................... // 
....................  
....................  
.................... //directives 
.................... //#USE FAST_IO(A) 
.................... //#USE FAST_IO(C) 
.................... //#USE FAST_IO(D) 
....................  
.................... //const 
.................... float const volts2dac = 4096 / 2.5 * 0.995; // use for value from volts to DAC conversion 
....................  
.................... //variables 
.................... //buffers 
.................... //channel 0 
.................... static int16 data_filt0[64];		//filtering buffer for ch0 
.................... static int16 data_mean0;			//mean value 
.................... static int16 maxRise0;			//max value at rising saw 
.................... static int16 iMaxRise0;			//index of maximum at rising saw 
.................... static int16 maxFall0;			//max value at falling saw 
.................... static int16 iMaxFall0;			//index of maximum at falling saw 
.................... static int16 alp_buf0[128];		//alpha meaning buffer 
.................... static int16 bet_buf0[128];		//beta meaning buffer 
.................... static int16 gam_buf0[128];		//gamma meaning buffer 
.................... static int16 Amplitude0;			//amplitude in B*1000 
.................... static int16 PulseWdt0;			//pulse width in uS/10 
.................... static int16 Gamma0;				//gamma in uS/10 
.................... static int16 AmpCoef0;			//input amplifier coeff 
.................... static float KST0;				// 
.................... static int16 T0_CAL;				// 
.................... static signed int16 T_SR0;				//temperature of cn0 
.................... static int16 Gamma1;				//gamma in uS/10 
.................... static int16 AmpCoef1;			//input amplifier coeff 
.................... static float KST1;				// 
.................... static int16 T1_CAL;				// 
.................... static signed int16 T_SR1;				//temperature of cn1 
....................  
.................... //common 
.................... static int16 TAQ;		//number of data samples at measuring period 
.................... static int16 FWDT;				//filering window width 
.................... static int16 PCOUNT;				//measuring periods for meaning 
.................... static int1 OneCycle;			//one cycle flag 
.................... static int8 iGam = 0;				//gamma meaning index 
....................  
.................... //saw 
.................... static signed int16 T_GEN;//generator temperature 
.................... static int16 SAW_A0;				//level of saw 
.................... static int16 sawStartLevel;			//current saw level 
.................... static int16 SAW_A1;				//saw amplitude 
.................... static int16 sawEndLevel;			//saw step 
.................... static float KGT;				// 
.................... static float KGU;				// 
.................... static int16 TG_CAL;				// 
....................  
.................... //communication 
.................... static int16 Speed;				//USART speed 
.................... static int16 Addr;				//own USART host adress 
....................  
.................... //filtering 
.................... static int8 iWin;				//meaning window index 
.................... static int32 AlpSum; 
.................... static int32 BetSum; 
.................... static int32 GamSum; 
....................  
.................... //temperature regulator 
.................... static int16 Hst = 50;				//Histeresis 
....................  
.................... //states 
.................... enum daq_states 
....................     { 
....................     DaqIdle,		//idle state - state after daq stop 
....................     DaqStart,		//cyclic mesuring start for one cycle 
....................     DaqMeasure,		//measuring 
....................     DaqScale,		//scaling measured values 
....................     DaqEnd			//ending measuring cycle 
....................     }; 
.................... int8 DaqState;	//Daq procedure state 
.................... // 
.................... //math variables 
.................... float kgv; 
.................... float Va; 
.................... float delta_gamma, delta_gamma2; 
.................... float T_0, T_G, T_G_k; 
.................... float Gam0, Gam0_k; 
.................... float k1, tsn; 
.................... float W; 
.................... float Haw0, Haw0_k; 
.................... float AA, BB, a0, a1, a2, a3, a4, a5; 
.................... float Am0, Am0_k; 
.................... float T_S0, T_S0_k; 
....................  
.................... //procedures 
.................... //mathematics 
.................... /*char Calc() // Humidity calculation 
....................  { 
....................  float difftime0; 
....................  //coeff validation 
....................  if (kgv == 0) 
....................  kgv = 1; 
....................  if (Va == 0) 
....................  Va = 1; 
....................  // 
....................  delta_gamma = (kgt / kgv) * (T_0 / Va) * (T_G - T_G_k);	//generator temperature correction 
....................  delta_gamma2 = k1 * (T_S0 - tsn);	//object temperature correction 
....................  difftime0 = (Gam0 - Gam0_k);	//addition parameter estimation 
....................  difftime0 = difftime0 + delta_gamma + delta_gamma2;	//adding corecction 
....................  //main regression 
....................  W = AA 
....................  + BB 
....................  * (a0 + a1 * (Am0 - Am0_k) * 10 
....................  + a2 * (Haw0 - Haw0_k) / 1000 
....................  + a3 * difftime0 / 1000 + a4 * (T_G - T_G_k) / 100 
....................  + a5 * (T_S0 - T_S0_k) / 100); 
....................  
....................  return 0; 
....................  }*/ 
....................  
.................... //Peripherals setup 
.................... void InitMcu(void) 
....................     {		//initialization of MCU 
....................  
....................     //oscillator configuration 
....................     setup_oscillator(OSC_32MHZ | OSC_NORMAL | OSC_31250); 
*
1E88:  MOVLW  70
1E8A:  MOVWF  FD3
1E8C:  MOVLW  C0
1E8E:  MOVWF  F9B
1E90:  MOVF   FD3,W
....................     //disable PSP 
....................     setup_psp(PSP_DISABLED); 
1E92:  BCF    F96.4
....................     //WDT config 
....................     setup_wdt(WDT_OFF); 
1E94:  BCF    FD1.0
....................     //disable comparators 
....................     setup_comparator(NC_NC_NC_NC); 
1E96:  MOVLW  07
1E98:  MOVWF  FB4
1E9A:  MOVF   F92,W
1E9C:  MOVWF  F92
1E9E:  CLRWDT
1EA0:  MOVLW  1A
1EA2:  MOVWF  00
1EA4:  DECFSZ 00,F
1EA6:  BRA    1EA4
1EA8:  MOVF   FB4,W
1EAA:  BCF    FA1.6
....................     setup_vref(FALSE); 
1EAC:  CLRF   FB5
....................  
....................     //config ADC module 
....................     setup_adc_ports(AN0_TO_AN5 | VSS_VREF); 
1EAE:  MOVF   FC1,W
1EB0:  ANDLW  C0
1EB2:  IORLW  19
1EB4:  MOVWF  FC1
....................     setup_adc(ADC_CLOCK_DIV_16 | ADC_TAD_MUL_2); 
1EB6:  MOVF   FC0,W
1EB8:  ANDLW  C0
1EBA:  IORLW  0D
1EBC:  MOVWF  FC0
1EBE:  BSF    FC0.7
1EC0:  BSF    FC2.0
....................  
....................     //port configuration 
....................     set_tris_a(0x3f); 
1EC2:  MOVLW  3F
1EC4:  MOVWF  F92
....................     set_tris_c(0xf8); 
1EC6:  MOVLW  F8
1EC8:  MOVWF  F94
....................     set_tris_d(0x00); 
1ECA:  MOVLW  00
1ECC:  MOVWF  F95
....................  
....................     //set high all selectors 
....................     output_high(LDAC); 
1ECE:  BCF    F92.7
1ED0:  BSF    F89.7
....................     output_high(MEM0); 
1ED2:  BCF    F94.1
1ED4:  BSF    F8B.1
....................     output_high(MEM1); 
1ED6:  BCF    F94.2
1ED8:  BSF    F8B.2
....................     output_high(DAC0); 
1EDA:  BCF    F95.0
1EDC:  BSF    F8C.0
....................     output_high(DAC1); 
1EDE:  BCF    F95.1
1EE0:  BSF    F8C.1
....................     output_high(KU0); 
1EE2:  BCF    F95.5
1EE4:  BSF    F8C.5
....................     output_high(KU1); 
1EE6:  BCF    F95.4
1EE8:  BSF    F8C.4
....................     output_high(STAT); 
1EEA:  BCF    F94.0
1EEC:  BSF    F8B.0
....................  
....................     //timers configuration 
....................     setup_timer_0(RTCC_INTERNAL); 
1EEE:  MOVLW  80
1EF0:  MOVWF  FD5
....................  
....................     setup_timer_1(T1_INTERNAL | T1_DIV_BY_8); 
1EF2:  MOVLW  B5
1EF4:  MOVWF  FCD
....................  
....................     setup_timer_2(T2_DISABLED, 0, 1); 
1EF6:  MOVLW  00
1EF8:  MOVWF  FCA
1EFA:  MOVLW  00
1EFC:  MOVWF  FCB
....................  
....................     setup_timer_3(T3_INTERNAL | T3_DIV_BY_1); 
1EFE:  MOVLW  85
1F00:  MOVWF  FB1
....................  
....................     //setup communications 
....................     //setup usart 
....................     output_low(DIR);	//enable receiving 
1F02:  BCF    F92.6
1F04:  BCF    F89.6
....................  
....................     //SPI configuration 
....................     setup_spi(SPI_MASTER | SPI_CLK_DIV_4 | SPI_H_TO_L); 
1F06:  BCF    FC6.5
1F08:  BCF    F94.5
1F0A:  BSF    F94.4
1F0C:  BCF    F94.3
1F0E:  MOVLW  30
1F10:  MOVWF  FC6
1F12:  MOVLW  40
1F14:  MOVWF  FC7
....................  
....................     //interrupt configuration 
....................     enable_interrupts(INT_RDA); 
1F16:  BSF    F9D.5
....................  
....................     enable_interrupts(GLOBAL); 
1F18:  MOVLW  C0
1F1A:  IORWF  FF2,F
....................  
....................     //States reset 
....................     DaqState = DaqIdle;	//initial state 
1F1C:  MOVLB  3
1F1E:  CLRF   xEF
....................     } 
1F20:  MOVLB  0
1F22:  GOTO   3836 (RETURN)
.................... // 
.................... //read registers from EE 
.................... void BURead(void) 
....................     {	//back up read 
....................     int32 temp; 
....................  
....................     //reading 
....................     SAW_A0 = make16(read_eeprom(EE_SAW_A0 + 1), read_eeprom(EE_SAW_A0)); //rise saw level 
1F26:  MOVFF  FF2,580
1F2A:  BCF    FF2.7
1F2C:  MOVLW  01
1F2E:  MOVWF  FA9
1F30:  BCF    FA6.6
1F32:  BCF    FA6.7
1F34:  BSF    FA6.0
1F36:  MOVF   FA8,W
1F38:  MOVLB  5
1F3A:  BTFSC  x80.7
1F3C:  BSF    FF2.7
1F3E:  MOVWF  x81
1F40:  MOVFF  FF2,582
1F44:  BCF    FF2.7
1F46:  CLRF   FA9
1F48:  BCF    FA6.6
1F4A:  BCF    FA6.7
1F4C:  BSF    FA6.0
1F4E:  MOVF   FA8,W
1F50:  BTFSC  x82.7
1F52:  BSF    FF2.7
1F54:  MOVWF  x83
1F56:  MOVFF  581,3CB
1F5A:  MOVFF  583,3CA
....................     SAW_A1 = make16(read_eeprom(EE_SAW_A1 + 1), read_eeprom(EE_SAW_A1)); //rise saw amplitude 
1F5E:  MOVFF  FF2,580
1F62:  BCF    FF2.7
1F64:  MOVLW  03
1F66:  MOVWF  FA9
1F68:  BCF    FA6.6
1F6A:  BCF    FA6.7
1F6C:  BSF    FA6.0
1F6E:  MOVF   FA8,W
1F70:  BTFSC  x80.7
1F72:  BSF    FF2.7
1F74:  MOVWF  x81
1F76:  MOVFF  FF2,582
1F7A:  BCF    FF2.7
1F7C:  MOVLW  02
1F7E:  MOVWF  FA9
1F80:  BCF    FA6.6
1F82:  BCF    FA6.7
1F84:  BSF    FA6.0
1F86:  MOVF   FA8,W
1F88:  BTFSC  x82.7
1F8A:  BSF    FF2.7
1F8C:  MOVWF  x83
1F8E:  MOVFF  581,3CF
1F92:  MOVFF  583,3CE
....................     AmpCoef0 = make16(read_eeprom(EE_KU0 + 1), read_eeprom(EE_KU0)); // 
1F96:  MOVFF  FF2,580
1F9A:  BCF    FF2.7
1F9C:  MOVLW  05
1F9E:  MOVWF  FA9
1FA0:  BCF    FA6.6
1FA2:  BCF    FA6.7
1FA4:  BSF    FA6.0
1FA6:  MOVF   FA8,W
1FA8:  BTFSC  x80.7
1FAA:  BSF    FF2.7
1FAC:  MOVWF  x81
1FAE:  MOVFF  FF2,582
1FB2:  BCF    FF2.7
1FB4:  MOVLW  04
1FB6:  MOVWF  FA9
1FB8:  BCF    FA6.6
1FBA:  BCF    FA6.7
1FBC:  BSF    FA6.0
1FBE:  MOVF   FA8,W
1FC0:  BTFSC  x82.7
1FC2:  BSF    FF2.7
1FC4:  MOVWF  x83
1FC6:  MOVFF  581,3AB
1FCA:  MOVFF  583,3AA
....................     AmpCoef1 = make16(read_eeprom(EE_KU1 + 1), read_eeprom(EE_KU1)); // 
1FCE:  MOVFF  FF2,580
1FD2:  BCF    FF2.7
1FD4:  MOVLW  07
1FD6:  MOVWF  FA9
1FD8:  BCF    FA6.6
1FDA:  BCF    FA6.7
1FDC:  BSF    FA6.0
1FDE:  MOVF   FA8,W
1FE0:  BTFSC  x80.7
1FE2:  BSF    FF2.7
1FE4:  MOVWF  x81
1FE6:  MOVFF  FF2,582
1FEA:  BCF    FF2.7
1FEC:  MOVLW  06
1FEE:  MOVWF  FA9
1FF0:  BCF    FA6.6
1FF2:  BCF    FA6.7
1FF4:  BSF    FA6.0
1FF6:  MOVF   FA8,W
1FF8:  BTFSC  x82.7
1FFA:  BSF    FF2.7
1FFC:  MOVWF  x83
1FFE:  MOVFF  581,3B7
2002:  MOVFF  583,3B6
....................     TAQ = make16(read_eeprom(EE_TAQ + 1), read_eeprom(EE_TAQ)); // 
2006:  MOVFF  FF2,580
200A:  BCF    FF2.7
200C:  MOVLW  09
200E:  MOVWF  FA9
2010:  BCF    FA6.6
2012:  BCF    FA6.7
2014:  BSF    FA6.0
2016:  MOVF   FA8,W
2018:  BTFSC  x80.7
201A:  BSF    FF2.7
201C:  MOVWF  x81
201E:  MOVFF  FF2,582
2022:  BCF    FF2.7
2024:  MOVLW  08
2026:  MOVWF  FA9
2028:  BCF    FA6.6
202A:  BCF    FA6.7
202C:  BSF    FA6.0
202E:  MOVF   FA8,W
2030:  BTFSC  x82.7
2032:  BSF    FF2.7
2034:  MOVWF  x83
2036:  MOVFF  581,3C1
203A:  MOVFF  583,3C0
....................     PCOUNT = make16(read_eeprom(EE_PCOUNT + 1), read_eeprom(EE_PCOUNT)); // 
203E:  MOVFF  FF2,580
2042:  BCF    FF2.7
2044:  MOVLW  0B
2046:  MOVWF  FA9
2048:  BCF    FA6.6
204A:  BCF    FA6.7
204C:  BSF    FA6.0
204E:  MOVF   FA8,W
2050:  BTFSC  x80.7
2052:  BSF    FF2.7
2054:  MOVWF  x81
2056:  MOVFF  FF2,582
205A:  BCF    FF2.7
205C:  MOVLW  0A
205E:  MOVWF  FA9
2060:  BCF    FA6.6
2062:  BCF    FA6.7
2064:  BSF    FA6.0
2066:  MOVF   FA8,W
2068:  BTFSC  x82.7
206A:  BSF    FF2.7
206C:  MOVWF  x83
206E:  MOVFF  581,3C5
2072:  MOVFF  583,3C4
....................     FWDT = make16(read_eeprom(EE_FWDT + 1), read_eeprom(EE_FWDT)); // 
2076:  MOVFF  FF2,580
207A:  BCF    FF2.7
207C:  MOVLW  0D
207E:  MOVWF  FA9
2080:  BCF    FA6.6
2082:  BCF    FA6.7
2084:  BSF    FA6.0
2086:  MOVF   FA8,W
2088:  BTFSC  x80.7
208A:  BSF    FF2.7
208C:  MOVWF  x81
208E:  MOVFF  FF2,582
2092:  BCF    FF2.7
2094:  MOVLW  0C
2096:  MOVWF  FA9
2098:  BCF    FA6.6
209A:  BCF    FA6.7
209C:  BSF    FA6.0
209E:  MOVF   FA8,W
20A0:  BTFSC  x82.7
20A2:  BSF    FF2.7
20A4:  MOVWF  x83
20A6:  MOVFF  581,3C3
20AA:  MOVFF  583,3C2
....................     Speed = make16(read_eeprom(EE_Speed + 1), read_eeprom(EE_Speed)); // 
20AE:  MOVFF  FF2,580
20B2:  BCF    FF2.7
20B4:  MOVLW  0F
20B6:  MOVWF  FA9
20B8:  BCF    FA6.6
20BA:  BCF    FA6.7
20BC:  BSF    FA6.0
20BE:  MOVF   FA8,W
20C0:  BTFSC  x80.7
20C2:  BSF    FF2.7
20C4:  MOVWF  x81
20C6:  MOVFF  FF2,582
20CA:  BCF    FF2.7
20CC:  MOVLW  0E
20CE:  MOVWF  FA9
20D0:  BCF    FA6.6
20D2:  BCF    FA6.7
20D4:  BSF    FA6.0
20D6:  MOVF   FA8,W
20D8:  BTFSC  x82.7
20DA:  BSF    FF2.7
20DC:  MOVWF  x83
20DE:  MOVFF  581,3DD
20E2:  MOVFF  583,3DC
....................     Addr = make16(read_eeprom(EE_Host + 1), read_eeprom(EE_Host)); // 
20E6:  MOVFF  FF2,580
20EA:  BCF    FF2.7
20EC:  MOVLW  11
20EE:  MOVWF  FA9
20F0:  BCF    FA6.6
20F2:  BCF    FA6.7
20F4:  BSF    FA6.0
20F6:  MOVF   FA8,W
20F8:  BTFSC  x80.7
20FA:  BSF    FF2.7
20FC:  MOVWF  x81
20FE:  MOVFF  FF2,582
2102:  BCF    FF2.7
2104:  MOVLW  10
2106:  MOVWF  FA9
2108:  BCF    FA6.6
210A:  BCF    FA6.7
210C:  BSF    FA6.0
210E:  MOVF   FA8,W
2110:  BTFSC  x82.7
2112:  BSF    FF2.7
2114:  MOVWF  x83
2116:  MOVFF  581,3DF
211A:  MOVFF  583,3DE
....................     T0_CAL = make32(read_eeprom(EE_T0_CAL + 1), read_eeprom(EE_T0_CAL)); // 
211E:  MOVFF  FF2,580
2122:  BCF    FF2.7
2124:  MOVLW  13
2126:  MOVWF  FA9
2128:  BCF    FA6.6
212A:  BCF    FA6.7
212C:  BSF    FA6.0
212E:  MOVF   FA8,W
2130:  BTFSC  x80.7
2132:  BSF    FF2.7
2134:  MOVWF  x81
2136:  MOVFF  FF2,582
213A:  BCF    FF2.7
213C:  MOVLW  12
213E:  MOVWF  FA9
2140:  BCF    FA6.6
2142:  BCF    FA6.7
2144:  BSF    FA6.0
2146:  MOVF   FA8,W
2148:  BTFSC  x82.7
214A:  BSF    FF2.7
214C:  MOVWF  x83
214E:  MOVFF  581,3B1
2152:  MOVFF  583,3B0
....................     T1_CAL = make16(read_eeprom(EE_T1_CAL + 1), read_eeprom(EE_T1_CAL)); // 
2156:  MOVFF  FF2,580
215A:  BCF    FF2.7
215C:  MOVLW  15
215E:  MOVWF  FA9
2160:  BCF    FA6.6
2162:  BCF    FA6.7
2164:  BSF    FA6.0
2166:  MOVF   FA8,W
2168:  BTFSC  x80.7
216A:  BSF    FF2.7
216C:  MOVWF  x81
216E:  MOVFF  FF2,582
2172:  BCF    FF2.7
2174:  MOVLW  14
2176:  MOVWF  FA9
2178:  BCF    FA6.6
217A:  BCF    FA6.7
217C:  BSF    FA6.0
217E:  MOVF   FA8,W
2180:  BTFSC  x82.7
2182:  BSF    FF2.7
2184:  MOVWF  x83
2186:  MOVFF  581,3BD
218A:  MOVFF  583,3BC
....................     TG_CAL = make16(read_eeprom(EE_TG_CAL + 1), read_eeprom(EE_TG_CAL)); // 
218E:  MOVFF  FF2,580
2192:  BCF    FF2.7
2194:  MOVLW  17
2196:  MOVWF  FA9
2198:  BCF    FA6.6
219A:  BCF    FA6.7
219C:  BSF    FA6.0
219E:  MOVF   FA8,W
21A0:  BTFSC  x80.7
21A2:  BSF    FF2.7
21A4:  MOVWF  x81
21A6:  MOVFF  FF2,582
21AA:  BCF    FF2.7
21AC:  MOVLW  16
21AE:  MOVWF  FA9
21B0:  BCF    FA6.6
21B2:  BCF    FA6.7
21B4:  BSF    FA6.0
21B6:  MOVF   FA8,W
21B8:  BTFSC  x82.7
21BA:  BSF    FF2.7
21BC:  MOVWF  x83
21BE:  MOVFF  581,3DB
21C2:  MOVFF  583,3DA
....................     temp = make32(read_eeprom(EE_KGT + 2), read_eeprom(EE_KGT + 3), 
.................... 	    read_eeprom(EE_KGT), read_eeprom(EE_KGT + 1)); // 
21C6:  MOVFF  FF2,580
21CA:  BCF    FF2.7
21CC:  MOVLW  1A
21CE:  MOVWF  FA9
21D0:  BCF    FA6.6
21D2:  BCF    FA6.7
21D4:  BSF    FA6.0
21D6:  MOVF   FA8,W
21D8:  BTFSC  x80.7
21DA:  BSF    FF2.7
21DC:  MOVWF  x81
21DE:  MOVFF  FF2,582
21E2:  BCF    FF2.7
21E4:  MOVLW  1B
21E6:  MOVWF  FA9
21E8:  BCF    FA6.6
21EA:  BCF    FA6.7
21EC:  BSF    FA6.0
21EE:  MOVF   FA8,W
21F0:  BTFSC  x82.7
21F2:  BSF    FF2.7
21F4:  MOVWF  x83
21F6:  MOVFF  FF2,584
21FA:  BCF    FF2.7
21FC:  MOVLW  18
21FE:  MOVWF  FA9
2200:  BCF    FA6.6
2202:  BCF    FA6.7
2204:  BSF    FA6.0
2206:  MOVF   FA8,W
2208:  BTFSC  x84.7
220A:  BSF    FF2.7
220C:  MOVWF  x85
220E:  MOVFF  FF2,586
2212:  BCF    FF2.7
2214:  MOVLW  19
2216:  MOVWF  FA9
2218:  BCF    FA6.6
221A:  BCF    FA6.7
221C:  BSF    FA6.0
221E:  MOVF   FA8,W
2220:  BTFSC  x86.7
2222:  BSF    FF2.7
2224:  MOVWF  x87
2226:  MOVFF  581,57F
222A:  MOVFF  583,57E
222E:  MOVFF  585,57D
2232:  MOVFF  587,57C
....................     memcpy(&KGT, &temp, 4); 
2236:  MOVLW  03
2238:  MOVWF  FEA
223A:  MOVLW  D2
223C:  MOVWF  FE9
223E:  MOVLW  05
2240:  MOVWF  FE2
2242:  MOVLW  7C
2244:  MOVWF  FE1
2246:  MOVLW  04
2248:  MOVWF  01
224A:  MOVFF  FE6,FEE
224E:  DECFSZ 01,F
2250:  BRA    224A
....................     temp = make32(read_eeprom(EE_KGU + 2), read_eeprom(EE_KGU + 3), 
.................... 	    read_eeprom(EE_KGU), read_eeprom(EE_KGU + 1)); // 
2252:  MOVFF  FF2,580
2256:  BCF    FF2.7
2258:  MOVLW  1E
225A:  MOVWF  FA9
225C:  BCF    FA6.6
225E:  BCF    FA6.7
2260:  BSF    FA6.0
2262:  MOVF   FA8,W
2264:  BTFSC  x80.7
2266:  BSF    FF2.7
2268:  MOVWF  x81
226A:  MOVFF  FF2,582
226E:  BCF    FF2.7
2270:  MOVLW  1F
2272:  MOVWF  FA9
2274:  BCF    FA6.6
2276:  BCF    FA6.7
2278:  BSF    FA6.0
227A:  MOVF   FA8,W
227C:  BTFSC  x82.7
227E:  BSF    FF2.7
2280:  MOVWF  x83
2282:  MOVFF  FF2,584
2286:  BCF    FF2.7
2288:  MOVLW  1C
228A:  MOVWF  FA9
228C:  BCF    FA6.6
228E:  BCF    FA6.7
2290:  BSF    FA6.0
2292:  MOVF   FA8,W
2294:  BTFSC  x84.7
2296:  BSF    FF2.7
2298:  MOVWF  x85
229A:  MOVFF  FF2,586
229E:  BCF    FF2.7
22A0:  MOVLW  1D
22A2:  MOVWF  FA9
22A4:  BCF    FA6.6
22A6:  BCF    FA6.7
22A8:  BSF    FA6.0
22AA:  MOVF   FA8,W
22AC:  BTFSC  x86.7
22AE:  BSF    FF2.7
22B0:  MOVWF  x87
22B2:  MOVFF  581,57F
22B6:  MOVFF  583,57E
22BA:  MOVFF  585,57D
22BE:  MOVFF  587,57C
....................     memcpy(&KGU, &temp, 4); 
22C2:  MOVLW  03
22C4:  MOVWF  FEA
22C6:  MOVLW  D6
22C8:  MOVWF  FE9
22CA:  MOVLW  05
22CC:  MOVWF  FE2
22CE:  MOVLW  7C
22D0:  MOVWF  FE1
22D2:  MOVLW  04
22D4:  MOVWF  01
22D6:  MOVFF  FE6,FEE
22DA:  DECFSZ 01,F
22DC:  BRA    22D6
....................     temp = make32(read_eeprom(EE_KST0 + 2), read_eeprom(EE_KST0 + 3), 
.................... 	    read_eeprom(EE_KST0), read_eeprom(EE_KST0 + 1)); // 
22DE:  MOVFF  FF2,580
22E2:  BCF    FF2.7
22E4:  MOVLW  22
22E6:  MOVWF  FA9
22E8:  BCF    FA6.6
22EA:  BCF    FA6.7
22EC:  BSF    FA6.0
22EE:  MOVF   FA8,W
22F0:  BTFSC  x80.7
22F2:  BSF    FF2.7
22F4:  MOVWF  x81
22F6:  MOVFF  FF2,582
22FA:  BCF    FF2.7
22FC:  MOVLW  23
22FE:  MOVWF  FA9
2300:  BCF    FA6.6
2302:  BCF    FA6.7
2304:  BSF    FA6.0
2306:  MOVF   FA8,W
2308:  BTFSC  x82.7
230A:  BSF    FF2.7
230C:  MOVWF  x83
230E:  MOVFF  FF2,584
2312:  BCF    FF2.7
2314:  MOVLW  20
2316:  MOVWF  FA9
2318:  BCF    FA6.6
231A:  BCF    FA6.7
231C:  BSF    FA6.0
231E:  MOVF   FA8,W
2320:  BTFSC  x84.7
2322:  BSF    FF2.7
2324:  MOVWF  x85
2326:  MOVFF  FF2,586
232A:  BCF    FF2.7
232C:  MOVLW  21
232E:  MOVWF  FA9
2330:  BCF    FA6.6
2332:  BCF    FA6.7
2334:  BSF    FA6.0
2336:  MOVF   FA8,W
2338:  BTFSC  x86.7
233A:  BSF    FF2.7
233C:  MOVWF  x87
233E:  MOVFF  581,57F
2342:  MOVFF  583,57E
2346:  MOVFF  585,57D
234A:  MOVFF  587,57C
....................     memcpy(&KST0, &temp, 4); 
234E:  MOVLW  03
2350:  MOVWF  FEA
2352:  MOVLW  AC
2354:  MOVWF  FE9
2356:  MOVLW  05
2358:  MOVWF  FE2
235A:  MOVLW  7C
235C:  MOVWF  FE1
235E:  MOVLW  04
2360:  MOVWF  01
2362:  MOVFF  FE6,FEE
2366:  DECFSZ 01,F
2368:  BRA    2362
....................     temp = make32(read_eeprom(EE_KST1 + 2), read_eeprom(EE_KST1 + 3), 
.................... 	    read_eeprom(EE_KST1), read_eeprom(EE_KST1 + 1)); // 
236A:  MOVFF  FF2,580
236E:  BCF    FF2.7
2370:  MOVLW  26
2372:  MOVWF  FA9
2374:  BCF    FA6.6
2376:  BCF    FA6.7
2378:  BSF    FA6.0
237A:  MOVF   FA8,W
237C:  BTFSC  x80.7
237E:  BSF    FF2.7
2380:  MOVWF  x81
2382:  MOVFF  FF2,582
2386:  BCF    FF2.7
2388:  MOVLW  27
238A:  MOVWF  FA9
238C:  BCF    FA6.6
238E:  BCF    FA6.7
2390:  BSF    FA6.0
2392:  MOVF   FA8,W
2394:  BTFSC  x82.7
2396:  BSF    FF2.7
2398:  MOVWF  x83
239A:  MOVFF  FF2,584
239E:  BCF    FF2.7
23A0:  MOVLW  24
23A2:  MOVWF  FA9
23A4:  BCF    FA6.6
23A6:  BCF    FA6.7
23A8:  BSF    FA6.0
23AA:  MOVF   FA8,W
23AC:  BTFSC  x84.7
23AE:  BSF    FF2.7
23B0:  MOVWF  x85
23B2:  MOVFF  FF2,586
23B6:  BCF    FF2.7
23B8:  MOVLW  25
23BA:  MOVWF  FA9
23BC:  BCF    FA6.6
23BE:  BCF    FA6.7
23C0:  BSF    FA6.0
23C2:  MOVF   FA8,W
23C4:  BTFSC  x86.7
23C6:  BSF    FF2.7
23C8:  MOVWF  x87
23CA:  MOVFF  581,57F
23CE:  MOVFF  583,57E
23D2:  MOVFF  585,57D
23D6:  MOVFF  587,57C
....................     memcpy(&KST1, &temp, 4); 
23DA:  MOVLW  03
23DC:  MOVWF  FEA
23DE:  MOVLW  B8
23E0:  MOVWF  FE9
23E2:  MOVLW  05
23E4:  MOVWF  FE2
23E6:  MOVLW  7C
23E8:  MOVWF  FE1
23EA:  MOVLW  04
23EC:  MOVWF  01
23EE:  MOVFF  FE6,FEE
23F2:  DECFSZ 01,F
23F4:  BRA    23EE
....................     } 
23F6:  MOVLB  0
23F8:  GOTO   383A (RETURN)
.................... // 
.................... //write registers to EE 
.................... void BUWrite(void) 
....................     {	//back up write 
....................     int32 temp; 
....................  
....................     setup_wdt(WDT_OFF); 
*
1140:  BCF    FD1.0
....................  
....................     //writing 
....................     //int16 
....................     write_eeprom(EE_SAW_A0, make8(SAW_A0, 0)); 
1142:  MOVFF  3CA,59C
1146:  CLRF   FA9
1148:  MOVFF  59C,FA8
114C:  BCF    FA6.6
114E:  BCF    FA6.7
1150:  BSF    FA6.2
1152:  MOVF   FF2,W
1154:  MOVWF  00
1156:  BCF    FF2.7
1158:  MOVLB  F
115A:  MOVLW  55
115C:  MOVWF  FA7
115E:  MOVLW  AA
1160:  MOVWF  FA7
1162:  BSF    FA6.1
1164:  BTFSC  FA6.1
1166:  BRA    1164
1168:  BCF    FA6.2
116A:  MOVF   00,W
116C:  IORWF  FF2,F
....................     write_eeprom(EE_SAW_A0 + 1, make8(SAW_A0, 1)); 
116E:  MOVFF  3CB,59C
1172:  MOVLW  01
1174:  MOVWF  FA9
1176:  MOVFF  3CB,FA8
117A:  BCF    FA6.6
117C:  BCF    FA6.7
117E:  BSF    FA6.2
1180:  MOVFF  FF2,00
1184:  BCF    FF2.7
1186:  MOVLW  55
1188:  MOVWF  FA7
118A:  MOVLW  AA
118C:  MOVWF  FA7
118E:  BSF    FA6.1
1190:  BTFSC  FA6.1
1192:  BRA    1190
1194:  BCF    FA6.2
1196:  MOVF   00,W
1198:  IORWF  FF2,F
....................     write_eeprom(EE_SAW_A1, make8(SAW_A1, 0)); 
119A:  MOVFF  3CE,59C
119E:  MOVLW  02
11A0:  MOVWF  FA9
11A2:  MOVFF  3CE,FA8
11A6:  BCF    FA6.6
11A8:  BCF    FA6.7
11AA:  BSF    FA6.2
11AC:  MOVFF  FF2,00
11B0:  BCF    FF2.7
11B2:  MOVLW  55
11B4:  MOVWF  FA7
11B6:  MOVLW  AA
11B8:  MOVWF  FA7
11BA:  BSF    FA6.1
11BC:  BTFSC  FA6.1
11BE:  BRA    11BC
11C0:  BCF    FA6.2
11C2:  MOVF   00,W
11C4:  IORWF  FF2,F
....................     write_eeprom(EE_SAW_A1 + 1, make8(SAW_A1, 1)); 
11C6:  MOVFF  3CF,59C
11CA:  MOVLW  03
11CC:  MOVWF  FA9
11CE:  MOVFF  3CF,FA8
11D2:  BCF    FA6.6
11D4:  BCF    FA6.7
11D6:  BSF    FA6.2
11D8:  MOVFF  FF2,00
11DC:  BCF    FF2.7
11DE:  MOVLW  55
11E0:  MOVWF  FA7
11E2:  MOVLW  AA
11E4:  MOVWF  FA7
11E6:  BSF    FA6.1
11E8:  BTFSC  FA6.1
11EA:  BRA    11E8
11EC:  BCF    FA6.2
11EE:  MOVF   00,W
11F0:  IORWF  FF2,F
....................     write_eeprom(EE_KU0, make8(AmpCoef0, 0)); 
11F2:  MOVFF  3AA,59C
11F6:  MOVLW  04
11F8:  MOVWF  FA9
11FA:  MOVFF  3AA,FA8
11FE:  BCF    FA6.6
1200:  BCF    FA6.7
1202:  BSF    FA6.2
1204:  MOVFF  FF2,00
1208:  BCF    FF2.7
120A:  MOVLW  55
120C:  MOVWF  FA7
120E:  MOVLW  AA
1210:  MOVWF  FA7
1212:  BSF    FA6.1
1214:  BTFSC  FA6.1
1216:  BRA    1214
1218:  BCF    FA6.2
121A:  MOVF   00,W
121C:  IORWF  FF2,F
....................     write_eeprom(EE_KU0 + 1, make8(AmpCoef0, 1)); 
121E:  MOVFF  3AB,59C
1222:  MOVLW  05
1224:  MOVWF  FA9
1226:  MOVFF  3AB,FA8
122A:  BCF    FA6.6
122C:  BCF    FA6.7
122E:  BSF    FA6.2
1230:  MOVFF  FF2,00
1234:  BCF    FF2.7
1236:  MOVLW  55
1238:  MOVWF  FA7
123A:  MOVLW  AA
123C:  MOVWF  FA7
123E:  BSF    FA6.1
1240:  BTFSC  FA6.1
1242:  BRA    1240
1244:  BCF    FA6.2
1246:  MOVF   00,W
1248:  IORWF  FF2,F
....................     write_eeprom(EE_KU1, make8(AmpCoef1, 0)); 
124A:  MOVFF  3B6,59C
124E:  MOVLW  06
1250:  MOVWF  FA9
1252:  MOVFF  3B6,FA8
1256:  BCF    FA6.6
1258:  BCF    FA6.7
125A:  BSF    FA6.2
125C:  MOVFF  FF2,00
1260:  BCF    FF2.7
1262:  MOVLW  55
1264:  MOVWF  FA7
1266:  MOVLW  AA
1268:  MOVWF  FA7
126A:  BSF    FA6.1
126C:  BTFSC  FA6.1
126E:  BRA    126C
1270:  BCF    FA6.2
1272:  MOVF   00,W
1274:  IORWF  FF2,F
....................     write_eeprom(EE_KU1 + 1, make8(AmpCoef1, 1)); 
1276:  MOVFF  3B7,59C
127A:  MOVLW  07
127C:  MOVWF  FA9
127E:  MOVFF  3B7,FA8
1282:  BCF    FA6.6
1284:  BCF    FA6.7
1286:  BSF    FA6.2
1288:  MOVFF  FF2,00
128C:  BCF    FF2.7
128E:  MOVLW  55
1290:  MOVWF  FA7
1292:  MOVLW  AA
1294:  MOVWF  FA7
1296:  BSF    FA6.1
1298:  BTFSC  FA6.1
129A:  BRA    1298
129C:  BCF    FA6.2
129E:  MOVF   00,W
12A0:  IORWF  FF2,F
....................     write_eeprom(EE_TAQ, make8(TAQ, 0)); 
12A2:  MOVFF  3C0,59C
12A6:  MOVLW  08
12A8:  MOVWF  FA9
12AA:  MOVFF  3C0,FA8
12AE:  BCF    FA6.6
12B0:  BCF    FA6.7
12B2:  BSF    FA6.2
12B4:  MOVFF  FF2,00
12B8:  BCF    FF2.7
12BA:  MOVLW  55
12BC:  MOVWF  FA7
12BE:  MOVLW  AA
12C0:  MOVWF  FA7
12C2:  BSF    FA6.1
12C4:  BTFSC  FA6.1
12C6:  BRA    12C4
12C8:  BCF    FA6.2
12CA:  MOVF   00,W
12CC:  IORWF  FF2,F
....................     write_eeprom(EE_TAQ + 1, make8(TAQ, 1)); 
12CE:  MOVFF  3C1,59C
12D2:  MOVLW  09
12D4:  MOVWF  FA9
12D6:  MOVFF  3C1,FA8
12DA:  BCF    FA6.6
12DC:  BCF    FA6.7
12DE:  BSF    FA6.2
12E0:  MOVFF  FF2,00
12E4:  BCF    FF2.7
12E6:  MOVLW  55
12E8:  MOVWF  FA7
12EA:  MOVLW  AA
12EC:  MOVWF  FA7
12EE:  BSF    FA6.1
12F0:  BTFSC  FA6.1
12F2:  BRA    12F0
12F4:  BCF    FA6.2
12F6:  MOVF   00,W
12F8:  IORWF  FF2,F
....................     write_eeprom(EE_PCOUNT, make8(PCOUNT, 0)); 
12FA:  MOVFF  3C4,59C
12FE:  MOVLW  0A
1300:  MOVWF  FA9
1302:  MOVFF  3C4,FA8
1306:  BCF    FA6.6
1308:  BCF    FA6.7
130A:  BSF    FA6.2
130C:  MOVFF  FF2,00
1310:  BCF    FF2.7
1312:  MOVLW  55
1314:  MOVWF  FA7
1316:  MOVLW  AA
1318:  MOVWF  FA7
131A:  BSF    FA6.1
131C:  BTFSC  FA6.1
131E:  BRA    131C
1320:  BCF    FA6.2
1322:  MOVF   00,W
1324:  IORWF  FF2,F
....................     write_eeprom(EE_PCOUNT + 1, make8(PCOUNT, 1)); 
1326:  MOVFF  3C5,59C
132A:  MOVLW  0B
132C:  MOVWF  FA9
132E:  MOVFF  3C5,FA8
1332:  BCF    FA6.6
1334:  BCF    FA6.7
1336:  BSF    FA6.2
1338:  MOVFF  FF2,00
133C:  BCF    FF2.7
133E:  MOVLW  55
1340:  MOVWF  FA7
1342:  MOVLW  AA
1344:  MOVWF  FA7
1346:  BSF    FA6.1
1348:  BTFSC  FA6.1
134A:  BRA    1348
134C:  BCF    FA6.2
134E:  MOVF   00,W
1350:  IORWF  FF2,F
....................     write_eeprom(EE_FWDT, make8(FWDT, 0)); 
1352:  MOVFF  3C2,59C
1356:  MOVLW  0C
1358:  MOVWF  FA9
135A:  MOVFF  3C2,FA8
135E:  BCF    FA6.6
1360:  BCF    FA6.7
1362:  BSF    FA6.2
1364:  MOVFF  FF2,00
1368:  BCF    FF2.7
136A:  MOVLW  55
136C:  MOVWF  FA7
136E:  MOVLW  AA
1370:  MOVWF  FA7
1372:  BSF    FA6.1
1374:  BTFSC  FA6.1
1376:  BRA    1374
1378:  BCF    FA6.2
137A:  MOVF   00,W
137C:  IORWF  FF2,F
....................     write_eeprom(EE_FWDT + 1, make8(FWDT, 1)); 
137E:  MOVFF  3C3,59C
1382:  MOVLW  0D
1384:  MOVWF  FA9
1386:  MOVFF  3C3,FA8
138A:  BCF    FA6.6
138C:  BCF    FA6.7
138E:  BSF    FA6.2
1390:  MOVFF  FF2,00
1394:  BCF    FF2.7
1396:  MOVLW  55
1398:  MOVWF  FA7
139A:  MOVLW  AA
139C:  MOVWF  FA7
139E:  BSF    FA6.1
13A0:  BTFSC  FA6.1
13A2:  BRA    13A0
13A4:  BCF    FA6.2
13A6:  MOVF   00,W
13A8:  IORWF  FF2,F
....................     write_eeprom(EE_Speed, make8(Speed, 0)); 
13AA:  MOVFF  3DC,59C
13AE:  MOVLW  0E
13B0:  MOVWF  FA9
13B2:  MOVFF  3DC,FA8
13B6:  BCF    FA6.6
13B8:  BCF    FA6.7
13BA:  BSF    FA6.2
13BC:  MOVFF  FF2,00
13C0:  BCF    FF2.7
13C2:  MOVLW  55
13C4:  MOVWF  FA7
13C6:  MOVLW  AA
13C8:  MOVWF  FA7
13CA:  BSF    FA6.1
13CC:  BTFSC  FA6.1
13CE:  BRA    13CC
13D0:  BCF    FA6.2
13D2:  MOVF   00,W
13D4:  IORWF  FF2,F
....................     write_eeprom(EE_Speed + 1, make8(Speed, 1)); 
13D6:  MOVFF  3DD,59C
13DA:  MOVLW  0F
13DC:  MOVWF  FA9
13DE:  MOVFF  3DD,FA8
13E2:  BCF    FA6.6
13E4:  BCF    FA6.7
13E6:  BSF    FA6.2
13E8:  MOVFF  FF2,00
13EC:  BCF    FF2.7
13EE:  MOVLW  55
13F0:  MOVWF  FA7
13F2:  MOVLW  AA
13F4:  MOVWF  FA7
13F6:  BSF    FA6.1
13F8:  BTFSC  FA6.1
13FA:  BRA    13F8
13FC:  BCF    FA6.2
13FE:  MOVF   00,W
1400:  IORWF  FF2,F
....................     write_eeprom(EE_Host, make8(Addr, 0)); 
1402:  MOVFF  3DE,59C
1406:  MOVLW  10
1408:  MOVWF  FA9
140A:  MOVFF  3DE,FA8
140E:  BCF    FA6.6
1410:  BCF    FA6.7
1412:  BSF    FA6.2
1414:  MOVFF  FF2,00
1418:  BCF    FF2.7
141A:  MOVLW  55
141C:  MOVWF  FA7
141E:  MOVLW  AA
1420:  MOVWF  FA7
1422:  BSF    FA6.1
1424:  BTFSC  FA6.1
1426:  BRA    1424
1428:  BCF    FA6.2
142A:  MOVF   00,W
142C:  IORWF  FF2,F
....................     write_eeprom(EE_Host + 1, make8(Addr, 1)); 
142E:  MOVFF  3DF,59C
1432:  MOVLW  11
1434:  MOVWF  FA9
1436:  MOVFF  3DF,FA8
143A:  BCF    FA6.6
143C:  BCF    FA6.7
143E:  BSF    FA6.2
1440:  MOVFF  FF2,00
1444:  BCF    FF2.7
1446:  MOVLW  55
1448:  MOVWF  FA7
144A:  MOVLW  AA
144C:  MOVWF  FA7
144E:  BSF    FA6.1
1450:  BTFSC  FA6.1
1452:  BRA    1450
1454:  BCF    FA6.2
1456:  MOVF   00,W
1458:  IORWF  FF2,F
....................     write_eeprom(EE_T0_CAL, make8(T0_CAL, 0)); 
145A:  MOVFF  3B0,59C
145E:  MOVLW  12
1460:  MOVWF  FA9
1462:  MOVFF  3B0,FA8
1466:  BCF    FA6.6
1468:  BCF    FA6.7
146A:  BSF    FA6.2
146C:  MOVFF  FF2,00
1470:  BCF    FF2.7
1472:  MOVLW  55
1474:  MOVWF  FA7
1476:  MOVLW  AA
1478:  MOVWF  FA7
147A:  BSF    FA6.1
147C:  BTFSC  FA6.1
147E:  BRA    147C
1480:  BCF    FA6.2
1482:  MOVF   00,W
1484:  IORWF  FF2,F
....................     write_eeprom(EE_T0_CAL + 1, make8(T0_CAL, 1)); 
1486:  MOVFF  3B1,59C
148A:  MOVLW  13
148C:  MOVWF  FA9
148E:  MOVFF  3B1,FA8
1492:  BCF    FA6.6
1494:  BCF    FA6.7
1496:  BSF    FA6.2
1498:  MOVFF  FF2,00
149C:  BCF    FF2.7
149E:  MOVLW  55
14A0:  MOVWF  FA7
14A2:  MOVLW  AA
14A4:  MOVWF  FA7
14A6:  BSF    FA6.1
14A8:  BTFSC  FA6.1
14AA:  BRA    14A8
14AC:  BCF    FA6.2
14AE:  MOVF   00,W
14B0:  IORWF  FF2,F
....................     write_eeprom(EE_T1_CAL, make8(T1_CAL, 0)); 
14B2:  MOVFF  3BC,59C
14B6:  MOVLW  14
14B8:  MOVWF  FA9
14BA:  MOVFF  3BC,FA8
14BE:  BCF    FA6.6
14C0:  BCF    FA6.7
14C2:  BSF    FA6.2
14C4:  MOVFF  FF2,00
14C8:  BCF    FF2.7
14CA:  MOVLW  55
14CC:  MOVWF  FA7
14CE:  MOVLW  AA
14D0:  MOVWF  FA7
14D2:  BSF    FA6.1
14D4:  BTFSC  FA6.1
14D6:  BRA    14D4
14D8:  BCF    FA6.2
14DA:  MOVF   00,W
14DC:  IORWF  FF2,F
....................     write_eeprom(EE_T1_CAL + 1, make8(T1_CAL, 1)); 
14DE:  MOVFF  3BD,59C
14E2:  MOVLW  15
14E4:  MOVWF  FA9
14E6:  MOVFF  3BD,FA8
14EA:  BCF    FA6.6
14EC:  BCF    FA6.7
14EE:  BSF    FA6.2
14F0:  MOVFF  FF2,00
14F4:  BCF    FF2.7
14F6:  MOVLW  55
14F8:  MOVWF  FA7
14FA:  MOVLW  AA
14FC:  MOVWF  FA7
14FE:  BSF    FA6.1
1500:  BTFSC  FA6.1
1502:  BRA    1500
1504:  BCF    FA6.2
1506:  MOVF   00,W
1508:  IORWF  FF2,F
....................     write_eeprom(EE_TG_CAL, make8(TG_CAL, 0)); 
150A:  MOVFF  3DA,59C
150E:  MOVLW  16
1510:  MOVWF  FA9
1512:  MOVFF  3DA,FA8
1516:  BCF    FA6.6
1518:  BCF    FA6.7
151A:  BSF    FA6.2
151C:  MOVFF  FF2,00
1520:  BCF    FF2.7
1522:  MOVLW  55
1524:  MOVWF  FA7
1526:  MOVLW  AA
1528:  MOVWF  FA7
152A:  BSF    FA6.1
152C:  BTFSC  FA6.1
152E:  BRA    152C
1530:  BCF    FA6.2
1532:  MOVF   00,W
1534:  IORWF  FF2,F
....................     write_eeprom(EE_TG_CAL + 1, make8(TG_CAL, 1)); 
1536:  MOVFF  3DB,59C
153A:  MOVLW  17
153C:  MOVWF  FA9
153E:  MOVFF  3DB,FA8
1542:  BCF    FA6.6
1544:  BCF    FA6.7
1546:  BSF    FA6.2
1548:  MOVFF  FF2,00
154C:  BCF    FF2.7
154E:  MOVLW  55
1550:  MOVWF  FA7
1552:  MOVLW  AA
1554:  MOVWF  FA7
1556:  BSF    FA6.1
1558:  BTFSC  FA6.1
155A:  BRA    1558
155C:  BCF    FA6.2
155E:  MOVF   00,W
1560:  IORWF  FF2,F
....................  
....................     //float 
....................     memcpy(&temp, &KGT, 4); 
1562:  MOVLW  05
1564:  MOVWF  FEA
1566:  MOVLW  98
1568:  MOVWF  FE9
156A:  MOVLW  03
156C:  MOVWF  FE2
156E:  MOVLW  D2
1570:  MOVWF  FE1
1572:  MOVLW  04
1574:  MOVWF  01
1576:  MOVFF  FE6,FEE
157A:  DECFSZ 01,F
157C:  BRA    1576
....................     write_eeprom(EE_KGT + 2, make8(temp, 3)); 
157E:  MOVFF  59B,59C
1582:  MOVLW  1A
1584:  MOVWF  FA9
1586:  MOVFF  59B,FA8
158A:  BCF    FA6.6
158C:  BCF    FA6.7
158E:  BSF    FA6.2
1590:  MOVFF  FF2,00
1594:  BCF    FF2.7
1596:  MOVLW  55
1598:  MOVWF  FA7
159A:  MOVLW  AA
159C:  MOVWF  FA7
159E:  BSF    FA6.1
15A0:  BTFSC  FA6.1
15A2:  BRA    15A0
15A4:  BCF    FA6.2
15A6:  MOVF   00,W
15A8:  IORWF  FF2,F
....................     write_eeprom(EE_KGT + 3, make8(temp, 2)); 
15AA:  MOVFF  59A,59C
15AE:  MOVLW  1B
15B0:  MOVWF  FA9
15B2:  MOVFF  59A,FA8
15B6:  BCF    FA6.6
15B8:  BCF    FA6.7
15BA:  BSF    FA6.2
15BC:  MOVFF  FF2,00
15C0:  BCF    FF2.7
15C2:  MOVLW  55
15C4:  MOVWF  FA7
15C6:  MOVLW  AA
15C8:  MOVWF  FA7
15CA:  BSF    FA6.1
15CC:  BTFSC  FA6.1
15CE:  BRA    15CC
15D0:  BCF    FA6.2
15D2:  MOVF   00,W
15D4:  IORWF  FF2,F
....................     write_eeprom(EE_KGT, make8(temp, 1)); 
15D6:  MOVFF  599,59C
15DA:  MOVLW  18
15DC:  MOVWF  FA9
15DE:  MOVFF  599,FA8
15E2:  BCF    FA6.6
15E4:  BCF    FA6.7
15E6:  BSF    FA6.2
15E8:  MOVFF  FF2,00
15EC:  BCF    FF2.7
15EE:  MOVLW  55
15F0:  MOVWF  FA7
15F2:  MOVLW  AA
15F4:  MOVWF  FA7
15F6:  BSF    FA6.1
15F8:  BTFSC  FA6.1
15FA:  BRA    15F8
15FC:  BCF    FA6.2
15FE:  MOVF   00,W
1600:  IORWF  FF2,F
....................     write_eeprom(EE_KGT + 1, make8(temp, 0)); 
1602:  MOVFF  598,59C
1606:  MOVLW  19
1608:  MOVWF  FA9
160A:  MOVFF  598,FA8
160E:  BCF    FA6.6
1610:  BCF    FA6.7
1612:  BSF    FA6.2
1614:  MOVFF  FF2,00
1618:  BCF    FF2.7
161A:  MOVLW  55
161C:  MOVWF  FA7
161E:  MOVLW  AA
1620:  MOVWF  FA7
1622:  BSF    FA6.1
1624:  BTFSC  FA6.1
1626:  BRA    1624
1628:  BCF    FA6.2
162A:  MOVF   00,W
162C:  IORWF  FF2,F
....................  
....................     memcpy(&temp, &KGU, 4); 
162E:  MOVLW  05
1630:  MOVWF  FEA
1632:  MOVLW  98
1634:  MOVWF  FE9
1636:  MOVLW  03
1638:  MOVWF  FE2
163A:  MOVLW  D6
163C:  MOVWF  FE1
163E:  MOVLW  04
1640:  MOVWF  01
1642:  MOVFF  FE6,FEE
1646:  DECFSZ 01,F
1648:  BRA    1642
....................     write_eeprom(EE_KGU + 2, make8(temp, 3)); 
164A:  MOVFF  59B,59C
164E:  MOVLW  1E
1650:  MOVWF  FA9
1652:  MOVFF  59B,FA8
1656:  BCF    FA6.6
1658:  BCF    FA6.7
165A:  BSF    FA6.2
165C:  MOVFF  FF2,00
1660:  BCF    FF2.7
1662:  MOVLW  55
1664:  MOVWF  FA7
1666:  MOVLW  AA
1668:  MOVWF  FA7
166A:  BSF    FA6.1
166C:  BTFSC  FA6.1
166E:  BRA    166C
1670:  BCF    FA6.2
1672:  MOVF   00,W
1674:  IORWF  FF2,F
....................     write_eeprom(EE_KGU + 3, make8(temp, 2)); 
1676:  MOVFF  59A,59C
167A:  MOVLW  1F
167C:  MOVWF  FA9
167E:  MOVFF  59A,FA8
1682:  BCF    FA6.6
1684:  BCF    FA6.7
1686:  BSF    FA6.2
1688:  MOVFF  FF2,00
168C:  BCF    FF2.7
168E:  MOVLW  55
1690:  MOVWF  FA7
1692:  MOVLW  AA
1694:  MOVWF  FA7
1696:  BSF    FA6.1
1698:  BTFSC  FA6.1
169A:  BRA    1698
169C:  BCF    FA6.2
169E:  MOVF   00,W
16A0:  IORWF  FF2,F
....................     write_eeprom(EE_KGU, make8(temp, 1)); 
16A2:  MOVFF  599,59C
16A6:  MOVLW  1C
16A8:  MOVWF  FA9
16AA:  MOVFF  599,FA8
16AE:  BCF    FA6.6
16B0:  BCF    FA6.7
16B2:  BSF    FA6.2
16B4:  MOVFF  FF2,00
16B8:  BCF    FF2.7
16BA:  MOVLW  55
16BC:  MOVWF  FA7
16BE:  MOVLW  AA
16C0:  MOVWF  FA7
16C2:  BSF    FA6.1
16C4:  BTFSC  FA6.1
16C6:  BRA    16C4
16C8:  BCF    FA6.2
16CA:  MOVF   00,W
16CC:  IORWF  FF2,F
....................     write_eeprom(EE_KGU + 1, make8(temp, 0)); 
16CE:  MOVFF  598,59C
16D2:  MOVLW  1D
16D4:  MOVWF  FA9
16D6:  MOVFF  598,FA8
16DA:  BCF    FA6.6
16DC:  BCF    FA6.7
16DE:  BSF    FA6.2
16E0:  MOVFF  FF2,00
16E4:  BCF    FF2.7
16E6:  MOVLW  55
16E8:  MOVWF  FA7
16EA:  MOVLW  AA
16EC:  MOVWF  FA7
16EE:  BSF    FA6.1
16F0:  BTFSC  FA6.1
16F2:  BRA    16F0
16F4:  BCF    FA6.2
16F6:  MOVF   00,W
16F8:  IORWF  FF2,F
....................  
....................     memcpy(&temp, &KGT, 4); 
16FA:  MOVLW  05
16FC:  MOVWF  FEA
16FE:  MOVLW  98
1700:  MOVWF  FE9
1702:  MOVLW  03
1704:  MOVWF  FE2
1706:  MOVLW  D2
1708:  MOVWF  FE1
170A:  MOVLW  04
170C:  MOVWF  01
170E:  MOVFF  FE6,FEE
1712:  DECFSZ 01,F
1714:  BRA    170E
....................     write_eeprom(EE_KST0 + 2, make8(temp, 3)); 
1716:  MOVFF  59B,59C
171A:  MOVLW  22
171C:  MOVWF  FA9
171E:  MOVFF  59B,FA8
1722:  BCF    FA6.6
1724:  BCF    FA6.7
1726:  BSF    FA6.2
1728:  MOVFF  FF2,00
172C:  BCF    FF2.7
172E:  MOVLW  55
1730:  MOVWF  FA7
1732:  MOVLW  AA
1734:  MOVWF  FA7
1736:  BSF    FA6.1
1738:  BTFSC  FA6.1
173A:  BRA    1738
173C:  BCF    FA6.2
173E:  MOVF   00,W
1740:  IORWF  FF2,F
....................     write_eeprom(EE_KST0 + 3, make8(temp, 2)); 
1742:  MOVFF  59A,59C
1746:  MOVLW  23
1748:  MOVWF  FA9
174A:  MOVFF  59A,FA8
174E:  BCF    FA6.6
1750:  BCF    FA6.7
1752:  BSF    FA6.2
1754:  MOVFF  FF2,00
1758:  BCF    FF2.7
175A:  MOVLW  55
175C:  MOVWF  FA7
175E:  MOVLW  AA
1760:  MOVWF  FA7
1762:  BSF    FA6.1
1764:  BTFSC  FA6.1
1766:  BRA    1764
1768:  BCF    FA6.2
176A:  MOVF   00,W
176C:  IORWF  FF2,F
....................     write_eeprom(EE_KST0, make8(temp, 1)); 
176E:  MOVFF  599,59C
1772:  MOVLW  20
1774:  MOVWF  FA9
1776:  MOVFF  599,FA8
177A:  BCF    FA6.6
177C:  BCF    FA6.7
177E:  BSF    FA6.2
1780:  MOVFF  FF2,00
1784:  BCF    FF2.7
1786:  MOVLW  55
1788:  MOVWF  FA7
178A:  MOVLW  AA
178C:  MOVWF  FA7
178E:  BSF    FA6.1
1790:  BTFSC  FA6.1
1792:  BRA    1790
1794:  BCF    FA6.2
1796:  MOVF   00,W
1798:  IORWF  FF2,F
....................     write_eeprom(EE_KST0 + 1, make8(temp, 0)); 
179A:  MOVFF  598,59C
179E:  MOVLW  21
17A0:  MOVWF  FA9
17A2:  MOVFF  598,FA8
17A6:  BCF    FA6.6
17A8:  BCF    FA6.7
17AA:  BSF    FA6.2
17AC:  MOVFF  FF2,00
17B0:  BCF    FF2.7
17B2:  MOVLW  55
17B4:  MOVWF  FA7
17B6:  MOVLW  AA
17B8:  MOVWF  FA7
17BA:  BSF    FA6.1
17BC:  BTFSC  FA6.1
17BE:  BRA    17BC
17C0:  BCF    FA6.2
17C2:  MOVF   00,W
17C4:  IORWF  FF2,F
....................  
....................     memcpy(&temp, &KGT, 4); 
17C6:  MOVLW  05
17C8:  MOVWF  FEA
17CA:  MOVLW  98
17CC:  MOVWF  FE9
17CE:  MOVLW  03
17D0:  MOVWF  FE2
17D2:  MOVLW  D2
17D4:  MOVWF  FE1
17D6:  MOVLW  04
17D8:  MOVWF  01
17DA:  MOVFF  FE6,FEE
17DE:  DECFSZ 01,F
17E0:  BRA    17DA
....................     write_eeprom(EE_KST1 + 2, make8(temp, 3)); 
17E2:  MOVFF  59B,59C
17E6:  MOVLW  26
17E8:  MOVWF  FA9
17EA:  MOVFF  59B,FA8
17EE:  BCF    FA6.6
17F0:  BCF    FA6.7
17F2:  BSF    FA6.2
17F4:  MOVFF  FF2,00
17F8:  BCF    FF2.7
17FA:  MOVLW  55
17FC:  MOVWF  FA7
17FE:  MOVLW  AA
1800:  MOVWF  FA7
1802:  BSF    FA6.1
1804:  BTFSC  FA6.1
1806:  BRA    1804
1808:  BCF    FA6.2
180A:  MOVF   00,W
180C:  IORWF  FF2,F
....................     write_eeprom(EE_KST1 + 3, make8(temp, 2)); 
180E:  MOVFF  59A,59C
1812:  MOVLW  27
1814:  MOVWF  FA9
1816:  MOVFF  59A,FA8
181A:  BCF    FA6.6
181C:  BCF    FA6.7
181E:  BSF    FA6.2
1820:  MOVFF  FF2,00
1824:  BCF    FF2.7
1826:  MOVLW  55
1828:  MOVWF  FA7
182A:  MOVLW  AA
182C:  MOVWF  FA7
182E:  BSF    FA6.1
1830:  BTFSC  FA6.1
1832:  BRA    1830
1834:  BCF    FA6.2
1836:  MOVF   00,W
1838:  IORWF  FF2,F
....................     write_eeprom(EE_KST1, make8(temp, 1)); 
183A:  MOVFF  599,59C
183E:  MOVLW  24
1840:  MOVWF  FA9
1842:  MOVFF  599,FA8
1846:  BCF    FA6.6
1848:  BCF    FA6.7
184A:  BSF    FA6.2
184C:  MOVFF  FF2,00
1850:  BCF    FF2.7
1852:  MOVLW  55
1854:  MOVWF  FA7
1856:  MOVLW  AA
1858:  MOVWF  FA7
185A:  BSF    FA6.1
185C:  BTFSC  FA6.1
185E:  BRA    185C
1860:  BCF    FA6.2
1862:  MOVF   00,W
1864:  IORWF  FF2,F
....................     write_eeprom(EE_KST1 + 1, make8(temp, 0)); 
1866:  MOVFF  598,59C
186A:  MOVLW  25
186C:  MOVWF  FA9
186E:  MOVFF  598,FA8
1872:  BCF    FA6.6
1874:  BCF    FA6.7
1876:  BSF    FA6.2
1878:  MOVFF  FF2,00
187C:  BCF    FF2.7
187E:  MOVLW  55
1880:  MOVWF  FA7
1882:  MOVLW  AA
1884:  MOVWF  FA7
1886:  BSF    FA6.1
1888:  BTFSC  FA6.1
188A:  BRA    1888
188C:  BCF    FA6.2
188E:  MOVF   00,W
1890:  IORWF  FF2,F
....................  
....................     setup_wdt(WDT_ON); 
1892:  BSF    FD1.0
....................     } 
1894:  MOVLB  0
1896:  GOTO   1BEA (RETURN)
....................  
.................... //temperature measuring 
.................... void Termometer(void) 
....................     { 
....................     signed int16 
....................     temp; 
....................  
....................     //generator 
....................     set_adc_channel(2);	//select generator channel 
*
26C2:  MOVLW  08
26C4:  MOVWF  01
26C6:  MOVF   FC2,W
26C8:  ANDLW  C3
26CA:  IORWF  01,W
26CC:  MOVWF  FC2
....................     delay_us(10);		//small wait 
26CE:  CLRWDT
26D0:  MOVLW  1A
26D2:  MOVWF  00
26D4:  DECFSZ 00,F
26D6:  BRA    26D4
....................     temp = read_adc();	//read value 
26D8:  BSF    FC2.1
26DA:  BTFSC  FC2.1
26DC:  BRA    26DA
26DE:  MOVFF  FC4,57D
26E2:  MOVLB  5
26E4:  MOVFF  FC3,57C
....................     T_GEN=(signed int16)((temp-205)*24.414); 
26E8:  MOVLW  CD
26EA:  SUBWF  x7C,W
26EC:  MOVWF  x7E
26EE:  MOVLW  00
26F0:  SUBWFB x7D,W
26F2:  MOVWF  x7F
26F4:  MOVWF  x81
26F6:  MOVFF  57E,580
26FA:  MOVLB  0
26FC:  RCALL  2540
26FE:  MOVFF  03,584
2702:  MOVFF  02,583
2706:  MOVFF  01,582
270A:  MOVFF  00,581
270E:  MOVLW  DF
2710:  MOVLB  5
2712:  MOVWF  x88
2714:  MOVLW  4F
2716:  MOVWF  x87
2718:  MOVLW  43
271A:  MOVWF  x86
271C:  MOVLW  83
271E:  MOVWF  x85
2720:  MOVLB  0
2722:  RCALL  2590
2724:  MOVFF  03,581
2728:  MOVFF  02,580
272C:  MOVFF  01,57F
2730:  MOVFF  00,57E
2734:  RCALL  2686
2736:  MOVFF  02,3C9
273A:  MOVFF  01,3C8
....................  
....................     //t0 
....................     set_adc_channel(5);	//select generator channel 
273E:  MOVLW  14
2740:  MOVWF  01
2742:  MOVF   FC2,W
2744:  ANDLW  C3
2746:  IORWF  01,W
2748:  MOVWF  FC2
....................     delay_us(10);		//small wait 
274A:  CLRWDT
274C:  MOVLW  1A
274E:  MOVWF  00
2750:  DECFSZ 00,F
2752:  BRA    2750
....................     temp = read_adc();	//read value 
2754:  BSF    FC2.1
2756:  BTFSC  FC2.1
2758:  BRA    2756
275A:  MOVFF  FC4,57D
275E:  MOVLB  5
2760:  MOVFF  FC3,57C
....................     T_SR0=(signed int16)((temp-205)*24.414); 
2764:  MOVLW  CD
2766:  SUBWF  x7C,W
2768:  MOVWF  x7E
276A:  MOVLW  00
276C:  SUBWFB x7D,W
276E:  MOVWF  x7F
2770:  MOVWF  x81
2772:  MOVFF  57E,580
2776:  MOVLB  0
2778:  RCALL  2540
277A:  MOVFF  03,584
277E:  MOVFF  02,583
2782:  MOVFF  01,582
2786:  MOVFF  00,581
278A:  MOVLW  DF
278C:  MOVLB  5
278E:  MOVWF  x88
2790:  MOVLW  4F
2792:  MOVWF  x87
2794:  MOVLW  43
2796:  MOVWF  x86
2798:  MOVLW  83
279A:  MOVWF  x85
279C:  MOVLB  0
279E:  RCALL  2590
27A0:  MOVFF  03,581
27A4:  MOVFF  02,580
27A8:  MOVFF  01,57F
27AC:  MOVFF  00,57E
27B0:  RCALL  2686
27B2:  MOVFF  02,3B3
27B6:  MOVFF  01,3B2
....................  
....................     //t1 
....................     set_adc_channel(4);	//select generator channel 
27BA:  MOVLW  10
27BC:  MOVWF  01
27BE:  MOVF   FC2,W
27C0:  ANDLW  C3
27C2:  IORWF  01,W
27C4:  MOVWF  FC2
....................     delay_us(10);		//small wait 
27C6:  CLRWDT
27C8:  MOVLW  1A
27CA:  MOVWF  00
27CC:  DECFSZ 00,F
27CE:  BRA    27CC
....................     temp = read_adc();	//read value 
27D0:  BSF    FC2.1
27D2:  BTFSC  FC2.1
27D4:  BRA    27D2
27D6:  MOVFF  FC4,57D
27DA:  MOVLB  5
27DC:  MOVFF  FC3,57C
.................... T_SR1=(signed int16)((temp-205)*24.414); 
27E0:  MOVLW  CD
27E2:  SUBWF  x7C,W
27E4:  MOVWF  x7E
27E6:  MOVLW  00
27E8:  SUBWFB x7D,W
27EA:  MOVWF  x7F
27EC:  MOVWF  x81
27EE:  MOVFF  57E,580
27F2:  MOVLB  0
27F4:  RCALL  2540
27F6:  MOVFF  03,584
27FA:  MOVFF  02,583
27FE:  MOVFF  01,582
2802:  MOVFF  00,581
2806:  MOVLW  DF
2808:  MOVLB  5
280A:  MOVWF  x88
280C:  MOVLW  4F
280E:  MOVWF  x87
2810:  MOVLW  43
2812:  MOVWF  x86
2814:  MOVLW  83
2816:  MOVWF  x85
2818:  MOVLB  0
281A:  RCALL  2590
281C:  MOVFF  03,581
2820:  MOVFF  02,580
2824:  MOVFF  01,57F
2828:  MOVFF  00,57E
282C:  RCALL  2686
282E:  MOVFF  02,3BF
2832:  MOVFF  01,3BE
.................... } 
2836:  RETLW  00
....................  
.................... //DAC setting 
.................... void SetSawDac(int16 level) { 
.................... int16 course; 
.................... //course part 
.................... output_low(DAC1);			//select course DAC 
*
2AC4:  BCF    F95.1
2AC6:  BCF    F8C.1
.................... spi_write((make8(course, 1) & 0x0f) | 0x10);	//send high part 
2AC8:  MOVLB  5
2ACA:  MOVF   x7F,W
2ACC:  ANDLW  0F
2ACE:  IORLW  10
2AD0:  MOVWF  x80
2AD2:  MOVF   FC9,W
2AD4:  MOVFF  580,FC9
2AD8:  RRCF   FC7,W
2ADA:  BNC   2AD8
.................... spi_write(make8(course, 0));		//send low part 
2ADC:  MOVFF  57E,580
2AE0:  MOVF   FC9,W
2AE2:  MOVFF  57E,FC9
2AE6:  RRCF   FC7,W
2AE8:  BNC   2AE6
.................... output_high(DAC1);			//deselect 
2AEA:  BCF    F95.1
2AEC:  BSF    F8C.1
.................... output_low(LDAC);			//send DAC 
2AEE:  BCF    F92.7
2AF0:  BCF    F89.7
.................... output_high(LDAC);			//strobe 
2AF2:  BCF    F92.7
2AF4:  BSF    F89.7
.................... } 
2AF6:  MOVLB  0
2AF8:  RETLW  00
....................  
.................... //KU setting 
.................... void SetKU0(int16 coeff) 
.................... { 
.................... int16 dacval; 
.................... setup_wdt(WDT_OFF); 
*
2838:  BCF    FD1.0
.................... if ((coeff < 1) & (coeff > 6)) 
283A:  MOVLB  5
283C:  MOVF   x7C,F
283E:  BNZ   2844
2840:  MOVF   x7D,F
2842:  BZ    2848
2844:  MOVLW  00
2846:  BRA    284A
2848:  MOVLW  01
284A:  MOVWF  x80
284C:  MOVF   x7D,F
284E:  BNZ   285A
2850:  MOVF   x7C,W
2852:  SUBLW  06
2854:  BNC   285A
2856:  MOVLW  00
2858:  BRA    285C
285A:  MOVLW  01
285C:  ANDWF  x80,W
285E:  BZ    2866
....................     coeff = 1; 
2860:  CLRF   x7D
2862:  MOVLW  01
2864:  MOVWF  x7C
.................... dacval = (0x1fff >> coeff) | 0x7000; 
2866:  MOVLW  1F
2868:  MOVWF  x81
286A:  MOVLW  FF
286C:  MOVWF  x80
286E:  MOVF   x7C,W
2870:  MOVWF  00
2872:  BZ    287E
2874:  BCF    FD8.0
2876:  RRCF   x81,F
2878:  RRCF   x80,F
287A:  DECFSZ 00,F
287C:  BRA    2874
287E:  MOVF   x80,W
2880:  MOVWF  x7E
2882:  MOVF   x81,W
2884:  IORLW  70
2886:  MOVWF  x7F
.................... output_low(KU0);				//select KU0 DAC 
2888:  BCF    F95.5
288A:  BCF    F8C.5
.................... spi_write(make8(dacval, 1));		//send high part 
288C:  MOVFF  57F,580
2890:  MOVF   FC9,W
2892:  MOVFF  57F,FC9
2896:  RRCF   FC7,W
2898:  BNC   2896
.................... spi_write(make8(dacval, 0));		//send low part 
289A:  MOVFF  57E,580
289E:  MOVF   FC9,W
28A0:  MOVFF  57E,FC9
28A4:  RRCF   FC7,W
28A6:  BNC   28A4
.................... output_high(KU0);				//deselect 
28A8:  BCF    F95.5
28AA:  BSF    F8C.5
.................... setup_wdt(WDT_ON); 
28AC:  BSF    FD1.0
.................... } 
28AE:  MOVLB  0
28B0:  GOTO   3882 (RETURN)
....................  
.................... void SetKU1(int16 coeff) 
.................... { 
.................... int16 dacval; 
.................... setup_wdt(WDT_OFF); 
28B4:  BCF    FD1.0
.................... if ((coeff < 1) & (coeff > 6)) 
28B6:  MOVLB  5
28B8:  MOVF   x7C,F
28BA:  BNZ   28C0
28BC:  MOVF   x7D,F
28BE:  BZ    28C4
28C0:  MOVLW  00
28C2:  BRA    28C6
28C4:  MOVLW  01
28C6:  MOVWF  x80
28C8:  MOVF   x7D,F
28CA:  BNZ   28D6
28CC:  MOVF   x7C,W
28CE:  SUBLW  06
28D0:  BNC   28D6
28D2:  MOVLW  00
28D4:  BRA    28D8
28D6:  MOVLW  01
28D8:  ANDWF  x80,W
28DA:  BZ    28E2
....................     coeff = 1; 
28DC:  CLRF   x7D
28DE:  MOVLW  01
28E0:  MOVWF  x7C
.................... dacval = (0x1fff >> coeff) | 0x7000; 
28E2:  MOVLW  1F
28E4:  MOVWF  x81
28E6:  MOVLW  FF
28E8:  MOVWF  x80
28EA:  MOVF   x7C,W
28EC:  MOVWF  00
28EE:  BZ    28FA
28F0:  BCF    FD8.0
28F2:  RRCF   x81,F
28F4:  RRCF   x80,F
28F6:  DECFSZ 00,F
28F8:  BRA    28F0
28FA:  MOVF   x80,W
28FC:  MOVWF  x7E
28FE:  MOVF   x81,W
2900:  IORLW  70
2902:  MOVWF  x7F
.................... output_low(KU1);				//select KU0 DAC 
2904:  BCF    F95.4
2906:  BCF    F8C.4
.................... spi_write(make8(dacval, 1));		//send high part 
2908:  MOVFF  57F,580
290C:  MOVF   FC9,W
290E:  MOVFF  57F,FC9
2912:  RRCF   FC7,W
2914:  BNC   2912
.................... spi_write(make8(dacval, 0));		//send low part 
2916:  MOVFF  57E,580
291A:  MOVF   FC9,W
291C:  MOVFF  57E,FC9
2920:  RRCF   FC7,W
2922:  BNC   2920
.................... output_high(KU1);				//deselect 
2924:  BCF    F95.4
2926:  BSF    F8C.4
.................... setup_wdt(WDT_ON); 
2928:  BSF    FD1.0
.................... } 
292A:  MOVLB  0
292C:  GOTO   388E (RETURN)
....................  
.................... //ISR 
.................... #include	"modbus_isr.h" 
.................... //modbus realization 
.................... // 
.................... //values 
.................... enum modbus_exceptions{ 
.................... 	illegal_function=1, 
.................... 	illegal_data_address=2, 
.................... 	illegal_data_value=3, 
.................... 	slave_device_failure=4, 
.................... 	acknowledge=5, 
.................... 	slave_device_busy=6 
.................... }; 
.................... static 	int8	MB_Buffer[256];		//incoming buffer 
.................... static	int8	MB_Length=0;			//message length 
.................... static	int16	ValidReq;			//valid req count 
.................... static	int16	CRCReq;				//CRC error count 
.................... static	int16	ExcReq;				//ecxcept error count 
.................... // 
.................... //CRC table 
.................... /* Table of CRC values for high–order byte */ 
.................... const int8 modbus_auchCRCHi[] = { 
....................    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 
....................    0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 
....................    0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 
....................    0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 
....................    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 
....................    0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 
....................    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 
....................    0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 
....................    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 
....................    0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 
....................    0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 
....................    0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 
....................    0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 
....................    0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 
....................    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 
....................    0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 
....................    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 
....................    0x40 
.................... }; 
....................  
.................... /* Table of CRC values for low–order byte */ 
.................... const int8 modbus_auchCRCLo[] = { 
....................    0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4, 
....................    0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09, 
....................    0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 
....................    0x1D, 0x1C, 0xDC, 0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3, 
....................    0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7, 
....................    0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A, 
....................    0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 
....................    0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26, 
....................    0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2, 
....................    0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F, 
....................    0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB, 
....................    0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5, 
....................    0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91, 
....................    0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C, 
....................    0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88, 
....................    0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C, 
....................    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80, 
....................    0x40 
.................... }; 
.................... //procedures 
.................... // 
.................... // 
.................... //UART preset 
.................... #USE RS232(baud=9600, xmit=TX, rcv=RX, enable=DIR, parity=N) 
*
18CC:  BCF    F92.6
18CE:  BSF    F89.6
18D0:  BTFSS  F9E.4
18D2:  BRA    18D0
18D4:  MOVLB  5
18D6:  MOVFF  599,FAD
18DA:  NOP   
18DC:  BCF    F92.6
18DE:  BSF    F89.6
18E0:  BTFSS  FAC.1
18E2:  BRA    18E0
18E4:  BCF    F92.6
18E6:  BCF    F89.6
18E8:  MOVLB  0
18EA:  GOTO   1E64 (RETURN)
.................... void	RsInit(void){ 
.................... 	MB_Length=0;	//set clear buffer 
*
23FC:  MOVLB  5
23FE:  CLRF   x58
.................... 	//select rate 
.................... 	switch(Speed){ 
2400:  MOVLB  3
2402:  MOVF   xDC,W
2404:  MOVWF  00
2406:  MOVF   xDD,W
2408:  MOVWF  03
240A:  MOVLW  04
240C:  SUBWF  03,W
240E:  BNZ   241A
2410:  MOVLW  B0
2412:  SUBWF  00,W
2414:  MOVLB  0
2416:  BZ    248A
2418:  MOVLB  3
241A:  MOVLW  07
241C:  SUBWF  03,W
241E:  BNZ   242A
2420:  MOVLW  08
2422:  SUBWF  00,W
2424:  MOVLB  0
2426:  BZ    249E
2428:  MOVLB  3
242A:  MOVLW  09
242C:  SUBWF  03,W
242E:  BNZ   243A
2430:  MOVLW  60
2432:  SUBWF  00,W
2434:  MOVLB  0
2436:  BZ    24B2
2438:  MOVLB  3
243A:  MOVLW  12
243C:  SUBWF  03,W
243E:  BNZ   244A
2440:  MOVLW  C0
2442:  SUBWF  00,W
2444:  MOVLB  0
2446:  BZ    24C6
2448:  MOVLB  3
244A:  MOVLW  1C
244C:  SUBWF  03,W
244E:  BNZ   245A
2450:  MOVLW  20
2452:  SUBWF  00,W
2454:  MOVLB  0
2456:  BZ    24DA
2458:  MOVLB  3
245A:  MOVLW  25
245C:  SUBWF  03,W
245E:  BNZ   246A
2460:  MOVLW  80
2462:  SUBWF  00,W
2464:  MOVLB  0
2466:  BZ    24EE
2468:  MOVLB  3
246A:  MOVLW  38
246C:  SUBWF  03,W
246E:  BNZ   247A
2470:  MOVLW  40
2472:  SUBWF  00,W
2474:  MOVLB  0
2476:  BZ    2502
2478:  MOVLB  3
247A:  MOVLW  4B
247C:  SUBWF  03,W
247E:  BNZ   2488
2480:  MOVF   00,F
2482:  MOVLB  0
2484:  BZ    2512
2486:  MOVLB  3
2488:  BRA    2528
.................... 		case	1200:	setup_uart(1200); 
248A:  BSF    FB8.3
248C:  MOVLW  0A
248E:  MOVWF  FAF
2490:  MOVLW  1A
2492:  MOVWF  FB0
2494:  MOVLW  A6
2496:  MOVWF  FAC
2498:  NOP   
249A:  NOP   
.................... 						break; 
249C:  BRA    253A
.................... 		case	1800:	setup_uart(1800); 
249E:  BSF    FB8.3
24A0:  MOVLW  5B
24A2:  MOVWF  FAF
24A4:  MOVLW  11
24A6:  MOVWF  FB0
24A8:  MOVLW  A6
24AA:  MOVWF  FAC
24AC:  NOP   
24AE:  NOP   
.................... 						break; 
24B0:  BRA    253A
.................... 		case	2400:	setup_uart(2400); 
24B2:  BSF    FB8.3
24B4:  MOVLW  04
24B6:  MOVWF  FAF
24B8:  MOVLW  0D
24BA:  MOVWF  FB0
24BC:  MOVLW  A6
24BE:  MOVWF  FAC
24C0:  NOP   
24C2:  NOP   
.................... 						break; 
24C4:  BRA    253A
.................... 		case	4800:	setup_uart(4800); 
24C6:  BSF    FB8.3
24C8:  MOVLW  82
24CA:  MOVWF  FAF
24CC:  MOVLW  06
24CE:  MOVWF  FB0
24D0:  MOVLW  A6
24D2:  MOVWF  FAC
24D4:  NOP   
24D6:  NOP   
.................... 						break; 
24D8:  BRA    253A
.................... 		case	7200:	setup_uart(7200); 
24DA:  BSF    FB8.3
24DC:  MOVLW  56
24DE:  MOVWF  FAF
24E0:  MOVLW  04
24E2:  MOVWF  FB0
24E4:  MOVLW  A6
24E6:  MOVWF  FAC
24E8:  NOP   
24EA:  NOP   
.................... 						break; 
24EC:  BRA    253A
.................... 		case	9600:	setup_uart(9600); 
24EE:  BSF    FB8.3
24F0:  MOVLW  40
24F2:  MOVWF  FAF
24F4:  MOVLW  03
24F6:  MOVWF  FB0
24F8:  MOVLW  A6
24FA:  MOVWF  FAC
24FC:  NOP   
24FE:  NOP   
.................... 						break; 
2500:  BRA    253A
.................... 		case	14400:	setup_uart(14400); 
2502:  BCF    FB8.3
2504:  MOVLW  8A
2506:  MOVWF  FAF
2508:  MOVLW  A6
250A:  MOVWF  FAC
250C:  NOP   
250E:  NOP   
.................... 						break; 
2510:  BRA    253A
.................... 		case	19200:	setup_uart(19200); 
2512:  BSF    FB8.3
2514:  MOVLW  A0
2516:  MOVWF  FAF
2518:  MOVLW  01
251A:  MOVWF  FB0
251C:  MOVLW  A6
251E:  MOVWF  FAC
2520:  NOP   
2522:  NOP   
.................... 						break; 
2524:  BRA    253A
2526:  MOVLB  3
.................... 		default:		setup_uart(9600); 
2528:  BSF    FB8.3
252A:  MOVLW  40
252C:  MOVWF  FAF
252E:  MOVLW  03
2530:  MOVWF  FB0
2532:  MOVLW  A6
2534:  MOVWF  FAC
2536:  NOP   
2538:  NOP   
253A:  MOVLB  0
.................... 	};	 
.................... //	dmy=getc(); 
.................... } 
253C:  GOTO   383E (RETURN)
.................... // 
....................  
.................... //usart settings 
....................  
.................... //usart interrupt vector - packet interception 
.................... #INT_RDA 
.................... void	Incoming(void){ 
.................... 	MB_Buffer[MB_Length]=getc();	//read stream 
*
036E:  CLRF   03
0370:  MOVLB  5
0372:  MOVF   x58,W
0374:  ADDLW  58
0376:  MOVWF  FE9
0378:  MOVLW  04
037A:  ADDWFC 03,W
037C:  MOVWF  FEA
037E:  BTFSS  F9E.5
0380:  BRA    037E
0382:  MOVFF  FAE,FEF
.................... 	MB_Length++;					//set new point 
0386:  INCF   x58,F
.................... 	output_low(STAT); 
0388:  BCF    F94.0
038A:  BCF    F8B.0
.................... 	set_timer1((int16)(0xffff-35000000/Speed));	//set wait time 
038C:  BCF    FD8.1
038E:  MOVLW  02
0390:  MOVWF  x94
0392:  MOVLW  16
0394:  MOVWF  x93
0396:  MOVLW  0E
0398:  MOVWF  x92
039A:  MOVLW  C0
039C:  MOVWF  x91
039E:  CLRF   x98
03A0:  CLRF   x97
03A2:  MOVFF  3DD,596
03A6:  MOVFF  3DC,595
03AA:  MOVLB  0
03AC:  RCALL  02DA
03AE:  MOVLW  FF
03B0:  BSF    FD8.0
03B2:  SUBFWB 00,F
03B4:  SUBFWB 01,F
03B6:  MOVLW  00
03B8:  SUBFWB 02,F
03BA:  SUBFWB 03,F
03BC:  MOVFF  01,FCF
03C0:  MOVFF  00,FCE
.................... 	clear_interrupt(INT_TIMER1);		//clear timer 1 int 
03C4:  BCF    F9E.0
.................... 	enable_interrupts(INT_TIMER1);	//enable timer 1 interrupt 
03C6:  BSF    F9D.0
.................... //	clear_interrupt(int_rda);		//clear interrupt flag 
.................... } 
.................... // 
.................... //calculate CRC16 : 1st - buffer, 2d - length of data 
03C8:  BCF    F9E.5
03CA:  GOTO   006C
.................... int16	ModbusCRC(int8 * buf, int8 len){ 
03CE:  MOVLW  FF
03D0:  MOVLB  5
03D2:  MOVWF  x9E
03D4:  MOVWF  x9F
.................... 	int8	i,index; 
.................... 	int8	CRC_Low=0xff,CRC_High=0xff; 
.................... 	// 
.................... 	for(i=0; i<len; i++){ 
03D6:  CLRF   x9C
03D8:  MOVF   x9B,W
03DA:  SUBWF  x9C,W
03DC:  BC    0416
.................... 		index=CRC_High^buf[i]; 
03DE:  CLRF   03
03E0:  MOVF   x9C,W
03E2:  ADDWF  x99,W
03E4:  MOVWF  FE9
03E6:  MOVF   x9A,W
03E8:  ADDWFC 03,W
03EA:  MOVWF  FEA
03EC:  MOVF   FEF,W
03EE:  XORWF  x9F,W
03F0:  MOVWF  x9D
.................... 		CRC_High=CRC_Low^modbus_auchCRCHi[index]; 
03F2:  CLRF   03
03F4:  MOVF   x9D,W
03F6:  MOVLB  0
03F8:  RCALL  00BA
03FA:  MOVWF  01
03FC:  MOVLB  5
03FE:  MOVF   x9E,W
0400:  XORWF  01,W
0402:  MOVWF  x9F
.................... 		CRC_Low=modbus_auchCRCLo[index]; 
0404:  CLRF   03
0406:  MOVF   x9D,W
0408:  MOVLB  0
040A:  RCALL  01CA
040C:  MOVFF  FE8,59E
.................... 	} 
0410:  MOVLB  5
0412:  INCF   x9C,F
0414:  BRA    03D8
.................... 	// 
.................... 	return	make16(CRC_High,CRC_Low); 
0416:  MOVFF  59F,03
041A:  MOVFF  59E,01
041E:  MOVFF  59F,02
.................... } 
0422:  MOVLB  0
0424:  RETLW  00
.................... //read registers 
.................... static int16	CRCr,CRCc; 
.................... static int8	j; 
.................... // 
....................  
.................... //add register data 
.................... void	AddRegData(int8 regist){ 
.................... 	int32	flcopy; 
.................... 	restart_wdt(); 
0426:  CLRWDT
.................... 			switch(regist){ 
0428:  MOVLB  5
042A:  MOVF   x98,W
042C:  XORLW  00
042E:  MOVLB  0
0430:  BZ    04E2
0432:  XORLW  01
0434:  BTFSC  FD8.2
0436:  BRA    051A
0438:  XORLW  03
043A:  BTFSC  FD8.2
043C:  BRA    0552
043E:  XORLW  01
0440:  BTFSC  FD8.2
0442:  BRA    058A
0444:  XORLW  07
0446:  BTFSC  FD8.2
0448:  BRA    05B6
044A:  XORLW  01
044C:  BTFSC  FD8.2
044E:  BRA    05EE
0450:  XORLW  03
0452:  BTFSC  FD8.2
0454:  BRA    061A
0456:  XORLW  01
0458:  BTFSC  FD8.2
045A:  BRA    0652
045C:  XORLW  0F
045E:  BTFSC  FD8.2
0460:  BRA    068A
0462:  XORLW  01
0464:  BTFSC  FD8.2
0466:  BRA    06C2
0468:  XORLW  03
046A:  BTFSC  FD8.2
046C:  BRA    06EE
046E:  XORLW  01
0470:  BTFSC  FD8.2
0472:  BRA    071A
0474:  XORLW  07
0476:  BTFSC  FD8.2
0478:  BRA    0752
047A:  XORLW  01
047C:  BTFSC  FD8.2
047E:  BRA    078A
0480:  XORLW  03
0482:  BTFSC  FD8.2
0484:  BRA    07C2
0486:  XORLW  01
0488:  BTFSC  FD8.2
048A:  BRA    07FA
048C:  XORLW  1F
048E:  BTFSC  FD8.2
0490:  BRA    0832
0492:  XORLW  01
0494:  BTFSC  FD8.2
0496:  BRA    086A
0498:  XORLW  03
049A:  BTFSC  FD8.2
049C:  BRA    08A2
049E:  XORLW  01
04A0:  BTFSC  FD8.2
04A2:  BRA    08DA
04A4:  XORLW  07
04A6:  BTFSC  FD8.2
04A8:  BRA    0912
04AA:  XORLW  01
04AC:  BTFSC  FD8.2
04AE:  BRA    0942
04B0:  XORLW  03
04B2:  BTFSC  FD8.2
04B4:  BRA    0972
04B6:  XORLW  01
04B8:  BTFSC  FD8.2
04BA:  BRA    09A2
04BC:  XORLW  0F
04BE:  BTFSC  FD8.2
04C0:  BRA    0A16
04C2:  XORLW  01
04C4:  BTFSC  FD8.2
04C6:  BRA    0A8A
04C8:  XORLW  03
04CA:  BTFSC  FD8.2
04CC:  BRA    0AFE
04CE:  XORLW  01
04D0:  BTFSC  FD8.2
04D2:  BRA    0B4E
04D4:  XORLW  07
04D6:  BTFSC  FD8.2
04D8:  BRA    0B86
04DA:  XORLW  01
04DC:  BTFSC  FD8.2
04DE:  BRA    0BBE
04E0:  BRA    0BF6
.................... 				case 0x00:	//gamma 0					 
.................... 					MB_Buffer[j]=make8(Gamma0,1);	//high part 
04E2:  CLRF   03
04E4:  MOVLB  5
04E6:  MOVF   x63,W
04E8:  ADDLW  58
04EA:  MOVWF  FE9
04EC:  MOVLW  04
04EE:  ADDWFC 03,W
04F0:  MOVWF  FEA
04F2:  MOVLB  3
04F4:  MOVFF  3A9,FEF
.................... 					j++; 
04F8:  MOVLB  5
04FA:  INCF   x63,F
.................... 					MB_Buffer[j]=make8(Gamma0,0);	//low part 
04FC:  CLRF   03
04FE:  MOVF   x63,W
0500:  ADDLW  58
0502:  MOVWF  FE9
0504:  MOVLW  04
0506:  ADDWFC 03,W
0508:  MOVWF  FEA
050A:  MOVLB  3
050C:  MOVFF  3A8,FEF
.................... 					j++; 
0510:  MOVLB  5
0512:  INCF   x63,F
.................... 					MB_Length+=2; 
0514:  MOVLW  02
0516:  ADDWF  x58,F
.................... 					break; 
0518:  BRA    0C12
.................... 				case 0x01:	//gamma1 
.................... 					MB_Buffer[j]=make8(Gamma1,1);	//high part 
051A:  CLRF   03
051C:  MOVLB  5
051E:  MOVF   x63,W
0520:  ADDLW  58
0522:  MOVWF  FE9
0524:  MOVLW  04
0526:  ADDWFC 03,W
0528:  MOVWF  FEA
052A:  MOVLB  3
052C:  MOVFF  3B5,FEF
.................... 					j++; 
0530:  MOVLB  5
0532:  INCF   x63,F
.................... 					MB_Buffer[j]=make8(Gamma1,0);	//low part 
0534:  CLRF   03
0536:  MOVF   x63,W
0538:  ADDLW  58
053A:  MOVWF  FE9
053C:  MOVLW  04
053E:  ADDWFC 03,W
0540:  MOVWF  FEA
0542:  MOVLB  3
0544:  MOVFF  3B4,FEF
.................... 					j++; 
0548:  MOVLB  5
054A:  INCF   x63,F
.................... 					MB_Length+=2; 
054C:  MOVLW  02
054E:  ADDWF  x58,F
.................... 					break; 
0550:  BRA    0C12
.................... 				case 0x02:	//pulse width 1/2 amp				 
.................... 					MB_Buffer[j]=make8(PulseWdt0,1);	//high part 
0552:  CLRF   03
0554:  MOVLB  5
0556:  MOVF   x63,W
0558:  ADDLW  58
055A:  MOVWF  FE9
055C:  MOVLW  04
055E:  ADDWFC 03,W
0560:  MOVWF  FEA
0562:  MOVLB  3
0564:  MOVFF  3A7,FEF
.................... 					j++; 
0568:  MOVLB  5
056A:  INCF   x63,F
.................... 					MB_Buffer[j]=make8(PulseWdt0,0);	//low part 
056C:  CLRF   03
056E:  MOVF   x63,W
0570:  ADDLW  58
0572:  MOVWF  FE9
0574:  MOVLW  04
0576:  ADDWFC 03,W
0578:  MOVWF  FEA
057A:  MOVLB  3
057C:  MOVFF  3A6,FEF
.................... 					j++; 
0580:  MOVLB  5
0582:  INCF   x63,F
.................... 					MB_Length+=2; 
0584:  MOVLW  02
0586:  ADDWF  x58,F
.................... 					break; 
0588:  BRA    0C12
.................... 				case 0x03:	//pulse width 1/2 amp 
.................... 					MB_Buffer[j]=0;	//high part 
058A:  CLRF   03
058C:  MOVLB  5
058E:  MOVF   x63,W
0590:  ADDLW  58
0592:  MOVWF  FE9
0594:  MOVLW  04
0596:  ADDWFC 03,W
0598:  MOVWF  FEA
059A:  CLRF   FEF
.................... 					j++; 
059C:  INCF   x63,F
.................... 					MB_Buffer[j]=0;	//low part 
059E:  CLRF   03
05A0:  MOVF   x63,W
05A2:  ADDLW  58
05A4:  MOVWF  FE9
05A6:  MOVLW  04
05A8:  ADDWFC 03,W
05AA:  MOVWF  FEA
05AC:  CLRF   FEF
.................... 					j++; 
05AE:  INCF   x63,F
.................... 					MB_Length+=2; 
05B0:  MOVLW  02
05B2:  ADDWF  x58,F
.................... 					break; 
05B4:  BRA    0C12
.................... 				case 0x04:	//pulse amplitude			 
.................... 					MB_Buffer[j]=make8(Amplitude0,1);	//high part 
05B6:  CLRF   03
05B8:  MOVLB  5
05BA:  MOVF   x63,W
05BC:  ADDLW  58
05BE:  MOVWF  FE9
05C0:  MOVLW  04
05C2:  ADDWFC 03,W
05C4:  MOVWF  FEA
05C6:  MOVLB  3
05C8:  MOVFF  3A5,FEF
.................... 					j++; 
05CC:  MOVLB  5
05CE:  INCF   x63,F
.................... 					MB_Buffer[j]=make8(Amplitude0,0);	//low part 
05D0:  CLRF   03
05D2:  MOVF   x63,W
05D4:  ADDLW  58
05D6:  MOVWF  FE9
05D8:  MOVLW  04
05DA:  ADDWFC 03,W
05DC:  MOVWF  FEA
05DE:  MOVLB  3
05E0:  MOVFF  3A4,FEF
.................... 					j++; 
05E4:  MOVLB  5
05E6:  INCF   x63,F
.................... 					MB_Length+=2; 
05E8:  MOVLW  02
05EA:  ADDWF  x58,F
.................... 					break; 
05EC:  BRA    0C12
.................... 				case 0x05:	//pulse amplitude				 
.................... 					MB_Buffer[j]=0;	//high part 
05EE:  CLRF   03
05F0:  MOVLB  5
05F2:  MOVF   x63,W
05F4:  ADDLW  58
05F6:  MOVWF  FE9
05F8:  MOVLW  04
05FA:  ADDWFC 03,W
05FC:  MOVWF  FEA
05FE:  CLRF   FEF
.................... 					j++; 
0600:  INCF   x63,F
.................... 					MB_Buffer[j]=0;	//low part 
0602:  CLRF   03
0604:  MOVF   x63,W
0606:  ADDLW  58
0608:  MOVWF  FE9
060A:  MOVLW  04
060C:  ADDWFC 03,W
060E:  MOVWF  FEA
0610:  CLRF   FEF
.................... 					j++; 
0612:  INCF   x63,F
.................... 					MB_Length+=2; 
0614:  MOVLW  02
0616:  ADDWF  x58,F
.................... 					break; 
0618:  BRA    0C12
.................... 				case 0x06:	//temp of gen				 
.................... 					MB_Buffer[j]=make8(T_GEN,1);	//high part 
061A:  CLRF   03
061C:  MOVLB  5
061E:  MOVF   x63,W
0620:  ADDLW  58
0622:  MOVWF  FE9
0624:  MOVLW  04
0626:  ADDWFC 03,W
0628:  MOVWF  FEA
062A:  MOVLB  3
062C:  MOVFF  3C9,FEF
.................... 					j++; 
0630:  MOVLB  5
0632:  INCF   x63,F
.................... 					MB_Buffer[j]=make8(T_GEN,0);	//low part 
0634:  CLRF   03
0636:  MOVF   x63,W
0638:  ADDLW  58
063A:  MOVWF  FE9
063C:  MOVLW  04
063E:  ADDWFC 03,W
0640:  MOVWF  FEA
0642:  MOVLB  3
0644:  MOVFF  3C8,FEF
.................... 					j++; 
0648:  MOVLB  5
064A:  INCF   x63,F
.................... 					MB_Length+=2; 
064C:  MOVLW  02
064E:  ADDWF  x58,F
.................... 					break; 
0650:  BRA    0C12
.................... 				case 0x07:	//temp 0					 
.................... 					MB_Buffer[j]=make8(T_SR0,1);	//high part 
0652:  CLRF   03
0654:  MOVLB  5
0656:  MOVF   x63,W
0658:  ADDLW  58
065A:  MOVWF  FE9
065C:  MOVLW  04
065E:  ADDWFC 03,W
0660:  MOVWF  FEA
0662:  MOVLB  3
0664:  MOVFF  3B3,FEF
.................... 					j++; 
0668:  MOVLB  5
066A:  INCF   x63,F
.................... 					MB_Buffer[j]=make8(T_SR0,0);	//low part 
066C:  CLRF   03
066E:  MOVF   x63,W
0670:  ADDLW  58
0672:  MOVWF  FE9
0674:  MOVLW  04
0676:  ADDWFC 03,W
0678:  MOVWF  FEA
067A:  MOVLB  3
067C:  MOVFF  3B2,FEF
.................... 					j++; 
0680:  MOVLB  5
0682:  INCF   x63,F
.................... 					MB_Length+=2; 
0684:  MOVLW  02
0686:  ADDWF  x58,F
.................... 					break; 
0688:  BRA    0C12
.................... 				case 0x08:	//temp 1 
.................... 					MB_Buffer[j]=make8(T_SR1,1);	//high part 
068A:  CLRF   03
068C:  MOVLB  5
068E:  MOVF   x63,W
0690:  ADDLW  58
0692:  MOVWF  FE9
0694:  MOVLW  04
0696:  ADDWFC 03,W
0698:  MOVWF  FEA
069A:  MOVLB  3
069C:  MOVFF  3BF,FEF
.................... 					j++; 
06A0:  MOVLB  5
06A2:  INCF   x63,F
.................... 					MB_Buffer[j]=make8(T_SR1,0);	//low part 
06A4:  CLRF   03
06A6:  MOVF   x63,W
06A8:  ADDLW  58
06AA:  MOVWF  FE9
06AC:  MOVLW  04
06AE:  ADDWFC 03,W
06B0:  MOVWF  FEA
06B2:  MOVLB  3
06B4:  MOVFF  3BE,FEF
.................... 					j++; 
06B8:  MOVLB  5
06BA:  INCF   x63,F
.................... 					MB_Length+=2; 
06BC:  MOVLW  02
06BE:  ADDWF  x58,F
.................... 					break; 
06C0:  BRA    0C12
.................... 				case 0x09:	//dummy command					 
.................... 					MB_Buffer[j]=0x00;	//high part 
06C2:  CLRF   03
06C4:  MOVLB  5
06C6:  MOVF   x63,W
06C8:  ADDLW  58
06CA:  MOVWF  FE9
06CC:  MOVLW  04
06CE:  ADDWFC 03,W
06D0:  MOVWF  FEA
06D2:  CLRF   FEF
.................... 					j++; 
06D4:  INCF   x63,F
.................... 					MB_Buffer[j]=0x00;	//low part 
06D6:  CLRF   03
06D8:  MOVF   x63,W
06DA:  ADDLW  58
06DC:  MOVWF  FE9
06DE:  MOVLW  04
06E0:  ADDWFC 03,W
06E2:  MOVWF  FEA
06E4:  CLRF   FEF
.................... 					j++; 
06E6:  INCF   x63,F
.................... 					MB_Length+=2; 
06E8:  MOVLW  02
06EA:  ADDWF  x58,F
.................... 					break; 
06EC:  BRA    0C12
.................... 				case 0x0A:	//dummy command					 
.................... 					MB_Buffer[j]=0x00;	//high part 
06EE:  CLRF   03
06F0:  MOVLB  5
06F2:  MOVF   x63,W
06F4:  ADDLW  58
06F6:  MOVWF  FE9
06F8:  MOVLW  04
06FA:  ADDWFC 03,W
06FC:  MOVWF  FEA
06FE:  CLRF   FEF
.................... 					j++; 
0700:  INCF   x63,F
.................... 					MB_Buffer[j]=0x00;	//low part 
0702:  CLRF   03
0704:  MOVF   x63,W
0706:  ADDLW  58
0708:  MOVWF  FE9
070A:  MOVLW  04
070C:  ADDWFC 03,W
070E:  MOVWF  FEA
0710:  CLRF   FEF
.................... 					j++; 
0712:  INCF   x63,F
.................... 					MB_Length+=2; 
0714:  MOVLW  02
0716:  ADDWF  x58,F
.................... 					break; 
0718:  BRA    0C12
.................... 				case 0x0B:	//saw level 
.................... 					MB_Buffer[j]=make8(SAW_A0,1);	//high part 
071A:  CLRF   03
071C:  MOVLB  5
071E:  MOVF   x63,W
0720:  ADDLW  58
0722:  MOVWF  FE9
0724:  MOVLW  04
0726:  ADDWFC 03,W
0728:  MOVWF  FEA
072A:  MOVLB  3
072C:  MOVFF  3CB,FEF
.................... 					j++; 
0730:  MOVLB  5
0732:  INCF   x63,F
.................... 					MB_Buffer[j]=make8(SAW_A0,0);	//low part 
0734:  CLRF   03
0736:  MOVF   x63,W
0738:  ADDLW  58
073A:  MOVWF  FE9
073C:  MOVLW  04
073E:  ADDWFC 03,W
0740:  MOVWF  FEA
0742:  MOVLB  3
0744:  MOVFF  3CA,FEF
.................... 					j++; 
0748:  MOVLB  5
074A:  INCF   x63,F
.................... 					MB_Length+=2; 
074C:  MOVLW  02
074E:  ADDWF  x58,F
.................... 					break; 
0750:  BRA    0C12
.................... 				case 0x0C:	//saw amplitude			 
.................... 					MB_Buffer[j]=make8(SAW_A1,1);	//high part 
0752:  CLRF   03
0754:  MOVLB  5
0756:  MOVF   x63,W
0758:  ADDLW  58
075A:  MOVWF  FE9
075C:  MOVLW  04
075E:  ADDWFC 03,W
0760:  MOVWF  FEA
0762:  MOVLB  3
0764:  MOVFF  3CF,FEF
.................... 					j++; 
0768:  MOVLB  5
076A:  INCF   x63,F
.................... 					MB_Buffer[j]=make8(SAW_A1,0);	//low part 
076C:  CLRF   03
076E:  MOVF   x63,W
0770:  ADDLW  58
0772:  MOVWF  FE9
0774:  MOVLW  04
0776:  ADDWFC 03,W
0778:  MOVWF  FEA
077A:  MOVLB  3
077C:  MOVFF  3CE,FEF
.................... 					j++; 
0780:  MOVLB  5
0782:  INCF   x63,F
.................... 					MB_Length+=2; 
0784:  MOVLW  02
0786:  ADDWF  x58,F
.................... 					break; 
0788:  BRA    0C12
.................... 				case 0x0D:	//input coef 0					 
.................... 					MB_Buffer[j]=make8(AmpCoef0,1);	//high part 
078A:  CLRF   03
078C:  MOVLB  5
078E:  MOVF   x63,W
0790:  ADDLW  58
0792:  MOVWF  FE9
0794:  MOVLW  04
0796:  ADDWFC 03,W
0798:  MOVWF  FEA
079A:  MOVLB  3
079C:  MOVFF  3AB,FEF
.................... 					j++; 
07A0:  MOVLB  5
07A2:  INCF   x63,F
.................... 					MB_Buffer[j]=make8(AmpCoef0,0);	//low part 
07A4:  CLRF   03
07A6:  MOVF   x63,W
07A8:  ADDLW  58
07AA:  MOVWF  FE9
07AC:  MOVLW  04
07AE:  ADDWFC 03,W
07B0:  MOVWF  FEA
07B2:  MOVLB  3
07B4:  MOVFF  3AA,FEF
.................... 					j++; 
07B8:  MOVLB  5
07BA:  INCF   x63,F
.................... 					MB_Length+=2; 
07BC:  MOVLW  02
07BE:  ADDWF  x58,F
.................... 					break; 
07C0:  BRA    0C12
.................... 				case 0x0E:	//input coef 1 
.................... 					MB_Buffer[j]=make8(AmpCoef1,1);	//high part 
07C2:  CLRF   03
07C4:  MOVLB  5
07C6:  MOVF   x63,W
07C8:  ADDLW  58
07CA:  MOVWF  FE9
07CC:  MOVLW  04
07CE:  ADDWFC 03,W
07D0:  MOVWF  FEA
07D2:  MOVLB  3
07D4:  MOVFF  3B7,FEF
.................... 					j++; 
07D8:  MOVLB  5
07DA:  INCF   x63,F
.................... 					MB_Buffer[j]=make8(AmpCoef1,0);	//low part 
07DC:  CLRF   03
07DE:  MOVF   x63,W
07E0:  ADDLW  58
07E2:  MOVWF  FE9
07E4:  MOVLW  04
07E6:  ADDWFC 03,W
07E8:  MOVWF  FEA
07EA:  MOVLB  3
07EC:  MOVFF  3B6,FEF
.................... 					j++; 
07F0:  MOVLB  5
07F2:  INCF   x63,F
.................... 					MB_Length+=2; 
07F4:  MOVLW  02
07F6:  ADDWF  x58,F
.................... 					break; 
07F8:  BRA    0C12
.................... 				case 0x0F:	//measure points 
.................... 					MB_Buffer[j]=make8(TAQ,1);	//high part 
07FA:  CLRF   03
07FC:  MOVLB  5
07FE:  MOVF   x63,W
0800:  ADDLW  58
0802:  MOVWF  FE9
0804:  MOVLW  04
0806:  ADDWFC 03,W
0808:  MOVWF  FEA
080A:  MOVLB  3
080C:  MOVFF  3C1,FEF
.................... 					j++; 
0810:  MOVLB  5
0812:  INCF   x63,F
.................... 					MB_Buffer[j]=make8(TAQ,0);	//low part 
0814:  CLRF   03
0816:  MOVF   x63,W
0818:  ADDLW  58
081A:  MOVWF  FE9
081C:  MOVLW  04
081E:  ADDWFC 03,W
0820:  MOVWF  FEA
0822:  MOVLB  3
0824:  MOVFF  3C0,FEF
.................... 					j++; 
0828:  MOVLB  5
082A:  INCF   x63,F
.................... 					MB_Length+=2; 
082C:  MOVLW  02
082E:  ADDWF  x58,F
.................... 					break; 
0830:  BRA    0C12
.................... 				case 0x10:	//filter width				 
.................... 					MB_Buffer[j]=make8(FWDT,1);	//high part 
0832:  CLRF   03
0834:  MOVLB  5
0836:  MOVF   x63,W
0838:  ADDLW  58
083A:  MOVWF  FE9
083C:  MOVLW  04
083E:  ADDWFC 03,W
0840:  MOVWF  FEA
0842:  MOVLB  3
0844:  MOVFF  3C3,FEF
.................... 					j++; 
0848:  MOVLB  5
084A:  INCF   x63,F
.................... 					MB_Buffer[j]=make8(FWDT,0);	//low part 
084C:  CLRF   03
084E:  MOVF   x63,W
0850:  ADDLW  58
0852:  MOVWF  FE9
0854:  MOVLW  04
0856:  ADDWFC 03,W
0858:  MOVWF  FEA
085A:  MOVLB  3
085C:  MOVFF  3C2,FEF
.................... 					j++; 
0860:  MOVLB  5
0862:  INCF   x63,F
.................... 					MB_Length+=2; 
0864:  MOVLW  02
0866:  ADDWF  x58,F
.................... 					break; 
0868:  BRA    0C12
.................... 				case 0x11:	//measures count 
.................... 					MB_Buffer[j]=make8(PCOUNT,1);	//high part 
086A:  CLRF   03
086C:  MOVLB  5
086E:  MOVF   x63,W
0870:  ADDLW  58
0872:  MOVWF  FE9
0874:  MOVLW  04
0876:  ADDWFC 03,W
0878:  MOVWF  FEA
087A:  MOVLB  3
087C:  MOVFF  3C5,FEF
.................... 					j++; 
0880:  MOVLB  5
0882:  INCF   x63,F
.................... 					MB_Buffer[j]=make8(PCOUNT,0);	//low part 
0884:  CLRF   03
0886:  MOVF   x63,W
0888:  ADDLW  58
088A:  MOVWF  FE9
088C:  MOVLW  04
088E:  ADDWFC 03,W
0890:  MOVWF  FEA
0892:  MOVLB  3
0894:  MOVFF  3C4,FEF
.................... 					j++; 
0898:  MOVLB  5
089A:  INCF   x63,F
.................... 					MB_Length+=2; 
089C:  MOVLW  02
089E:  ADDWF  x58,F
.................... 					break; 
08A0:  BRA    0C12
.................... 				case 0x12:	//speed register 
.................... 					MB_Buffer[j]=make8(Speed,1);	//high part 
08A2:  CLRF   03
08A4:  MOVLB  5
08A6:  MOVF   x63,W
08A8:  ADDLW  58
08AA:  MOVWF  FE9
08AC:  MOVLW  04
08AE:  ADDWFC 03,W
08B0:  MOVWF  FEA
08B2:  MOVLB  3
08B4:  MOVFF  3DD,FEF
.................... 					j++; 
08B8:  MOVLB  5
08BA:  INCF   x63,F
.................... 					MB_Buffer[j]=make8(Speed,0);	//low part 
08BC:  CLRF   03
08BE:  MOVF   x63,W
08C0:  ADDLW  58
08C2:  MOVWF  FE9
08C4:  MOVLW  04
08C6:  ADDWFC 03,W
08C8:  MOVWF  FEA
08CA:  MOVLB  3
08CC:  MOVFF  3DC,FEF
.................... 					j++; 
08D0:  MOVLB  5
08D2:  INCF   x63,F
.................... 					MB_Length+=2; 
08D4:  MOVLW  02
08D6:  ADDWF  x58,F
.................... 					break; 
08D8:  BRA    0C12
.................... 				case 0x13:	//host address register 
.................... 					MB_Buffer[j]=make8(Addr,1);	//high part 
08DA:  CLRF   03
08DC:  MOVLB  5
08DE:  MOVF   x63,W
08E0:  ADDLW  58
08E2:  MOVWF  FE9
08E4:  MOVLW  04
08E6:  ADDWFC 03,W
08E8:  MOVWF  FEA
08EA:  MOVLB  3
08EC:  MOVFF  3DF,FEF
.................... 					j++; 
08F0:  MOVLB  5
08F2:  INCF   x63,F
.................... 					MB_Buffer[j]=make8(Addr,0);	//low part 
08F4:  CLRF   03
08F6:  MOVF   x63,W
08F8:  ADDLW  58
08FA:  MOVWF  FE9
08FC:  MOVLW  04
08FE:  ADDWFC 03,W
0900:  MOVWF  FEA
0902:  MOVLB  3
0904:  MOVFF  3DE,FEF
.................... 					j++;								 
0908:  MOVLB  5
090A:  INCF   x63,F
.................... 					MB_Length+=2; 
090C:  MOVLW  02
090E:  ADDWF  x58,F
.................... 					break; 
0910:  BRA    0C12
.................... 				case 0x14:	//Valid request register 
.................... 					MB_Buffer[j]=make8(ValidReq,1);	//high part 
0912:  CLRF   03
0914:  MOVLB  5
0916:  MOVF   x63,W
0918:  ADDLW  58
091A:  MOVWF  FE9
091C:  MOVLW  04
091E:  ADDWFC 03,W
0920:  MOVWF  FEA
0922:  MOVFF  55A,FEF
.................... 					j++; 
0926:  INCF   x63,F
.................... 					MB_Buffer[j]=make8(ValidReq,0);	//low part 
0928:  CLRF   03
092A:  MOVF   x63,W
092C:  ADDLW  58
092E:  MOVWF  FE9
0930:  MOVLW  04
0932:  ADDWFC 03,W
0934:  MOVWF  FEA
0936:  MOVFF  559,FEF
.................... 					j++;								 
093A:  INCF   x63,F
.................... 					MB_Length+=2; 
093C:  MOVLW  02
093E:  ADDWF  x58,F
.................... 					break; 
0940:  BRA    0C12
.................... 				case 0x15:	//CRC error register 
.................... 					MB_Buffer[j]=make8(CRCReq,1);	//high part 
0942:  CLRF   03
0944:  MOVLB  5
0946:  MOVF   x63,W
0948:  ADDLW  58
094A:  MOVWF  FE9
094C:  MOVLW  04
094E:  ADDWFC 03,W
0950:  MOVWF  FEA
0952:  MOVFF  55C,FEF
.................... 					j++; 
0956:  INCF   x63,F
.................... 					MB_Buffer[j]=make8(CRCReq,0);	//low part 
0958:  CLRF   03
095A:  MOVF   x63,W
095C:  ADDLW  58
095E:  MOVWF  FE9
0960:  MOVLW  04
0962:  ADDWFC 03,W
0964:  MOVWF  FEA
0966:  MOVFF  55B,FEF
.................... 					j++;								 
096A:  INCF   x63,F
.................... 					MB_Length+=2; 
096C:  MOVLW  02
096E:  ADDWF  x58,F
.................... 					break; 
0970:  BRA    0C12
.................... 				case 0x16:	//Exception register 
.................... 					MB_Buffer[j]=make8(ExcReq,1);	//high part 
0972:  CLRF   03
0974:  MOVLB  5
0976:  MOVF   x63,W
0978:  ADDLW  58
097A:  MOVWF  FE9
097C:  MOVLW  04
097E:  ADDWFC 03,W
0980:  MOVWF  FEA
0982:  MOVFF  55E,FEF
.................... 					j++; 
0986:  INCF   x63,F
.................... 					MB_Buffer[j]=make8(ExcReq,0);	//low part 
0988:  CLRF   03
098A:  MOVF   x63,W
098C:  ADDLW  58
098E:  MOVWF  FE9
0990:  MOVLW  04
0992:  ADDWFC 03,W
0994:  MOVWF  FEA
0996:  MOVFF  55D,FEF
.................... 					j++;								 
099A:  INCF   x63,F
.................... 					MB_Length+=2; 
099C:  MOVLW  02
099E:  ADDWF  x58,F
.................... 					break; 
09A0:  BRA    0C12
.................... 				case 0x17:	//KGT				 
.................... 					//copy 
.................... 					memcpy(&flcopy,&KGT,4); 
09A2:  MOVLW  05
09A4:  MOVWF  FEA
09A6:  MOVLW  99
09A8:  MOVWF  FE9
09AA:  MOVLW  03
09AC:  MOVWF  FE2
09AE:  MOVLW  D2
09B0:  MOVWF  FE1
09B2:  MOVLW  04
09B4:  MOVWF  01
09B6:  MOVFF  FE6,FEE
09BA:  DECFSZ 01,F
09BC:  BRA    09B6
.................... 					//store to buf 
.................... 					MB_Buffer[j]=make8(flcopy,0);	//high part 
09BE:  CLRF   03
09C0:  MOVLB  5
09C2:  MOVF   x63,W
09C4:  ADDLW  58
09C6:  MOVWF  FE9
09C8:  MOVLW  04
09CA:  ADDWFC 03,W
09CC:  MOVWF  FEA
09CE:  MOVFF  599,FEF
.................... 					j++; 
09D2:  INCF   x63,F
.................... 					MB_Buffer[j]=make8(flcopy,1);	//high part 
09D4:  CLRF   03
09D6:  MOVF   x63,W
09D8:  ADDLW  58
09DA:  MOVWF  FE9
09DC:  MOVLW  04
09DE:  ADDWFC 03,W
09E0:  MOVWF  FEA
09E2:  MOVFF  59A,FEF
.................... 					j++; 
09E6:  INCF   x63,F
.................... 					MB_Buffer[j]=make8(flcopy,2);	//high part 
09E8:  CLRF   03
09EA:  MOVF   x63,W
09EC:  ADDLW  58
09EE:  MOVWF  FE9
09F0:  MOVLW  04
09F2:  ADDWFC 03,W
09F4:  MOVWF  FEA
09F6:  MOVFF  59B,FEF
.................... 					j++; 
09FA:  INCF   x63,F
.................... 					MB_Buffer[j]=make8(flcopy,3);	//high part 
09FC:  CLRF   03
09FE:  MOVF   x63,W
0A00:  ADDLW  58
0A02:  MOVWF  FE9
0A04:  MOVLW  04
0A06:  ADDWFC 03,W
0A08:  MOVWF  FEA
0A0A:  MOVFF  59C,FEF
.................... 					j++; 
0A0E:  INCF   x63,F
.................... 					MB_Length+=4; 
0A10:  MOVLW  04
0A12:  ADDWF  x58,F
.................... 					break; 
0A14:  BRA    0C12
.................... 				case 0x18:	//KGU				 
.................... 					//copy 
.................... 					memcpy(&flcopy,&KGU,4); 
0A16:  MOVLW  05
0A18:  MOVWF  FEA
0A1A:  MOVLW  99
0A1C:  MOVWF  FE9
0A1E:  MOVLW  03
0A20:  MOVWF  FE2
0A22:  MOVLW  D6
0A24:  MOVWF  FE1
0A26:  MOVLW  04
0A28:  MOVWF  01
0A2A:  MOVFF  FE6,FEE
0A2E:  DECFSZ 01,F
0A30:  BRA    0A2A
.................... 					//store to buf 
.................... 					MB_Buffer[j]=make8(flcopy,0);	//high part 
0A32:  CLRF   03
0A34:  MOVLB  5
0A36:  MOVF   x63,W
0A38:  ADDLW  58
0A3A:  MOVWF  FE9
0A3C:  MOVLW  04
0A3E:  ADDWFC 03,W
0A40:  MOVWF  FEA
0A42:  MOVFF  599,FEF
.................... 					j++; 
0A46:  INCF   x63,F
.................... 					MB_Buffer[j]=make8(flcopy,1);	//high part 
0A48:  CLRF   03
0A4A:  MOVF   x63,W
0A4C:  ADDLW  58
0A4E:  MOVWF  FE9
0A50:  MOVLW  04
0A52:  ADDWFC 03,W
0A54:  MOVWF  FEA
0A56:  MOVFF  59A,FEF
.................... 					j++; 
0A5A:  INCF   x63,F
.................... 					MB_Buffer[j]=make8(flcopy,2);	//high part 
0A5C:  CLRF   03
0A5E:  MOVF   x63,W
0A60:  ADDLW  58
0A62:  MOVWF  FE9
0A64:  MOVLW  04
0A66:  ADDWFC 03,W
0A68:  MOVWF  FEA
0A6A:  MOVFF  59B,FEF
.................... 					j++; 
0A6E:  INCF   x63,F
.................... 					MB_Buffer[j]=make8(flcopy,3);	//high part 
0A70:  CLRF   03
0A72:  MOVF   x63,W
0A74:  ADDLW  58
0A76:  MOVWF  FE9
0A78:  MOVLW  04
0A7A:  ADDWFC 03,W
0A7C:  MOVWF  FEA
0A7E:  MOVFF  59C,FEF
.................... 					j++; 
0A82:  INCF   x63,F
.................... 					MB_Length+=4; 
0A84:  MOVLW  04
0A86:  ADDWF  x58,F
.................... 					break; 
0A88:  BRA    0C12
.................... 				case 0x19:	//KST0 
.................... 					//copy 
.................... 					memcpy(&flcopy,&KST0,4); 
0A8A:  MOVLW  05
0A8C:  MOVWF  FEA
0A8E:  MOVLW  99
0A90:  MOVWF  FE9
0A92:  MOVLW  03
0A94:  MOVWF  FE2
0A96:  MOVLW  AC
0A98:  MOVWF  FE1
0A9A:  MOVLW  04
0A9C:  MOVWF  01
0A9E:  MOVFF  FE6,FEE
0AA2:  DECFSZ 01,F
0AA4:  BRA    0A9E
.................... 					//store to buf 
.................... 					MB_Buffer[j]=make8(flcopy,0);	//high part 
0AA6:  CLRF   03
0AA8:  MOVLB  5
0AAA:  MOVF   x63,W
0AAC:  ADDLW  58
0AAE:  MOVWF  FE9
0AB0:  MOVLW  04
0AB2:  ADDWFC 03,W
0AB4:  MOVWF  FEA
0AB6:  MOVFF  599,FEF
.................... 					j++; 
0ABA:  INCF   x63,F
.................... 					MB_Buffer[j]=make8(flcopy,1);	//high part 
0ABC:  CLRF   03
0ABE:  MOVF   x63,W
0AC0:  ADDLW  58
0AC2:  MOVWF  FE9
0AC4:  MOVLW  04
0AC6:  ADDWFC 03,W
0AC8:  MOVWF  FEA
0ACA:  MOVFF  59A,FEF
.................... 					j++; 
0ACE:  INCF   x63,F
.................... 					MB_Buffer[j]=make8(flcopy,2);	//high part 
0AD0:  CLRF   03
0AD2:  MOVF   x63,W
0AD4:  ADDLW  58
0AD6:  MOVWF  FE9
0AD8:  MOVLW  04
0ADA:  ADDWFC 03,W
0ADC:  MOVWF  FEA
0ADE:  MOVFF  59B,FEF
.................... 					j++; 
0AE2:  INCF   x63,F
.................... 					MB_Buffer[j]=make8(flcopy,3);	//high part 
0AE4:  CLRF   03
0AE6:  MOVF   x63,W
0AE8:  ADDLW  58
0AEA:  MOVWF  FE9
0AEC:  MOVLW  04
0AEE:  ADDWFC 03,W
0AF0:  MOVWF  FEA
0AF2:  MOVFF  59C,FEF
.................... 					j++; 
0AF6:  INCF   x63,F
.................... 					MB_Length+=4; 
0AF8:  MOVLW  04
0AFA:  ADDWF  x58,F
.................... 					break; 
0AFC:  BRA    0C12
.................... 				case 0x1A:	//KST1				 
.................... 					MB_Buffer[j]=0x00;	//high part 
0AFE:  CLRF   03
0B00:  MOVLB  5
0B02:  MOVF   x63,W
0B04:  ADDLW  58
0B06:  MOVWF  FE9
0B08:  MOVLW  04
0B0A:  ADDWFC 03,W
0B0C:  MOVWF  FEA
0B0E:  CLRF   FEF
.................... 					j++; 
0B10:  INCF   x63,F
.................... 					MB_Buffer[j]=0x00;	//low part 
0B12:  CLRF   03
0B14:  MOVF   x63,W
0B16:  ADDLW  58
0B18:  MOVWF  FE9
0B1A:  MOVLW  04
0B1C:  ADDWFC 03,W
0B1E:  MOVWF  FEA
0B20:  CLRF   FEF
.................... 					j++; 
0B22:  INCF   x63,F
.................... 					MB_Buffer[j]=0x00;	//low part 
0B24:  CLRF   03
0B26:  MOVF   x63,W
0B28:  ADDLW  58
0B2A:  MOVWF  FE9
0B2C:  MOVLW  04
0B2E:  ADDWFC 03,W
0B30:  MOVWF  FEA
0B32:  CLRF   FEF
.................... 					j++; 
0B34:  INCF   x63,F
.................... 					MB_Buffer[j]=0x00;	//low part 
0B36:  CLRF   03
0B38:  MOVF   x63,W
0B3A:  ADDLW  58
0B3C:  MOVWF  FE9
0B3E:  MOVLW  04
0B40:  ADDWFC 03,W
0B42:  MOVWF  FEA
0B44:  CLRF   FEF
.................... 					j++; 
0B46:  INCF   x63,F
.................... 					MB_Length+=4; 
0B48:  MOVLW  04
0B4A:  ADDWF  x58,F
.................... 					break; 
0B4C:  BRA    0C12
.................... 				case 0x1B:	//T0_CAL 
.................... 					MB_Buffer[j]=make8(T0_CAL,1);	//high part 
0B4E:  CLRF   03
0B50:  MOVLB  5
0B52:  MOVF   x63,W
0B54:  ADDLW  58
0B56:  MOVWF  FE9
0B58:  MOVLW  04
0B5A:  ADDWFC 03,W
0B5C:  MOVWF  FEA
0B5E:  MOVLB  3
0B60:  MOVFF  3B1,FEF
.................... 					j++; 
0B64:  MOVLB  5
0B66:  INCF   x63,F
.................... 					MB_Buffer[j]=make8(T0_CAL,0);	//low part 
0B68:  CLRF   03
0B6A:  MOVF   x63,W
0B6C:  ADDLW  58
0B6E:  MOVWF  FE9
0B70:  MOVLW  04
0B72:  ADDWFC 03,W
0B74:  MOVWF  FEA
0B76:  MOVLB  3
0B78:  MOVFF  3B0,FEF
.................... 					j++;								 
0B7C:  MOVLB  5
0B7E:  INCF   x63,F
.................... 					MB_Length+=2; 
0B80:  MOVLW  02
0B82:  ADDWF  x58,F
.................... 					break; 
0B84:  BRA    0C12
.................... 				case 0x1C:	//T1_CAL 
.................... 					MB_Buffer[j]=make8(T1_CAL,1);	//high part 
0B86:  CLRF   03
0B88:  MOVLB  5
0B8A:  MOVF   x63,W
0B8C:  ADDLW  58
0B8E:  MOVWF  FE9
0B90:  MOVLW  04
0B92:  ADDWFC 03,W
0B94:  MOVWF  FEA
0B96:  MOVLB  3
0B98:  MOVFF  3BD,FEF
.................... 					j++; 
0B9C:  MOVLB  5
0B9E:  INCF   x63,F
.................... 					MB_Buffer[j]=make8(T1_CAL,0);	//low part 
0BA0:  CLRF   03
0BA2:  MOVF   x63,W
0BA4:  ADDLW  58
0BA6:  MOVWF  FE9
0BA8:  MOVLW  04
0BAA:  ADDWFC 03,W
0BAC:  MOVWF  FEA
0BAE:  MOVLB  3
0BB0:  MOVFF  3BC,FEF
.................... 					j++;								 
0BB4:  MOVLB  5
0BB6:  INCF   x63,F
.................... 					MB_Length+=2; 
0BB8:  MOVLW  02
0BBA:  ADDWF  x58,F
.................... 					break; 
0BBC:  BRA    0C12
.................... 				case 0x1D:	//TG_CAL 
.................... 					MB_Buffer[j]=make8(TG_CAL,1);	//high part 
0BBE:  CLRF   03
0BC0:  MOVLB  5
0BC2:  MOVF   x63,W
0BC4:  ADDLW  58
0BC6:  MOVWF  FE9
0BC8:  MOVLW  04
0BCA:  ADDWFC 03,W
0BCC:  MOVWF  FEA
0BCE:  MOVLB  3
0BD0:  MOVFF  3DB,FEF
.................... 					j++; 
0BD4:  MOVLB  5
0BD6:  INCF   x63,F
.................... 					MB_Buffer[j]=make8(TG_CAL,0);	//low part 
0BD8:  CLRF   03
0BDA:  MOVF   x63,W
0BDC:  ADDLW  58
0BDE:  MOVWF  FE9
0BE0:  MOVLW  04
0BE2:  ADDWFC 03,W
0BE4:  MOVWF  FEA
0BE6:  MOVLB  3
0BE8:  MOVFF  3DA,FEF
.................... 					j++;								 
0BEC:  MOVLB  5
0BEE:  INCF   x63,F
.................... 					MB_Length+=2; 
0BF0:  MOVLW  02
0BF2:  ADDWF  x58,F
.................... 					break; 
0BF4:  BRA    0C12
.................... 				default:	//no valid registers							 
.................... 					MB_Buffer[1]|=0x80; 
0BF6:  MOVLB  4
0BF8:  BSF    x59.7
.................... 					MB_Buffer[2]=illegal_data_value; 
0BFA:  MOVLW  03
0BFC:  MOVWF  x5A
.................... 					MB_Length=5; 
0BFE:  MOVLW  05
0C00:  MOVLB  5
0C02:  MOVWF  x58
.................... 					ExcReq++; 
0C04:  INCF   x5D,F
0C06:  BTFSC  FD8.2
0C08:  INCF   x5E,F
.................... 					ValidReq--;  
0C0A:  MOVF   x59,W
0C0C:  BTFSC  FD8.2
0C0E:  DECF   x5A,F
0C10:  DECF   x59,F
.................... 			};	 
.................... } 
0C12:  MOVLB  0
0C14:  GOTO   1B5E (RETURN)
.................... // 
.................... static	int8	bytecount; 
.................... //write registers 
.................... void	SetRegData(int8 reg){ 
.................... 	int32	flcopy; 
.................... 	restart_wdt(); 
0C18:  CLRWDT
.................... 			switch(reg){ 
0C1A:  MOVLB  5
0C1C:  MOVF   x98,W
0C1E:  XORLW  00
0C20:  MOVLB  0
0C22:  BZ    0CC6
0C24:  XORLW  01
0C26:  BZ    0CCE
0C28:  XORLW  03
0C2A:  BZ    0CD6
0C2C:  XORLW  01
0C2E:  BZ    0CDE
0C30:  XORLW  07
0C32:  BZ    0CE6
0C34:  XORLW  01
0C36:  BZ    0CEE
0C38:  XORLW  03
0C3A:  BZ    0CF6
0C3C:  XORLW  01
0C3E:  BZ    0CFE
0C40:  XORLW  0F
0C42:  BTFSC  FD8.2
0C44:  BRA    0D06
0C46:  XORLW  01
0C48:  BTFSC  FD8.2
0C4A:  BRA    0D0E
0C4C:  XORLW  03
0C4E:  BTFSC  FD8.2
0C50:  BRA    0D16
0C52:  XORLW  01
0C54:  BTFSC  FD8.2
0C56:  BRA    0D1E
0C58:  XORLW  07
0C5A:  BTFSC  FD8.2
0C5C:  BRA    0D54
0C5E:  XORLW  01
0C60:  BTFSC  FD8.2
0C62:  BRA    0D8A
0C64:  XORLW  03
0C66:  BTFSC  FD8.2
0C68:  BRA    0DC0
0C6A:  XORLW  01
0C6C:  BTFSC  FD8.2
0C6E:  BRA    0DF6
0C70:  XORLW  1F
0C72:  BTFSC  FD8.2
0C74:  BRA    0E2C
0C76:  XORLW  01
0C78:  BTFSC  FD8.2
0C7A:  BRA    0E62
0C7C:  XORLW  03
0C7E:  BTFSC  FD8.2
0C80:  BRA    0E98
0C82:  XORLW  01
0C84:  BTFSC  FD8.2
0C86:  BRA    0EA0
0C88:  XORLW  07
0C8A:  BTFSC  FD8.2
0C8C:  BRA    0ED6
0C8E:  XORLW  01
0C90:  BTFSC  FD8.2
0C92:  BRA    0EDE
0C94:  XORLW  03
0C96:  BTFSC  FD8.2
0C98:  BRA    0EE6
0C9A:  XORLW  01
0C9C:  BTFSC  FD8.2
0C9E:  BRA    0EEE
0CA0:  XORLW  0F
0CA2:  BTFSC  FD8.2
0CA4:  BRA    0F70
0CA6:  XORLW  01
0CA8:  BTFSC  FD8.2
0CAA:  BRA    0FF2
0CAC:  XORLW  03
0CAE:  BTFSC  FD8.2
0CB0:  BRA    1074
0CB2:  XORLW  01
0CB4:  BTFSC  FD8.2
0CB6:  BRA    107C
0CB8:  XORLW  07
0CBA:  BTFSC  FD8.2
0CBC:  BRA    10B2
0CBE:  XORLW  01
0CC0:  BTFSC  FD8.2
0CC2:  BRA    10E8
0CC4:  BRA    111E
.................... 				case 0x00:	//dummy command					 
.................... 					j+=2;	//set next data 
0CC6:  MOVLW  02
0CC8:  MOVLB  5
0CCA:  ADDWF  x63,F
.................... 					break; 
0CCC:  BRA    113A
.................... 				case 0x01:	//dummy command					 
.................... 					j+=2;	//set next data 
0CCE:  MOVLW  02
0CD0:  MOVLB  5
0CD2:  ADDWF  x63,F
.................... 					break; 
0CD4:  BRA    113A
.................... 				case 0x02:	//dummy command					 
.................... 					j+=2;	//set next data 
0CD6:  MOVLW  02
0CD8:  MOVLB  5
0CDA:  ADDWF  x63,F
.................... 					break; 
0CDC:  BRA    113A
.................... 				case 0x03:	//dummy command					 
.................... 					j+=2;	//set next data 
0CDE:  MOVLW  02
0CE0:  MOVLB  5
0CE2:  ADDWF  x63,F
.................... 					break; 
0CE4:  BRA    113A
.................... 				case 0x04:	//dummy command					 
.................... 					j+=2;	//set next data 
0CE6:  MOVLW  02
0CE8:  MOVLB  5
0CEA:  ADDWF  x63,F
.................... 					break; 
0CEC:  BRA    113A
.................... 				case 0x05:	//dummy command					 
.................... 					j+=2;	//set next data 
0CEE:  MOVLW  02
0CF0:  MOVLB  5
0CF2:  ADDWF  x63,F
.................... 					break; 
0CF4:  BRA    113A
.................... 				case 0x06:	//dummy command					 
.................... 					j+=2;	//set next data 
0CF6:  MOVLW  02
0CF8:  MOVLB  5
0CFA:  ADDWF  x63,F
.................... 					break; 
0CFC:  BRA    113A
.................... 				case 0x07:	//dummy command					 
.................... 					j+=2;	//set next data 
0CFE:  MOVLW  02
0D00:  MOVLB  5
0D02:  ADDWF  x63,F
.................... 					break; 
0D04:  BRA    113A
.................... 				case 0x08:	//dummy command					 
.................... 					j+=2;	//set next data 
0D06:  MOVLW  02
0D08:  MOVLB  5
0D0A:  ADDWF  x63,F
.................... 					break; 
0D0C:  BRA    113A
.................... 				case 0x09:	//dummy command					 
.................... 					j+=2;	//set next data 
0D0E:  MOVLW  02
0D10:  MOVLB  5
0D12:  ADDWF  x63,F
.................... 					break; 
0D14:  BRA    113A
.................... 				case 0x0A:	//dummy command					 
.................... 					j+=2;	//set next data 
0D16:  MOVLW  02
0D18:  MOVLB  5
0D1A:  ADDWF  x63,F
.................... 					break; 
0D1C:  BRA    113A
.................... 				case 0x0B:	//SAW_A0 
.................... 					//read data from buffer 
.................... 					SAW_A0=make16(MB_Buffer[j],MB_Buffer[j+1]); 
0D1E:  CLRF   03
0D20:  MOVLB  5
0D22:  MOVF   x63,W
0D24:  ADDLW  58
0D26:  MOVWF  FE9
0D28:  MOVLW  04
0D2A:  ADDWFC 03,W
0D2C:  MOVWF  FEA
0D2E:  MOVFF  FEF,59D
0D32:  MOVLW  01
0D34:  ADDWF  x63,W
0D36:  CLRF   03
0D38:  ADDLW  58
0D3A:  MOVWF  FE9
0D3C:  MOVLW  04
0D3E:  ADDWFC 03,W
0D40:  MOVWF  FEA
0D42:  MOVFF  FEF,59E
0D46:  MOVFF  59D,3CB
0D4A:  MOVFF  59E,3CA
.................... 					j+=2;	//set next data 
0D4E:  MOVLW  02
0D50:  ADDWF  x63,F
.................... 					break; 
0D52:  BRA    113A
.................... 				case 0x0C:	//SAW_A1 
.................... 					//read data from buffer 
.................... 					SAW_A1=make16(MB_Buffer[j],MB_Buffer[j+1]); 
0D54:  CLRF   03
0D56:  MOVLB  5
0D58:  MOVF   x63,W
0D5A:  ADDLW  58
0D5C:  MOVWF  FE9
0D5E:  MOVLW  04
0D60:  ADDWFC 03,W
0D62:  MOVWF  FEA
0D64:  MOVFF  FEF,59D
0D68:  MOVLW  01
0D6A:  ADDWF  x63,W
0D6C:  CLRF   03
0D6E:  ADDLW  58
0D70:  MOVWF  FE9
0D72:  MOVLW  04
0D74:  ADDWFC 03,W
0D76:  MOVWF  FEA
0D78:  MOVFF  FEF,59E
0D7C:  MOVFF  59D,3CF
0D80:  MOVFF  59E,3CE
.................... 					j+=2;	//set next data 
0D84:  MOVLW  02
0D86:  ADDWF  x63,F
.................... 					break; 
0D88:  BRA    113A
.................... 				case 0x0D:	//KU0 
.................... 					//read data from buffer 
.................... 					AmpCoef0=make16(MB_Buffer[j],MB_Buffer[j+1]); 
0D8A:  CLRF   03
0D8C:  MOVLB  5
0D8E:  MOVF   x63,W
0D90:  ADDLW  58
0D92:  MOVWF  FE9
0D94:  MOVLW  04
0D96:  ADDWFC 03,W
0D98:  MOVWF  FEA
0D9A:  MOVFF  FEF,59D
0D9E:  MOVLW  01
0DA0:  ADDWF  x63,W
0DA2:  CLRF   03
0DA4:  ADDLW  58
0DA6:  MOVWF  FE9
0DA8:  MOVLW  04
0DAA:  ADDWFC 03,W
0DAC:  MOVWF  FEA
0DAE:  MOVFF  FEF,59E
0DB2:  MOVFF  59D,3AB
0DB6:  MOVFF  59E,3AA
.................... 					j+=2;	//set next data 
0DBA:  MOVLW  02
0DBC:  ADDWF  x63,F
.................... 					break; 
0DBE:  BRA    113A
.................... 				case 0x0E:	//KU1 
.................... 					//read data from buffer 
.................... 					AmpCoef1=make16(MB_Buffer[j],MB_Buffer[j+1]); 
0DC0:  CLRF   03
0DC2:  MOVLB  5
0DC4:  MOVF   x63,W
0DC6:  ADDLW  58
0DC8:  MOVWF  FE9
0DCA:  MOVLW  04
0DCC:  ADDWFC 03,W
0DCE:  MOVWF  FEA
0DD0:  MOVFF  FEF,59D
0DD4:  MOVLW  01
0DD6:  ADDWF  x63,W
0DD8:  CLRF   03
0DDA:  ADDLW  58
0DDC:  MOVWF  FE9
0DDE:  MOVLW  04
0DE0:  ADDWFC 03,W
0DE2:  MOVWF  FEA
0DE4:  MOVFF  FEF,59E
0DE8:  MOVFF  59D,3B7
0DEC:  MOVFF  59E,3B6
.................... 					j+=2;	//set next data 
0DF0:  MOVLW  02
0DF2:  ADDWF  x63,F
.................... 					break; 
0DF4:  BRA    113A
.................... 				case 0x0F:	//TAQ 
.................... 					//read data from buffer 
.................... 					TAQ=make16(MB_Buffer[j],MB_Buffer[j+1]); 
0DF6:  CLRF   03
0DF8:  MOVLB  5
0DFA:  MOVF   x63,W
0DFC:  ADDLW  58
0DFE:  MOVWF  FE9
0E00:  MOVLW  04
0E02:  ADDWFC 03,W
0E04:  MOVWF  FEA
0E06:  MOVFF  FEF,59D
0E0A:  MOVLW  01
0E0C:  ADDWF  x63,W
0E0E:  CLRF   03
0E10:  ADDLW  58
0E12:  MOVWF  FE9
0E14:  MOVLW  04
0E16:  ADDWFC 03,W
0E18:  MOVWF  FEA
0E1A:  MOVFF  FEF,59E
0E1E:  MOVFF  59D,3C1
0E22:  MOVFF  59E,3C0
.................... 					j+=2;	//set next data 
0E26:  MOVLW  02
0E28:  ADDWF  x63,F
.................... 					break; 
0E2A:  BRA    113A
.................... 				case 0x10:	//FWDT 
.................... 					//read data from buffer 
.................... 					FWDT=make16(MB_Buffer[j],MB_Buffer[j+1]); 
0E2C:  CLRF   03
0E2E:  MOVLB  5
0E30:  MOVF   x63,W
0E32:  ADDLW  58
0E34:  MOVWF  FE9
0E36:  MOVLW  04
0E38:  ADDWFC 03,W
0E3A:  MOVWF  FEA
0E3C:  MOVFF  FEF,59D
0E40:  MOVLW  01
0E42:  ADDWF  x63,W
0E44:  CLRF   03
0E46:  ADDLW  58
0E48:  MOVWF  FE9
0E4A:  MOVLW  04
0E4C:  ADDWFC 03,W
0E4E:  MOVWF  FEA
0E50:  MOVFF  FEF,59E
0E54:  MOVFF  59D,3C3
0E58:  MOVFF  59E,3C2
.................... 					j+=2;	//set next data 
0E5C:  MOVLW  02
0E5E:  ADDWF  x63,F
.................... 					break; 
0E60:  BRA    113A
.................... 				case 0x11:	//PCOUNT 
.................... 					//read data from buffer 
.................... 					PCOUNT=make16(MB_Buffer[j],MB_Buffer[j+1]); 
0E62:  CLRF   03
0E64:  MOVLB  5
0E66:  MOVF   x63,W
0E68:  ADDLW  58
0E6A:  MOVWF  FE9
0E6C:  MOVLW  04
0E6E:  ADDWFC 03,W
0E70:  MOVWF  FEA
0E72:  MOVFF  FEF,59D
0E76:  MOVLW  01
0E78:  ADDWF  x63,W
0E7A:  CLRF   03
0E7C:  ADDLW  58
0E7E:  MOVWF  FE9
0E80:  MOVLW  04
0E82:  ADDWFC 03,W
0E84:  MOVWF  FEA
0E86:  MOVFF  FEF,59E
0E8A:  MOVFF  59D,3C5
0E8E:  MOVFF  59E,3C4
.................... 					j+=2;	//set next data 
0E92:  MOVLW  02
0E94:  ADDWF  x63,F
.................... 					break; 
0E96:  BRA    113A
.................... 				case 0x12:	// 
.................... 					j+=2;	//set next data 
0E98:  MOVLW  02
0E9A:  MOVLB  5
0E9C:  ADDWF  x63,F
.................... 					break; 
0E9E:  BRA    113A
.................... 				case 0x13:	// 
.................... 					Addr=make16(MB_Buffer[j],MB_Buffer[j+1]); 
0EA0:  CLRF   03
0EA2:  MOVLB  5
0EA4:  MOVF   x63,W
0EA6:  ADDLW  58
0EA8:  MOVWF  FE9
0EAA:  MOVLW  04
0EAC:  ADDWFC 03,W
0EAE:  MOVWF  FEA
0EB0:  MOVFF  FEF,59D
0EB4:  MOVLW  01
0EB6:  ADDWF  x63,W
0EB8:  CLRF   03
0EBA:  ADDLW  58
0EBC:  MOVWF  FE9
0EBE:  MOVLW  04
0EC0:  ADDWFC 03,W
0EC2:  MOVWF  FEA
0EC4:  MOVFF  FEF,59E
0EC8:  MOVFF  59D,3DF
0ECC:  MOVFF  59E,3DE
.................... 					j+=2;	//set next data 
0ED0:  MOVLW  02
0ED2:  ADDWF  x63,F
.................... 					break; 
0ED4:  BRA    113A
.................... 				case 0x14:	//Valid request register	- no acton 
.................... 					j+=2;	//set next data 
0ED6:  MOVLW  02
0ED8:  MOVLB  5
0EDA:  ADDWF  x63,F
.................... 					break; 
0EDC:  BRA    113A
.................... 				case 0x15:	//CRC error register - no action 
.................... 					j+=2;	//set next data 
0EDE:  MOVLW  02
0EE0:  MOVLB  5
0EE2:  ADDWF  x63,F
.................... 					break; 
0EE4:  BRA    113A
.................... 				case 0x16:	//Exception register - no action 
.................... 					j+=2;	//set next data 
0EE6:  MOVLW  02
0EE8:  MOVLB  5
0EEA:  ADDWF  x63,F
.................... 					break; 
0EEC:  BRA    113A
.................... 				case 0x17:	//KGT 
.................... 					flcopy=make32(MB_Buffer[j+3],MB_Buffer[j+2],MB_Buffer[j+1],MB_Buffer[j]); 
0EEE:  MOVLW  03
0EF0:  MOVLB  5
0EF2:  ADDWF  x63,W
0EF4:  CLRF   03
0EF6:  ADDLW  58
0EF8:  MOVWF  FE9
0EFA:  MOVLW  04
0EFC:  ADDWFC 03,W
0EFE:  MOVWF  FEA
0F00:  MOVFF  FEF,59D
0F04:  MOVLW  02
0F06:  ADDWF  x63,W
0F08:  CLRF   03
0F0A:  ADDLW  58
0F0C:  MOVWF  FE9
0F0E:  MOVLW  04
0F10:  ADDWFC 03,W
0F12:  MOVWF  FEA
0F14:  MOVFF  FEF,59E
0F18:  MOVLW  01
0F1A:  ADDWF  x63,W
0F1C:  CLRF   03
0F1E:  ADDLW  58
0F20:  MOVWF  FE9
0F22:  MOVLW  04
0F24:  ADDWFC 03,W
0F26:  MOVWF  FEA
0F28:  MOVFF  FEF,59F
0F2C:  CLRF   03
0F2E:  MOVF   x63,W
0F30:  ADDLW  58
0F32:  MOVWF  FE9
0F34:  MOVLW  04
0F36:  ADDWFC 03,W
0F38:  MOVWF  FEA
0F3A:  MOVFF  FEF,5A0
0F3E:  MOVFF  59D,59C
0F42:  MOVFF  59E,59B
0F46:  MOVFF  59F,59A
0F4A:  MOVFF  5A0,599
.................... 					memcpy(&KGT,&flcopy,4); 
0F4E:  MOVLW  03
0F50:  MOVWF  FEA
0F52:  MOVLW  D2
0F54:  MOVWF  FE9
0F56:  MOVLW  05
0F58:  MOVWF  FE2
0F5A:  MOVLW  99
0F5C:  MOVWF  FE1
0F5E:  MOVLW  04
0F60:  MOVWF  01
0F62:  MOVFF  FE6,FEE
0F66:  DECFSZ 01,F
0F68:  BRA    0F62
.................... 					j+=4;	//set next data 
0F6A:  MOVLW  04
0F6C:  ADDWF  x63,F
.................... 					break; 
0F6E:  BRA    113A
.................... 				case 0x18:	//KGU 
.................... 					flcopy=make32(MB_Buffer[j+3],MB_Buffer[j+2],MB_Buffer[j+1],MB_Buffer[j]); 
0F70:  MOVLW  03
0F72:  MOVLB  5
0F74:  ADDWF  x63,W
0F76:  CLRF   03
0F78:  ADDLW  58
0F7A:  MOVWF  FE9
0F7C:  MOVLW  04
0F7E:  ADDWFC 03,W
0F80:  MOVWF  FEA
0F82:  MOVFF  FEF,59D
0F86:  MOVLW  02
0F88:  ADDWF  x63,W
0F8A:  CLRF   03
0F8C:  ADDLW  58
0F8E:  MOVWF  FE9
0F90:  MOVLW  04
0F92:  ADDWFC 03,W
0F94:  MOVWF  FEA
0F96:  MOVFF  FEF,59E
0F9A:  MOVLW  01
0F9C:  ADDWF  x63,W
0F9E:  CLRF   03
0FA0:  ADDLW  58
0FA2:  MOVWF  FE9
0FA4:  MOVLW  04
0FA6:  ADDWFC 03,W
0FA8:  MOVWF  FEA
0FAA:  MOVFF  FEF,59F
0FAE:  CLRF   03
0FB0:  MOVF   x63,W
0FB2:  ADDLW  58
0FB4:  MOVWF  FE9
0FB6:  MOVLW  04
0FB8:  ADDWFC 03,W
0FBA:  MOVWF  FEA
0FBC:  MOVFF  FEF,5A0
0FC0:  MOVFF  59D,59C
0FC4:  MOVFF  59E,59B
0FC8:  MOVFF  59F,59A
0FCC:  MOVFF  5A0,599
.................... 					memcpy(&KGU,&flcopy,4); 
0FD0:  MOVLW  03
0FD2:  MOVWF  FEA
0FD4:  MOVLW  D6
0FD6:  MOVWF  FE9
0FD8:  MOVLW  05
0FDA:  MOVWF  FE2
0FDC:  MOVLW  99
0FDE:  MOVWF  FE1
0FE0:  MOVLW  04
0FE2:  MOVWF  01
0FE4:  MOVFF  FE6,FEE
0FE8:  DECFSZ 01,F
0FEA:  BRA    0FE4
.................... 					j+=4;	//set next data 
0FEC:  MOVLW  04
0FEE:  ADDWF  x63,F
.................... 					break; 
0FF0:  BRA    113A
.................... 				case 0x19:	//KST0 
.................... 					flcopy=make32(MB_Buffer[j+3],MB_Buffer[j+2],MB_Buffer[j+1],MB_Buffer[j]); 
0FF2:  MOVLW  03
0FF4:  MOVLB  5
0FF6:  ADDWF  x63,W
0FF8:  CLRF   03
0FFA:  ADDLW  58
0FFC:  MOVWF  FE9
0FFE:  MOVLW  04
1000:  ADDWFC 03,W
1002:  MOVWF  FEA
1004:  MOVFF  FEF,59D
1008:  MOVLW  02
100A:  ADDWF  x63,W
100C:  CLRF   03
100E:  ADDLW  58
1010:  MOVWF  FE9
1012:  MOVLW  04
1014:  ADDWFC 03,W
1016:  MOVWF  FEA
1018:  MOVFF  FEF,59E
101C:  MOVLW  01
101E:  ADDWF  x63,W
1020:  CLRF   03
1022:  ADDLW  58
1024:  MOVWF  FE9
1026:  MOVLW  04
1028:  ADDWFC 03,W
102A:  MOVWF  FEA
102C:  MOVFF  FEF,59F
1030:  CLRF   03
1032:  MOVF   x63,W
1034:  ADDLW  58
1036:  MOVWF  FE9
1038:  MOVLW  04
103A:  ADDWFC 03,W
103C:  MOVWF  FEA
103E:  MOVFF  FEF,5A0
1042:  MOVFF  59D,59C
1046:  MOVFF  59E,59B
104A:  MOVFF  59F,59A
104E:  MOVFF  5A0,599
.................... 					memcpy(&KST0,&flcopy,4); 
1052:  MOVLW  03
1054:  MOVWF  FEA
1056:  MOVLW  AC
1058:  MOVWF  FE9
105A:  MOVLW  05
105C:  MOVWF  FE2
105E:  MOVLW  99
1060:  MOVWF  FE1
1062:  MOVLW  04
1064:  MOVWF  01
1066:  MOVFF  FE6,FEE
106A:  DECFSZ 01,F
106C:  BRA    1066
.................... 					j+=4;	//set next data 
106E:  MOVLW  04
1070:  ADDWF  x63,F
.................... 					break; 
1072:  BRA    113A
.................... 				case 0x1A:	//dummy command			 
.................... 					j+=4;	//set next data 
1074:  MOVLW  04
1076:  MOVLB  5
1078:  ADDWF  x63,F
.................... 					break; 
107A:  BRA    113A
.................... 				case 0x1B:	//T0_CAL 
.................... 					//read data from buffer 
.................... 					T0_CAL=make16(MB_Buffer[j],MB_Buffer[j+1]); 
107C:  CLRF   03
107E:  MOVLB  5
1080:  MOVF   x63,W
1082:  ADDLW  58
1084:  MOVWF  FE9
1086:  MOVLW  04
1088:  ADDWFC 03,W
108A:  MOVWF  FEA
108C:  MOVFF  FEF,59D
1090:  MOVLW  01
1092:  ADDWF  x63,W
1094:  CLRF   03
1096:  ADDLW  58
1098:  MOVWF  FE9
109A:  MOVLW  04
109C:  ADDWFC 03,W
109E:  MOVWF  FEA
10A0:  MOVFF  FEF,59E
10A4:  MOVFF  59D,3B1
10A8:  MOVFF  59E,3B0
.................... 					j+=2;	//set next data 
10AC:  MOVLW  02
10AE:  ADDWF  x63,F
.................... 					break; 
10B0:  BRA    113A
.................... 				case 0x1C:	//T1_CAL 
.................... 					//read data from buffer 
.................... 					T1_CAL=make16(MB_Buffer[j],MB_Buffer[j+1]); 
10B2:  CLRF   03
10B4:  MOVLB  5
10B6:  MOVF   x63,W
10B8:  ADDLW  58
10BA:  MOVWF  FE9
10BC:  MOVLW  04
10BE:  ADDWFC 03,W
10C0:  MOVWF  FEA
10C2:  MOVFF  FEF,59D
10C6:  MOVLW  01
10C8:  ADDWF  x63,W
10CA:  CLRF   03
10CC:  ADDLW  58
10CE:  MOVWF  FE9
10D0:  MOVLW  04
10D2:  ADDWFC 03,W
10D4:  MOVWF  FEA
10D6:  MOVFF  FEF,59E
10DA:  MOVFF  59D,3BD
10DE:  MOVFF  59E,3BC
.................... 					j+=2;	//set next data 
10E2:  MOVLW  02
10E4:  ADDWF  x63,F
.................... 					break; 
10E6:  BRA    113A
.................... 				case 0x1D:	//TG_CAL 
.................... 					//read data from buffer 
.................... 					TG_CAL=make16(MB_Buffer[j],MB_Buffer[j+1]); 
10E8:  CLRF   03
10EA:  MOVLB  5
10EC:  MOVF   x63,W
10EE:  ADDLW  58
10F0:  MOVWF  FE9
10F2:  MOVLW  04
10F4:  ADDWFC 03,W
10F6:  MOVWF  FEA
10F8:  MOVFF  FEF,59D
10FC:  MOVLW  01
10FE:  ADDWF  x63,W
1100:  CLRF   03
1102:  ADDLW  58
1104:  MOVWF  FE9
1106:  MOVLW  04
1108:  ADDWFC 03,W
110A:  MOVWF  FEA
110C:  MOVFF  FEF,59E
1110:  MOVFF  59D,3DB
1114:  MOVFF  59E,3DA
.................... 					j+=2;	//set next data 
1118:  MOVLW  02
111A:  ADDWF  x63,F
.................... 					break; 
111C:  BRA    113A
.................... 				default:	//no valid registers							 
.................... 					MB_Buffer[1]|=0x80; 
111E:  MOVLB  4
1120:  BSF    x59.7
.................... 					MB_Buffer[2]=illegal_data_value; 
1122:  MOVLW  03
1124:  MOVWF  x5A
.................... 					MB_Length=5; 
1126:  MOVLW  05
1128:  MOVLB  5
112A:  MOVWF  x58
.................... 					ExcReq++; 
112C:  INCF   x5D,F
112E:  BTFSC  FD8.2
1130:  INCF   x5E,F
.................... 					ValidReq--; 
1132:  MOVF   x59,W
1134:  BTFSC  FD8.2
1136:  DECF   x5A,F
1138:  DECF   x59,F
.................... 			};	 
.................... } 
113A:  MOVLB  0
113C:  GOTO   1BB4 (RETURN)
.................... // 
.................... //timer 2 interrupt vector - packet recognition 
.................... #INT_TIMER1 
.................... void	Reaction(void){ 
.................... 	int8	StAddr,EnAddr;	 
.................... 	int8	bytecount; 
.................... 	int16	k,l; 
.................... 	//end of tramsmittion process 
.................... 	disable_interrupts(INT_RDA); 
*
18EE:  BCF    F9D.5
.................... 	output_high(STAT);	//on led 
18F0:  BCF    F94.0
18F2:  BSF    F8B.0
.................... 	// 
.................... 	if (MB_Length<4)	goto exit;	//exit if to small 
18F4:  MOVLB  5
18F6:  MOVF   x58,W
18F8:  SUBLW  03
18FA:  BNC   18FE
18FC:  BRA    1E70
.................... 	//detect adress 
.................... 	if((MB_Buffer[0]!=make8(Addr,0))&&(MB_Buffer[0]!=0))	goto exit;	//if not broadcast & not qwn address - then exit 
18FE:  MOVLB  3
1900:  MOVF   xDE,W
1902:  MOVLB  4
1904:  SUBWF  x58,W
1906:  BZ    1910
1908:  MOVF   x58,F
190A:  BZ    1910
190C:  MOVLB  5
190E:  BRA    1E70
.................... 	//calculate CRC 
.................... 	CRCc=ModbusCRC(MB_Buffer,MB_Length-2); 
1910:  MOVLW  02
1912:  MOVLB  5
1914:  SUBWF  x58,W
1916:  MOVWF  x98
1918:  MOVLW  04
191A:  MOVWF  x9A
191C:  MOVLW  58
191E:  MOVWF  x99
1920:  MOVFF  598,59B
1924:  MOVLB  0
1926:  CALL   03CE
192A:  MOVFF  02,562
192E:  MOVFF  01,561
.................... 	CRCr=make16(MB_Buffer[MB_Length-2],MB_Buffer[MB_Length-1]); 
1932:  MOVLW  02
1934:  MOVLB  5
1936:  SUBWF  x58,W
1938:  CLRF   03
193A:  ADDLW  58
193C:  MOVWF  FE9
193E:  MOVLW  04
1940:  ADDWFC 03,W
1942:  MOVWF  FEA
1944:  MOVFF  FEF,598
1948:  MOVLW  01
194A:  SUBWF  x58,W
194C:  CLRF   03
194E:  ADDLW  58
1950:  MOVWF  FE9
1952:  MOVLW  04
1954:  ADDWFC 03,W
1956:  MOVWF  FEA
1958:  MOVFF  FEF,599
195C:  MOVFF  598,560
1960:  MOVFF  599,55F
.................... 	// 
.................... 	if(CRCc!=CRCr){				//if error CRC then exit 
1964:  MOVF   x5F,W
1966:  SUBWF  x61,W
1968:  BNZ   1970
196A:  MOVF   x60,W
196C:  SUBWF  x62,W
196E:  BZ    1978
.................... 		CRCReq++;	 
1970:  INCF   x5B,F
1972:  BTFSC  FD8.2
1974:  INCF   x5C,F
.................... 		goto exit; 
1976:  BRA    1E70
.................... 	}; 
.................... 	//proceed command 
.................... 	//analizing function code 
.................... 	switch(MB_Buffer[1]){ 
1978:  MOVLB  4
197A:  MOVF   x59,W
197C:  XORLW  42
197E:  MOVLB  0
1980:  BZ    19A8
1982:  XORLW  01
1984:  BTFSC  FD8.2
1986:  BRA    1A6A
1988:  XORLW  07
198A:  BTFSC  FD8.2
198C:  BRA    1B26
198E:  XORLW  01
1990:  BTFSC  FD8.2
1992:  BRA    1B7C
1994:  XORLW  20
1996:  BTFSC  FD8.2
1998:  BRA    1BDC
199A:  XORLW  0F
199C:  BTFSC  FD8.2
199E:  BRA    1C0E
19A0:  XORLW  01
19A2:  BTFSC  FD8.2
19A4:  BRA    1D7A
19A6:  BRA    1DDA
.................... 		//CMODE 
.................... 		case	0x42: 
.................... 				if(MB_Length==5){ 
19A8:  MOVLB  5
19AA:  MOVF   x58,W
19AC:  SUBLW  05
19AE:  BNZ   1A54
.................... 					switch(MB_Buffer[2]){ 
19B0:  MOVLB  4
19B2:  MOVF   x5A,W
19B4:  XORLW  00
19B6:  MOVLB  0
19B8:  BZ    19C4
19BA:  XORLW  01
19BC:  BZ    19DA
19BE:  XORLW  03
19C0:  BZ    1A38
19C2:  BRA    1A3E
.................... 						case	0x00:	//normal cycle 
.................... 							OneCycle=0;	//clear one cycle flag 
19C4:  MOVLB  3
19C6:  BCF    xC6.0
.................... 							DaqState=DaqStart;	//start new measuring 
19C8:  MOVLW  01
19CA:  MOVWF  xEF
.................... 							MB_Length=4; 
19CC:  MOVLW  04
19CE:  MOVLB  5
19D0:  MOVWF  x58
.................... 							ValidReq++; 
19D2:  INCF   x59,F
19D4:  BTFSC  FD8.2
19D6:  INCF   x5A,F
.................... 							break; 
19D8:  BRA    1A52
.................... 						case	0x01: 
.................... 							OneCycle=1;	//set one cycle flag 
19DA:  MOVLB  3
19DC:  BSF    xC6.0
.................... 							DaqState=DaqStart;	//set new cycle 
19DE:  MOVLW  01
19E0:  MOVWF  xEF
.................... 							for(k=0; k<PCOUNT; k++){ 
19E2:  MOVLB  5
19E4:  CLRF   x95
19E6:  CLRF   x94
19E8:  MOVF   x95,W
19EA:  MOVLB  3
19EC:  SUBWF  xC5,W
19EE:  BNC   1A2A
19F0:  BNZ   1A02
19F2:  MOVF   xC4,W
19F4:  MOVLB  5
19F6:  SUBWF  x94,W
19F8:  BTFSS  FD8.0
19FA:  BRA    1A00
19FC:  MOVLB  3
19FE:  BRA    1A2A
1A00:  MOVLB  3
.................... 								gam_buf0[k]=0;	//clear measuring buffer 
1A02:  BCF    FD8.0
1A04:  MOVLB  5
1A06:  RLCF   x94,W
1A08:  MOVWF  02
1A0A:  RLCF   x95,W
1A0C:  MOVWF  03
1A0E:  MOVF   02,W
1A10:  ADDLW  A4
1A12:  MOVWF  FE9
1A14:  MOVLW  02
1A16:  ADDWFC 03,W
1A18:  MOVWF  FEA
1A1A:  CLRF   FEC
1A1C:  MOVF   FED,F
1A1E:  CLRF   FEF
.................... 								}; 
1A20:  INCF   x94,F
1A22:  BTFSC  FD8.2
1A24:  INCF   x95,F
1A26:  BRA    19E8
1A28:  MOVLB  3
.................... 							MB_Length=4; 
1A2A:  MOVLW  04
1A2C:  MOVLB  5
1A2E:  MOVWF  x58
.................... 							ValidReq++; 
1A30:  INCF   x59,F
1A32:  BTFSC  FD8.2
1A34:  INCF   x5A,F
.................... 							break; 
1A36:  BRA    1A52
.................... 						case	0x02:	//reset mcu 
.................... 							reset_cpu(); 
1A38:  RESET
.................... 							break; 
1A3A:  MOVLB  5
1A3C:  BRA    1A52
.................... 						default: 
.................... 						MB_Buffer[1]|=0x80; 
1A3E:  MOVLB  4
1A40:  BSF    x59.7
.................... 						MB_Buffer[2]=illegal_data_value; 
1A42:  MOVLW  03
1A44:  MOVWF  x5A
.................... 						ExcReq++; 
1A46:  MOVLB  5
1A48:  INCF   x5D,F
1A4A:  BTFSC  FD8.2
1A4C:  INCF   x5E,F
.................... 						MB_Length=5; 
1A4E:  MOVLW  05
1A50:  MOVWF  x58
.................... 						}; 
.................... 					}else{ 
1A52:  BRA    1A68
.................... 					MB_Buffer[1]|=0x80; 
1A54:  MOVLB  4
1A56:  BSF    x59.7
.................... 					MB_Buffer[2]=illegal_data_address; 
1A58:  MOVLW  02
1A5A:  MOVWF  x5A
.................... 					MB_Length=5; 
1A5C:  MOVLW  05
1A5E:  MOVLB  5
1A60:  MOVWF  x58
.................... 					ExcReq++; 
1A62:  INCF   x5D,F
1A64:  BTFSC  FD8.2
1A66:  INCF   x5E,F
.................... 					}; 
.................... 				break; 
1A68:  BRA    1DEE
.................... 		//read buffer 
.................... 		case	0x43: 
.................... 				if(MB_Length==7){ 
1A6A:  MOVLB  5
1A6C:  MOVF   x58,W
1A6E:  SUBLW  07
1A70:  BNZ   1B10
.................... 					switch(MB_Buffer[3]){ 
1A72:  MOVLB  4
1A74:  MOVF   x5B,W
1A76:  XORLW  00
1A78:  MOVLB  0
1A7A:  BZ    1A82
1A7C:  XORLW  01
1A7E:  BZ    1ABE
1A80:  BRA    1AFA
.................... 						case	0x00:	//channel 0 
.................... 							//pack 
.................... 							l=2; 
1A82:  MOVLB  5
1A84:  CLRF   x97
1A86:  MOVLW  02
1A88:  MOVWF  x96
.................... 							for(k=0; k<0x100; k+=2){ 
1A8A:  CLRF   x95
1A8C:  CLRF   x94
1A8E:  MOVF   x95,W
1A90:  SUBLW  00
1A92:  BNC   1AB2
.................... 								MB_Buffer[l]=0; 
1A94:  MOVLW  58
1A96:  ADDWF  x96,W
1A98:  MOVWF  FE9
1A9A:  MOVLW  04
1A9C:  ADDWFC x97,W
1A9E:  MOVWF  FEA
1AA0:  CLRF   FEF
.................... 								l++; 
1AA2:  INCF   x96,F
1AA4:  BTFSC  FD8.2
1AA6:  INCF   x97,F
.................... 								}; 
1AA8:  MOVLW  02
1AAA:  ADDWF  x94,F
1AAC:  MOVLW  00
1AAE:  ADDWFC x95,F
1AB0:  BRA    1A8E
.................... 							MB_Length=132; 
1AB2:  MOVLW  84
1AB4:  MOVWF  x58
.................... 							ValidReq++; 
1AB6:  INCF   x59,F
1AB8:  BTFSC  FD8.2
1ABA:  INCF   x5A,F
.................... 							break; 
1ABC:  BRA    1B0E
.................... 						case	0x01:	//channel 1 
.................... 							//pack 
.................... 							l=2; 
1ABE:  MOVLB  5
1AC0:  CLRF   x97
1AC2:  MOVLW  02
1AC4:  MOVWF  x96
.................... 							for(k=0; k<0x100; k+=2){ 
1AC6:  CLRF   x95
1AC8:  CLRF   x94
1ACA:  MOVF   x95,W
1ACC:  SUBLW  00
1ACE:  BNC   1AEE
.................... 								MB_Buffer[l]=0; 
1AD0:  MOVLW  58
1AD2:  ADDWF  x96,W
1AD4:  MOVWF  FE9
1AD6:  MOVLW  04
1AD8:  ADDWFC x97,W
1ADA:  MOVWF  FEA
1ADC:  CLRF   FEF
.................... 								l++; 
1ADE:  INCF   x96,F
1AE0:  BTFSC  FD8.2
1AE2:  INCF   x97,F
.................... 								}; 
1AE4:  MOVLW  02
1AE6:  ADDWF  x94,F
1AE8:  MOVLW  00
1AEA:  ADDWFC x95,F
1AEC:  BRA    1ACA
.................... 							MB_Length=132; 
1AEE:  MOVLW  84
1AF0:  MOVWF  x58
.................... 							ValidReq++; 
1AF2:  INCF   x59,F
1AF4:  BTFSC  FD8.2
1AF6:  INCF   x5A,F
.................... 							break; 
1AF8:  BRA    1B0E
.................... 						default:						 
.................... 						MB_Buffer[1]|=0x80; 
1AFA:  MOVLB  4
1AFC:  BSF    x59.7
.................... 						MB_Buffer[2]=illegal_data_value; 
1AFE:  MOVLW  03
1B00:  MOVWF  x5A
.................... 						ExcReq++; 
1B02:  MOVLB  5
1B04:  INCF   x5D,F
1B06:  BTFSC  FD8.2
1B08:  INCF   x5E,F
.................... 						MB_Length=5; 
1B0A:  MOVLW  05
1B0C:  MOVWF  x58
.................... 						}; 
.................... 					}else{ 
1B0E:  BRA    1B24
.................... 					MB_Buffer[1]|=0x80; 
1B10:  MOVLB  4
1B12:  BSF    x59.7
.................... 					MB_Buffer[2]=illegal_data_address; 
1B14:  MOVLW  02
1B16:  MOVWF  x5A
.................... 					MB_Length=5; 
1B18:  MOVLW  05
1B1A:  MOVLB  5
1B1C:  MOVWF  x58
.................... 					ExcReq++; 
1B1E:  INCF   x5D,F
1B20:  BTFSC  FD8.2
1B22:  INCF   x5E,F
.................... 					}; 
.................... 				break; 
1B24:  BRA    1DEE
.................... 		//get registers 
.................... 		case	0x44: 
.................... 				if(MB_Length==7){ 
1B26:  MOVLB  5
1B28:  MOVF   x58,W
1B2A:  SUBLW  07
1B2C:  BNZ   1B66
.................... 					//valig req propose 
.................... 					MB_Length=4; 
1B2E:  MOVLW  04
1B30:  MOVWF  x58
.................... 					ValidReq++; 
1B32:  INCF   x59,F
1B34:  BTFSC  FD8.2
1B36:  INCF   x5A,F
.................... 					//action 
.................... 					//forming answer 
.................... 					j=2;	//set start answer pointer 
1B38:  MOVLW  02
1B3A:  MOVWF  x63
.................... 					StAddr=MB_Buffer[3]; 
1B3C:  MOVFF  45B,591
.................... 					EnAddr=(MB_Buffer[3]+MB_Buffer[4]); 
1B40:  MOVLB  4
1B42:  MOVF   x5C,W
1B44:  ADDWF  x5B,W
1B46:  MOVLB  5
1B48:  MOVWF  x92
.................... 					for(bytecount=StAddr; bytecount<EnAddr; bytecount++){ 
1B4A:  MOVFF  591,593
1B4E:  MOVF   x92,W
1B50:  SUBWF  x93,W
1B52:  BC    1B64
.................... 						AddRegData(bytecount);		//get registers						 
1B54:  MOVFF  593,598
1B58:  MOVLB  0
1B5A:  GOTO   0426
.................... 					}; 
1B5E:  MOVLB  5
1B60:  INCF   x93,F
1B62:  BRA    1B4E
.................... 					}else{ 
1B64:  BRA    1B7A
.................... 					MB_Buffer[1]|=0x80; 
1B66:  MOVLB  4
1B68:  BSF    x59.7
.................... 					MB_Buffer[2]=illegal_data_address; 
1B6A:  MOVLW  02
1B6C:  MOVWF  x5A
.................... 					MB_Length=5; 
1B6E:  MOVLW  05
1B70:  MOVLB  5
1B72:  MOVWF  x58
.................... 					ExcReq++; 
1B74:  INCF   x5D,F
1B76:  BTFSC  FD8.2
1B78:  INCF   x5E,F
.................... 					};		 
.................... 				break; 
1B7A:  BRA    1DEE
.................... 		//set registers 
.................... 		case	0x45: 
.................... 				if((MB_Length>=8)&&(!(MB_Length&0x01))){ 
1B7C:  MOVLB  5
1B7E:  MOVF   x58,W
1B80:  SUBLW  07
1B82:  BC    1BC6
1B84:  BTFSC  x58.0
1B86:  BRA    1BC6
.................... 					//action 
.................... 					j=4;	//set start answer pointer 
1B88:  MOVLW  04
1B8A:  MOVWF  x63
.................... 					StAddr=MB_Buffer[3]; 
1B8C:  MOVFF  45B,591
.................... 					EnAddr=MB_Length-2; 
1B90:  MOVLW  02
1B92:  SUBWF  x58,W
1B94:  MOVWF  x92
.................... 					//valig req propose 
.................... 					MB_Length=4; 
1B96:  MOVLW  04
1B98:  MOVWF  x58
.................... 					ValidReq++; 
1B9A:  INCF   x59,F
1B9C:  BTFSC  FD8.2
1B9E:  INCF   x5A,F
.................... 					for(bytecount=StAddr; j<EnAddr; bytecount++){ 
1BA0:  MOVFF  591,593
1BA4:  MOVF   x92,W
1BA6:  SUBWF  x63,W
1BA8:  BC    1BBA
.................... 						SetRegData(bytecount);		//get registers 
1BAA:  MOVFF  593,598
1BAE:  MOVLB  0
1BB0:  GOTO   0C18
.................... 					}; 
1BB4:  MOVLB  5
1BB6:  INCF   x93,F
1BB8:  BRA    1BA4
.................... 					//forming answer 
.................... 					MB_Length=4; 
1BBA:  MOVLW  04
1BBC:  MOVWF  x58
.................... 					ValidReq++; 
1BBE:  INCF   x59,F
1BC0:  BTFSC  FD8.2
1BC2:  INCF   x5A,F
.................... 					}else{ 
1BC4:  BRA    1BDA
.................... 					MB_Buffer[1]|=0x80; 
1BC6:  MOVLB  4
1BC8:  BSF    x59.7
.................... 					MB_Buffer[2]=illegal_data_address; 
1BCA:  MOVLW  02
1BCC:  MOVWF  x5A
.................... 					MB_Length=5; 
1BCE:  MOVLW  05
1BD0:  MOVLB  5
1BD2:  MOVWF  x58
.................... 					ExcReq++; 
1BD4:  INCF   x5D,F
1BD6:  BTFSC  FD8.2
1BD8:  INCF   x5E,F
.................... 					};		 
.................... 				break; 
1BDA:  BRA    1DEE
.................... 		//write to EEPROM command 
.................... 		case	0x65: 
.................... 				if(MB_Length==4){ 
1BDC:  MOVLB  5
1BDE:  MOVF   x58,W
1BE0:  SUBLW  04
1BE2:  BNZ   1BF8
.................... 					BUWrite(); 
1BE4:  MOVLB  0
1BE6:  GOTO   1140
.................... 					MB_Length=4; 
1BEA:  MOVLW  04
1BEC:  MOVLB  5
1BEE:  MOVWF  x58
.................... 					ValidReq++; 
1BF0:  INCF   x59,F
1BF2:  BTFSC  FD8.2
1BF4:  INCF   x5A,F
.................... 					}else{ 
1BF6:  BRA    1C0C
.................... 					MB_Buffer[1]|=0x80; 
1BF8:  MOVLB  4
1BFA:  BSF    x59.7
.................... 					MB_Buffer[2]=illegal_data_address; 
1BFC:  MOVLW  02
1BFE:  MOVWF  x5A
.................... 					MB_Length=5; 
1C00:  MOVLW  05
1C02:  MOVLB  5
1C04:  MOVWF  x58
.................... 					ExcReq++; 
1C06:  INCF   x5D,F
1C08:  BTFSC  FD8.2
1C0A:  INCF   x5E,F
.................... 					};		 
.................... 				break; 
1C0C:  BRA    1DEE
.................... 		//set speed 
.................... 		case	0x6A: 
.................... 				if(MB_Length==5){ 
1C0E:  MOVLB  5
1C10:  MOVF   x58,W
1C12:  SUBLW  05
1C14:  BTFSS  FD8.2
1C16:  BRA    1D60
.................... 					MB_Length=4; 
1C18:  MOVLW  04
1C1A:  MOVWF  x58
.................... 					ValidReq++; 
1C1C:  INCF   x59,F
1C1E:  BTFSC  FD8.2
1C20:  INCF   x5A,F
.................... 					switch(MB_Buffer[2]){ 
1C22:  MOVLB  4
1C24:  MOVF   x5A,W
1C26:  XORLW  00
1C28:  MOVLB  0
1C2A:  BZ    1C4A
1C2C:  XORLW  01
1C2E:  BZ    1C68
1C30:  XORLW  03
1C32:  BZ    1C86
1C34:  XORLW  01
1C36:  BZ    1CA4
1C38:  XORLW  07
1C3A:  BZ    1CC2
1C3C:  XORLW  01
1C3E:  BZ    1CE0
1C40:  XORLW  03
1C42:  BZ    1CFE
1C44:  XORLW  01
1C46:  BZ    1D18
1C48:  BRA    1D34
.................... 						case	0x00:	//1200 
.................... 							Speed=1200; 
1C4A:  MOVLW  04
1C4C:  MOVLB  3
1C4E:  MOVWF  xDD
1C50:  MOVLW  B0
1C52:  MOVWF  xDC
.................... 							setup_uart(1200); 
1C54:  BSF    FB8.3
1C56:  MOVLW  0A
1C58:  MOVWF  FAF
1C5A:  MOVLW  1A
1C5C:  MOVWF  FB0
1C5E:  MOVLW  A6
1C60:  MOVWF  FAC
1C62:  NOP   
1C64:  NOP   
.................... 							break; 
1C66:  BRA    1D4A
.................... 						case	0x01:	//1800 
.................... 							Speed=1800; 
1C68:  MOVLW  07
1C6A:  MOVLB  3
1C6C:  MOVWF  xDD
1C6E:  MOVLW  08
1C70:  MOVWF  xDC
.................... 							setup_uart(1800); 
1C72:  BSF    FB8.3
1C74:  MOVLW  5B
1C76:  MOVWF  FAF
1C78:  MOVLW  11
1C7A:  MOVWF  FB0
1C7C:  MOVLW  A6
1C7E:  MOVWF  FAC
1C80:  NOP   
1C82:  NOP   
.................... 							break; 
1C84:  BRA    1D4A
.................... 						case	0x02:	//2400 
.................... 							Speed=2400; 
1C86:  MOVLW  09
1C88:  MOVLB  3
1C8A:  MOVWF  xDD
1C8C:  MOVLW  60
1C8E:  MOVWF  xDC
.................... 							setup_uart(2400); 
1C90:  BSF    FB8.3
1C92:  MOVLW  04
1C94:  MOVWF  FAF
1C96:  MOVLW  0D
1C98:  MOVWF  FB0
1C9A:  MOVLW  A6
1C9C:  MOVWF  FAC
1C9E:  NOP   
1CA0:  NOP   
.................... 							break; 
1CA2:  BRA    1D4A
.................... 						case	0x03:	//4800 
.................... 							Speed=4800; 
1CA4:  MOVLW  12
1CA6:  MOVLB  3
1CA8:  MOVWF  xDD
1CAA:  MOVLW  C0
1CAC:  MOVWF  xDC
.................... 							setup_uart(4800); 
1CAE:  BSF    FB8.3
1CB0:  MOVLW  82
1CB2:  MOVWF  FAF
1CB4:  MOVLW  06
1CB6:  MOVWF  FB0
1CB8:  MOVLW  A6
1CBA:  MOVWF  FAC
1CBC:  NOP   
1CBE:  NOP   
.................... 							break; 
1CC0:  BRA    1D4A
.................... 						case	0x04:	//7200 
.................... 							Speed=7200; 
1CC2:  MOVLW  1C
1CC4:  MOVLB  3
1CC6:  MOVWF  xDD
1CC8:  MOVLW  20
1CCA:  MOVWF  xDC
.................... 							setup_uart(7200); 
1CCC:  BSF    FB8.3
1CCE:  MOVLW  56
1CD0:  MOVWF  FAF
1CD2:  MOVLW  04
1CD4:  MOVWF  FB0
1CD6:  MOVLW  A6
1CD8:  MOVWF  FAC
1CDA:  NOP   
1CDC:  NOP   
.................... 							break; 
1CDE:  BRA    1D4A
.................... 						case	0x05:	//9600 
.................... 							Speed=9600; 
1CE0:  MOVLW  25
1CE2:  MOVLB  3
1CE4:  MOVWF  xDD
1CE6:  MOVLW  80
1CE8:  MOVWF  xDC
.................... 							setup_uart(9600); 
1CEA:  BSF    FB8.3
1CEC:  MOVLW  40
1CEE:  MOVWF  FAF
1CF0:  MOVLW  03
1CF2:  MOVWF  FB0
1CF4:  MOVLW  A6
1CF6:  MOVWF  FAC
1CF8:  NOP   
1CFA:  NOP   
.................... 							break; 
1CFC:  BRA    1D4A
.................... 						case	0x06:	//14400 
.................... 							Speed=14400; 
1CFE:  MOVLW  38
1D00:  MOVLB  3
1D02:  MOVWF  xDD
1D04:  MOVLW  40
1D06:  MOVWF  xDC
.................... 							setup_uart(14400); 
1D08:  BCF    FB8.3
1D0A:  MOVLW  8A
1D0C:  MOVWF  FAF
1D0E:  MOVLW  A6
1D10:  MOVWF  FAC
1D12:  NOP   
1D14:  NOP   
.................... 							break; 
1D16:  BRA    1D4A
.................... 						case	0x07:	//19200 
.................... 							Speed=19200; 
1D18:  MOVLW  4B
1D1A:  MOVLB  3
1D1C:  MOVWF  xDD
1D1E:  CLRF   xDC
.................... 							setup_uart(19200); 
1D20:  BSF    FB8.3
1D22:  MOVLW  A0
1D24:  MOVWF  FAF
1D26:  MOVLW  01
1D28:  MOVWF  FB0
1D2A:  MOVLW  A6
1D2C:  MOVWF  FAC
1D2E:  NOP   
1D30:  NOP   
.................... 							break; 
1D32:  BRA    1D4A
.................... 						default: 
.................... 							MB_Buffer[1]|=0x80; 
1D34:  MOVLB  4
1D36:  BSF    x59.7
.................... 							MB_Buffer[2]=illegal_data_value; 
1D38:  MOVLW  03
1D3A:  MOVWF  x5A
.................... 							MB_Length=5; 
1D3C:  MOVLW  05
1D3E:  MOVLB  5
1D40:  MOVWF  x58
.................... 							ExcReq++; 
1D42:  INCF   x5D,F
1D44:  BTFSC  FD8.2
1D46:  INCF   x5E,F
1D48:  MOVLB  3
.................... 					}; 
.................... 					output_toggle(STAT); 
1D4A:  BCF    F94.0
1D4C:  BTG    F8B.0
.................... 					//pause for master 
.................... 					delay_ms(100); 
1D4E:  MOVLW  64
1D50:  MOVLB  5
1D52:  MOVWF  x98
1D54:  MOVLB  0
1D56:  BRA    189A
.................... 					output_toggle(STAT);					 
1D58:  BCF    F94.0
1D5A:  BTG    F8B.0
.................... 					}else{ 
1D5C:  BRA    1D76
1D5E:  MOVLB  5
.................... 					MB_Buffer[1]|=0x80; 
1D60:  MOVLB  4
1D62:  BSF    x59.7
.................... 					MB_Buffer[2]=illegal_data_address; 
1D64:  MOVLW  02
1D66:  MOVWF  x5A
.................... 					MB_Length=5; 
1D68:  MOVLW  05
1D6A:  MOVLB  5
1D6C:  MOVWF  x58
.................... 					ExcReq++; 
1D6E:  INCF   x5D,F
1D70:  BTFSC  FD8.2
1D72:  INCF   x5E,F
1D74:  MOVLB  0
.................... 					};		 
.................... 				break; 
1D76:  MOVLB  5
1D78:  BRA    1DEE
.................... 		//send id 
.................... 		case	0x6B: 
.................... 				if(MB_Length==4){ 
1D7A:  MOVLB  5
1D7C:  MOVF   x58,W
1D7E:  SUBLW  04
1D80:  BNZ   1DC4
.................... 					MB_Buffer[2]="M"; 
1D82:  MOVLW  4D
1D84:  MOVLB  4
1D86:  MOVWF  x5A
.................... 					MB_Buffer[3]="W"; 
1D88:  MOVLW  57
1D8A:  MOVWF  x5B
.................... 					MB_Buffer[4]="T"; 
1D8C:  MOVLW  54
1D8E:  MOVWF  x5C
.................... 					MB_Buffer[5]="-"; 
1D90:  MOVLW  2D
1D92:  MOVWF  x5D
.................... 					MB_Buffer[6]="S"; 
1D94:  MOVLW  53
1D96:  MOVWF  x5E
.................... 					MB_Buffer[7]="P"; 
1D98:  MOVLW  50
1D9A:  MOVWF  x5F
.................... 					MB_Buffer[8]="M"; 
1D9C:  MOVLW  4D
1D9E:  MOVWF  x60
.................... 					MB_Buffer[9]="3"; 
1DA0:  MOVLW  33
1DA2:  MOVWF  x61
.................... 					MB_Buffer[10]="v"; 
1DA4:  MOVLW  76
1DA6:  MOVWF  x62
.................... 					MB_Buffer[11]="1"; 
1DA8:  MOVLW  31
1DAA:  MOVWF  x63
.................... 					MB_Buffer[12]="."; 
1DAC:  MOVLW  2E
1DAE:  MOVWF  x64
.................... 					MB_Buffer[13]="0"; 
1DB0:  MOVLW  30
1DB2:  MOVWF  x65
.................... 					MB_Buffer[14]="0"; 
1DB4:  MOVWF  x66
.................... 					MB_Length=16; 
1DB6:  MOVLW  10
1DB8:  MOVLB  5
1DBA:  MOVWF  x58
.................... 					ValidReq++; 
1DBC:  INCF   x59,F
1DBE:  BTFSC  FD8.2
1DC0:  INCF   x5A,F
.................... 					}else{ 
1DC2:  BRA    1DD8
.................... 					MB_Buffer[1]|=0x80; 
1DC4:  MOVLB  4
1DC6:  BSF    x59.7
.................... 					MB_Buffer[2]=illegal_data_address; 
1DC8:  MOVLW  02
1DCA:  MOVWF  x5A
.................... 					MB_Length=5; 
1DCC:  MOVLW  05
1DCE:  MOVLB  5
1DD0:  MOVWF  x58
.................... 					ExcReq++; 
1DD2:  INCF   x5D,F
1DD4:  BTFSC  FD8.2
1DD6:  INCF   x5E,F
.................... 					};		 
.................... 				break; 
1DD8:  BRA    1DEE
.................... 		//not recognized 
.................... 		default:		//not recognized command 
.................... 		MB_Buffer[1]|=0x80;	//set error code 
1DDA:  MOVLB  4
1DDC:  BSF    x59.7
.................... 		MB_Buffer[2]=illegal_function; 
1DDE:  MOVLW  01
1DE0:  MOVWF  x5A
.................... 		MB_Length=5; 
1DE2:  MOVLW  05
1DE4:  MOVLB  5
1DE6:  MOVWF  x58
.................... 		ExcReq++; 
1DE8:  INCF   x5D,F
1DEA:  BTFSC  FD8.2
1DEC:  INCF   x5E,F
.................... 	};	 
.................... 	//send answer 
.................... 	if(MB_Buffer[0]!=0){	//if unicast req - then send answer 
1DEE:  MOVLB  4
1DF0:  MOVF   x58,F
1DF2:  BZ    1E72
.................... 	CRCc=ModbusCRC(MB_Buffer,MB_Length-2);	//calc CRC 
1DF4:  MOVLW  02
1DF6:  MOVLB  5
1DF8:  SUBWF  x58,W
1DFA:  MOVWF  x98
1DFC:  MOVLW  04
1DFE:  MOVWF  x9A
1E00:  MOVLW  58
1E02:  MOVWF  x99
1E04:  MOVFF  598,59B
1E08:  MOVLB  0
1E0A:  CALL   03CE
1E0E:  MOVFF  02,562
1E12:  MOVFF  01,561
.................... 	MB_Buffer[MB_Length-2]=make8(CRCc,1);	//high CRC 
1E16:  MOVLW  02
1E18:  MOVLB  5
1E1A:  SUBWF  x58,W
1E1C:  CLRF   03
1E1E:  ADDLW  58
1E20:  MOVWF  FE9
1E22:  MOVLW  04
1E24:  ADDWFC 03,W
1E26:  MOVWF  FEA
1E28:  MOVFF  562,FEF
.................... 	MB_Buffer[MB_Length-1]=make8(CRCc,0);	//low CRC 
1E2C:  MOVLW  01
1E2E:  SUBWF  x58,W
1E30:  CLRF   03
1E32:  ADDLW  58
1E34:  MOVWF  FE9
1E36:  MOVLW  04
1E38:  ADDWFC 03,W
1E3A:  MOVWF  FEA
1E3C:  MOVFF  561,FEF
.................... 	//send 
.................... 	for(bytecount=0; bytecount<MB_Length; bytecount++){ 
1E40:  CLRF   x93
1E42:  MOVF   x58,W
1E44:  SUBWF  x93,W
1E46:  BC    1E6E
.................... 		restart_wdt(); 
1E48:  CLRWDT
.................... 		putc(MB_Buffer[bytecount]); 
1E4A:  CLRF   03
1E4C:  MOVF   x93,W
1E4E:  ADDLW  58
1E50:  MOVWF  FE9
1E52:  MOVLW  04
1E54:  ADDWFC 03,W
1E56:  MOVWF  FEA
1E58:  MOVFF  FEF,598
1E5C:  MOVFF  598,599
1E60:  MOVLB  0
1E62:  BRA    18CC
.................... 		output_low(STAT);	//toggle led 
1E64:  BCF    F94.0
1E66:  BCF    F8B.0
.................... 		}; 
1E68:  MOVLB  5
1E6A:  INCF   x93,F
1E6C:  BRA    1E42
.................... 		goto exit; 
1E6E:  BRA    1E70
1E70:  MOVLB  4
.................... 	};	 
.................... 	// 
.................... 	 
.................... exit:	//exit 
.................... 	output_high(STAT);	//on led 
1E72:  BCF    F94.0
1E74:  BSF    F8B.0
.................... 	MB_Length=0; 
1E76:  MOVLB  5
1E78:  CLRF   x58
.................... 	clear_interrupt(INT_RDA);	 
.................... 	clear_interrupt(INT_TIMER1);	 
1E7A:  BCF    F9E.0
.................... 	disable_interrupts(INT_TIMER1);	 
1E7C:  BCF    F9D.0
.................... 	enable_interrupts(INT_RDA); 
1E7E:  BSF    F9D.5
.................... } 
.................... // 
....................  
....................  
1E80:  BCF    F9E.0
1E82:  MOVLB  0
1E84:  GOTO   006C
.................... void main(void) 
.................... { 
*
2E0A:  CLRF   FF8
2E0C:  BCF    FD0.7
2E0E:  BSF    07.7
2E10:  CLRF   FEA
2E12:  CLRF   FE9
2E14:  MOVLW  70
2E16:  MOVWF  FD3
2E18:  MOVLW  40
2E1A:  MOVWF  F9B
2E1C:  MOVF   FD3,W
2E1E:  MOVLB  3
2E20:  CLRF   xC7
2E22:  CLRF   xEE
2E24:  MOVLW  32
2E26:  MOVWF  xED
2E28:  MOVLB  5
2E2A:  CLRF   x58
2E2C:  BCF    F92.6
2E2E:  BCF    F89.6
2E30:  BSF    FB8.3
2E32:  MOVLW  40
2E34:  MOVWF  FAF
2E36:  MOVLW  03
2E38:  MOVWF  FB0
2E3A:  MOVLW  A6
2E3C:  MOVWF  FAC
2E3E:  MOVLW  90
2E40:  MOVWF  FAB
2E42:  NOP   
2E44:  NOP   
2E46:  MOVF   FC1,W
2E48:  ANDLW  C0
2E4A:  IORLW  0F
2E4C:  MOVWF  FC1
2E4E:  MOVLW  07
2E50:  MOVWF  FB4
2E52:  CLRF   1A
2E54:  CLRF   1B
2E56:  CLRF   1C
2E58:  CLRF   1D
2E5A:  CLRF   1E
2E5C:  CLRF   1F
2E5E:  CLRF   20
2E60:  CLRF   21
2E62:  CLRF   22
2E64:  CLRF   23
2E66:  CLRF   24
2E68:  CLRF   25
2E6A:  CLRF   26
2E6C:  CLRF   27
2E6E:  CLRF   28
2E70:  CLRF   29
2E72:  CLRF   2A
2E74:  CLRF   2B
2E76:  CLRF   2C
2E78:  CLRF   2D
2E7A:  CLRF   2E
2E7C:  CLRF   2F
2E7E:  CLRF   30
2E80:  CLRF   31
2E82:  CLRF   32
2E84:  CLRF   33
2E86:  CLRF   34
2E88:  CLRF   35
2E8A:  CLRF   36
2E8C:  CLRF   37
2E8E:  CLRF   38
2E90:  CLRF   39
2E92:  CLRF   3A
2E94:  CLRF   3B
2E96:  CLRF   3C
2E98:  CLRF   3D
2E9A:  CLRF   3E
2E9C:  CLRF   3F
2E9E:  CLRF   40
2EA0:  CLRF   41
2EA2:  CLRF   42
2EA4:  CLRF   43
2EA6:  CLRF   44
2EA8:  CLRF   45
2EAA:  CLRF   46
2EAC:  CLRF   47
2EAE:  CLRF   48
2EB0:  CLRF   49
2EB2:  CLRF   4A
2EB4:  CLRF   4B
2EB6:  CLRF   4C
2EB8:  CLRF   4D
2EBA:  CLRF   4E
2EBC:  CLRF   4F
2EBE:  CLRF   50
2EC0:  CLRF   51
2EC2:  CLRF   52
2EC4:  CLRF   53
2EC6:  CLRF   54
2EC8:  CLRF   55
2ECA:  CLRF   56
2ECC:  CLRF   57
2ECE:  CLRF   58
2ED0:  CLRF   59
2ED2:  CLRF   5A
2ED4:  CLRF   5B
2ED6:  CLRF   5C
2ED8:  CLRF   5D
2EDA:  CLRF   5E
2EDC:  CLRF   5F
2EDE:  CLRF   60
2EE0:  CLRF   61
2EE2:  CLRF   62
2EE4:  CLRF   63
2EE6:  CLRF   64
2EE8:  CLRF   65
2EEA:  CLRF   66
2EEC:  CLRF   67
2EEE:  CLRF   68
2EF0:  CLRF   69
2EF2:  CLRF   6A
2EF4:  CLRF   6B
2EF6:  CLRF   6C
2EF8:  CLRF   6D
2EFA:  CLRF   6E
2EFC:  CLRF   6F
2EFE:  CLRF   70
2F00:  CLRF   71
2F02:  CLRF   72
2F04:  CLRF   73
2F06:  CLRF   74
2F08:  CLRF   75
2F0A:  CLRF   76
2F0C:  CLRF   77
2F0E:  CLRF   78
2F10:  CLRF   79
2F12:  CLRF   7A
2F14:  CLRF   7B
2F16:  CLRF   7C
2F18:  CLRF   7D
2F1A:  CLRF   7E
2F1C:  CLRF   7F
2F1E:  MOVLB  0
2F20:  CLRF   x80
2F22:  CLRF   x81
2F24:  CLRF   x82
2F26:  CLRF   x83
2F28:  CLRF   x84
2F2A:  CLRF   x85
2F2C:  CLRF   x86
2F2E:  CLRF   x87
2F30:  CLRF   x88
2F32:  CLRF   x89
2F34:  CLRF   x8A
2F36:  CLRF   x8B
2F38:  CLRF   x8C
2F3A:  CLRF   x8D
2F3C:  CLRF   x8E
2F3E:  CLRF   x8F
2F40:  CLRF   x90
2F42:  CLRF   x91
2F44:  CLRF   x92
2F46:  CLRF   x93
2F48:  CLRF   x94
2F4A:  CLRF   x95
2F4C:  CLRF   x96
2F4E:  CLRF   x97
2F50:  CLRF   x98
2F52:  CLRF   x99
2F54:  CLRF   x9A
2F56:  CLRF   x9B
2F58:  CLRF   x9C
2F5A:  CLRF   x9D
2F5C:  CLRF   x9E
2F5E:  CLRF   x9F
2F60:  CLRF   xA0
2F62:  CLRF   xA1
2F64:  CLRF   xA2
2F66:  CLRF   xA3
2F68:  CLRF   xA4
2F6A:  CLRF   xA5
2F6C:  CLRF   xA6
2F6E:  CLRF   xA7
2F70:  CLRF   xA8
2F72:  CLRF   xA9
2F74:  CLRF   xAA
2F76:  CLRF   xAB
2F78:  CLRF   xAC
2F7A:  CLRF   xAD
2F7C:  CLRF   xAE
2F7E:  CLRF   xAF
2F80:  CLRF   xB0
2F82:  CLRF   xB1
2F84:  CLRF   xB2
2F86:  CLRF   xB3
2F88:  CLRF   xB4
2F8A:  CLRF   xB5
2F8C:  CLRF   xB6
2F8E:  CLRF   xB7
2F90:  CLRF   xB8
2F92:  CLRF   xB9
2F94:  CLRF   xBA
2F96:  CLRF   xBB
2F98:  CLRF   xBC
2F9A:  CLRF   xBD
2F9C:  CLRF   xBE
2F9E:  CLRF   xBF
2FA0:  CLRF   xC0
2FA2:  CLRF   xC1
2FA4:  CLRF   xC2
2FA6:  CLRF   xC3
2FA8:  CLRF   xC4
2FAA:  CLRF   xC5
2FAC:  CLRF   xC6
2FAE:  CLRF   xC7
2FB0:  CLRF   xC8
2FB2:  CLRF   xC9
2FB4:  CLRF   xCA
2FB6:  CLRF   xCB
2FB8:  CLRF   xCC
2FBA:  CLRF   xCD
2FBC:  CLRF   xCE
2FBE:  CLRF   xCF
2FC0:  CLRF   xD0
2FC2:  CLRF   xD1
2FC4:  CLRF   xD2
2FC6:  CLRF   xD3
2FC8:  CLRF   xD4
2FCA:  CLRF   xD5
2FCC:  CLRF   xD6
2FCE:  CLRF   xD7
2FD0:  CLRF   xD8
2FD2:  CLRF   xD9
2FD4:  CLRF   xDA
2FD6:  CLRF   xDB
2FD8:  CLRF   xDC
2FDA:  CLRF   xDD
2FDC:  CLRF   xDE
2FDE:  CLRF   xDF
2FE0:  CLRF   xE0
2FE2:  CLRF   xE1
2FE4:  CLRF   xE2
2FE6:  CLRF   xE3
2FE8:  CLRF   xE4
2FEA:  CLRF   xE5
2FEC:  CLRF   xE6
2FEE:  CLRF   xE7
2FF0:  CLRF   xE8
2FF2:  CLRF   xE9
2FF4:  CLRF   xEA
2FF6:  CLRF   xEB
2FF8:  CLRF   xEC
2FFA:  CLRF   xED
2FFC:  CLRF   xEE
2FFE:  CLRF   xEF
3000:  CLRF   xF0
3002:  CLRF   xF1
3004:  CLRF   xF2
3006:  CLRF   xF3
3008:  CLRF   xF4
300A:  CLRF   xF5
300C:  CLRF   xF6
300E:  CLRF   xF7
3010:  CLRF   xF8
3012:  CLRF   xF9
3014:  CLRF   xFA
3016:  CLRF   xFB
3018:  CLRF   xFC
301A:  CLRF   xFD
301C:  CLRF   xFE
301E:  CLRF   xFF
3020:  MOVLB  1
3022:  CLRF   x00
3024:  CLRF   x01
3026:  CLRF   x02
3028:  CLRF   x03
302A:  CLRF   x04
302C:  CLRF   x05
302E:  CLRF   x06
3030:  CLRF   x07
3032:  CLRF   x08
3034:  CLRF   x09
3036:  CLRF   x0A
3038:  CLRF   x0B
303A:  CLRF   x0C
303C:  CLRF   x0D
303E:  CLRF   x0E
3040:  CLRF   x0F
3042:  CLRF   x10
3044:  CLRF   x11
3046:  CLRF   x12
3048:  CLRF   x13
304A:  CLRF   x14
304C:  CLRF   x15
304E:  CLRF   x16
3050:  CLRF   x17
3052:  CLRF   x18
3054:  CLRF   x19
3056:  CLRF   x1A
3058:  CLRF   x1B
305A:  CLRF   x1C
305C:  CLRF   x1D
305E:  CLRF   x1E
3060:  CLRF   x1F
3062:  CLRF   x20
3064:  CLRF   x21
3066:  CLRF   x22
3068:  CLRF   x23
306A:  CLRF   x24
306C:  CLRF   x25
306E:  CLRF   x26
3070:  CLRF   x27
3072:  CLRF   x28
3074:  CLRF   x29
3076:  CLRF   x2A
3078:  CLRF   x2B
307A:  CLRF   x2C
307C:  CLRF   x2D
307E:  CLRF   x2E
3080:  CLRF   x2F
3082:  CLRF   x30
3084:  CLRF   x31
3086:  CLRF   x32
3088:  CLRF   x33
308A:  CLRF   x34
308C:  CLRF   x35
308E:  CLRF   x36
3090:  CLRF   x37
3092:  CLRF   x38
3094:  CLRF   x39
3096:  CLRF   x3A
3098:  CLRF   x3B
309A:  CLRF   x3C
309C:  CLRF   x3D
309E:  CLRF   x3E
30A0:  CLRF   x3F
30A2:  CLRF   x40
30A4:  CLRF   x41
30A6:  CLRF   x42
30A8:  CLRF   x43
30AA:  CLRF   x44
30AC:  CLRF   x45
30AE:  CLRF   x46
30B0:  CLRF   x47
30B2:  CLRF   x48
30B4:  CLRF   x49
30B6:  CLRF   x4A
30B8:  CLRF   x4B
30BA:  CLRF   x4C
30BC:  CLRF   x4D
30BE:  CLRF   x4E
30C0:  CLRF   x4F
30C2:  CLRF   x50
30C4:  CLRF   x51
30C6:  CLRF   x52
30C8:  CLRF   x53
30CA:  CLRF   x54
30CC:  CLRF   x55
30CE:  CLRF   x56
30D0:  CLRF   x57
30D2:  CLRF   x58
30D4:  CLRF   x59
30D6:  CLRF   x5A
30D8:  CLRF   x5B
30DA:  CLRF   x5C
30DC:  CLRF   x5D
30DE:  CLRF   x5E
30E0:  CLRF   x5F
30E2:  CLRF   x60
30E4:  CLRF   x61
30E6:  CLRF   x62
30E8:  CLRF   x63
30EA:  CLRF   x64
30EC:  CLRF   x65
30EE:  CLRF   x66
30F0:  CLRF   x67
30F2:  CLRF   x68
30F4:  CLRF   x69
30F6:  CLRF   x6A
30F8:  CLRF   x6B
30FA:  CLRF   x6C
30FC:  CLRF   x6D
30FE:  CLRF   x6E
3100:  CLRF   x6F
3102:  CLRF   x70
3104:  CLRF   x71
3106:  CLRF   x72
3108:  CLRF   x73
310A:  CLRF   x74
310C:  CLRF   x75
310E:  CLRF   x76
3110:  CLRF   x77
3112:  CLRF   x78
3114:  CLRF   x79
3116:  CLRF   x7A
3118:  CLRF   x7B
311A:  CLRF   x7C
311C:  CLRF   x7D
311E:  CLRF   x7E
3120:  CLRF   x7F
3122:  CLRF   x80
3124:  CLRF   x81
3126:  CLRF   x82
3128:  CLRF   x83
312A:  CLRF   x84
312C:  CLRF   x85
312E:  CLRF   x86
3130:  CLRF   x87
3132:  CLRF   x88
3134:  CLRF   x89
3136:  CLRF   x8A
3138:  CLRF   x8B
313A:  CLRF   x8C
313C:  CLRF   x8D
313E:  CLRF   x8E
3140:  CLRF   x8F
3142:  CLRF   x90
3144:  CLRF   x91
3146:  CLRF   x92
3148:  CLRF   x93
314A:  CLRF   x94
314C:  CLRF   x95
314E:  CLRF   x96
3150:  CLRF   x97
3152:  CLRF   x98
3154:  CLRF   x99
3156:  CLRF   x9A
3158:  CLRF   x9B
315A:  CLRF   x9C
315C:  CLRF   x9D
315E:  CLRF   x9E
3160:  CLRF   x9F
3162:  CLRF   xA0
3164:  CLRF   xA1
3166:  CLRF   xA2
3168:  CLRF   xA3
316A:  CLRF   xA4
316C:  CLRF   xA5
316E:  CLRF   xA6
3170:  CLRF   xA7
3172:  CLRF   xA8
3174:  CLRF   xA9
3176:  CLRF   xAA
3178:  CLRF   xAB
317A:  CLRF   xAC
317C:  CLRF   xAD
317E:  CLRF   xAE
3180:  CLRF   xAF
3182:  CLRF   xB0
3184:  CLRF   xB1
3186:  CLRF   xB2
3188:  CLRF   xB3
318A:  CLRF   xB4
318C:  CLRF   xB5
318E:  CLRF   xB6
3190:  CLRF   xB7
3192:  CLRF   xB8
3194:  CLRF   xB9
3196:  CLRF   xBA
3198:  CLRF   xBB
319A:  CLRF   xBC
319C:  CLRF   xBD
319E:  CLRF   xBE
31A0:  CLRF   xBF
31A2:  CLRF   xC0
31A4:  CLRF   xC1
31A6:  CLRF   xC2
31A8:  CLRF   xC3
31AA:  CLRF   xC4
31AC:  CLRF   xC5
31AE:  CLRF   xC6
31B0:  CLRF   xC7
31B2:  CLRF   xC8
31B4:  CLRF   xC9
31B6:  CLRF   xCA
31B8:  CLRF   xCB
31BA:  CLRF   xCC
31BC:  CLRF   xCD
31BE:  CLRF   xCE
31C0:  CLRF   xCF
31C2:  CLRF   xD0
31C4:  CLRF   xD1
31C6:  CLRF   xD2
31C8:  CLRF   xD3
31CA:  CLRF   xD4
31CC:  CLRF   xD5
31CE:  CLRF   xD6
31D0:  CLRF   xD7
31D2:  CLRF   xD8
31D4:  CLRF   xD9
31D6:  CLRF   xDA
31D8:  CLRF   xDB
31DA:  CLRF   xDC
31DC:  CLRF   xDD
31DE:  CLRF   xDE
31E0:  CLRF   xDF
31E2:  CLRF   xE0
31E4:  CLRF   xE1
31E6:  CLRF   xE2
31E8:  CLRF   xE3
31EA:  CLRF   xE4
31EC:  CLRF   xE5
31EE:  CLRF   xE6
31F0:  CLRF   xE7
31F2:  CLRF   xE8
31F4:  CLRF   xE9
31F6:  CLRF   xEA
31F8:  CLRF   xEB
31FA:  CLRF   xEC
31FC:  CLRF   xED
31FE:  CLRF   xEE
3200:  CLRF   xEF
3202:  CLRF   xF0
3204:  CLRF   xF1
3206:  CLRF   xF2
3208:  CLRF   xF3
320A:  CLRF   xF4
320C:  CLRF   xF5
320E:  CLRF   xF6
3210:  CLRF   xF7
3212:  CLRF   xF8
3214:  CLRF   xF9
3216:  CLRF   xFA
3218:  CLRF   xFB
321A:  CLRF   xFC
321C:  CLRF   xFD
321E:  CLRF   xFE
3220:  CLRF   xFF
3222:  MOVLB  2
3224:  CLRF   x00
3226:  CLRF   x01
3228:  CLRF   x02
322A:  CLRF   x03
322C:  CLRF   x04
322E:  CLRF   x05
3230:  CLRF   x06
3232:  CLRF   x07
3234:  CLRF   x08
3236:  CLRF   x09
3238:  CLRF   x0A
323A:  CLRF   x0B
323C:  CLRF   x0C
323E:  CLRF   x0D
3240:  CLRF   x0E
3242:  CLRF   x0F
3244:  CLRF   x10
3246:  CLRF   x11
3248:  CLRF   x12
324A:  CLRF   x13
324C:  CLRF   x14
324E:  CLRF   x15
3250:  CLRF   x16
3252:  CLRF   x17
3254:  CLRF   x18
3256:  CLRF   x19
3258:  CLRF   x1A
325A:  CLRF   x1B
325C:  CLRF   x1C
325E:  CLRF   x1D
3260:  CLRF   x1E
3262:  CLRF   x1F
3264:  CLRF   x20
3266:  CLRF   x21
3268:  CLRF   x22
326A:  CLRF   x23
326C:  CLRF   x24
326E:  CLRF   x25
3270:  CLRF   x26
3272:  CLRF   x27
3274:  CLRF   x28
3276:  CLRF   x29
3278:  CLRF   x2A
327A:  CLRF   x2B
327C:  CLRF   x2C
327E:  CLRF   x2D
3280:  CLRF   x2E
3282:  CLRF   x2F
3284:  CLRF   x30
3286:  CLRF   x31
3288:  CLRF   x32
328A:  CLRF   x33
328C:  CLRF   x34
328E:  CLRF   x35
3290:  CLRF   x36
3292:  CLRF   x37
3294:  CLRF   x38
3296:  CLRF   x39
3298:  CLRF   x3A
329A:  CLRF   x3B
329C:  CLRF   x3C
329E:  CLRF   x3D
32A0:  CLRF   x3E
32A2:  CLRF   x3F
32A4:  CLRF   x40
32A6:  CLRF   x41
32A8:  CLRF   x42
32AA:  CLRF   x43
32AC:  CLRF   x44
32AE:  CLRF   x45
32B0:  CLRF   x46
32B2:  CLRF   x47
32B4:  CLRF   x48
32B6:  CLRF   x49
32B8:  CLRF   x4A
32BA:  CLRF   x4B
32BC:  CLRF   x4C
32BE:  CLRF   x4D
32C0:  CLRF   x4E
32C2:  CLRF   x4F
32C4:  CLRF   x50
32C6:  CLRF   x51
32C8:  CLRF   x52
32CA:  CLRF   x53
32CC:  CLRF   x54
32CE:  CLRF   x55
32D0:  CLRF   x56
32D2:  CLRF   x57
32D4:  CLRF   x58
32D6:  CLRF   x59
32D8:  CLRF   x5A
32DA:  CLRF   x5B
32DC:  CLRF   x5C
32DE:  CLRF   x5D
32E0:  CLRF   x5E
32E2:  CLRF   x5F
32E4:  CLRF   x60
32E6:  CLRF   x61
32E8:  CLRF   x62
32EA:  CLRF   x63
32EC:  CLRF   x64
32EE:  CLRF   x65
32F0:  CLRF   x66
32F2:  CLRF   x67
32F4:  CLRF   x68
32F6:  CLRF   x69
32F8:  CLRF   x6A
32FA:  CLRF   x6B
32FC:  CLRF   x6C
32FE:  CLRF   x6D
3300:  CLRF   x6E
3302:  CLRF   x6F
3304:  CLRF   x70
3306:  CLRF   x71
3308:  CLRF   x72
330A:  CLRF   x73
330C:  CLRF   x74
330E:  CLRF   x75
3310:  CLRF   x76
3312:  CLRF   x77
3314:  CLRF   x78
3316:  CLRF   x79
3318:  CLRF   x7A
331A:  CLRF   x7B
331C:  CLRF   x7C
331E:  CLRF   x7D
3320:  CLRF   x7E
3322:  CLRF   x7F
3324:  CLRF   x80
3326:  CLRF   x81
3328:  CLRF   x82
332A:  CLRF   x83
332C:  CLRF   x84
332E:  CLRF   x85
3330:  CLRF   x86
3332:  CLRF   x87
3334:  CLRF   x88
3336:  CLRF   x89
3338:  CLRF   x8A
333A:  CLRF   x8B
333C:  CLRF   x8C
333E:  CLRF   x8D
3340:  CLRF   x8E
3342:  CLRF   x8F
3344:  CLRF   x90
3346:  CLRF   x91
3348:  CLRF   x92
334A:  CLRF   x93
334C:  CLRF   x94
334E:  CLRF   x95
3350:  CLRF   x96
3352:  CLRF   x97
3354:  CLRF   x98
3356:  CLRF   x99
3358:  CLRF   x9A
335A:  CLRF   x9B
335C:  CLRF   x9C
335E:  CLRF   x9D
3360:  CLRF   x9E
3362:  CLRF   x9F
3364:  CLRF   xA0
3366:  CLRF   xA1
3368:  CLRF   xA2
336A:  CLRF   xA3
336C:  CLRF   xA4
336E:  CLRF   xA5
3370:  CLRF   xA6
3372:  CLRF   xA7
3374:  CLRF   xA8
3376:  CLRF   xA9
3378:  CLRF   xAA
337A:  CLRF   xAB
337C:  CLRF   xAC
337E:  CLRF   xAD
3380:  CLRF   xAE
3382:  CLRF   xAF
3384:  CLRF   xB0
3386:  CLRF   xB1
3388:  CLRF   xB2
338A:  CLRF   xB3
338C:  CLRF   xB4
338E:  CLRF   xB5
3390:  CLRF   xB6
3392:  CLRF   xB7
3394:  CLRF   xB8
3396:  CLRF   xB9
3398:  CLRF   xBA
339A:  CLRF   xBB
339C:  CLRF   xBC
339E:  CLRF   xBD
33A0:  CLRF   xBE
33A2:  CLRF   xBF
33A4:  CLRF   xC0
33A6:  CLRF   xC1
33A8:  CLRF   xC2
33AA:  CLRF   xC3
33AC:  CLRF   xC4
33AE:  CLRF   xC5
33B0:  CLRF   xC6
33B2:  CLRF   xC7
33B4:  CLRF   xC8
33B6:  CLRF   xC9
33B8:  CLRF   xCA
33BA:  CLRF   xCB
33BC:  CLRF   xCC
33BE:  CLRF   xCD
33C0:  CLRF   xCE
33C2:  CLRF   xCF
33C4:  CLRF   xD0
33C6:  CLRF   xD1
33C8:  CLRF   xD2
33CA:  CLRF   xD3
33CC:  CLRF   xD4
33CE:  CLRF   xD5
33D0:  CLRF   xD6
33D2:  CLRF   xD7
33D4:  CLRF   xD8
33D6:  CLRF   xD9
33D8:  CLRF   xDA
33DA:  CLRF   xDB
33DC:  CLRF   xDC
33DE:  CLRF   xDD
33E0:  CLRF   xDE
33E2:  CLRF   xDF
33E4:  CLRF   xE0
33E6:  CLRF   xE1
33E8:  CLRF   xE2
33EA:  CLRF   xE3
33EC:  CLRF   xE4
33EE:  CLRF   xE5
33F0:  CLRF   xE6
33F2:  CLRF   xE7
33F4:  CLRF   xE8
33F6:  CLRF   xE9
33F8:  CLRF   xEA
33FA:  CLRF   xEB
33FC:  CLRF   xEC
33FE:  CLRF   xED
3400:  CLRF   xEE
3402:  CLRF   xEF
3404:  CLRF   xF0
3406:  CLRF   xF1
3408:  CLRF   xF2
340A:  CLRF   xF3
340C:  CLRF   xF4
340E:  CLRF   xF5
3410:  CLRF   xF6
3412:  CLRF   xF7
3414:  CLRF   xF8
3416:  CLRF   xF9
3418:  CLRF   xFA
341A:  CLRF   xFB
341C:  CLRF   xFC
341E:  CLRF   xFD
3420:  CLRF   xFE
3422:  CLRF   xFF
3424:  MOVLB  3
3426:  CLRF   x00
3428:  CLRF   x01
342A:  CLRF   x02
342C:  CLRF   x03
342E:  CLRF   x04
3430:  CLRF   x05
3432:  CLRF   x06
3434:  CLRF   x07
3436:  CLRF   x08
3438:  CLRF   x09
343A:  CLRF   x0A
343C:  CLRF   x0B
343E:  CLRF   x0C
3440:  CLRF   x0D
3442:  CLRF   x0E
3444:  CLRF   x0F
3446:  CLRF   x10
3448:  CLRF   x11
344A:  CLRF   x12
344C:  CLRF   x13
344E:  CLRF   x14
3450:  CLRF   x15
3452:  CLRF   x16
3454:  CLRF   x17
3456:  CLRF   x18
3458:  CLRF   x19
345A:  CLRF   x1A
345C:  CLRF   x1B
345E:  CLRF   x1C
3460:  CLRF   x1D
3462:  CLRF   x1E
3464:  CLRF   x1F
3466:  CLRF   x20
3468:  CLRF   x21
346A:  CLRF   x22
346C:  CLRF   x23
346E:  CLRF   x24
3470:  CLRF   x25
3472:  CLRF   x26
3474:  CLRF   x27
3476:  CLRF   x28
3478:  CLRF   x29
347A:  CLRF   x2A
347C:  CLRF   x2B
347E:  CLRF   x2C
3480:  CLRF   x2D
3482:  CLRF   x2E
3484:  CLRF   x2F
3486:  CLRF   x30
3488:  CLRF   x31
348A:  CLRF   x32
348C:  CLRF   x33
348E:  CLRF   x34
3490:  CLRF   x35
3492:  CLRF   x36
3494:  CLRF   x37
3496:  CLRF   x38
3498:  CLRF   x39
349A:  CLRF   x3A
349C:  CLRF   x3B
349E:  CLRF   x3C
34A0:  CLRF   x3D
34A2:  CLRF   x3E
34A4:  CLRF   x3F
34A6:  CLRF   x40
34A8:  CLRF   x41
34AA:  CLRF   x42
34AC:  CLRF   x43
34AE:  CLRF   x44
34B0:  CLRF   x45
34B2:  CLRF   x46
34B4:  CLRF   x47
34B6:  CLRF   x48
34B8:  CLRF   x49
34BA:  CLRF   x4A
34BC:  CLRF   x4B
34BE:  CLRF   x4C
34C0:  CLRF   x4D
34C2:  CLRF   x4E
34C4:  CLRF   x4F
34C6:  CLRF   x50
34C8:  CLRF   x51
34CA:  CLRF   x52
34CC:  CLRF   x53
34CE:  CLRF   x54
34D0:  CLRF   x55
34D2:  CLRF   x56
34D4:  CLRF   x57
34D6:  CLRF   x58
34D8:  CLRF   x59
34DA:  CLRF   x5A
34DC:  CLRF   x5B
34DE:  CLRF   x5C
34E0:  CLRF   x5D
34E2:  CLRF   x5E
34E4:  CLRF   x5F
34E6:  CLRF   x60
34E8:  CLRF   x61
34EA:  CLRF   x62
34EC:  CLRF   x63
34EE:  CLRF   x64
34F0:  CLRF   x65
34F2:  CLRF   x66
34F4:  CLRF   x67
34F6:  CLRF   x68
34F8:  CLRF   x69
34FA:  CLRF   x6A
34FC:  CLRF   x6B
34FE:  CLRF   x6C
3500:  CLRF   x6D
3502:  CLRF   x6E
3504:  CLRF   x6F
3506:  CLRF   x70
3508:  CLRF   x71
350A:  CLRF   x72
350C:  CLRF   x73
350E:  CLRF   x74
3510:  CLRF   x75
3512:  CLRF   x76
3514:  CLRF   x77
3516:  CLRF   x78
3518:  CLRF   x79
351A:  CLRF   x7A
351C:  CLRF   x7B
351E:  CLRF   x7C
3520:  CLRF   x7D
3522:  CLRF   x7E
3524:  CLRF   x7F
3526:  CLRF   x80
3528:  CLRF   x81
352A:  CLRF   x82
352C:  CLRF   x83
352E:  CLRF   x84
3530:  CLRF   x85
3532:  CLRF   x86
3534:  CLRF   x87
3536:  CLRF   x88
3538:  CLRF   x89
353A:  CLRF   x8A
353C:  CLRF   x8B
353E:  CLRF   x8C
3540:  CLRF   x8D
3542:  CLRF   x8E
3544:  CLRF   x8F
3546:  CLRF   x90
3548:  CLRF   x91
354A:  CLRF   x92
354C:  CLRF   x93
354E:  CLRF   x94
3550:  CLRF   x95
3552:  CLRF   x96
3554:  CLRF   x97
3556:  CLRF   x98
3558:  CLRF   x99
355A:  CLRF   x9A
355C:  CLRF   x9B
355E:  CLRF   x9C
3560:  CLRF   x9D
3562:  CLRF   x9E
3564:  CLRF   x9F
3566:  CLRF   xA0
3568:  CLRF   xA1
356A:  CLRF   xA2
356C:  CLRF   xA3
356E:  CLRF   xA4
3570:  CLRF   xA5
3572:  CLRF   xA6
3574:  CLRF   xA7
3576:  CLRF   xA8
3578:  CLRF   xA9
357A:  CLRF   xAA
357C:  CLRF   xAB
357E:  CLRF   xAC
3580:  CLRF   xAD
3582:  CLRF   xAE
3584:  CLRF   xAF
3586:  CLRF   xB0
3588:  CLRF   xB1
358A:  CLRF   xB2
358C:  CLRF   xB3
358E:  CLRF   xB4
3590:  CLRF   xB5
3592:  CLRF   xB6
3594:  CLRF   xB7
3596:  CLRF   xB8
3598:  CLRF   xB9
359A:  CLRF   xBA
359C:  CLRF   xBB
359E:  CLRF   xBC
35A0:  CLRF   xBD
35A2:  CLRF   xBE
35A4:  CLRF   xBF
35A6:  CLRF   xC0
35A8:  CLRF   xC1
35AA:  CLRF   xC2
35AC:  CLRF   xC3
35AE:  CLRF   xC4
35B0:  CLRF   xC5
35B2:  BCF    xC6.0
35B4:  CLRF   xC8
35B6:  CLRF   xC9
35B8:  CLRF   xCA
35BA:  CLRF   xCB
35BC:  CLRF   xCC
35BE:  CLRF   xCD
35C0:  CLRF   xCE
35C2:  CLRF   xCF
35C4:  CLRF   xD0
35C6:  CLRF   xD1
35C8:  CLRF   xD2
35CA:  CLRF   xD3
35CC:  CLRF   xD4
35CE:  CLRF   xD5
35D0:  CLRF   xD6
35D2:  CLRF   xD7
35D4:  CLRF   xD8
35D6:  CLRF   xD9
35D8:  CLRF   xDA
35DA:  CLRF   xDB
35DC:  CLRF   xDC
35DE:  CLRF   xDD
35E0:  CLRF   xDE
35E2:  CLRF   xDF
35E4:  CLRF   xE0
35E6:  CLRF   xE1
35E8:  CLRF   xE2
35EA:  CLRF   xE3
35EC:  CLRF   xE4
35EE:  CLRF   xE5
35F0:  CLRF   xE6
35F2:  CLRF   xE7
35F4:  CLRF   xE8
35F6:  CLRF   xE9
35F8:  CLRF   xEA
35FA:  CLRF   xEB
35FC:  CLRF   xEC
35FE:  MOVLB  4
3600:  CLRF   x58
3602:  CLRF   x59
3604:  CLRF   x5A
3606:  CLRF   x5B
3608:  CLRF   x5C
360A:  CLRF   x5D
360C:  CLRF   x5E
360E:  CLRF   x5F
3610:  CLRF   x60
3612:  CLRF   x61
3614:  CLRF   x62
3616:  CLRF   x63
3618:  CLRF   x64
361A:  CLRF   x65
361C:  CLRF   x66
361E:  CLRF   x67
3620:  CLRF   x68
3622:  CLRF   x69
3624:  CLRF   x6A
3626:  CLRF   x6B
3628:  CLRF   x6C
362A:  CLRF   x6D
362C:  CLRF   x6E
362E:  CLRF   x6F
3630:  CLRF   x70
3632:  CLRF   x71
3634:  CLRF   x72
3636:  CLRF   x73
3638:  CLRF   x74
363A:  CLRF   x75
363C:  CLRF   x76
363E:  CLRF   x77
3640:  CLRF   x78
3642:  CLRF   x79
3644:  CLRF   x7A
3646:  CLRF   x7B
3648:  CLRF   x7C
364A:  CLRF   x7D
364C:  CLRF   x7E
364E:  CLRF   x7F
3650:  CLRF   x80
3652:  CLRF   x81
3654:  CLRF   x82
3656:  CLRF   x83
3658:  CLRF   x84
365A:  CLRF   x85
365C:  CLRF   x86
365E:  CLRF   x87
3660:  CLRF   x88
3662:  CLRF   x89
3664:  CLRF   x8A
3666:  CLRF   x8B
3668:  CLRF   x8C
366A:  CLRF   x8D
366C:  CLRF   x8E
366E:  CLRF   x8F
3670:  CLRF   x90
3672:  CLRF   x91
3674:  CLRF   x92
3676:  CLRF   x93
3678:  CLRF   x94
367A:  CLRF   x95
367C:  CLRF   x96
367E:  CLRF   x97
3680:  CLRF   x98
3682:  CLRF   x99
3684:  CLRF   x9A
3686:  CLRF   x9B
3688:  CLRF   x9C
368A:  CLRF   x9D
368C:  CLRF   x9E
368E:  CLRF   x9F
3690:  CLRF   xA0
3692:  CLRF   xA1
3694:  CLRF   xA2
3696:  CLRF   xA3
3698:  CLRF   xA4
369A:  CLRF   xA5
369C:  CLRF   xA6
369E:  CLRF   xA7
36A0:  CLRF   xA8
36A2:  CLRF   xA9
36A4:  CLRF   xAA
36A6:  CLRF   xAB
36A8:  CLRF   xAC
36AA:  CLRF   xAD
36AC:  CLRF   xAE
36AE:  CLRF   xAF
36B0:  CLRF   xB0
36B2:  CLRF   xB1
36B4:  CLRF   xB2
36B6:  CLRF   xB3
36B8:  CLRF   xB4
36BA:  CLRF   xB5
36BC:  CLRF   xB6
36BE:  CLRF   xB7
36C0:  CLRF   xB8
36C2:  CLRF   xB9
36C4:  CLRF   xBA
36C6:  CLRF   xBB
36C8:  CLRF   xBC
36CA:  CLRF   xBD
36CC:  CLRF   xBE
36CE:  CLRF   xBF
36D0:  CLRF   xC0
36D2:  CLRF   xC1
36D4:  CLRF   xC2
36D6:  CLRF   xC3
36D8:  CLRF   xC4
36DA:  CLRF   xC5
36DC:  CLRF   xC6
36DE:  CLRF   xC7
36E0:  CLRF   xC8
36E2:  CLRF   xC9
36E4:  CLRF   xCA
36E6:  CLRF   xCB
36E8:  CLRF   xCC
36EA:  CLRF   xCD
36EC:  CLRF   xCE
36EE:  CLRF   xCF
36F0:  CLRF   xD0
36F2:  CLRF   xD1
36F4:  CLRF   xD2
36F6:  CLRF   xD3
36F8:  CLRF   xD4
36FA:  CLRF   xD5
36FC:  CLRF   xD6
36FE:  CLRF   xD7
3700:  CLRF   xD8
3702:  CLRF   xD9
3704:  CLRF   xDA
3706:  CLRF   xDB
3708:  CLRF   xDC
370A:  CLRF   xDD
370C:  CLRF   xDE
370E:  CLRF   xDF
3710:  CLRF   xE0
3712:  CLRF   xE1
3714:  CLRF   xE2
3716:  CLRF   xE3
3718:  CLRF   xE4
371A:  CLRF   xE5
371C:  CLRF   xE6
371E:  CLRF   xE7
3720:  CLRF   xE8
3722:  CLRF   xE9
3724:  CLRF   xEA
3726:  CLRF   xEB
3728:  CLRF   xEC
372A:  CLRF   xED
372C:  CLRF   xEE
372E:  CLRF   xEF
3730:  CLRF   xF0
3732:  CLRF   xF1
3734:  CLRF   xF2
3736:  CLRF   xF3
3738:  CLRF   xF4
373A:  CLRF   xF5
373C:  CLRF   xF6
373E:  CLRF   xF7
3740:  CLRF   xF8
3742:  CLRF   xF9
3744:  CLRF   xFA
3746:  CLRF   xFB
3748:  CLRF   xFC
374A:  CLRF   xFD
374C:  CLRF   xFE
374E:  CLRF   xFF
3750:  MOVLB  5
3752:  CLRF   x00
3754:  CLRF   x01
3756:  CLRF   x02
3758:  CLRF   x03
375A:  CLRF   x04
375C:  CLRF   x05
375E:  CLRF   x06
3760:  CLRF   x07
3762:  CLRF   x08
3764:  CLRF   x09
3766:  CLRF   x0A
3768:  CLRF   x0B
376A:  CLRF   x0C
376C:  CLRF   x0D
376E:  CLRF   x0E
3770:  CLRF   x0F
3772:  CLRF   x10
3774:  CLRF   x11
3776:  CLRF   x12
3778:  CLRF   x13
377A:  CLRF   x14
377C:  CLRF   x15
377E:  CLRF   x16
3780:  CLRF   x17
3782:  CLRF   x18
3784:  CLRF   x19
3786:  CLRF   x1A
3788:  CLRF   x1B
378A:  CLRF   x1C
378C:  CLRF   x1D
378E:  CLRF   x1E
3790:  CLRF   x1F
3792:  CLRF   x20
3794:  CLRF   x21
3796:  CLRF   x22
3798:  CLRF   x23
379A:  CLRF   x24
379C:  CLRF   x25
379E:  CLRF   x26
37A0:  CLRF   x27
37A2:  CLRF   x28
37A4:  CLRF   x29
37A6:  CLRF   x2A
37A8:  CLRF   x2B
37AA:  CLRF   x2C
37AC:  CLRF   x2D
37AE:  CLRF   x2E
37B0:  CLRF   x2F
37B2:  CLRF   x30
37B4:  CLRF   x31
37B6:  CLRF   x32
37B8:  CLRF   x33
37BA:  CLRF   x34
37BC:  CLRF   x35
37BE:  CLRF   x36
37C0:  CLRF   x37
37C2:  CLRF   x38
37C4:  CLRF   x39
37C6:  CLRF   x3A
37C8:  CLRF   x3B
37CA:  CLRF   x3C
37CC:  CLRF   x3D
37CE:  CLRF   x3E
37D0:  CLRF   x3F
37D2:  CLRF   x40
37D4:  CLRF   x41
37D6:  CLRF   x42
37D8:  CLRF   x43
37DA:  CLRF   x44
37DC:  CLRF   x45
37DE:  CLRF   x46
37E0:  CLRF   x47
37E2:  CLRF   x48
37E4:  CLRF   x49
37E6:  CLRF   x4A
37E8:  CLRF   x4B
37EA:  CLRF   x4C
37EC:  CLRF   x4D
37EE:  CLRF   x4E
37F0:  CLRF   x4F
37F2:  CLRF   x50
37F4:  CLRF   x51
37F6:  CLRF   x52
37F8:  CLRF   x53
37FA:  CLRF   x54
37FC:  CLRF   x55
37FE:  CLRF   x56
3800:  CLRF   x57
3802:  CLRF   x59
3804:  CLRF   x5A
3806:  CLRF   x5B
3808:  CLRF   x5C
380A:  CLRF   x5D
380C:  CLRF   x5E
380E:  CLRF   x5F
3810:  CLRF   x60
3812:  CLRF   x61
3814:  CLRF   x62
3816:  CLRF   x63
3818:  CLRF   x64
381A:  CLRF   x66
381C:  CLRF   x65
381E:  CLRF   x6C
3820:  CLRF   x6B
3822:  MOVLW  01
3824:  MOVWF  x75
3826:  MOVLW  FF
3828:  MOVWF  x74
382A:  CLRF   x79
382C:  MOVLW  01
382E:  MOVWF  x78
.................... //addition variables 
.................... int16 maxCycles = 0; 
.................... int16 cnt; 
.................... int16 ADC0;	//current ADC value 
.................... int16 Wrk0 = 0;	//sum mean value 
.................... int16 StorAddr;	//storage address 
.................... int8 OutBufAddr;	//out buffer address 
.................... int32 Sum; 
.................... int16 BetTrsh = 0x01ff; //beta treshold 
.................... int16 bet_cur; //current beta value 
.................... int16 filterWidth = 1; 
.................... int16 sawLevel; 
....................  
.................... InitMcu();		//mcu init 
3830:  MOVLB  0
3832:  GOTO   1E88
.................... BURead();		//read registers from EE 
3836:  GOTO   1F26
.................... RsInit(); 
383A:  GOTO   23FC
....................  
.................... //interrupt configuration 
.................... enable_interrupts(INT_RDA); 
383E:  BSF    F9D.5
.................... disable_interrupts(INT_TIMER1); 
3840:  BCF    F9D.0
.................... enable_interrupts(GLOBAL); 
3842:  MOVLW  C0
3844:  IORWF  FF2,F
....................  
.................... output_high(TERMO); 
3846:  BCF    F96.1
3848:  BSF    F8D.1
....................  
.................... DaqState = DaqStart; 
384A:  MOVLW  01
384C:  MOVLB  3
384E:  MOVWF  xEF
.................... //main cycle 
.................... while (TRUE) 
....................     { 
....................     restart_wdt(); 
3850:  CLRWDT
....................     //state procesor 
....................     switch (DaqState) 
.................... 	{ 
3852:  MOVF   xEF,W
3854:  ADDLW  FC
3856:  BTFSC  FD8.0
3858:  GOTO   3FDC
385C:  ADDLW  04
385E:  MOVLB  0
3860:  GOTO   3FE0
....................     case DaqIdle: 
.................... 	Termometer(); 
3864:  CALL   26C2
.................... 	//wait for state changing 
.................... 	break; 
3868:  MOVLB  3
386A:  GOTO   3FDC
....................  
....................     case DaqStart: 
.................... 	//prepare for measuring 
.................... 	bet_cur = 0;		//reset beta value 
386E:  MOVLB  5
3870:  CLRF   x77
3872:  CLRF   x76
....................  
.................... 	//set input amplifiers 
.................... 	SetKU0(AmpCoef0); 
3874:  MOVFF  3AB,57D
3878:  MOVFF  3AA,57C
387C:  MOVLB  0
387E:  GOTO   2838
.................... 	SetKU1(AmpCoef1); 
3882:  MOVFF  3B7,57D
3886:  MOVFF  3B6,57C
388A:  GOTO   28B4
....................  
.................... 	//filtering window setup 
.................... 	if (FWDT > 0 && FWDT < 7) 
388E:  MOVLB  3
3890:  MOVF   xC2,F
3892:  BNZ   3898
3894:  MOVF   xC3,F
3896:  BZ    38C8
3898:  MOVF   xC3,F
389A:  BNZ   38C8
389C:  MOVF   xC2,W
389E:  SUBLW  06
38A0:  BNC   38C8
.................... 	    { 
.................... 	    filterWidth = (int16)(0x0001 << FWDT); //power 2 for FWDT factor 
38A2:  MOVLB  5
38A4:  CLRF   x79
38A6:  MOVLW  01
38A8:  MOVWF  x78
38AA:  MOVLB  3
38AC:  MOVF   xC2,W
38AE:  MOVWF  00
38B0:  BZ    38C6
38B2:  BCF    FD8.0
38B4:  MOVLB  5
38B6:  RLCF   x78,F
38B8:  RLCF   x79,F
38BA:  DECFSZ 00,F
38BC:  BRA    38C0
38BE:  BRA    38C4
38C0:  MOVLB  3
38C2:  BRA    38B2
38C4:  MOVLB  3
.................... 	    } 
.................... 	else 
38C6:  BRA    38D0
.................... 	    filterWidth = 1; 
38C8:  MOVLB  5
38CA:  CLRF   x79
38CC:  MOVLW  01
38CE:  MOVWF  x78
....................  
.................... 	//zero buffers & variables 
.................... 	for (cnt = 0; cnt < filterWidth; cnt++) 
38D0:  MOVLB  5
38D2:  CLRF   x68
38D4:  CLRF   x67
38D6:  MOVF   x68,W
38D8:  SUBWF  x79,W
38DA:  BNC   3908
38DC:  BNZ   38E4
38DE:  MOVF   x78,W
38E0:  SUBWF  x67,W
38E2:  BC    3908
.................... 	    { 
.................... 	    data_filt0[cnt] = 0;	//clear buffer 
38E4:  BCF    FD8.0
38E6:  RLCF   x67,W
38E8:  MOVWF  02
38EA:  RLCF   x68,W
38EC:  MOVWF  03
38EE:  MOVF   02,W
38F0:  ADDLW  1A
38F2:  MOVWF  FE9
38F4:  MOVLW  00
38F6:  ADDWFC 03,W
38F8:  MOVWF  FEA
38FA:  CLRF   FEC
38FC:  MOVF   FED,F
38FE:  CLRF   FEF
.................... 	    } 
3900:  INCF   x67,F
3902:  BTFSC  FD8.2
3904:  INCF   x68,F
3906:  BRA    38D6
.................... 	; 
....................  
.................... 	StorAddr = 0; 
3908:  CLRF   x6E
390A:  CLRF   x6D
.................... 	OutBufAddr = 0; 
390C:  CLRF   x6F
.................... 	iWin = 0; 
390E:  MOVLB  3
3910:  CLRF   xE0
.................... 	iMaxFall0 = 0; 
3912:  MOVLB  0
3914:  CLRF   xA3
3916:  CLRF   xA2
.................... 	iMaxRise0 = 0; 
3918:  CLRF   x9F
391A:  CLRF   x9E
.................... 	maxFall0 = 0; 
391C:  CLRF   xA1
391E:  CLRF   xA0
.................... 	maxRise0 = 0; 
3920:  CLRF   x9D
3922:  CLRF   x9C
.................... 	data_mean0 = 0; 
3924:  CLRF   x9B
3926:  CLRF   x9A
....................  
.................... 	//DAC parameters initialization 
.................... 	sawStartLevel = (int16)(((float) SAW_A0 / 1000) * volts2dac); //convert to ADC discretes 
3928:  MOVFF  3CB,57D
392C:  MOVFF  3CA,57C
3930:  CALL   2930
3934:  MOVFF  00,57C
3938:  MOVFF  01,57D
393C:  MOVFF  02,57E
3940:  MOVFF  03,57F
3944:  MOVFF  03,583
3948:  MOVFF  02,582
394C:  MOVFF  01,581
3950:  MOVFF  00,580
3954:  MOVLB  5
3956:  CLRF   x87
3958:  CLRF   x86
395A:  MOVLW  7A
395C:  MOVWF  x85
395E:  MOVLW  88
3960:  MOVWF  x84
3962:  MOVLB  0
3964:  CALL   2966
3968:  MOVFF  00,57C
396C:  MOVFF  01,57D
3970:  MOVFF  02,57E
3974:  MOVFF  03,57F
3978:  MOVFF  03,584
397C:  MOVFF  02,583
3980:  MOVFF  01,582
3984:  MOVFF  00,581
3988:  MOVLW  A8
398A:  MOVLB  5
398C:  MOVWF  x88
398E:  MOVLW  C6
3990:  MOVWF  x87
3992:  MOVLW  4B
3994:  MOVWF  x86
3996:  MOVLW  89
3998:  MOVWF  x85
399A:  MOVLB  0
399C:  CALL   2590
39A0:  MOVFF  03,581
39A4:  MOVFF  02,580
39A8:  MOVFF  01,57F
39AC:  MOVFF  00,57E
39B0:  CALL   2686
39B4:  MOVFF  02,3CD
39B8:  MOVFF  01,3CC
....................  
.................... 	sawEndLevel = sawStartLevel 
.................... 		+ (int16)(((float) SAW_A1 / 1000) * volts2dac); 
39BC:  MOVFF  3CF,57D
39C0:  MOVFF  3CE,57C
39C4:  CALL   2930
39C8:  MOVFF  00,57C
39CC:  MOVFF  01,57D
39D0:  MOVFF  02,57E
39D4:  MOVFF  03,57F
39D8:  MOVFF  03,583
39DC:  MOVFF  02,582
39E0:  MOVFF  01,581
39E4:  MOVFF  00,580
39E8:  MOVLB  5
39EA:  CLRF   x87
39EC:  CLRF   x86
39EE:  MOVLW  7A
39F0:  MOVWF  x85
39F2:  MOVLW  88
39F4:  MOVWF  x84
39F6:  MOVLB  0
39F8:  CALL   2966
39FC:  MOVFF  00,57C
3A00:  MOVFF  01,57D
3A04:  MOVFF  02,57E
3A08:  MOVFF  03,57F
3A0C:  MOVFF  03,584
3A10:  MOVFF  02,583
3A14:  MOVFF  01,582
3A18:  MOVFF  00,581
3A1C:  MOVLW  A8
3A1E:  MOVLB  5
3A20:  MOVWF  x88
3A22:  MOVLW  C6
3A24:  MOVWF  x87
3A26:  MOVLW  4B
3A28:  MOVWF  x86
3A2A:  MOVLW  89
3A2C:  MOVWF  x85
3A2E:  MOVLB  0
3A30:  CALL   2590
3A34:  MOVFF  03,581
3A38:  MOVFF  02,580
3A3C:  MOVFF  01,57F
3A40:  MOVFF  00,57E
3A44:  CALL   2686
3A48:  MOVF   01,W
3A4A:  MOVLB  3
3A4C:  ADDWF  xCC,W
3A4E:  MOVWF  xD0
3A50:  MOVF   02,W
3A52:  ADDWFC xCD,W
3A54:  MOVWF  xD1
....................  
.................... 	//next state 
.................... 	DaqState = DaqMeasure;	//set measuring state 
3A56:  MOVLW  02
3A58:  MOVWF  xEF
.................... 	break; 
3A5A:  BRA    3FDC
....................  
....................     case DaqMeasure: 
....................  
.................... 	//set initial DAC level 
.................... 	SetSawDac(sawStartLevel); 
3A5C:  MOVFF  3CD,57D
3A60:  MOVFF  3CC,57C
3A64:  CALL   2AC4
....................  
.................... 	//read data from ADC 
.................... 	//select ADC channel 
.................... 	set_adc_channel(0);	//select ch0 
3A68:  MOVLW  00
3A6A:  MOVWF  01
3A6C:  MOVF   FC2,W
3A6E:  ANDLW  C3
3A70:  IORWF  01,W
3A72:  MOVWF  FC2
....................  
.................... 	Sum = 0; 
3A74:  MOVLB  5
3A76:  CLRF   x73
3A78:  CLRF   x72
3A7A:  CLRF   x71
3A7C:  CLRF   x70
....................  
.................... 	// Rising saw part 
.................... 	for (sawLevel = sawStartLevel; sawLevel < sawEndLevel; sawLevel++) 
3A7E:  MOVFF  3CD,57B
3A82:  MOVFF  3CC,57A
3A86:  MOVF   x7B,W
3A88:  MOVLB  3
3A8A:  SUBWF  xD1,W
3A8C:  BTFSS  FD8.0
3A8E:  BRA    3BA6
3A90:  BNZ   3AA2
3A92:  MOVF   xD0,W
3A94:  MOVLB  5
3A96:  SUBWF  x7A,W
3A98:  BTFSS  FD8.0
3A9A:  BRA    3AA0
3A9C:  MOVLB  3
3A9E:  BRA    3BA6
3AA0:  MOVLB  3
.................... 	    { 
....................  
.................... 	    read_adc(ADC_START_ONLY); //start conversion 
3AA2:  BSF    FC2.1
....................  
.................... 	    SetSawDac(sawLevel);	//set next saw level 
3AA4:  MOVFF  57B,57D
3AA8:  MOVFF  57A,57C
3AAC:  MOVLB  0
3AAE:  CALL   2AC4
....................  
.................... 	    ADC0 = read_adc(ADC_READ_ONLY); //read measured value 
3AB2:  BTFSC  FC2.1
3AB4:  BRA    3AB2
3AB6:  MOVFF  FC4,56A
3ABA:  MOVLB  5
3ABC:  MOVFF  FC3,569
....................  
.................... 	    //filtering 
.................... 	    Wrk0 -= data_filt0[iWin];	//calc new sum mean val 
3AC0:  BCF    FD8.0
3AC2:  MOVLB  3
3AC4:  RLCF   xE0,W
3AC6:  CLRF   03
3AC8:  ADDLW  1A
3ACA:  MOVWF  FE9
3ACC:  MOVLW  00
3ACE:  ADDWFC 03,W
3AD0:  MOVWF  FEA
3AD2:  MOVFF  FEC,03
3AD6:  MOVF   FED,F
3AD8:  MOVF   FEF,W
3ADA:  MOVLB  5
3ADC:  SUBWF  x6B,F
3ADE:  MOVF   03,W
3AE0:  SUBWFB x6C,F
.................... 	    Wrk0 += ADC0; 
3AE2:  MOVF   x69,W
3AE4:  ADDWF  x6B,F
3AE6:  MOVF   x6A,W
3AE8:  ADDWFC x6C,F
.................... 	    data_filt0[iWin] = ADC0; 
3AEA:  BCF    FD8.0
3AEC:  MOVLB  3
3AEE:  RLCF   xE0,W
3AF0:  CLRF   03
3AF2:  ADDLW  1A
3AF4:  MOVWF  FE9
3AF6:  MOVLW  00
3AF8:  ADDWFC 03,W
3AFA:  MOVWF  FEA
3AFC:  MOVFF  56A,FEC
3B00:  MOVF   FED,F
3B02:  MOVFF  569,FEF
....................  
.................... 	    //next filter value 
.................... 	    if (iWin == 0) 
3B06:  MOVF   xE0,F
3B08:  BNZ   3B12
.................... 		{ 
.................... 		iWin = filterWidth; 
3B0A:  MOVFF  578,3E0
.................... 		iWin--; 
3B0E:  DECF   xE0,F
.................... 		} 
.................... 	    else 
3B10:  BRA    3B14
.................... 		iWin--; 
3B12:  DECF   xE0,F
....................  
.................... 	    //calc mean value 
.................... 	    data_mean0 = Wrk0 >> FWDT; //divide by filterWidth = 2^FWDT 
3B14:  MOVFF  56C,9B
3B18:  MOVFF  56B,9A
3B1C:  MOVF   xC2,W
3B1E:  MOVWF  00
3B20:  BZ    3B36
3B22:  BCF    FD8.0
3B24:  MOVLB  0
3B26:  RRCF   x9B,F
3B28:  RRCF   x9A,F
3B2A:  DECFSZ 00,F
3B2C:  BRA    3B30
3B2E:  BRA    3B34
3B30:  MOVLB  3
3B32:  BRA    3B22
3B34:  MOVLB  3
.................... 	    Sum += data_mean0; 
3B36:  MOVLB  0
3B38:  MOVF   x9A,W
3B3A:  MOVLB  5
3B3C:  ADDWF  x70,F
3B3E:  MOVLB  0
3B40:  MOVF   x9B,W
3B42:  MOVLB  5
3B44:  ADDWFC x71,F
3B46:  MOVLW  00
3B48:  ADDWFC x72,F
3B4A:  ADDWFC x73,F
....................  
.................... 	    //extremum 
.................... 	    //estim max val 
.................... 	    if (data_mean0 > maxRise0) 
3B4C:  MOVLB  0
3B4E:  MOVF   x9D,W
3B50:  SUBWF  x9B,W
3B52:  BNC   3B6C
3B54:  BNZ   3B5C
3B56:  MOVF   x9A,W
3B58:  SUBWF  x9C,W
3B5A:  BC    3B6C
.................... 		{ 
.................... 		iMaxRise0 = StorAddr; 
3B5C:  MOVFF  56E,9F
3B60:  MOVFF  56D,9E
.................... 		maxRise0 = data_mean0; 
3B64:  MOVFF  9B,9D
3B68:  MOVFF  9A,9C
.................... 		}; 
....................  
.................... 	    StorAddr++; 
3B6C:  MOVLB  5
3B6E:  INCF   x6D,F
3B70:  BTFSC  FD8.2
3B72:  INCF   x6E,F
....................  
.................... 	    //beta measuring 
.................... 	    if (data_mean0 > BetTrsh) 
3B74:  MOVF   x75,W
3B76:  MOVLB  0
3B78:  SUBWF  x9B,W
3B7A:  BNC   3B94
3B7C:  BNZ   3B8C
3B7E:  MOVF   x9A,W
3B80:  MOVLB  5
3B82:  SUBWF  x74,W
3B84:  BTFSS  FD8.0
3B86:  BRA    3B8C
3B88:  MOVLB  0
3B8A:  BRA    3B94
.................... 		bet_cur++; 
3B8C:  MOVLB  5
3B8E:  INCF   x76,F
3B90:  BTFSC  FD8.2
3B92:  INCF   x77,F
....................  
.................... 	    maxCycles++; //add cycle count 
3B94:  MOVLB  5
3B96:  INCF   x65,F
3B98:  BTFSC  FD8.2
3B9A:  INCF   x66,F
....................  
.................... 	    } 
3B9C:  INCF   x7A,F
3B9E:  BTFSC  FD8.2
3BA0:  INCF   x7B,F
3BA2:  BRA    3A86
3BA4:  MOVLB  3
....................  
.................... 	DaqState = DaqScale; 
3BA6:  MOVLW  03
3BA8:  MOVWF  xEF
.................... 	break; 
3BAA:  BRA    3FDC
....................  
....................     case DaqScale: 
.................... 	//scaling & result storing 
....................  
.................... 	//temperature 
.................... 	Termometer(); 
3BAC:  CALL   26C2
.................... 	restart_wdt(); 
3BB0:  CLRWDT
....................  
.................... 	//regulator 
.................... 	if (T_GEN > (TG_CAL + Hst)) 
3BB2:  MOVLB  3
3BB4:  MOVF   xED,W
3BB6:  ADDWF  xDA,W
3BB8:  MOVWF  01
3BBA:  MOVF   xEE,W
3BBC:  ADDWFC xDB,W
3BBE:  MOVWF  03
3BC0:  MOVF   01,W
3BC2:  BTFSC  xC9.7
3BC4:  BRA    3BD8
3BC6:  MOVF   03,W
3BC8:  SUBWF  xC9,W
3BCA:  BNC   3BD8
3BCC:  BNZ   3BD4
3BCE:  MOVF   xC8,W
3BD0:  SUBWF  01,W
3BD2:  BC    3BD8
.................... 	    { //if temperature above rated & histeresis 
.................... 	    output_low(TERMO);				//off heater 
3BD4:  BCF    F96.1
3BD6:  BCF    F8D.1
.................... 	    } 
....................  
.................... 	if (T_GEN < (TG_CAL - Hst)) 
3BD8:  MOVF   xED,W
3BDA:  SUBWF  xDA,W
3BDC:  MOVWF  00
3BDE:  MOVF   xEE,W
3BE0:  SUBWFB xDB,W
3BE2:  MOVWF  03
3BE4:  MOVFF  00,01
3BE8:  BTFSC  xC9.7
3BEA:  BRA    3BFA
3BEC:  MOVF   xC9,W
3BEE:  SUBWF  03,W
3BF0:  BNC   3BFE
3BF2:  BNZ   3BFA
3BF4:  MOVF   01,W
3BF6:  SUBWF  xC8,W
3BF8:  BC    3BFE
.................... 	    {			//if temperature below rated & histeresis 
.................... 	    output_high(TERMO);				//on heater 
3BFA:  BCF    F96.1
3BFC:  BSF    F8D.1
.................... 	    } 
....................  
.................... 	//amplitude - alpha 
.................... 	alp_buf0[iGam] = maxRise0; 
3BFE:  BCF    FD8.0
3C00:  RLCF   xC7,W
3C02:  CLRF   03
3C04:  ADDLW  A4
3C06:  MOVWF  FE9
3C08:  MOVLW  00
3C0A:  ADDWFC 03,W
3C0C:  MOVWF  FEA
3C0E:  MOVFF  9D,FEC
3C12:  MOVF   FED,F
3C14:  MOVFF  9C,FEF
....................  
.................... 	//treshold estimation 
.................... 	BetTrsh = (int16)(alp_buf0[iGam] >> 1); 
3C18:  BCF    FD8.0
3C1A:  RLCF   xC7,W
3C1C:  CLRF   03
3C1E:  ADDLW  A4
3C20:  MOVWF  FE9
3C22:  MOVLW  00
3C24:  ADDWFC 03,W
3C26:  MOVWF  FEA
3C28:  MOVFF  FEC,57D
3C2C:  MOVF   FED,F
3C2E:  MOVFF  FEF,57C
3C32:  BCF    FD8.0
3C34:  MOVLB  5
3C36:  RRCF   x7D,W
3C38:  MOVWF  x75
3C3A:  RRCF   x7C,W
3C3C:  MOVWF  x74
....................  
.................... 	//pulse width 
.................... 	bet_buf0[iGam] = bet_cur; 
3C3E:  BCF    FD8.0
3C40:  MOVLB  3
3C42:  RLCF   xC7,W
3C44:  CLRF   03
3C46:  ADDLW  A4
3C48:  MOVWF  FE9
3C4A:  MOVLW  01
3C4C:  ADDWFC 03,W
3C4E:  MOVWF  FEA
3C50:  MOVFF  577,FEC
3C54:  MOVF   FED,F
3C56:  MOVFF  576,FEF
....................  
.................... 	//gamma meaning 
.................... 	gam_buf0[iGam] = iMaxRise0; //meaning buffer 
3C5A:  BCF    FD8.0
3C5C:  RLCF   xC7,W
3C5E:  CLRF   03
3C60:  ADDLW  A4
3C62:  MOVWF  FE9
3C64:  MOVLW  02
3C66:  ADDWFC 03,W
3C68:  MOVWF  FEA
3C6A:  MOVFF  9F,FEC
3C6E:  MOVF   FED,F
3C70:  MOVFF  9E,FEF
....................  
.................... 	//next index 
.................... 	if (iGam == 0) 
3C74:  MOVF   xC7,F
3C76:  BNZ   3C80
.................... 	    { 
.................... 	    iGam = PCOUNT - 1; 
3C78:  MOVLW  01
3C7A:  SUBWF  xC4,W
3C7C:  MOVWF  xC7
.................... 	    } 
.................... 	else 
3C7E:  BRA    3C82
.................... 	    iGam--; 
3C80:  DECF   xC7,F
....................  
.................... 	AlpSum = 0; 
3C82:  CLRF   xE4
3C84:  CLRF   xE3
3C86:  CLRF   xE2
3C88:  CLRF   xE1
.................... 	BetSum = 0; 
3C8A:  CLRF   xE8
3C8C:  CLRF   xE7
3C8E:  CLRF   xE6
3C90:  CLRF   xE5
.................... 	GamSum = 0; 
3C92:  CLRF   xEC
3C94:  CLRF   xEB
3C96:  CLRF   xEA
3C98:  CLRF   xE9
....................  
.................... 	for (cnt = 0; cnt < PCOUNT; cnt++) 
3C9A:  MOVLB  5
3C9C:  CLRF   x68
3C9E:  CLRF   x67
3CA0:  MOVF   x68,W
3CA2:  MOVLB  3
3CA4:  SUBWF  xC5,W
3CA6:  BNC   3D50
3CA8:  BNZ   3CBA
3CAA:  MOVF   xC4,W
3CAC:  MOVLB  5
3CAE:  SUBWF  x67,W
3CB0:  BTFSS  FD8.0
3CB2:  BRA    3CB8
3CB4:  MOVLB  3
3CB6:  BRA    3D50
3CB8:  MOVLB  3
.................... 	    { 
.................... 	    AlpSum += alp_buf0[cnt]; 
3CBA:  BCF    FD8.0
3CBC:  MOVLB  5
3CBE:  RLCF   x67,W
3CC0:  MOVWF  02
3CC2:  RLCF   x68,W
3CC4:  MOVWF  03
3CC6:  MOVF   02,W
3CC8:  ADDLW  A4
3CCA:  MOVWF  FE9
3CCC:  MOVLW  00
3CCE:  ADDWFC 03,W
3CD0:  MOVWF  FEA
3CD2:  MOVFF  FEC,03
3CD6:  MOVF   FED,F
3CD8:  MOVF   FEF,W
3CDA:  MOVLB  3
3CDC:  ADDWF  xE1,F
3CDE:  MOVF   03,W
3CE0:  ADDWFC xE2,F
3CE2:  MOVLW  00
3CE4:  ADDWFC xE3,F
3CE6:  ADDWFC xE4,F
.................... 	    BetSum += bet_buf0[cnt]; 
3CE8:  BCF    FD8.0
3CEA:  MOVLB  5
3CEC:  RLCF   x67,W
3CEE:  MOVWF  02
3CF0:  RLCF   x68,W
3CF2:  MOVWF  03
3CF4:  MOVF   02,W
3CF6:  ADDLW  A4
3CF8:  MOVWF  FE9
3CFA:  MOVLW  01
3CFC:  ADDWFC 03,W
3CFE:  MOVWF  FEA
3D00:  MOVFF  FEC,03
3D04:  MOVF   FED,F
3D06:  MOVF   FEF,W
3D08:  MOVLB  3
3D0A:  ADDWF  xE5,F
3D0C:  MOVF   03,W
3D0E:  ADDWFC xE6,F
3D10:  MOVLW  00
3D12:  ADDWFC xE7,F
3D14:  ADDWFC xE8,F
.................... 	    GamSum += gam_buf0[cnt]; 
3D16:  BCF    FD8.0
3D18:  MOVLB  5
3D1A:  RLCF   x67,W
3D1C:  MOVWF  02
3D1E:  RLCF   x68,W
3D20:  MOVWF  03
3D22:  MOVF   02,W
3D24:  ADDLW  A4
3D26:  MOVWF  FE9
3D28:  MOVLW  02
3D2A:  ADDWFC 03,W
3D2C:  MOVWF  FEA
3D2E:  MOVFF  FEC,03
3D32:  MOVF   FED,F
3D34:  MOVF   FEF,W
3D36:  MOVLB  3
3D38:  ADDWF  xE9,F
3D3A:  MOVF   03,W
3D3C:  ADDWFC xEA,F
3D3E:  MOVLW  00
3D40:  ADDWFC xEB,F
3D42:  ADDWFC xEC,F
.................... 	    } 
3D44:  MOVLB  5
3D46:  INCF   x67,F
3D48:  BTFSC  FD8.2
3D4A:  INCF   x68,F
3D4C:  BRA    3CA0
3D4E:  MOVLB  3
....................  
.................... 	//alpha 
.................... 	Amplitude0 = ((int16)(((AlpSum >> 7) * 2.4414) - 0)) >> (AmpCoef0); //divide sum by 128 and conver to volts with amplify coeff 
3D50:  RRCF   xE4,W
3D52:  MOVLB  5
3D54:  MOVWF  x80
3D56:  MOVLB  3
3D58:  RRCF   xE3,W
3D5A:  MOVLB  5
3D5C:  MOVWF  x7F
3D5E:  MOVLB  3
3D60:  RRCF   xE2,W
3D62:  MOVLB  5
3D64:  MOVWF  x7E
3D66:  MOVLB  3
3D68:  RRCF   xE1,W
3D6A:  MOVLB  5
3D6C:  MOVWF  x7D
3D6E:  RRCF   x80,F
3D70:  RRCF   x7F,F
3D72:  RRCF   x7E,F
3D74:  RRCF   x7D,F
3D76:  RRCF   x80,F
3D78:  RRCF   x7F,F
3D7A:  RRCF   x7E,F
3D7C:  RRCF   x7D,F
3D7E:  RRCF   x80,F
3D80:  RRCF   x7F,F
3D82:  RRCF   x7E,F
3D84:  RRCF   x7D,F
3D86:  RRCF   x80,F
3D88:  RRCF   x7F,F
3D8A:  RRCF   x7E,F
3D8C:  RRCF   x7D,F
3D8E:  RRCF   x80,F
3D90:  RRCF   x7F,F
3D92:  RRCF   x7E,F
3D94:  RRCF   x7D,F
3D96:  RRCF   x80,F
3D98:  RRCF   x7F,F
3D9A:  RRCF   x7E,F
3D9C:  RRCF   x7D,F
3D9E:  MOVLW  01
3DA0:  ANDWF  x80,F
3DA2:  MOVFF  580,584
3DA6:  MOVFF  57F,583
3DAA:  MOVFF  57E,582
3DAE:  MOVFF  57D,581
3DB2:  MOVLB  0
3DB4:  GOTO   2AFA
3DB8:  MOVFF  03,584
3DBC:  MOVFF  02,583
3DC0:  MOVFF  01,582
3DC4:  MOVFF  00,581
3DC8:  MOVLW  E6
3DCA:  MOVLB  5
3DCC:  MOVWF  x88
3DCE:  MOVLW  3F
3DD0:  MOVWF  x87
3DD2:  MOVLW  1C
3DD4:  MOVWF  x86
3DD6:  MOVLW  80
3DD8:  MOVWF  x85
3DDA:  MOVLB  0
3DDC:  CALL   2590
3DE0:  MOVFF  00,57D
3DE4:  MOVFF  01,57E
3DE8:  MOVFF  02,57F
3DEC:  MOVFF  03,580
3DF0:  BSF    FD8.1
3DF2:  MOVFF  03,584
3DF6:  MOVFF  02,583
3DFA:  MOVFF  01,582
3DFE:  MOVFF  00,581
3E02:  MOVLB  5
3E04:  CLRF   x88
3E06:  CLRF   x87
3E08:  CLRF   x86
3E0A:  CLRF   x85
3E0C:  MOVLB  0
3E0E:  GOTO   2B34
3E12:  MOVFF  03,581
3E16:  MOVFF  02,580
3E1A:  MOVFF  01,57F
3E1E:  MOVFF  00,57E
3E22:  CALL   2686
3E26:  MOVFF  02,57E
3E2A:  MOVFF  01,57D
3E2E:  MOVFF  02,3A5
3E32:  MOVFF  01,3A4
3E36:  MOVLB  3
3E38:  MOVF   xAA,W
3E3A:  MOVWF  00
3E3C:  BZ    3E48
3E3E:  BCF    FD8.0
3E40:  RRCF   xA5,F
3E42:  RRCF   xA4,F
3E44:  DECFSZ 00,F
3E46:  BRA    3E3E
....................  
.................... 	//beta 
.................... 	PulseWdt0 = (int16)(((BetSum >> 7) * 10000) / maxCycles); //divide sum by 128 and norming 
3E48:  RRCF   xE8,W
3E4A:  MOVLB  5
3E4C:  MOVWF  x80
3E4E:  MOVLB  3
3E50:  RRCF   xE7,W
3E52:  MOVLB  5
3E54:  MOVWF  x7F
3E56:  MOVLB  3
3E58:  RRCF   xE6,W
3E5A:  MOVLB  5
3E5C:  MOVWF  x7E
3E5E:  MOVLB  3
3E60:  RRCF   xE5,W
3E62:  MOVLB  5
3E64:  MOVWF  x7D
3E66:  RRCF   x80,F
3E68:  RRCF   x7F,F
3E6A:  RRCF   x7E,F
3E6C:  RRCF   x7D,F
3E6E:  RRCF   x80,F
3E70:  RRCF   x7F,F
3E72:  RRCF   x7E,F
3E74:  RRCF   x7D,F
3E76:  RRCF   x80,F
3E78:  RRCF   x7F,F
3E7A:  RRCF   x7E,F
3E7C:  RRCF   x7D,F
3E7E:  RRCF   x80,F
3E80:  RRCF   x7F,F
3E82:  RRCF   x7E,F
3E84:  RRCF   x7D,F
3E86:  RRCF   x80,F
3E88:  RRCF   x7F,F
3E8A:  RRCF   x7E,F
3E8C:  RRCF   x7D,F
3E8E:  RRCF   x80,F
3E90:  RRCF   x7F,F
3E92:  RRCF   x7E,F
3E94:  RRCF   x7D,F
3E96:  MOVLW  01
3E98:  ANDWF  x80,F
3E9A:  MOVFF  580,584
3E9E:  MOVFF  57F,583
3EA2:  MOVFF  57E,582
3EA6:  MOVFF  57D,581
3EAA:  CLRF   x88
3EAC:  CLRF   x87
3EAE:  MOVLW  27
3EB0:  MOVWF  x86
3EB2:  MOVLW  10
3EB4:  MOVWF  x85
3EB6:  MOVLB  0
3EB8:  CALL   2DAE
3EBC:  MOVFF  03,580
3EC0:  MOVFF  02,57F
3EC4:  MOVFF  01,57E
3EC8:  MOVFF  00,57D
3ECC:  BCF    FD8.1
3ECE:  CLRF   19
3ED0:  BTFSC  FF2.7
3ED2:  BSF    19.7
3ED4:  BCF    FF2.7
3ED6:  MOVFF  03,594
3EDA:  MOVFF  02,593
3EDE:  MOVFF  01,592
3EE2:  MOVFF  00,591
3EE6:  MOVLB  5
3EE8:  CLRF   x98
3EEA:  CLRF   x97
3EEC:  MOVFF  566,596
3EF0:  MOVFF  565,595
3EF4:  MOVLB  0
3EF6:  CALL   02DA
3EFA:  BTFSC  19.7
3EFC:  BSF    FF2.7
3EFE:  MOVFF  01,3A7
3F02:  MOVFF  00,3A6
....................  
.................... 	//gamma 
.................... 	Gamma0 = (int16)(((GamSum >> 7) * 10000) / maxCycles); //divide sum by 128 and norming 
3F06:  MOVLB  3
3F08:  RRCF   xEC,W
3F0A:  MOVLB  5
3F0C:  MOVWF  x80
3F0E:  MOVLB  3
3F10:  RRCF   xEB,W
3F12:  MOVLB  5
3F14:  MOVWF  x7F
3F16:  MOVLB  3
3F18:  RRCF   xEA,W
3F1A:  MOVLB  5
3F1C:  MOVWF  x7E
3F1E:  MOVLB  3
3F20:  RRCF   xE9,W
3F22:  MOVLB  5
3F24:  MOVWF  x7D
3F26:  RRCF   x80,F
3F28:  RRCF   x7F,F
3F2A:  RRCF   x7E,F
3F2C:  RRCF   x7D,F
3F2E:  RRCF   x80,F
3F30:  RRCF   x7F,F
3F32:  RRCF   x7E,F
3F34:  RRCF   x7D,F
3F36:  RRCF   x80,F
3F38:  RRCF   x7F,F
3F3A:  RRCF   x7E,F
3F3C:  RRCF   x7D,F
3F3E:  RRCF   x80,F
3F40:  RRCF   x7F,F
3F42:  RRCF   x7E,F
3F44:  RRCF   x7D,F
3F46:  RRCF   x80,F
3F48:  RRCF   x7F,F
3F4A:  RRCF   x7E,F
3F4C:  RRCF   x7D,F
3F4E:  RRCF   x80,F
3F50:  RRCF   x7F,F
3F52:  RRCF   x7E,F
3F54:  RRCF   x7D,F
3F56:  MOVLW  01
3F58:  ANDWF  x80,F
3F5A:  MOVFF  580,584
3F5E:  MOVFF  57F,583
3F62:  MOVFF  57E,582
3F66:  MOVFF  57D,581
3F6A:  CLRF   x88
3F6C:  CLRF   x87
3F6E:  MOVLW  27
3F70:  MOVWF  x86
3F72:  MOVLW  10
3F74:  MOVWF  x85
3F76:  MOVLB  0
3F78:  CALL   2DAE
3F7C:  MOVFF  03,580
3F80:  MOVFF  02,57F
3F84:  MOVFF  01,57E
3F88:  MOVFF  00,57D
3F8C:  BCF    FD8.1
3F8E:  CLRF   19
3F90:  BTFSC  FF2.7
3F92:  BSF    19.7
3F94:  BCF    FF2.7
3F96:  MOVFF  03,594
3F9A:  MOVFF  02,593
3F9E:  MOVFF  01,592
3FA2:  MOVFF  00,591
3FA6:  MOVLB  5
3FA8:  CLRF   x98
3FAA:  CLRF   x97
3FAC:  MOVFF  566,596
3FB0:  MOVFF  565,595
3FB4:  MOVLB  0
3FB6:  CALL   02DA
3FBA:  BTFSC  19.7
3FBC:  BSF    FF2.7
3FBE:  MOVFF  01,3A9
3FC2:  MOVFF  00,3A8
....................  
.................... 	//repeat testing 
.................... 	if (OneCycle) 
3FC6:  MOVLB  3
3FC8:  BTFSS  xC6.0
3FCA:  BRA    3FD0
.................... 	    { 
.................... 	    DaqState = DaqIdle;	//if one cycle  - next-idle 
3FCC:  CLRF   xEF
.................... 	    } 
.................... 	else 
3FCE:  BRA    3FD4
.................... 	    DaqState = DaqStart;	//else normal measuring 
3FD0:  MOVLW  01
3FD2:  MOVWF  xEF
.................... 	output_high(STAT); 
3FD4:  BCF    F94.0
3FD6:  BSF    F8B.0
.................... 	break; 
3FD8:  BRA    3FDC
3FDA:  MOVLB  3
.................... 	} 
....................     } 
3FDC:  BRA    3850
.................... } 
3FDE:  BRA    3FDE

Configuration Fuses:
   Word  1: C800   IESO FCMEN INTRC_IO
   Word  2: 0019   NOBROWNOUT WDT1 NOWDT BORV20 NOPUT
   Word  3: 0700   PBADEN CCP2C1 LPT1OSC NOMCLR
   Word  4: 0000   NOSTVREN DEBUG NOLVP NOXINST
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB

   Some fuses have been forced to be compatible with the ICD debugger.

ROM data:
F00000: FC 08 E8 03 01 00 01 00 00 08 80 00 40 00 00 4B 
F00010: 01 00 C4 09 C4 09 B8 0B 00 00 00 00 00 7F 00 00 
F00020: 00 00 00 00 00 00 00 00 
