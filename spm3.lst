CCS PCH C Compiler, Version 4.110, 5967               31-џэт-16 16:33

               Filename: C:\Projects\MWT-3\SPM3Firmware\spm3.lst

               ROM used: 17208 bytes (54%)
                         Largest free fragment is 14724
               RAM used: 1314 (86%) at main() level
                         1344 (88%) worst case
               Stack:    5 worst case (2 in main + 3 for interrupts)

*
0000:  GOTO   2F64
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  F9D.0
0056:  GOTO   0060
005A:  BTFSC  F9E.0
005C:  GOTO   1A1E
0060:  BTFSS  F9D.5
0062:  GOTO   006C
0066:  BTFSC  F9E.5
0068:  GOTO   036E
006C:  MOVFF  0E,00
0070:  MOVFF  0F,01
0074:  MOVFF  10,02
0078:  MOVFF  11,03
007C:  MOVFF  0C,FE9
0080:  MOVFF  07,FEA
0084:  BSF    07.7
0086:  MOVFF  08,FE1
008A:  MOVFF  09,FE2
008E:  MOVFF  0A,FD9
0092:  MOVFF  0B,FDA
0096:  MOVFF  12,FF3
009A:  MOVFF  13,FF4
009E:  MOVFF  14,FFA
00A2:  MOVFF  15,FF5
00A6:  MOVFF  16,FF6
00AA:  MOVFF  17,FF7
00AE:  MOVF   04,W
00B0:  MOVFF  06,FE0
00B4:  MOVFF  05,FD8
00B8:  RETFIE 0
.................... #include "spm3.h" 
.................... #include <18F4520.h> 
.................... //////// Standard Header file for the PIC18F4520 device //////////////// 
.................... #device PIC18F4520 
.................... #list 
....................  
.................... #device ICD=TRUE 
.................... #device adc=10 
.................... #FUSES WDT                      //Watch Dog Timer  
.................... #FUSES WDT1                     //Watch Dog Timer uses 1:1 Postscale 
.................... #FUSES INTRC_IO                 //Internal RC Osc, no CLKOUT 
.................... #FUSES NOPROTECT                //Code not protected from reading 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... //#FUSES BORV20                   //Brownout reset at 2.0V 
.................... #FUSES PUT                      //Power Up Timer 
.................... #FUSES NOCPD                    //No EE protection 
.................... #FUSES STVREN                   //Stack full/underflow will cause reset 
.................... #FUSES NODEBUG                  //No Debug mode for ICD 
.................... #FUSES LVP                      //Low Voltage Programming on B3(PIC16) or B5(PIC18) 
.................... #FUSES NOWRT                    //Program memory not write protected 
.................... #FUSES NOWRTD                   //Data EEPROM not write protected 
.................... #FUSES IESO                     //Internal External Switch Over mode enabled 
.................... #FUSES FCMEN                    //Fail-safe clock monitor enabled 
.................... #FUSES PBADEN                   //PORTB pins are configured as analog input channels on RESET 
.................... #FUSES NOWRTC                   //configuration not registers write protected 
.................... #FUSES NOWRTB                   //Boot block not write protected 
.................... #FUSES NOEBTR                   //Memory not protected from table reads 
.................... #FUSES NOEBTRB                  //Boot block not protected from table reads 
.................... #FUSES NOCPB                    //No Boot Block code protection 
.................... #FUSES LPT1OSC                  //Timer1 configured for low-power operation 
.................... #FUSES NOMCLR                   //Master Clear pin enabled 
.................... #FUSES XINST                    //Extended set extension and Indexed Addressing mode enabled 
....................  
.................... #use delay(clock=32000000,RESTART_WDT) 
*
19CA:  MOVLW  05
19CC:  MOVWF  FEA
19CE:  MOVLW  37
19D0:  MOVWF  FE9
19D2:  MOVF   FEF,W
19D4:  BZ    19F8
19D6:  MOVLW  0A
19D8:  MOVWF  01
19DA:  MOVLW  BF
19DC:  MOVWF  00
19DE:  CLRWDT
19E0:  DECFSZ 00,F
19E2:  BRA    19DE
19E4:  DECFSZ 01,F
19E6:  BRA    19DA
19E8:  MOVLW  5E
19EA:  MOVWF  00
19EC:  DECFSZ 00,F
19EE:  BRA    19EC
19F0:  BRA    19F2
19F2:  CLRWDT
19F4:  DECFSZ FEF,F
19F6:  BRA    19D6
19F8:  GOTO   1EA6 (RETURN)
.................... #define S0   PIN_A0 
.................... #define S1   PIN_A1 
.................... #define T0   PIN_A2 
.................... #define Uref   PIN_A3 
.................... #define T1   PIN_A4 
.................... #define T2   PIN_A5 
.................... #define DIR   PIN_A6 
.................... #define LDAC   PIN_A7 
.................... #define STAT   PIN_C0 
.................... #define MEM0   PIN_C1 
.................... #define MEM1   PIN_C2 
.................... #define SCK   PIN_C3 
.................... #define SDI   PIN_C4 
.................... #define SDO   PIN_C5 
.................... #define TX   PIN_C6 
.................... #define RX   PIN_C7 
.................... #define DAC0   PIN_D0 
.................... #define DAC1   PIN_D1 
.................... #define KU1   PIN_D4 
.................... #define KU0   PIN_D5 
.................... #define SYNC_POS   PIN_E0 
.................... #define TERMO   PIN_E1 
....................  
....................  
....................  
.................... #include "ee_var.h" 
.................... //SPM-3 EEPROM storage structure 
.................... //define adresses of EEPROM locations 
.................... /*		LocName		Addr	Discr			*/ 
.................... /*==========================================*/ 
.................... #define	EE_SAW_A0	0x00	//define saw level 
.................... #define	EE_SAW_A1	0x02	//define saw amplitude 
.................... #define	EE_KU0		0x04	//amp coeff for in0 
.................... #define	EE_KU1		0x06	//amp coeff for in1 
.................... #define	EE_TAQ		0x08	//number of DAQ points 
.................... #define	EE_PCOUNT	0x0A	//num of measures for meaning 
.................... #define	EE_FWDT		0x0C 
.................... #define	EE_Speed	0x0E	//serial device speed 
.................... #define	EE_Host		0x10	//host address & serial number	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<!!! Device ID!!! 
.................... #define	EE_T0_CAL	0x12	//cal temperature of cn0  
.................... #define	EE_T1_CAL	0x14	//cal temperature of cn1  
.................... #define	EE_TG_CAL	0x16	//cal temperature of generator  
.................... #define	EE_KGT		0x18	//termo coeff of generator 
.................... #define	EE_KGU		0x1C	//voltage coeff of generator 
.................... #define	EE_KST0		0x20	//termo coeff of cn0 
.................... #define	EE_KST1		0x24	//termo coeff of cn1 
....................  
.................... //EEPROM data definition 
.................... #ROM	0xf00000={0000,	//EE_SAW_A0 
.................... 				  20000,	//EE_SAW_A1 
.................... 				  0x0001,	//EE_KU0				   
.................... 				  0x0001,	//EE_KU1 
.................... 				  0x0800,	//EE_TAQ 
.................... 				  0x0080,	//EE_PCOUNT 
.................... 				  0x0003,	//EE_FWDT 
.................... 				  0x4B00,	//EE_Speed 
.................... 				  0x0001,	//EE_Host				   
.................... 				  0x09C4,	//EE_TO_CAL 
.................... 				  0x09C4,	//EE_T1_CAL 
.................... 				  0x0BB8,	//EE_TG_CAL 
.................... 				  0x0000,	//EE_KGT 
.................... 				  0x0000, 
.................... 				  0x7F00,	//EE_KGU 
.................... 				  0x0000, 
.................... 				  0x0000,	//EE_KST0 
.................... 				  0x0000, 
.................... 				  0x0000,	//EE_KST1 
.................... 				  0x0000 
.................... } 
.................... // 
....................  
....................  
.................... //directives 
.................... //#USE FAST_IO(A) 
.................... //#USE FAST_IO(C) 
.................... //#USE FAST_IO(D) 
....................  
.................... //const 
.................... float const volts2dac = 4096.0 / 20.0; // use for value from volts to DAC conversion 
....................  
.................... //variables 
.................... //buffers 
.................... //channel 0 
.................... static int16 data_filt0[64];		//filtering buffer for ch0 
.................... static int16 data_mean0;			//mean value 
.................... static int16 maxRise0;			//max value at rising saw 
.................... static int16 iMaxRise0;			//index of maximum at rising saw 
.................... static int16 maxFall0;			//max value at falling saw 
.................... static int16 iMaxFall0;			//index of maximum at falling saw 
.................... static int16 alp_buf0[128];		//alpha meaning buffer 
.................... static int16 bet_buf0[128];		//beta meaning buffer 
.................... static int16 gam_buf0[128];		//gamma meaning buffer 
.................... static int16 Amplitude0;			//amplitude in B*1000 
.................... static int16 PulseWdt0;			//pulse width in uS/10 
.................... static int16 Gamma0;				//gamma in uS/10 
.................... static int16 AmpCoef0;			//input amplifier coeff 
.................... static float KST0;				// 
.................... static int16 T0_CAL;				// 
.................... static signed int16 T_SR0;				//temperature of cn0 
.................... static int16 Gamma1;				//gamma in uS/10 
.................... static int16 AmpCoef1;			//input amplifier coeff 
.................... static float KST1;				// 
.................... static int16 T1_CAL;				// 
.................... static signed int16 T_SR1;				//temperature of cn1 
....................  
.................... //common 
.................... static int16 TAQ;		//number of data samples at measuring period 
.................... static int16 FWDT;				//filering window width 
.................... static int16 PCOUNT;				//measuring periods for meaning 
.................... static int1 OneCycle;			//one cycle flag 
.................... static int8 iGam = 0;				//gamma meaning index 
....................  
.................... //saw 
.................... static signed int16 T_GEN;//generator temperature 
.................... static int16 SAW_A0;				//level of saw 
.................... static int16 sawStartLevel;			//current saw level 
.................... static int16 SAW_A1;				//saw amplitude 
.................... static int16 sawEndLevel;			//saw step 
.................... static float KGT;				// 
.................... static float KGU;				// 
.................... static int16 TG_CAL;				// 
....................  
.................... static int16 ADC0;	//current ADC value 
....................  
....................  
.................... static int16 currentAlpha; 
.................... static int16 currentBeta; 
.................... static int16 currentGamma; 
....................  
.................... //communication 
.................... static int16 Speed;				//USART speed 
.................... static int16 Addr;				//own USART host adress 
....................  
.................... //filtering 
.................... static int8 iWin;				//meaning window index 
.................... static int32 AlpSum; 
.................... static int32 BetSum; 
.................... static int32 GamSum; 
....................  
.................... //temperature regulator 
.................... static int16 Hst = 50;				//Histeresis 
....................  
.................... //states 
.................... enum daq_states 
.................... { 
.................... 	DaqIdle,		//idle state - state after daq stop 
.................... 	DaqStart,		//cyclic mesuring start for one cycle 
.................... 	DaqMeasure,		//measuring 
.................... 	DaqScale,		//scaling measured values 
.................... 	DaqEnd			//ending measuring cycle 
.................... }; 
.................... int8 DaqState;	//Daq procedure state 
.................... // 
.................... //math variables 
.................... /*float kgv; 
.................... float Va; 
.................... float delta_gamma, delta_gamma2; 
.................... float T_0, T_G, T_G_k; 
.................... float Gam0, Gam0_k; 
.................... float k1, tsn; 
.................... float W; 
.................... float Haw0, Haw0_k; 
.................... float AA, BB, a0, a1, a2, a3, a4, a5; 
.................... float Am0, Am0_k; 
.................... float T_S0, T_S0_k; 
.................... */ 
....................  
.................... //procedures 
.................... //mathematics 
.................... /*char Calc() // Humidity calculation 
....................  { 
....................  float difftime0; 
....................  //coeff validation 
....................  if (kgv == 0) 
....................  kgv = 1; 
....................  if (Va == 0) 
....................  Va = 1; 
....................  // 
....................  delta_gamma = (kgt / kgv) * (T_0 / Va) * (T_G - T_G_k);	//generator temperature correction 
....................  delta_gamma2 = k1 * (T_S0 - tsn);	//object temperature correction 
....................  difftime0 = (Gam0 - Gam0_k);	//addition parameter estimation 
....................  difftime0 = difftime0 + delta_gamma + delta_gamma2;	//adding corecction 
....................  //main regression 
....................  W = AA 
....................  + BB 
....................  * (a0 + a1 * (Am0 - Am0_k) * 10 
....................  + a2 * (Haw0 - Haw0_k) / 1000 
....................  + a3 * difftime0 / 1000 + a4 * (T_G - T_G_k) / 100 
....................  + a5 * (T_S0 - T_S0_k) / 100); 
....................  
....................  return 0; 
....................  }*/ 
....................  
.................... //Peripherals setup 
.................... void InitMcu(void) 
.................... {		//initialization of MCU 
....................  
.................... 	//oscillator configuration 
.................... 	setup_oscillator(OSC_32MHZ | OSC_NORMAL | OSC_31250); 
*
1FE4:  MOVLW  70
1FE6:  MOVWF  FD3
1FE8:  MOVLW  C0
1FEA:  MOVWF  F9B
1FEC:  MOVF   FD3,W
.................... 	//disable PSP 
.................... 	setup_psp(PSP_DISABLED); 
1FEE:  BCF    F96.4
.................... 	//WDT config 
.................... 	setup_wdt(WDT_OFF); 
1FF0:  BCF    FD1.0
.................... 	//disable comparators 
.................... 	setup_comparator(NC_NC_NC_NC); 
1FF2:  MOVLW  07
1FF4:  MOVWF  FB4
1FF6:  MOVF   F92,W
1FF8:  MOVWF  F92
1FFA:  CLRWDT
1FFC:  MOVLW  1A
1FFE:  MOVWF  00
2000:  DECFSZ 00,F
2002:  BRA    2000
2004:  MOVF   FB4,W
2006:  BCF    FA1.6
.................... 	setup_vref(FALSE); 
2008:  CLRF   FB5
....................  
.................... 	//config ADC module 
.................... 	setup_adc_ports(AN0_TO_AN5 | VSS_VREF); 
200A:  MOVF   FC1,W
200C:  ANDLW  C0
200E:  IORLW  19
2010:  MOVWF  FC1
.................... 	setup_adc(ADC_CLOCK_DIV_16 | ADC_TAD_MUL_2); 
2012:  MOVF   FC0,W
2014:  ANDLW  C0
2016:  IORLW  0D
2018:  MOVWF  FC0
201A:  BSF    FC0.7
201C:  BSF    FC2.0
....................  
.................... 	//port configuration 
.................... 	set_tris_a(0x3f); 
201E:  MOVLW  3F
2020:  MOVWF  F92
.................... 	set_tris_c(0xf8); 
2022:  MOVLW  F8
2024:  MOVWF  F94
.................... 	set_tris_d(0x00); 
2026:  MOVLW  00
2028:  MOVWF  F95
....................  
.................... 	//set high all selectors 
.................... 	output_high(LDAC); 
202A:  BCF    F92.7
202C:  BSF    F89.7
.................... 	output_high(MEM0); 
202E:  BCF    F94.1
2030:  BSF    F8B.1
.................... 	output_high(MEM1); 
2032:  BCF    F94.2
2034:  BSF    F8B.2
.................... 	output_high(DAC0); 
2036:  BCF    F95.0
2038:  BSF    F8C.0
.................... 	output_high(DAC1); 
203A:  BCF    F95.1
203C:  BSF    F8C.1
.................... 	output_high(KU0); 
203E:  BCF    F95.5
2040:  BSF    F8C.5
.................... 	output_high(KU1); 
2042:  BCF    F95.4
2044:  BSF    F8C.4
.................... 	output_high(STAT); 
2046:  BCF    F94.0
2048:  BSF    F8B.0
....................  
.................... 	//timers configuration 
.................... 	setup_timer_0(RTCC_INTERNAL); 
204A:  MOVLW  80
204C:  MOVWF  FD5
....................  
.................... 	setup_timer_1(T1_INTERNAL | T1_DIV_BY_8); 
204E:  MOVLW  B5
2050:  MOVWF  FCD
....................  
.................... 	setup_timer_2(T2_DISABLED, 0, 1); 
2052:  MOVLW  00
2054:  MOVWF  FCA
2056:  MOVLW  00
2058:  MOVWF  FCB
....................  
.................... 	setup_timer_3(T3_INTERNAL | T3_DIV_BY_1); 
205A:  MOVLW  85
205C:  MOVWF  FB1
....................  
.................... 	//setup communications 
.................... 	//setup usart 
.................... 	output_low(DIR);	//enable receiving 
205E:  BCF    F92.6
2060:  BCF    F89.6
....................  
.................... 	//SPI configuration 
.................... 	setup_spi(SPI_MASTER | SPI_CLK_DIV_4 | SPI_H_TO_L); 
2062:  BCF    FC6.5
2064:  BCF    F94.5
2066:  BSF    F94.4
2068:  BCF    F94.3
206A:  MOVLW  30
206C:  MOVWF  FC6
206E:  MOVLW  40
2070:  MOVWF  FC7
....................  
.................... 	//interrupt configuration 
.................... 	enable_interrupts(INT_RDA); 
2072:  BSF    F9D.5
....................  
.................... 	enable_interrupts(GLOBAL); 
2074:  MOVLW  C0
2076:  IORWF  FF2,F
....................  
.................... 	//States reset 
.................... 	DaqState = DaqIdle;	//initial state 
2078:  MOVLB  3
207A:  CLRF   xF7
.................... } 
207C:  MOVLB  0
207E:  GOTO   39A4 (RETURN)
.................... // 
.................... //read registers from EE 
.................... void BURead(void) 
.................... {	//back up read 
.................... 	int32 temp; 
....................  
.................... 	//reading 
.................... 	SAW_A0 = make16(read_eeprom(EE_SAW_A0 + 1), read_eeprom(EE_SAW_A0)); //rise saw level 
2082:  MOVFF  FF2,520
2086:  BCF    FF2.7
2088:  MOVLW  01
208A:  MOVWF  FA9
208C:  BCF    FA6.6
208E:  BCF    FA6.7
2090:  BSF    FA6.0
2092:  MOVF   FA8,W
2094:  MOVLB  5
2096:  BTFSC  x20.7
2098:  BSF    FF2.7
209A:  MOVWF  x21
209C:  MOVFF  FF2,522
20A0:  BCF    FF2.7
20A2:  CLRF   FA9
20A4:  BCF    FA6.6
20A6:  BCF    FA6.7
20A8:  BSF    FA6.0
20AA:  MOVF   FA8,W
20AC:  BTFSC  x22.7
20AE:  BSF    FF2.7
20B0:  MOVWF  x23
20B2:  MOVFF  521,3CB
20B6:  MOVFF  523,3CA
.................... 	SAW_A1 = make16(read_eeprom(EE_SAW_A1 + 1), read_eeprom(EE_SAW_A1)); //rise saw amplitude 
20BA:  MOVFF  FF2,520
20BE:  BCF    FF2.7
20C0:  MOVLW  03
20C2:  MOVWF  FA9
20C4:  BCF    FA6.6
20C6:  BCF    FA6.7
20C8:  BSF    FA6.0
20CA:  MOVF   FA8,W
20CC:  BTFSC  x20.7
20CE:  BSF    FF2.7
20D0:  MOVWF  x21
20D2:  MOVFF  FF2,522
20D6:  BCF    FF2.7
20D8:  MOVLW  02
20DA:  MOVWF  FA9
20DC:  BCF    FA6.6
20DE:  BCF    FA6.7
20E0:  BSF    FA6.0
20E2:  MOVF   FA8,W
20E4:  BTFSC  x22.7
20E6:  BSF    FF2.7
20E8:  MOVWF  x23
20EA:  MOVFF  521,3CF
20EE:  MOVFF  523,3CE
.................... 	AmpCoef0 = make16(read_eeprom(EE_KU0 + 1), read_eeprom(EE_KU0)); // 
20F2:  MOVFF  FF2,520
20F6:  BCF    FF2.7
20F8:  MOVLW  05
20FA:  MOVWF  FA9
20FC:  BCF    FA6.6
20FE:  BCF    FA6.7
2100:  BSF    FA6.0
2102:  MOVF   FA8,W
2104:  BTFSC  x20.7
2106:  BSF    FF2.7
2108:  MOVWF  x21
210A:  MOVFF  FF2,522
210E:  BCF    FF2.7
2110:  MOVLW  04
2112:  MOVWF  FA9
2114:  BCF    FA6.6
2116:  BCF    FA6.7
2118:  BSF    FA6.0
211A:  MOVF   FA8,W
211C:  BTFSC  x22.7
211E:  BSF    FF2.7
2120:  MOVWF  x23
2122:  MOVFF  521,3AB
2126:  MOVFF  523,3AA
.................... 	AmpCoef1 = make16(read_eeprom(EE_KU1 + 1), read_eeprom(EE_KU1)); // 
212A:  MOVFF  FF2,520
212E:  BCF    FF2.7
2130:  MOVLW  07
2132:  MOVWF  FA9
2134:  BCF    FA6.6
2136:  BCF    FA6.7
2138:  BSF    FA6.0
213A:  MOVF   FA8,W
213C:  BTFSC  x20.7
213E:  BSF    FF2.7
2140:  MOVWF  x21
2142:  MOVFF  FF2,522
2146:  BCF    FF2.7
2148:  MOVLW  06
214A:  MOVWF  FA9
214C:  BCF    FA6.6
214E:  BCF    FA6.7
2150:  BSF    FA6.0
2152:  MOVF   FA8,W
2154:  BTFSC  x22.7
2156:  BSF    FF2.7
2158:  MOVWF  x23
215A:  MOVFF  521,3B7
215E:  MOVFF  523,3B6
.................... 	TAQ = make16(read_eeprom(EE_TAQ + 1), read_eeprom(EE_TAQ)); // 
2162:  MOVFF  FF2,520
2166:  BCF    FF2.7
2168:  MOVLW  09
216A:  MOVWF  FA9
216C:  BCF    FA6.6
216E:  BCF    FA6.7
2170:  BSF    FA6.0
2172:  MOVF   FA8,W
2174:  BTFSC  x20.7
2176:  BSF    FF2.7
2178:  MOVWF  x21
217A:  MOVFF  FF2,522
217E:  BCF    FF2.7
2180:  MOVLW  08
2182:  MOVWF  FA9
2184:  BCF    FA6.6
2186:  BCF    FA6.7
2188:  BSF    FA6.0
218A:  MOVF   FA8,W
218C:  BTFSC  x22.7
218E:  BSF    FF2.7
2190:  MOVWF  x23
2192:  MOVFF  521,3C1
2196:  MOVFF  523,3C0
.................... 	PCOUNT = make16(read_eeprom(EE_PCOUNT + 1), read_eeprom(EE_PCOUNT)); // 
219A:  MOVFF  FF2,520
219E:  BCF    FF2.7
21A0:  MOVLW  0B
21A2:  MOVWF  FA9
21A4:  BCF    FA6.6
21A6:  BCF    FA6.7
21A8:  BSF    FA6.0
21AA:  MOVF   FA8,W
21AC:  BTFSC  x20.7
21AE:  BSF    FF2.7
21B0:  MOVWF  x21
21B2:  MOVFF  FF2,522
21B6:  BCF    FF2.7
21B8:  MOVLW  0A
21BA:  MOVWF  FA9
21BC:  BCF    FA6.6
21BE:  BCF    FA6.7
21C0:  BSF    FA6.0
21C2:  MOVF   FA8,W
21C4:  BTFSC  x22.7
21C6:  BSF    FF2.7
21C8:  MOVWF  x23
21CA:  MOVFF  521,3C5
21CE:  MOVFF  523,3C4
.................... 	FWDT = make16(read_eeprom(EE_FWDT + 1), read_eeprom(EE_FWDT)); // 
21D2:  MOVFF  FF2,520
21D6:  BCF    FF2.7
21D8:  MOVLW  0D
21DA:  MOVWF  FA9
21DC:  BCF    FA6.6
21DE:  BCF    FA6.7
21E0:  BSF    FA6.0
21E2:  MOVF   FA8,W
21E4:  BTFSC  x20.7
21E6:  BSF    FF2.7
21E8:  MOVWF  x21
21EA:  MOVFF  FF2,522
21EE:  BCF    FF2.7
21F0:  MOVLW  0C
21F2:  MOVWF  FA9
21F4:  BCF    FA6.6
21F6:  BCF    FA6.7
21F8:  BSF    FA6.0
21FA:  MOVF   FA8,W
21FC:  BTFSC  x22.7
21FE:  BSF    FF2.7
2200:  MOVWF  x23
2202:  MOVFF  521,3C3
2206:  MOVFF  523,3C2
.................... 	Speed = make16(read_eeprom(EE_Speed + 1), read_eeprom(EE_Speed)); // 
220A:  MOVFF  FF2,520
220E:  BCF    FF2.7
2210:  MOVLW  0F
2212:  MOVWF  FA9
2214:  BCF    FA6.6
2216:  BCF    FA6.7
2218:  BSF    FA6.0
221A:  MOVF   FA8,W
221C:  BTFSC  x20.7
221E:  BSF    FF2.7
2220:  MOVWF  x21
2222:  MOVFF  FF2,522
2226:  BCF    FF2.7
2228:  MOVLW  0E
222A:  MOVWF  FA9
222C:  BCF    FA6.6
222E:  BCF    FA6.7
2230:  BSF    FA6.0
2232:  MOVF   FA8,W
2234:  BTFSC  x22.7
2236:  BSF    FF2.7
2238:  MOVWF  x23
223A:  MOVFF  521,3E5
223E:  MOVFF  523,3E4
.................... 	Addr = make16(read_eeprom(EE_Host + 1), read_eeprom(EE_Host)); // 
2242:  MOVFF  FF2,520
2246:  BCF    FF2.7
2248:  MOVLW  11
224A:  MOVWF  FA9
224C:  BCF    FA6.6
224E:  BCF    FA6.7
2250:  BSF    FA6.0
2252:  MOVF   FA8,W
2254:  BTFSC  x20.7
2256:  BSF    FF2.7
2258:  MOVWF  x21
225A:  MOVFF  FF2,522
225E:  BCF    FF2.7
2260:  MOVLW  10
2262:  MOVWF  FA9
2264:  BCF    FA6.6
2266:  BCF    FA6.7
2268:  BSF    FA6.0
226A:  MOVF   FA8,W
226C:  BTFSC  x22.7
226E:  BSF    FF2.7
2270:  MOVWF  x23
2272:  MOVFF  521,3E7
2276:  MOVFF  523,3E6
.................... 	T0_CAL = make32(read_eeprom(EE_T0_CAL + 1), read_eeprom(EE_T0_CAL)); // 
227A:  MOVFF  FF2,520
227E:  BCF    FF2.7
2280:  MOVLW  13
2282:  MOVWF  FA9
2284:  BCF    FA6.6
2286:  BCF    FA6.7
2288:  BSF    FA6.0
228A:  MOVF   FA8,W
228C:  BTFSC  x20.7
228E:  BSF    FF2.7
2290:  MOVWF  x21
2292:  MOVFF  FF2,522
2296:  BCF    FF2.7
2298:  MOVLW  12
229A:  MOVWF  FA9
229C:  BCF    FA6.6
229E:  BCF    FA6.7
22A0:  BSF    FA6.0
22A2:  MOVF   FA8,W
22A4:  BTFSC  x22.7
22A6:  BSF    FF2.7
22A8:  MOVWF  x23
22AA:  MOVFF  521,3B1
22AE:  MOVFF  523,3B0
.................... 	T1_CAL = make16(read_eeprom(EE_T1_CAL + 1), read_eeprom(EE_T1_CAL)); // 
22B2:  MOVFF  FF2,520
22B6:  BCF    FF2.7
22B8:  MOVLW  15
22BA:  MOVWF  FA9
22BC:  BCF    FA6.6
22BE:  BCF    FA6.7
22C0:  BSF    FA6.0
22C2:  MOVF   FA8,W
22C4:  BTFSC  x20.7
22C6:  BSF    FF2.7
22C8:  MOVWF  x21
22CA:  MOVFF  FF2,522
22CE:  BCF    FF2.7
22D0:  MOVLW  14
22D2:  MOVWF  FA9
22D4:  BCF    FA6.6
22D6:  BCF    FA6.7
22D8:  BSF    FA6.0
22DA:  MOVF   FA8,W
22DC:  BTFSC  x22.7
22DE:  BSF    FF2.7
22E0:  MOVWF  x23
22E2:  MOVFF  521,3BD
22E6:  MOVFF  523,3BC
.................... 	TG_CAL = make16(read_eeprom(EE_TG_CAL + 1), read_eeprom(EE_TG_CAL)); // 
22EA:  MOVFF  FF2,520
22EE:  BCF    FF2.7
22F0:  MOVLW  17
22F2:  MOVWF  FA9
22F4:  BCF    FA6.6
22F6:  BCF    FA6.7
22F8:  BSF    FA6.0
22FA:  MOVF   FA8,W
22FC:  BTFSC  x20.7
22FE:  BSF    FF2.7
2300:  MOVWF  x21
2302:  MOVFF  FF2,522
2306:  BCF    FF2.7
2308:  MOVLW  16
230A:  MOVWF  FA9
230C:  BCF    FA6.6
230E:  BCF    FA6.7
2310:  BSF    FA6.0
2312:  MOVF   FA8,W
2314:  BTFSC  x22.7
2316:  BSF    FF2.7
2318:  MOVWF  x23
231A:  MOVFF  521,3DB
231E:  MOVFF  523,3DA
.................... 	temp = make32(read_eeprom(EE_KGT + 2), read_eeprom(EE_KGT + 3), 
.................... 		read_eeprom(EE_KGT), read_eeprom(EE_KGT + 1)); // 
2322:  MOVFF  FF2,520
2326:  BCF    FF2.7
2328:  MOVLW  1A
232A:  MOVWF  FA9
232C:  BCF    FA6.6
232E:  BCF    FA6.7
2330:  BSF    FA6.0
2332:  MOVF   FA8,W
2334:  BTFSC  x20.7
2336:  BSF    FF2.7
2338:  MOVWF  x21
233A:  MOVFF  FF2,522
233E:  BCF    FF2.7
2340:  MOVLW  1B
2342:  MOVWF  FA9
2344:  BCF    FA6.6
2346:  BCF    FA6.7
2348:  BSF    FA6.0
234A:  MOVF   FA8,W
234C:  BTFSC  x22.7
234E:  BSF    FF2.7
2350:  MOVWF  x23
2352:  MOVFF  FF2,524
2356:  BCF    FF2.7
2358:  MOVLW  18
235A:  MOVWF  FA9
235C:  BCF    FA6.6
235E:  BCF    FA6.7
2360:  BSF    FA6.0
2362:  MOVF   FA8,W
2364:  BTFSC  x24.7
2366:  BSF    FF2.7
2368:  MOVWF  x25
236A:  MOVFF  FF2,526
236E:  BCF    FF2.7
2370:  MOVLW  19
2372:  MOVWF  FA9
2374:  BCF    FA6.6
2376:  BCF    FA6.7
2378:  BSF    FA6.0
237A:  MOVF   FA8,W
237C:  BTFSC  x26.7
237E:  BSF    FF2.7
2380:  MOVWF  x27
2382:  MOVFF  521,51F
2386:  MOVFF  523,51E
238A:  MOVFF  525,51D
238E:  MOVFF  527,51C
.................... 	memcpy(&KGT, &temp, 4); 
2392:  MOVLW  03
2394:  MOVWF  FEA
2396:  MOVLW  D2
2398:  MOVWF  FE9
239A:  MOVLW  05
239C:  MOVWF  FE2
239E:  MOVLW  1C
23A0:  MOVWF  FE1
23A2:  MOVLW  04
23A4:  MOVWF  01
23A6:  MOVFF  FE6,FEE
23AA:  DECFSZ 01,F
23AC:  BRA    23A6
.................... 	temp = make32(read_eeprom(EE_KGU + 2), read_eeprom(EE_KGU + 3), 
.................... 		read_eeprom(EE_KGU), read_eeprom(EE_KGU + 1)); // 
23AE:  MOVFF  FF2,520
23B2:  BCF    FF2.7
23B4:  MOVLW  1E
23B6:  MOVWF  FA9
23B8:  BCF    FA6.6
23BA:  BCF    FA6.7
23BC:  BSF    FA6.0
23BE:  MOVF   FA8,W
23C0:  BTFSC  x20.7
23C2:  BSF    FF2.7
23C4:  MOVWF  x21
23C6:  MOVFF  FF2,522
23CA:  BCF    FF2.7
23CC:  MOVLW  1F
23CE:  MOVWF  FA9
23D0:  BCF    FA6.6
23D2:  BCF    FA6.7
23D4:  BSF    FA6.0
23D6:  MOVF   FA8,W
23D8:  BTFSC  x22.7
23DA:  BSF    FF2.7
23DC:  MOVWF  x23
23DE:  MOVFF  FF2,524
23E2:  BCF    FF2.7
23E4:  MOVLW  1C
23E6:  MOVWF  FA9
23E8:  BCF    FA6.6
23EA:  BCF    FA6.7
23EC:  BSF    FA6.0
23EE:  MOVF   FA8,W
23F0:  BTFSC  x24.7
23F2:  BSF    FF2.7
23F4:  MOVWF  x25
23F6:  MOVFF  FF2,526
23FA:  BCF    FF2.7
23FC:  MOVLW  1D
23FE:  MOVWF  FA9
2400:  BCF    FA6.6
2402:  BCF    FA6.7
2404:  BSF    FA6.0
2406:  MOVF   FA8,W
2408:  BTFSC  x26.7
240A:  BSF    FF2.7
240C:  MOVWF  x27
240E:  MOVFF  521,51F
2412:  MOVFF  523,51E
2416:  MOVFF  525,51D
241A:  MOVFF  527,51C
.................... 	memcpy(&KGU, &temp, 4); 
241E:  MOVLW  03
2420:  MOVWF  FEA
2422:  MOVLW  D6
2424:  MOVWF  FE9
2426:  MOVLW  05
2428:  MOVWF  FE2
242A:  MOVLW  1C
242C:  MOVWF  FE1
242E:  MOVLW  04
2430:  MOVWF  01
2432:  MOVFF  FE6,FEE
2436:  DECFSZ 01,F
2438:  BRA    2432
.................... 	temp = make32(read_eeprom(EE_KST0 + 2), read_eeprom(EE_KST0 + 3), 
.................... 		read_eeprom(EE_KST0), read_eeprom(EE_KST0 + 1)); // 
243A:  MOVFF  FF2,520
243E:  BCF    FF2.7
2440:  MOVLW  22
2442:  MOVWF  FA9
2444:  BCF    FA6.6
2446:  BCF    FA6.7
2448:  BSF    FA6.0
244A:  MOVF   FA8,W
244C:  BTFSC  x20.7
244E:  BSF    FF2.7
2450:  MOVWF  x21
2452:  MOVFF  FF2,522
2456:  BCF    FF2.7
2458:  MOVLW  23
245A:  MOVWF  FA9
245C:  BCF    FA6.6
245E:  BCF    FA6.7
2460:  BSF    FA6.0
2462:  MOVF   FA8,W
2464:  BTFSC  x22.7
2466:  BSF    FF2.7
2468:  MOVWF  x23
246A:  MOVFF  FF2,524
246E:  BCF    FF2.7
2470:  MOVLW  20
2472:  MOVWF  FA9
2474:  BCF    FA6.6
2476:  BCF    FA6.7
2478:  BSF    FA6.0
247A:  MOVF   FA8,W
247C:  BTFSC  x24.7
247E:  BSF    FF2.7
2480:  MOVWF  x25
2482:  MOVFF  FF2,526
2486:  BCF    FF2.7
2488:  MOVLW  21
248A:  MOVWF  FA9
248C:  BCF    FA6.6
248E:  BCF    FA6.7
2490:  BSF    FA6.0
2492:  MOVF   FA8,W
2494:  BTFSC  x26.7
2496:  BSF    FF2.7
2498:  MOVWF  x27
249A:  MOVFF  521,51F
249E:  MOVFF  523,51E
24A2:  MOVFF  525,51D
24A6:  MOVFF  527,51C
.................... 	memcpy(&KST0, &temp, 4); 
24AA:  MOVLW  03
24AC:  MOVWF  FEA
24AE:  MOVLW  AC
24B0:  MOVWF  FE9
24B2:  MOVLW  05
24B4:  MOVWF  FE2
24B6:  MOVLW  1C
24B8:  MOVWF  FE1
24BA:  MOVLW  04
24BC:  MOVWF  01
24BE:  MOVFF  FE6,FEE
24C2:  DECFSZ 01,F
24C4:  BRA    24BE
.................... 	temp = make32(read_eeprom(EE_KST1 + 2), read_eeprom(EE_KST1 + 3), 
.................... 		read_eeprom(EE_KST1), read_eeprom(EE_KST1 + 1)); // 
24C6:  MOVFF  FF2,520
24CA:  BCF    FF2.7
24CC:  MOVLW  26
24CE:  MOVWF  FA9
24D0:  BCF    FA6.6
24D2:  BCF    FA6.7
24D4:  BSF    FA6.0
24D6:  MOVF   FA8,W
24D8:  BTFSC  x20.7
24DA:  BSF    FF2.7
24DC:  MOVWF  x21
24DE:  MOVFF  FF2,522
24E2:  BCF    FF2.7
24E4:  MOVLW  27
24E6:  MOVWF  FA9
24E8:  BCF    FA6.6
24EA:  BCF    FA6.7
24EC:  BSF    FA6.0
24EE:  MOVF   FA8,W
24F0:  BTFSC  x22.7
24F2:  BSF    FF2.7
24F4:  MOVWF  x23
24F6:  MOVFF  FF2,524
24FA:  BCF    FF2.7
24FC:  MOVLW  24
24FE:  MOVWF  FA9
2500:  BCF    FA6.6
2502:  BCF    FA6.7
2504:  BSF    FA6.0
2506:  MOVF   FA8,W
2508:  BTFSC  x24.7
250A:  BSF    FF2.7
250C:  MOVWF  x25
250E:  MOVFF  FF2,526
2512:  BCF    FF2.7
2514:  MOVLW  25
2516:  MOVWF  FA9
2518:  BCF    FA6.6
251A:  BCF    FA6.7
251C:  BSF    FA6.0
251E:  MOVF   FA8,W
2520:  BTFSC  x26.7
2522:  BSF    FF2.7
2524:  MOVWF  x27
2526:  MOVFF  521,51F
252A:  MOVFF  523,51E
252E:  MOVFF  525,51D
2532:  MOVFF  527,51C
.................... 	memcpy(&KST1, &temp, 4); 
2536:  MOVLW  03
2538:  MOVWF  FEA
253A:  MOVLW  B8
253C:  MOVWF  FE9
253E:  MOVLW  05
2540:  MOVWF  FE2
2542:  MOVLW  1C
2544:  MOVWF  FE1
2546:  MOVLW  04
2548:  MOVWF  01
254A:  MOVFF  FE6,FEE
254E:  DECFSZ 01,F
2550:  BRA    254A
.................... } 
2552:  MOVLB  0
2554:  GOTO   39A8 (RETURN)
.................... // 
.................... //write registers to EE 
.................... void BUWrite(void) 
.................... {	//back up write 
.................... 	int32 temp; 
....................  
.................... 	setup_wdt(WDT_OFF); 
*
1270:  BCF    FD1.0
....................  
.................... 	//writing 
.................... 	//int16 
.................... 	write_eeprom(EE_SAW_A0, make8(SAW_A0, 0)); 
1272:  MOVFF  3CA,53B
1276:  CLRF   FA9
1278:  MOVFF  53B,FA8
127C:  BCF    FA6.6
127E:  BCF    FA6.7
1280:  BSF    FA6.2
1282:  MOVF   FF2,W
1284:  MOVWF  00
1286:  BCF    FF2.7
1288:  MOVLB  F
128A:  MOVLW  55
128C:  MOVWF  FA7
128E:  MOVLW  AA
1290:  MOVWF  FA7
1292:  BSF    FA6.1
1294:  BTFSC  FA6.1
1296:  BRA    1294
1298:  BCF    FA6.2
129A:  MOVF   00,W
129C:  IORWF  FF2,F
.................... 	write_eeprom(EE_SAW_A0 + 1, make8(SAW_A0, 1)); 
129E:  MOVFF  3CB,53B
12A2:  MOVLW  01
12A4:  MOVWF  FA9
12A6:  MOVFF  3CB,FA8
12AA:  BCF    FA6.6
12AC:  BCF    FA6.7
12AE:  BSF    FA6.2
12B0:  MOVFF  FF2,00
12B4:  BCF    FF2.7
12B6:  MOVLW  55
12B8:  MOVWF  FA7
12BA:  MOVLW  AA
12BC:  MOVWF  FA7
12BE:  BSF    FA6.1
12C0:  BTFSC  FA6.1
12C2:  BRA    12C0
12C4:  BCF    FA6.2
12C6:  MOVF   00,W
12C8:  IORWF  FF2,F
.................... 	write_eeprom(EE_SAW_A1, make8(SAW_A1, 0)); 
12CA:  MOVFF  3CE,53B
12CE:  MOVLW  02
12D0:  MOVWF  FA9
12D2:  MOVFF  3CE,FA8
12D6:  BCF    FA6.6
12D8:  BCF    FA6.7
12DA:  BSF    FA6.2
12DC:  MOVFF  FF2,00
12E0:  BCF    FF2.7
12E2:  MOVLW  55
12E4:  MOVWF  FA7
12E6:  MOVLW  AA
12E8:  MOVWF  FA7
12EA:  BSF    FA6.1
12EC:  BTFSC  FA6.1
12EE:  BRA    12EC
12F0:  BCF    FA6.2
12F2:  MOVF   00,W
12F4:  IORWF  FF2,F
.................... 	write_eeprom(EE_SAW_A1 + 1, make8(SAW_A1, 1)); 
12F6:  MOVFF  3CF,53B
12FA:  MOVLW  03
12FC:  MOVWF  FA9
12FE:  MOVFF  3CF,FA8
1302:  BCF    FA6.6
1304:  BCF    FA6.7
1306:  BSF    FA6.2
1308:  MOVFF  FF2,00
130C:  BCF    FF2.7
130E:  MOVLW  55
1310:  MOVWF  FA7
1312:  MOVLW  AA
1314:  MOVWF  FA7
1316:  BSF    FA6.1
1318:  BTFSC  FA6.1
131A:  BRA    1318
131C:  BCF    FA6.2
131E:  MOVF   00,W
1320:  IORWF  FF2,F
.................... 	write_eeprom(EE_KU0, make8(AmpCoef0, 0)); 
1322:  MOVFF  3AA,53B
1326:  MOVLW  04
1328:  MOVWF  FA9
132A:  MOVFF  3AA,FA8
132E:  BCF    FA6.6
1330:  BCF    FA6.7
1332:  BSF    FA6.2
1334:  MOVFF  FF2,00
1338:  BCF    FF2.7
133A:  MOVLW  55
133C:  MOVWF  FA7
133E:  MOVLW  AA
1340:  MOVWF  FA7
1342:  BSF    FA6.1
1344:  BTFSC  FA6.1
1346:  BRA    1344
1348:  BCF    FA6.2
134A:  MOVF   00,W
134C:  IORWF  FF2,F
.................... 	write_eeprom(EE_KU0 + 1, make8(AmpCoef0, 1)); 
134E:  MOVFF  3AB,53B
1352:  MOVLW  05
1354:  MOVWF  FA9
1356:  MOVFF  3AB,FA8
135A:  BCF    FA6.6
135C:  BCF    FA6.7
135E:  BSF    FA6.2
1360:  MOVFF  FF2,00
1364:  BCF    FF2.7
1366:  MOVLW  55
1368:  MOVWF  FA7
136A:  MOVLW  AA
136C:  MOVWF  FA7
136E:  BSF    FA6.1
1370:  BTFSC  FA6.1
1372:  BRA    1370
1374:  BCF    FA6.2
1376:  MOVF   00,W
1378:  IORWF  FF2,F
.................... 	write_eeprom(EE_KU1, make8(AmpCoef1, 0)); 
137A:  MOVFF  3B6,53B
137E:  MOVLW  06
1380:  MOVWF  FA9
1382:  MOVFF  3B6,FA8
1386:  BCF    FA6.6
1388:  BCF    FA6.7
138A:  BSF    FA6.2
138C:  MOVFF  FF2,00
1390:  BCF    FF2.7
1392:  MOVLW  55
1394:  MOVWF  FA7
1396:  MOVLW  AA
1398:  MOVWF  FA7
139A:  BSF    FA6.1
139C:  BTFSC  FA6.1
139E:  BRA    139C
13A0:  BCF    FA6.2
13A2:  MOVF   00,W
13A4:  IORWF  FF2,F
.................... 	write_eeprom(EE_KU1 + 1, make8(AmpCoef1, 1)); 
13A6:  MOVFF  3B7,53B
13AA:  MOVLW  07
13AC:  MOVWF  FA9
13AE:  MOVFF  3B7,FA8
13B2:  BCF    FA6.6
13B4:  BCF    FA6.7
13B6:  BSF    FA6.2
13B8:  MOVFF  FF2,00
13BC:  BCF    FF2.7
13BE:  MOVLW  55
13C0:  MOVWF  FA7
13C2:  MOVLW  AA
13C4:  MOVWF  FA7
13C6:  BSF    FA6.1
13C8:  BTFSC  FA6.1
13CA:  BRA    13C8
13CC:  BCF    FA6.2
13CE:  MOVF   00,W
13D0:  IORWF  FF2,F
.................... 	write_eeprom(EE_TAQ, make8(TAQ, 0)); 
13D2:  MOVFF  3C0,53B
13D6:  MOVLW  08
13D8:  MOVWF  FA9
13DA:  MOVFF  3C0,FA8
13DE:  BCF    FA6.6
13E0:  BCF    FA6.7
13E2:  BSF    FA6.2
13E4:  MOVFF  FF2,00
13E8:  BCF    FF2.7
13EA:  MOVLW  55
13EC:  MOVWF  FA7
13EE:  MOVLW  AA
13F0:  MOVWF  FA7
13F2:  BSF    FA6.1
13F4:  BTFSC  FA6.1
13F6:  BRA    13F4
13F8:  BCF    FA6.2
13FA:  MOVF   00,W
13FC:  IORWF  FF2,F
.................... 	write_eeprom(EE_TAQ + 1, make8(TAQ, 1)); 
13FE:  MOVFF  3C1,53B
1402:  MOVLW  09
1404:  MOVWF  FA9
1406:  MOVFF  3C1,FA8
140A:  BCF    FA6.6
140C:  BCF    FA6.7
140E:  BSF    FA6.2
1410:  MOVFF  FF2,00
1414:  BCF    FF2.7
1416:  MOVLW  55
1418:  MOVWF  FA7
141A:  MOVLW  AA
141C:  MOVWF  FA7
141E:  BSF    FA6.1
1420:  BTFSC  FA6.1
1422:  BRA    1420
1424:  BCF    FA6.2
1426:  MOVF   00,W
1428:  IORWF  FF2,F
.................... 	write_eeprom(EE_PCOUNT, make8(PCOUNT, 0)); 
142A:  MOVFF  3C4,53B
142E:  MOVLW  0A
1430:  MOVWF  FA9
1432:  MOVFF  3C4,FA8
1436:  BCF    FA6.6
1438:  BCF    FA6.7
143A:  BSF    FA6.2
143C:  MOVFF  FF2,00
1440:  BCF    FF2.7
1442:  MOVLW  55
1444:  MOVWF  FA7
1446:  MOVLW  AA
1448:  MOVWF  FA7
144A:  BSF    FA6.1
144C:  BTFSC  FA6.1
144E:  BRA    144C
1450:  BCF    FA6.2
1452:  MOVF   00,W
1454:  IORWF  FF2,F
.................... 	write_eeprom(EE_PCOUNT + 1, make8(PCOUNT, 1)); 
1456:  MOVFF  3C5,53B
145A:  MOVLW  0B
145C:  MOVWF  FA9
145E:  MOVFF  3C5,FA8
1462:  BCF    FA6.6
1464:  BCF    FA6.7
1466:  BSF    FA6.2
1468:  MOVFF  FF2,00
146C:  BCF    FF2.7
146E:  MOVLW  55
1470:  MOVWF  FA7
1472:  MOVLW  AA
1474:  MOVWF  FA7
1476:  BSF    FA6.1
1478:  BTFSC  FA6.1
147A:  BRA    1478
147C:  BCF    FA6.2
147E:  MOVF   00,W
1480:  IORWF  FF2,F
.................... 	write_eeprom(EE_FWDT, make8(FWDT, 0)); 
1482:  MOVFF  3C2,53B
1486:  MOVLW  0C
1488:  MOVWF  FA9
148A:  MOVFF  3C2,FA8
148E:  BCF    FA6.6
1490:  BCF    FA6.7
1492:  BSF    FA6.2
1494:  MOVFF  FF2,00
1498:  BCF    FF2.7
149A:  MOVLW  55
149C:  MOVWF  FA7
149E:  MOVLW  AA
14A0:  MOVWF  FA7
14A2:  BSF    FA6.1
14A4:  BTFSC  FA6.1
14A6:  BRA    14A4
14A8:  BCF    FA6.2
14AA:  MOVF   00,W
14AC:  IORWF  FF2,F
.................... 	write_eeprom(EE_FWDT + 1, make8(FWDT, 1)); 
14AE:  MOVFF  3C3,53B
14B2:  MOVLW  0D
14B4:  MOVWF  FA9
14B6:  MOVFF  3C3,FA8
14BA:  BCF    FA6.6
14BC:  BCF    FA6.7
14BE:  BSF    FA6.2
14C0:  MOVFF  FF2,00
14C4:  BCF    FF2.7
14C6:  MOVLW  55
14C8:  MOVWF  FA7
14CA:  MOVLW  AA
14CC:  MOVWF  FA7
14CE:  BSF    FA6.1
14D0:  BTFSC  FA6.1
14D2:  BRA    14D0
14D4:  BCF    FA6.2
14D6:  MOVF   00,W
14D8:  IORWF  FF2,F
.................... 	write_eeprom(EE_Speed, make8(Speed, 0)); 
14DA:  MOVFF  3E4,53B
14DE:  MOVLW  0E
14E0:  MOVWF  FA9
14E2:  MOVFF  3E4,FA8
14E6:  BCF    FA6.6
14E8:  BCF    FA6.7
14EA:  BSF    FA6.2
14EC:  MOVFF  FF2,00
14F0:  BCF    FF2.7
14F2:  MOVLW  55
14F4:  MOVWF  FA7
14F6:  MOVLW  AA
14F8:  MOVWF  FA7
14FA:  BSF    FA6.1
14FC:  BTFSC  FA6.1
14FE:  BRA    14FC
1500:  BCF    FA6.2
1502:  MOVF   00,W
1504:  IORWF  FF2,F
.................... 	write_eeprom(EE_Speed + 1, make8(Speed, 1)); 
1506:  MOVFF  3E5,53B
150A:  MOVLW  0F
150C:  MOVWF  FA9
150E:  MOVFF  3E5,FA8
1512:  BCF    FA6.6
1514:  BCF    FA6.7
1516:  BSF    FA6.2
1518:  MOVFF  FF2,00
151C:  BCF    FF2.7
151E:  MOVLW  55
1520:  MOVWF  FA7
1522:  MOVLW  AA
1524:  MOVWF  FA7
1526:  BSF    FA6.1
1528:  BTFSC  FA6.1
152A:  BRA    1528
152C:  BCF    FA6.2
152E:  MOVF   00,W
1530:  IORWF  FF2,F
.................... 	write_eeprom(EE_Host, make8(Addr, 0)); 
1532:  MOVFF  3E6,53B
1536:  MOVLW  10
1538:  MOVWF  FA9
153A:  MOVFF  3E6,FA8
153E:  BCF    FA6.6
1540:  BCF    FA6.7
1542:  BSF    FA6.2
1544:  MOVFF  FF2,00
1548:  BCF    FF2.7
154A:  MOVLW  55
154C:  MOVWF  FA7
154E:  MOVLW  AA
1550:  MOVWF  FA7
1552:  BSF    FA6.1
1554:  BTFSC  FA6.1
1556:  BRA    1554
1558:  BCF    FA6.2
155A:  MOVF   00,W
155C:  IORWF  FF2,F
.................... 	write_eeprom(EE_Host + 1, make8(Addr, 1)); 
155E:  MOVFF  3E7,53B
1562:  MOVLW  11
1564:  MOVWF  FA9
1566:  MOVFF  3E7,FA8
156A:  BCF    FA6.6
156C:  BCF    FA6.7
156E:  BSF    FA6.2
1570:  MOVFF  FF2,00
1574:  BCF    FF2.7
1576:  MOVLW  55
1578:  MOVWF  FA7
157A:  MOVLW  AA
157C:  MOVWF  FA7
157E:  BSF    FA6.1
1580:  BTFSC  FA6.1
1582:  BRA    1580
1584:  BCF    FA6.2
1586:  MOVF   00,W
1588:  IORWF  FF2,F
.................... 	write_eeprom(EE_T0_CAL, make8(T0_CAL, 0)); 
158A:  MOVFF  3B0,53B
158E:  MOVLW  12
1590:  MOVWF  FA9
1592:  MOVFF  3B0,FA8
1596:  BCF    FA6.6
1598:  BCF    FA6.7
159A:  BSF    FA6.2
159C:  MOVFF  FF2,00
15A0:  BCF    FF2.7
15A2:  MOVLW  55
15A4:  MOVWF  FA7
15A6:  MOVLW  AA
15A8:  MOVWF  FA7
15AA:  BSF    FA6.1
15AC:  BTFSC  FA6.1
15AE:  BRA    15AC
15B0:  BCF    FA6.2
15B2:  MOVF   00,W
15B4:  IORWF  FF2,F
.................... 	write_eeprom(EE_T0_CAL + 1, make8(T0_CAL, 1)); 
15B6:  MOVFF  3B1,53B
15BA:  MOVLW  13
15BC:  MOVWF  FA9
15BE:  MOVFF  3B1,FA8
15C2:  BCF    FA6.6
15C4:  BCF    FA6.7
15C6:  BSF    FA6.2
15C8:  MOVFF  FF2,00
15CC:  BCF    FF2.7
15CE:  MOVLW  55
15D0:  MOVWF  FA7
15D2:  MOVLW  AA
15D4:  MOVWF  FA7
15D6:  BSF    FA6.1
15D8:  BTFSC  FA6.1
15DA:  BRA    15D8
15DC:  BCF    FA6.2
15DE:  MOVF   00,W
15E0:  IORWF  FF2,F
.................... 	write_eeprom(EE_T1_CAL, make8(T1_CAL, 0)); 
15E2:  MOVFF  3BC,53B
15E6:  MOVLW  14
15E8:  MOVWF  FA9
15EA:  MOVFF  3BC,FA8
15EE:  BCF    FA6.6
15F0:  BCF    FA6.7
15F2:  BSF    FA6.2
15F4:  MOVFF  FF2,00
15F8:  BCF    FF2.7
15FA:  MOVLW  55
15FC:  MOVWF  FA7
15FE:  MOVLW  AA
1600:  MOVWF  FA7
1602:  BSF    FA6.1
1604:  BTFSC  FA6.1
1606:  BRA    1604
1608:  BCF    FA6.2
160A:  MOVF   00,W
160C:  IORWF  FF2,F
.................... 	write_eeprom(EE_T1_CAL + 1, make8(T1_CAL, 1)); 
160E:  MOVFF  3BD,53B
1612:  MOVLW  15
1614:  MOVWF  FA9
1616:  MOVFF  3BD,FA8
161A:  BCF    FA6.6
161C:  BCF    FA6.7
161E:  BSF    FA6.2
1620:  MOVFF  FF2,00
1624:  BCF    FF2.7
1626:  MOVLW  55
1628:  MOVWF  FA7
162A:  MOVLW  AA
162C:  MOVWF  FA7
162E:  BSF    FA6.1
1630:  BTFSC  FA6.1
1632:  BRA    1630
1634:  BCF    FA6.2
1636:  MOVF   00,W
1638:  IORWF  FF2,F
.................... 	write_eeprom(EE_TG_CAL, make8(TG_CAL, 0)); 
163A:  MOVFF  3DA,53B
163E:  MOVLW  16
1640:  MOVWF  FA9
1642:  MOVFF  3DA,FA8
1646:  BCF    FA6.6
1648:  BCF    FA6.7
164A:  BSF    FA6.2
164C:  MOVFF  FF2,00
1650:  BCF    FF2.7
1652:  MOVLW  55
1654:  MOVWF  FA7
1656:  MOVLW  AA
1658:  MOVWF  FA7
165A:  BSF    FA6.1
165C:  BTFSC  FA6.1
165E:  BRA    165C
1660:  BCF    FA6.2
1662:  MOVF   00,W
1664:  IORWF  FF2,F
.................... 	write_eeprom(EE_TG_CAL + 1, make8(TG_CAL, 1)); 
1666:  MOVFF  3DB,53B
166A:  MOVLW  17
166C:  MOVWF  FA9
166E:  MOVFF  3DB,FA8
1672:  BCF    FA6.6
1674:  BCF    FA6.7
1676:  BSF    FA6.2
1678:  MOVFF  FF2,00
167C:  BCF    FF2.7
167E:  MOVLW  55
1680:  MOVWF  FA7
1682:  MOVLW  AA
1684:  MOVWF  FA7
1686:  BSF    FA6.1
1688:  BTFSC  FA6.1
168A:  BRA    1688
168C:  BCF    FA6.2
168E:  MOVF   00,W
1690:  IORWF  FF2,F
....................  
.................... 	//float 
.................... 	memcpy(&temp, &KGT, 4); 
1692:  MOVLW  05
1694:  MOVWF  FEA
1696:  MOVLW  37
1698:  MOVWF  FE9
169A:  MOVLW  03
169C:  MOVWF  FE2
169E:  MOVLW  D2
16A0:  MOVWF  FE1
16A2:  MOVLW  04
16A4:  MOVWF  01
16A6:  MOVFF  FE6,FEE
16AA:  DECFSZ 01,F
16AC:  BRA    16A6
.................... 	write_eeprom(EE_KGT + 2, make8(temp, 3)); 
16AE:  MOVFF  53A,53B
16B2:  MOVLW  1A
16B4:  MOVWF  FA9
16B6:  MOVFF  53A,FA8
16BA:  BCF    FA6.6
16BC:  BCF    FA6.7
16BE:  BSF    FA6.2
16C0:  MOVFF  FF2,00
16C4:  BCF    FF2.7
16C6:  MOVLW  55
16C8:  MOVWF  FA7
16CA:  MOVLW  AA
16CC:  MOVWF  FA7
16CE:  BSF    FA6.1
16D0:  BTFSC  FA6.1
16D2:  BRA    16D0
16D4:  BCF    FA6.2
16D6:  MOVF   00,W
16D8:  IORWF  FF2,F
.................... 	write_eeprom(EE_KGT + 3, make8(temp, 2)); 
16DA:  MOVFF  539,53B
16DE:  MOVLW  1B
16E0:  MOVWF  FA9
16E2:  MOVFF  539,FA8
16E6:  BCF    FA6.6
16E8:  BCF    FA6.7
16EA:  BSF    FA6.2
16EC:  MOVFF  FF2,00
16F0:  BCF    FF2.7
16F2:  MOVLW  55
16F4:  MOVWF  FA7
16F6:  MOVLW  AA
16F8:  MOVWF  FA7
16FA:  BSF    FA6.1
16FC:  BTFSC  FA6.1
16FE:  BRA    16FC
1700:  BCF    FA6.2
1702:  MOVF   00,W
1704:  IORWF  FF2,F
.................... 	write_eeprom(EE_KGT, make8(temp, 1)); 
1706:  MOVFF  538,53B
170A:  MOVLW  18
170C:  MOVWF  FA9
170E:  MOVFF  538,FA8
1712:  BCF    FA6.6
1714:  BCF    FA6.7
1716:  BSF    FA6.2
1718:  MOVFF  FF2,00
171C:  BCF    FF2.7
171E:  MOVLW  55
1720:  MOVWF  FA7
1722:  MOVLW  AA
1724:  MOVWF  FA7
1726:  BSF    FA6.1
1728:  BTFSC  FA6.1
172A:  BRA    1728
172C:  BCF    FA6.2
172E:  MOVF   00,W
1730:  IORWF  FF2,F
.................... 	write_eeprom(EE_KGT + 1, make8(temp, 0)); 
1732:  MOVFF  537,53B
1736:  MOVLW  19
1738:  MOVWF  FA9
173A:  MOVFF  537,FA8
173E:  BCF    FA6.6
1740:  BCF    FA6.7
1742:  BSF    FA6.2
1744:  MOVFF  FF2,00
1748:  BCF    FF2.7
174A:  MOVLW  55
174C:  MOVWF  FA7
174E:  MOVLW  AA
1750:  MOVWF  FA7
1752:  BSF    FA6.1
1754:  BTFSC  FA6.1
1756:  BRA    1754
1758:  BCF    FA6.2
175A:  MOVF   00,W
175C:  IORWF  FF2,F
....................  
.................... 	memcpy(&temp, &KGU, 4); 
175E:  MOVLW  05
1760:  MOVWF  FEA
1762:  MOVLW  37
1764:  MOVWF  FE9
1766:  MOVLW  03
1768:  MOVWF  FE2
176A:  MOVLW  D6
176C:  MOVWF  FE1
176E:  MOVLW  04
1770:  MOVWF  01
1772:  MOVFF  FE6,FEE
1776:  DECFSZ 01,F
1778:  BRA    1772
.................... 	write_eeprom(EE_KGU + 2, make8(temp, 3)); 
177A:  MOVFF  53A,53B
177E:  MOVLW  1E
1780:  MOVWF  FA9
1782:  MOVFF  53A,FA8
1786:  BCF    FA6.6
1788:  BCF    FA6.7
178A:  BSF    FA6.2
178C:  MOVFF  FF2,00
1790:  BCF    FF2.7
1792:  MOVLW  55
1794:  MOVWF  FA7
1796:  MOVLW  AA
1798:  MOVWF  FA7
179A:  BSF    FA6.1
179C:  BTFSC  FA6.1
179E:  BRA    179C
17A0:  BCF    FA6.2
17A2:  MOVF   00,W
17A4:  IORWF  FF2,F
.................... 	write_eeprom(EE_KGU + 3, make8(temp, 2)); 
17A6:  MOVFF  539,53B
17AA:  MOVLW  1F
17AC:  MOVWF  FA9
17AE:  MOVFF  539,FA8
17B2:  BCF    FA6.6
17B4:  BCF    FA6.7
17B6:  BSF    FA6.2
17B8:  MOVFF  FF2,00
17BC:  BCF    FF2.7
17BE:  MOVLW  55
17C0:  MOVWF  FA7
17C2:  MOVLW  AA
17C4:  MOVWF  FA7
17C6:  BSF    FA6.1
17C8:  BTFSC  FA6.1
17CA:  BRA    17C8
17CC:  BCF    FA6.2
17CE:  MOVF   00,W
17D0:  IORWF  FF2,F
.................... 	write_eeprom(EE_KGU, make8(temp, 1)); 
17D2:  MOVFF  538,53B
17D6:  MOVLW  1C
17D8:  MOVWF  FA9
17DA:  MOVFF  538,FA8
17DE:  BCF    FA6.6
17E0:  BCF    FA6.7
17E2:  BSF    FA6.2
17E4:  MOVFF  FF2,00
17E8:  BCF    FF2.7
17EA:  MOVLW  55
17EC:  MOVWF  FA7
17EE:  MOVLW  AA
17F0:  MOVWF  FA7
17F2:  BSF    FA6.1
17F4:  BTFSC  FA6.1
17F6:  BRA    17F4
17F8:  BCF    FA6.2
17FA:  MOVF   00,W
17FC:  IORWF  FF2,F
.................... 	write_eeprom(EE_KGU + 1, make8(temp, 0)); 
17FE:  MOVFF  537,53B
1802:  MOVLW  1D
1804:  MOVWF  FA9
1806:  MOVFF  537,FA8
180A:  BCF    FA6.6
180C:  BCF    FA6.7
180E:  BSF    FA6.2
1810:  MOVFF  FF2,00
1814:  BCF    FF2.7
1816:  MOVLW  55
1818:  MOVWF  FA7
181A:  MOVLW  AA
181C:  MOVWF  FA7
181E:  BSF    FA6.1
1820:  BTFSC  FA6.1
1822:  BRA    1820
1824:  BCF    FA6.2
1826:  MOVF   00,W
1828:  IORWF  FF2,F
....................  
.................... 	memcpy(&temp, &KGT, 4); 
182A:  MOVLW  05
182C:  MOVWF  FEA
182E:  MOVLW  37
1830:  MOVWF  FE9
1832:  MOVLW  03
1834:  MOVWF  FE2
1836:  MOVLW  D2
1838:  MOVWF  FE1
183A:  MOVLW  04
183C:  MOVWF  01
183E:  MOVFF  FE6,FEE
1842:  DECFSZ 01,F
1844:  BRA    183E
.................... 	write_eeprom(EE_KST0 + 2, make8(temp, 3)); 
1846:  MOVFF  53A,53B
184A:  MOVLW  22
184C:  MOVWF  FA9
184E:  MOVFF  53A,FA8
1852:  BCF    FA6.6
1854:  BCF    FA6.7
1856:  BSF    FA6.2
1858:  MOVFF  FF2,00
185C:  BCF    FF2.7
185E:  MOVLW  55
1860:  MOVWF  FA7
1862:  MOVLW  AA
1864:  MOVWF  FA7
1866:  BSF    FA6.1
1868:  BTFSC  FA6.1
186A:  BRA    1868
186C:  BCF    FA6.2
186E:  MOVF   00,W
1870:  IORWF  FF2,F
.................... 	write_eeprom(EE_KST0 + 3, make8(temp, 2)); 
1872:  MOVFF  539,53B
1876:  MOVLW  23
1878:  MOVWF  FA9
187A:  MOVFF  539,FA8
187E:  BCF    FA6.6
1880:  BCF    FA6.7
1882:  BSF    FA6.2
1884:  MOVFF  FF2,00
1888:  BCF    FF2.7
188A:  MOVLW  55
188C:  MOVWF  FA7
188E:  MOVLW  AA
1890:  MOVWF  FA7
1892:  BSF    FA6.1
1894:  BTFSC  FA6.1
1896:  BRA    1894
1898:  BCF    FA6.2
189A:  MOVF   00,W
189C:  IORWF  FF2,F
.................... 	write_eeprom(EE_KST0, make8(temp, 1)); 
189E:  MOVFF  538,53B
18A2:  MOVLW  20
18A4:  MOVWF  FA9
18A6:  MOVFF  538,FA8
18AA:  BCF    FA6.6
18AC:  BCF    FA6.7
18AE:  BSF    FA6.2
18B0:  MOVFF  FF2,00
18B4:  BCF    FF2.7
18B6:  MOVLW  55
18B8:  MOVWF  FA7
18BA:  MOVLW  AA
18BC:  MOVWF  FA7
18BE:  BSF    FA6.1
18C0:  BTFSC  FA6.1
18C2:  BRA    18C0
18C4:  BCF    FA6.2
18C6:  MOVF   00,W
18C8:  IORWF  FF2,F
.................... 	write_eeprom(EE_KST0 + 1, make8(temp, 0)); 
18CA:  MOVFF  537,53B
18CE:  MOVLW  21
18D0:  MOVWF  FA9
18D2:  MOVFF  537,FA8
18D6:  BCF    FA6.6
18D8:  BCF    FA6.7
18DA:  BSF    FA6.2
18DC:  MOVFF  FF2,00
18E0:  BCF    FF2.7
18E2:  MOVLW  55
18E4:  MOVWF  FA7
18E6:  MOVLW  AA
18E8:  MOVWF  FA7
18EA:  BSF    FA6.1
18EC:  BTFSC  FA6.1
18EE:  BRA    18EC
18F0:  BCF    FA6.2
18F2:  MOVF   00,W
18F4:  IORWF  FF2,F
....................  
.................... 	memcpy(&temp, &KGT, 4); 
18F6:  MOVLW  05
18F8:  MOVWF  FEA
18FA:  MOVLW  37
18FC:  MOVWF  FE9
18FE:  MOVLW  03
1900:  MOVWF  FE2
1902:  MOVLW  D2
1904:  MOVWF  FE1
1906:  MOVLW  04
1908:  MOVWF  01
190A:  MOVFF  FE6,FEE
190E:  DECFSZ 01,F
1910:  BRA    190A
.................... 	write_eeprom(EE_KST1 + 2, make8(temp, 3)); 
1912:  MOVFF  53A,53B
1916:  MOVLW  26
1918:  MOVWF  FA9
191A:  MOVFF  53A,FA8
191E:  BCF    FA6.6
1920:  BCF    FA6.7
1922:  BSF    FA6.2
1924:  MOVFF  FF2,00
1928:  BCF    FF2.7
192A:  MOVLW  55
192C:  MOVWF  FA7
192E:  MOVLW  AA
1930:  MOVWF  FA7
1932:  BSF    FA6.1
1934:  BTFSC  FA6.1
1936:  BRA    1934
1938:  BCF    FA6.2
193A:  MOVF   00,W
193C:  IORWF  FF2,F
.................... 	write_eeprom(EE_KST1 + 3, make8(temp, 2)); 
193E:  MOVFF  539,53B
1942:  MOVLW  27
1944:  MOVWF  FA9
1946:  MOVFF  539,FA8
194A:  BCF    FA6.6
194C:  BCF    FA6.7
194E:  BSF    FA6.2
1950:  MOVFF  FF2,00
1954:  BCF    FF2.7
1956:  MOVLW  55
1958:  MOVWF  FA7
195A:  MOVLW  AA
195C:  MOVWF  FA7
195E:  BSF    FA6.1
1960:  BTFSC  FA6.1
1962:  BRA    1960
1964:  BCF    FA6.2
1966:  MOVF   00,W
1968:  IORWF  FF2,F
.................... 	write_eeprom(EE_KST1, make8(temp, 1)); 
196A:  MOVFF  538,53B
196E:  MOVLW  24
1970:  MOVWF  FA9
1972:  MOVFF  538,FA8
1976:  BCF    FA6.6
1978:  BCF    FA6.7
197A:  BSF    FA6.2
197C:  MOVFF  FF2,00
1980:  BCF    FF2.7
1982:  MOVLW  55
1984:  MOVWF  FA7
1986:  MOVLW  AA
1988:  MOVWF  FA7
198A:  BSF    FA6.1
198C:  BTFSC  FA6.1
198E:  BRA    198C
1990:  BCF    FA6.2
1992:  MOVF   00,W
1994:  IORWF  FF2,F
.................... 	write_eeprom(EE_KST1 + 1, make8(temp, 0)); 
1996:  MOVFF  537,53B
199A:  MOVLW  25
199C:  MOVWF  FA9
199E:  MOVFF  537,FA8
19A2:  BCF    FA6.6
19A4:  BCF    FA6.7
19A6:  BSF    FA6.2
19A8:  MOVFF  FF2,00
19AC:  BCF    FF2.7
19AE:  MOVLW  55
19B0:  MOVWF  FA7
19B2:  MOVLW  AA
19B4:  MOVWF  FA7
19B6:  BSF    FA6.1
19B8:  BTFSC  FA6.1
19BA:  BRA    19B8
19BC:  BCF    FA6.2
19BE:  MOVF   00,W
19C0:  IORWF  FF2,F
....................  
.................... 	setup_wdt(WDT_ON); 
19C2:  BSF    FD1.0
.................... } 
19C4:  MOVLB  0
19C6:  GOTO   1D38 (RETURN)
....................  
.................... //temperature measuring 
.................... void Termometer(void) 
.................... { 
.................... 	signed int16 
.................... 		temp; 
....................  
.................... 	//generator 
.................... 	set_adc_channel(2);	//select generator channel 
*
281E:  MOVLW  08
2820:  MOVWF  01
2822:  MOVF   FC2,W
2824:  ANDLW  C3
2826:  IORWF  01,W
2828:  MOVWF  FC2
.................... 	delay_us(10);		//small wait 
282A:  CLRWDT
282C:  MOVLW  1A
282E:  MOVWF  00
2830:  DECFSZ 00,F
2832:  BRA    2830
.................... 	temp = read_adc();	//read value 
2834:  BSF    FC2.1
2836:  BTFSC  FC2.1
2838:  BRA    2836
283A:  MOVFF  FC4,51D
283E:  MOVLB  5
2840:  MOVFF  FC3,51C
.................... 	T_GEN = (signed int16)((temp - 205)*24.414); 
2844:  MOVLW  CD
2846:  SUBWF  x1C,W
2848:  MOVWF  x1E
284A:  MOVLW  00
284C:  SUBWFB x1D,W
284E:  MOVWF  x1F
2850:  MOVWF  x21
2852:  MOVFF  51E,520
2856:  MOVLB  0
2858:  RCALL  269C
285A:  MOVFF  03,525
285E:  MOVFF  02,524
2862:  MOVFF  01,523
2866:  MOVFF  00,522
286A:  MOVLW  DF
286C:  MOVLB  5
286E:  MOVWF  x29
2870:  MOVLW  4F
2872:  MOVWF  x28
2874:  MOVLW  43
2876:  MOVWF  x27
2878:  MOVLW  83
287A:  MOVWF  x26
287C:  MOVLB  0
287E:  RCALL  26EC
2880:  MOVFF  03,525
2884:  MOVFF  02,524
2888:  MOVFF  01,523
288C:  MOVFF  00,522
2890:  RCALL  27E2
2892:  MOVFF  02,3C9
2896:  MOVFF  01,3C8
....................  
.................... 	//t0 
.................... 	set_adc_channel(5);	//select generator channel 
289A:  MOVLW  14
289C:  MOVWF  01
289E:  MOVF   FC2,W
28A0:  ANDLW  C3
28A2:  IORWF  01,W
28A4:  MOVWF  FC2
.................... 	delay_us(10);		//small wait 
28A6:  CLRWDT
28A8:  MOVLW  1A
28AA:  MOVWF  00
28AC:  DECFSZ 00,F
28AE:  BRA    28AC
.................... 	temp = read_adc();	//read value 
28B0:  BSF    FC2.1
28B2:  BTFSC  FC2.1
28B4:  BRA    28B2
28B6:  MOVFF  FC4,51D
28BA:  MOVLB  5
28BC:  MOVFF  FC3,51C
.................... 	T_SR0 = (signed int16)((temp - 205)*24.414); 
28C0:  MOVLW  CD
28C2:  SUBWF  x1C,W
28C4:  MOVWF  x1E
28C6:  MOVLW  00
28C8:  SUBWFB x1D,W
28CA:  MOVWF  x1F
28CC:  MOVWF  x21
28CE:  MOVFF  51E,520
28D2:  MOVLB  0
28D4:  RCALL  269C
28D6:  MOVFF  03,525
28DA:  MOVFF  02,524
28DE:  MOVFF  01,523
28E2:  MOVFF  00,522
28E6:  MOVLW  DF
28E8:  MOVLB  5
28EA:  MOVWF  x29
28EC:  MOVLW  4F
28EE:  MOVWF  x28
28F0:  MOVLW  43
28F2:  MOVWF  x27
28F4:  MOVLW  83
28F6:  MOVWF  x26
28F8:  MOVLB  0
28FA:  RCALL  26EC
28FC:  MOVFF  03,525
2900:  MOVFF  02,524
2904:  MOVFF  01,523
2908:  MOVFF  00,522
290C:  RCALL  27E2
290E:  MOVFF  02,3B3
2912:  MOVFF  01,3B2
....................  
.................... 	//t1 
.................... 	set_adc_channel(4);	//select generator channel 
2916:  MOVLW  10
2918:  MOVWF  01
291A:  MOVF   FC2,W
291C:  ANDLW  C3
291E:  IORWF  01,W
2920:  MOVWF  FC2
.................... 	delay_us(10);		//small wait 
2922:  CLRWDT
2924:  MOVLW  1A
2926:  MOVWF  00
2928:  DECFSZ 00,F
292A:  BRA    2928
.................... 	temp = read_adc();	//read value 
292C:  BSF    FC2.1
292E:  BTFSC  FC2.1
2930:  BRA    292E
2932:  MOVFF  FC4,51D
2936:  MOVLB  5
2938:  MOVFF  FC3,51C
.................... 	T_SR1 = (signed int16)((temp - 205)*24.414); 
293C:  MOVLW  CD
293E:  SUBWF  x1C,W
2940:  MOVWF  x1E
2942:  MOVLW  00
2944:  SUBWFB x1D,W
2946:  MOVWF  x1F
2948:  MOVWF  x21
294A:  MOVFF  51E,520
294E:  MOVLB  0
2950:  RCALL  269C
2952:  MOVFF  03,525
2956:  MOVFF  02,524
295A:  MOVFF  01,523
295E:  MOVFF  00,522
2962:  MOVLW  DF
2964:  MOVLB  5
2966:  MOVWF  x29
2968:  MOVLW  4F
296A:  MOVWF  x28
296C:  MOVLW  43
296E:  MOVWF  x27
2970:  MOVLW  83
2972:  MOVWF  x26
2974:  MOVLB  0
2976:  RCALL  26EC
2978:  MOVFF  03,525
297C:  MOVFF  02,524
2980:  MOVFF  01,523
2984:  MOVFF  00,522
2988:  RCALL  27E2
298A:  MOVFF  02,3BF
298E:  MOVFF  01,3BE
.................... } 
2992:  RETLW  00
....................  
.................... //DAC setting 
.................... void SetSawDac(int16 level) { 
....................  
.................... 	output_low(DAC1);			//select course DAC 
*
2C20:  BCF    F95.1
2C22:  BCF    F8C.1
.................... 	spi_write((make8(level, 1) & 0x0f) | 0x10);	//send high part 
2C24:  MOVLB  5
2C26:  MOVF   x1D,W
2C28:  ANDLW  0F
2C2A:  IORLW  10
2C2C:  MOVWF  x1E
2C2E:  MOVF   FC9,W
2C30:  MOVFF  51E,FC9
2C34:  RRCF   FC7,W
2C36:  BNC   2C34
.................... 	spi_write(make8(level, 0));		//send low part 
2C38:  MOVFF  51C,51E
2C3C:  MOVF   FC9,W
2C3E:  MOVFF  51C,FC9
2C42:  RRCF   FC7,W
2C44:  BNC   2C42
.................... 	output_high(DAC1);			//deselect 
2C46:  BCF    F95.1
2C48:  BSF    F8C.1
.................... 	output_low(LDAC);			//send DAC 
2C4A:  BCF    F92.7
2C4C:  BCF    F89.7
.................... 	output_high(LDAC);			//strobe 
2C4E:  BCF    F92.7
2C50:  BSF    F89.7
.................... } 
2C52:  MOVLB  0
2C54:  RETLW  00
....................  
.................... //KU setting 
.................... void SetKU0(int16 coeff) 
.................... { 
.................... 	int16 dacval; 
.................... 	setup_wdt(WDT_OFF); 
*
2994:  BCF    FD1.0
.................... 	if ((coeff < 1) & (coeff > 6)) 
2996:  MOVLB  5
2998:  MOVF   x1C,F
299A:  BNZ   29A0
299C:  MOVF   x1D,F
299E:  BZ    29A4
29A0:  MOVLW  00
29A2:  BRA    29A6
29A4:  MOVLW  01
29A6:  MOVWF  x20
29A8:  MOVF   x1D,F
29AA:  BNZ   29B6
29AC:  MOVF   x1C,W
29AE:  SUBLW  06
29B0:  BNC   29B6
29B2:  MOVLW  00
29B4:  BRA    29B8
29B6:  MOVLW  01
29B8:  ANDWF  x20,W
29BA:  BZ    29C2
.................... 		coeff = 1; 
29BC:  CLRF   x1D
29BE:  MOVLW  01
29C0:  MOVWF  x1C
.................... 	dacval = (0x1fff >> coeff) | 0x7000; 
29C2:  MOVLW  1F
29C4:  MOVWF  x21
29C6:  MOVLW  FF
29C8:  MOVWF  x20
29CA:  MOVF   x1C,W
29CC:  MOVWF  00
29CE:  BZ    29DA
29D0:  BCF    FD8.0
29D2:  RRCF   x21,F
29D4:  RRCF   x20,F
29D6:  DECFSZ 00,F
29D8:  BRA    29D0
29DA:  MOVF   x20,W
29DC:  MOVWF  x1E
29DE:  MOVF   x21,W
29E0:  IORLW  70
29E2:  MOVWF  x1F
.................... 	output_low(KU0);				//select KU0 DAC 
29E4:  BCF    F95.5
29E6:  BCF    F8C.5
.................... 	spi_write(make8(dacval, 1));		//send high part 
29E8:  MOVFF  51F,520
29EC:  MOVF   FC9,W
29EE:  MOVFF  51F,FC9
29F2:  RRCF   FC7,W
29F4:  BNC   29F2
.................... 	spi_write(make8(dacval, 0));		//send low part 
29F6:  MOVFF  51E,520
29FA:  MOVF   FC9,W
29FC:  MOVFF  51E,FC9
2A00:  RRCF   FC7,W
2A02:  BNC   2A00
.................... 	output_high(KU0);				//deselect 
2A04:  BCF    F95.5
2A06:  BSF    F8C.5
.................... 	setup_wdt(WDT_ON); 
2A08:  BSF    FD1.0
.................... } 
2A0A:  MOVLB  0
2A0C:  GOTO   39F0 (RETURN)
....................  
.................... void SetKU1(int16 coeff) 
.................... { 
.................... 	int16 dacval; 
.................... 	setup_wdt(WDT_OFF); 
2A10:  BCF    FD1.0
.................... 	if ((coeff < 1) & (coeff > 6)) 
2A12:  MOVLB  5
2A14:  MOVF   x1C,F
2A16:  BNZ   2A1C
2A18:  MOVF   x1D,F
2A1A:  BZ    2A20
2A1C:  MOVLW  00
2A1E:  BRA    2A22
2A20:  MOVLW  01
2A22:  MOVWF  x20
2A24:  MOVF   x1D,F
2A26:  BNZ   2A32
2A28:  MOVF   x1C,W
2A2A:  SUBLW  06
2A2C:  BNC   2A32
2A2E:  MOVLW  00
2A30:  BRA    2A34
2A32:  MOVLW  01
2A34:  ANDWF  x20,W
2A36:  BZ    2A3E
.................... 		coeff = 1; 
2A38:  CLRF   x1D
2A3A:  MOVLW  01
2A3C:  MOVWF  x1C
.................... 	dacval = (0x1fff >> coeff) | 0x7000; 
2A3E:  MOVLW  1F
2A40:  MOVWF  x21
2A42:  MOVLW  FF
2A44:  MOVWF  x20
2A46:  MOVF   x1C,W
2A48:  MOVWF  00
2A4A:  BZ    2A56
2A4C:  BCF    FD8.0
2A4E:  RRCF   x21,F
2A50:  RRCF   x20,F
2A52:  DECFSZ 00,F
2A54:  BRA    2A4C
2A56:  MOVF   x20,W
2A58:  MOVWF  x1E
2A5A:  MOVF   x21,W
2A5C:  IORLW  70
2A5E:  MOVWF  x1F
.................... 	output_low(KU1);				//select KU0 DAC 
2A60:  BCF    F95.4
2A62:  BCF    F8C.4
.................... 	spi_write(make8(dacval, 1));		//send high part 
2A64:  MOVFF  51F,520
2A68:  MOVF   FC9,W
2A6A:  MOVFF  51F,FC9
2A6E:  RRCF   FC7,W
2A70:  BNC   2A6E
.................... 	spi_write(make8(dacval, 0));		//send low part 
2A72:  MOVFF  51E,520
2A76:  MOVF   FC9,W
2A78:  MOVFF  51E,FC9
2A7C:  RRCF   FC7,W
2A7E:  BNC   2A7C
.................... 	output_high(KU1);				//deselect 
2A80:  BCF    F95.4
2A82:  BSF    F8C.4
.................... 	setup_wdt(WDT_ON); 
2A84:  BSF    FD1.0
.................... } 
2A86:  MOVLB  0
2A88:  GOTO   39FC (RETURN)
....................  
.................... //ISR 
.................... #include	"modbus_isr.h" 
.................... //modbus realization 
.................... // 
.................... //values 
.................... enum modbus_exceptions{ 
.................... 	illegal_function=1, 
.................... 	illegal_data_address=2, 
.................... 	illegal_data_value=3, 
.................... 	slave_device_failure=4, 
.................... 	acknowledge=5, 
.................... 	slave_device_busy=6 
.................... }; 
.................... static 	int8	MB_Buffer[256];		//incoming buffer 
.................... static	int8	MB_Length=0;			//message length 
.................... static	int16	ValidReq;			//valid req count 
.................... static	int16	CRCReq;				//CRC error count 
.................... static	int16	ExcReq;				//ecxcept error count 
.................... // 
.................... //CRC table 
.................... /* Table of CRC values for highorder byte */ 
.................... const int8 modbus_auchCRCHi[] = { 
....................    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 
....................    0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 
....................    0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 
....................    0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 
....................    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 
....................    0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 
....................    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 
....................    0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 
....................    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 
....................    0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 
....................    0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 
....................    0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 
....................    0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 
....................    0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 
....................    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 
....................    0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 
....................    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 
....................    0x40 
.................... }; 
....................  
.................... /* Table of CRC values for loworder byte */ 
.................... const int8 modbus_auchCRCLo[] = { 
....................    0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4, 
....................    0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09, 
....................    0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 
....................    0x1D, 0x1C, 0xDC, 0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3, 
....................    0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7, 
....................    0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A, 
....................    0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 
....................    0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26, 
....................    0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2, 
....................    0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F, 
....................    0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB, 
....................    0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5, 
....................    0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91, 
....................    0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C, 
....................    0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88, 
....................    0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C, 
....................    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80, 
....................    0x40 
.................... }; 
.................... //procedures 
.................... // 
.................... // 
.................... //UART preset 
.................... #USE RS232(baud=9600, xmit=TX, rcv=RX, enable=DIR, parity=N) 
*
19FC:  BCF    F92.6
19FE:  BSF    F89.6
1A00:  BTFSS  F9E.4
1A02:  BRA    1A00
1A04:  MOVLB  5
1A06:  MOVFF  538,FAD
1A0A:  NOP   
1A0C:  BCF    F92.6
1A0E:  BSF    F89.6
1A10:  BTFSS  FAC.1
1A12:  BRA    1A10
1A14:  BCF    F92.6
1A16:  BCF    F89.6
1A18:  MOVLB  0
1A1A:  GOTO   1FBE (RETURN)
.................... void	RsInit(void){ 
.................... 	MB_Length=0;	//set clear buffer 
*
2558:  MOVLB  4
255A:  CLRF   xF8
.................... 	//select rate 
.................... 	switch(Speed){ 
255C:  MOVLB  3
255E:  MOVF   xE4,W
2560:  MOVWF  00
2562:  MOVF   xE5,W
2564:  MOVWF  03
2566:  MOVLW  04
2568:  SUBWF  03,W
256A:  BNZ   2576
256C:  MOVLW  B0
256E:  SUBWF  00,W
2570:  MOVLB  0
2572:  BZ    25E6
2574:  MOVLB  3
2576:  MOVLW  07
2578:  SUBWF  03,W
257A:  BNZ   2586
257C:  MOVLW  08
257E:  SUBWF  00,W
2580:  MOVLB  0
2582:  BZ    25FA
2584:  MOVLB  3
2586:  MOVLW  09
2588:  SUBWF  03,W
258A:  BNZ   2596
258C:  MOVLW  60
258E:  SUBWF  00,W
2590:  MOVLB  0
2592:  BZ    260E
2594:  MOVLB  3
2596:  MOVLW  12
2598:  SUBWF  03,W
259A:  BNZ   25A6
259C:  MOVLW  C0
259E:  SUBWF  00,W
25A0:  MOVLB  0
25A2:  BZ    2622
25A4:  MOVLB  3
25A6:  MOVLW  1C
25A8:  SUBWF  03,W
25AA:  BNZ   25B6
25AC:  MOVLW  20
25AE:  SUBWF  00,W
25B0:  MOVLB  0
25B2:  BZ    2636
25B4:  MOVLB  3
25B6:  MOVLW  25
25B8:  SUBWF  03,W
25BA:  BNZ   25C6
25BC:  MOVLW  80
25BE:  SUBWF  00,W
25C0:  MOVLB  0
25C2:  BZ    264A
25C4:  MOVLB  3
25C6:  MOVLW  38
25C8:  SUBWF  03,W
25CA:  BNZ   25D6
25CC:  MOVLW  40
25CE:  SUBWF  00,W
25D0:  MOVLB  0
25D2:  BZ    265E
25D4:  MOVLB  3
25D6:  MOVLW  4B
25D8:  SUBWF  03,W
25DA:  BNZ   25E4
25DC:  MOVF   00,F
25DE:  MOVLB  0
25E0:  BZ    266E
25E2:  MOVLB  3
25E4:  BRA    2684
.................... 		case	1200:	setup_uart(1200); 
25E6:  BSF    FB8.3
25E8:  MOVLW  0A
25EA:  MOVWF  FAF
25EC:  MOVLW  1A
25EE:  MOVWF  FB0
25F0:  MOVLW  A6
25F2:  MOVWF  FAC
25F4:  NOP   
25F6:  NOP   
.................... 						break; 
25F8:  BRA    2696
.................... 		case	1800:	setup_uart(1800); 
25FA:  BSF    FB8.3
25FC:  MOVLW  5B
25FE:  MOVWF  FAF
2600:  MOVLW  11
2602:  MOVWF  FB0
2604:  MOVLW  A6
2606:  MOVWF  FAC
2608:  NOP   
260A:  NOP   
.................... 						break; 
260C:  BRA    2696
.................... 		case	2400:	setup_uart(2400); 
260E:  BSF    FB8.3
2610:  MOVLW  04
2612:  MOVWF  FAF
2614:  MOVLW  0D
2616:  MOVWF  FB0
2618:  MOVLW  A6
261A:  MOVWF  FAC
261C:  NOP   
261E:  NOP   
.................... 						break; 
2620:  BRA    2696
.................... 		case	4800:	setup_uart(4800); 
2622:  BSF    FB8.3
2624:  MOVLW  82
2626:  MOVWF  FAF
2628:  MOVLW  06
262A:  MOVWF  FB0
262C:  MOVLW  A6
262E:  MOVWF  FAC
2630:  NOP   
2632:  NOP   
.................... 						break; 
2634:  BRA    2696
.................... 		case	7200:	setup_uart(7200); 
2636:  BSF    FB8.3
2638:  MOVLW  56
263A:  MOVWF  FAF
263C:  MOVLW  04
263E:  MOVWF  FB0
2640:  MOVLW  A6
2642:  MOVWF  FAC
2644:  NOP   
2646:  NOP   
.................... 						break; 
2648:  BRA    2696
.................... 		case	9600:	setup_uart(9600); 
264A:  BSF    FB8.3
264C:  MOVLW  40
264E:  MOVWF  FAF
2650:  MOVLW  03
2652:  MOVWF  FB0
2654:  MOVLW  A6
2656:  MOVWF  FAC
2658:  NOP   
265A:  NOP   
.................... 						break; 
265C:  BRA    2696
.................... 		case	14400:	setup_uart(14400); 
265E:  BCF    FB8.3
2660:  MOVLW  8A
2662:  MOVWF  FAF
2664:  MOVLW  A6
2666:  MOVWF  FAC
2668:  NOP   
266A:  NOP   
.................... 						break; 
266C:  BRA    2696
.................... 		case	19200:	setup_uart(19200); 
266E:  BSF    FB8.3
2670:  MOVLW  A0
2672:  MOVWF  FAF
2674:  MOVLW  01
2676:  MOVWF  FB0
2678:  MOVLW  A6
267A:  MOVWF  FAC
267C:  NOP   
267E:  NOP   
.................... 						break; 
2680:  BRA    2696
2682:  MOVLB  3
.................... 		default:		setup_uart(9600); 
2684:  BSF    FB8.3
2686:  MOVLW  40
2688:  MOVWF  FAF
268A:  MOVLW  03
268C:  MOVWF  FB0
268E:  MOVLW  A6
2690:  MOVWF  FAC
2692:  NOP   
2694:  NOP   
2696:  MOVLB  0
.................... 	};	 
.................... //	dmy=getc(); 
.................... } 
2698:  GOTO   39AC (RETURN)
.................... // 
....................  
.................... //usart settings 
....................  
.................... //usart interrupt vector - packet interception 
.................... #INT_RDA 
.................... void	Incoming(void){ 
.................... 	MB_Buffer[MB_Length]=getc();	//read stream 
*
036E:  CLRF   03
0370:  MOVLB  4
0372:  MOVF   xF8,W
0374:  ADDLW  F8
0376:  MOVWF  FE9
0378:  MOVLW  03
037A:  ADDWFC 03,W
037C:  MOVWF  FEA
037E:  BTFSS  F9E.5
0380:  BRA    037E
0382:  MOVFF  FAE,FEF
.................... 	MB_Length++;					//set new point 
0386:  INCF   xF8,F
.................... 	output_low(STAT); 
0388:  BCF    F94.0
038A:  BCF    F8B.0
.................... 	set_timer1((int16)(0xffff-35000000/Speed));	//set wait time 
038C:  BCF    FD8.1
038E:  MOVLW  02
0390:  MOVLB  5
0392:  MOVWF  x33
0394:  MOVLW  16
0396:  MOVWF  x32
0398:  MOVLW  0E
039A:  MOVWF  x31
039C:  MOVLW  C0
039E:  MOVWF  x30
03A0:  CLRF   x37
03A2:  CLRF   x36
03A4:  MOVFF  3E5,535
03A8:  MOVFF  3E4,534
03AC:  MOVLB  0
03AE:  RCALL  02DA
03B0:  MOVLW  FF
03B2:  BSF    FD8.0
03B4:  SUBFWB 00,F
03B6:  SUBFWB 01,F
03B8:  MOVLW  00
03BA:  SUBFWB 02,F
03BC:  SUBFWB 03,F
03BE:  MOVFF  01,FCF
03C2:  MOVFF  00,FCE
.................... 	clear_interrupt(INT_TIMER1);		//clear timer 1 int 
03C6:  BCF    F9E.0
.................... 	enable_interrupts(INT_TIMER1);	//enable timer 1 interrupt 
03C8:  BSF    F9D.0
.................... //	clear_interrupt(int_rda);		//clear interrupt flag 
.................... } 
.................... // 
.................... //calculate CRC16 : 1st - buffer, 2d - length of data 
03CA:  BCF    F9E.5
03CC:  GOTO   006C
.................... int16	ModbusCRC(int8 * buf, int8 len){ 
03D0:  MOVLW  FF
03D2:  MOVLB  5
03D4:  MOVWF  x3D
03D6:  MOVWF  x3E
.................... 	int8	i,index; 
.................... 	int8	CRC_Low=0xff,CRC_High=0xff; 
.................... 	// 
.................... 	for(i=0; i<len; i++){ 
03D8:  CLRF   x3B
03DA:  MOVF   x3A,W
03DC:  SUBWF  x3B,W
03DE:  BC    0418
.................... 		index=CRC_High^buf[i]; 
03E0:  CLRF   03
03E2:  MOVF   x3B,W
03E4:  ADDWF  x38,W
03E6:  MOVWF  FE9
03E8:  MOVF   x39,W
03EA:  ADDWFC 03,W
03EC:  MOVWF  FEA
03EE:  MOVF   FEF,W
03F0:  XORWF  x3E,W
03F2:  MOVWF  x3C
.................... 		CRC_High=CRC_Low^modbus_auchCRCHi[index]; 
03F4:  CLRF   03
03F6:  MOVF   x3C,W
03F8:  MOVLB  0
03FA:  RCALL  00BA
03FC:  MOVWF  01
03FE:  MOVLB  5
0400:  MOVF   x3D,W
0402:  XORWF  01,W
0404:  MOVWF  x3E
.................... 		CRC_Low=modbus_auchCRCLo[index]; 
0406:  CLRF   03
0408:  MOVF   x3C,W
040A:  MOVLB  0
040C:  RCALL  01CA
040E:  MOVFF  FE8,53D
.................... 	} 
0412:  MOVLB  5
0414:  INCF   x3B,F
0416:  BRA    03DA
.................... 	// 
.................... 	return	make16(CRC_High,CRC_Low); 
0418:  MOVFF  53E,03
041C:  MOVFF  53D,01
0420:  MOVFF  53E,02
.................... } 
0424:  MOVLB  0
0426:  RETLW  00
.................... //read registers 
.................... static int16	CRCr,CRCc; 
.................... static int8	j; 
.................... // 
....................  
.................... //add register data 
.................... void	AddRegData(int8 regist){ 
.................... 	int32	flcopy; 
.................... 	restart_wdt(); 
0428:  CLRWDT
.................... 			switch(regist){ 
042A:  MOVLB  5
042C:  MOVF   x37,W
042E:  XORLW  00
0430:  MOVLB  0
0432:  BTFSC  FD8.2
0434:  BRA    04FE
0436:  XORLW  01
0438:  BTFSC  FD8.2
043A:  BRA    053A
043C:  XORLW  03
043E:  BTFSC  FD8.2
0440:  BRA    0576
0442:  XORLW  01
0444:  BTFSC  FD8.2
0446:  BRA    05B0
0448:  XORLW  07
044A:  BTFSC  FD8.2
044C:  BRA    05DE
044E:  XORLW  01
0450:  BTFSC  FD8.2
0452:  BRA    0618
0454:  XORLW  03
0456:  BTFSC  FD8.2
0458:  BRA    0646
045A:  XORLW  01
045C:  BTFSC  FD8.2
045E:  BRA    0680
0460:  XORLW  0F
0462:  BTFSC  FD8.2
0464:  BRA    06BA
0466:  XORLW  01
0468:  BTFSC  FD8.2
046A:  BRA    06F4
046C:  XORLW  03
046E:  BTFSC  FD8.2
0470:  BRA    072E
0472:  XORLW  01
0474:  BTFSC  FD8.2
0476:  BRA    075C
0478:  XORLW  07
047A:  BTFSC  FD8.2
047C:  BRA    0796
047E:  XORLW  01
0480:  BTFSC  FD8.2
0482:  BRA    07D0
0484:  XORLW  03
0486:  BTFSC  FD8.2
0488:  BRA    080A
048A:  XORLW  01
048C:  BTFSC  FD8.2
048E:  BRA    0844
0490:  XORLW  1F
0492:  BTFSC  FD8.2
0494:  BRA    087E
0496:  XORLW  01
0498:  BTFSC  FD8.2
049A:  BRA    08B8
049C:  XORLW  03
049E:  BTFSC  FD8.2
04A0:  BRA    08F2
04A2:  XORLW  01
04A4:  BTFSC  FD8.2
04A6:  BRA    092C
04A8:  XORLW  07
04AA:  BTFSC  FD8.2
04AC:  BRA    0966
04AE:  XORLW  01
04B0:  BTFSC  FD8.2
04B2:  BRA    09A0
04B4:  XORLW  03
04B6:  BTFSC  FD8.2
04B8:  BRA    09DA
04BA:  XORLW  01
04BC:  BTFSC  FD8.2
04BE:  BRA    0A14
04C0:  XORLW  0F
04C2:  BTFSC  FD8.2
04C4:  BRA    0A8A
04C6:  XORLW  01
04C8:  BTFSC  FD8.2
04CA:  BRA    0B00
04CC:  XORLW  03
04CE:  BTFSC  FD8.2
04D0:  BRA    0B76
04D2:  XORLW  01
04D4:  BTFSC  FD8.2
04D6:  BRA    0BC8
04D8:  XORLW  07
04DA:  BTFSC  FD8.2
04DC:  BRA    0C02
04DE:  XORLW  01
04E0:  BTFSC  FD8.2
04E2:  BRA    0C3C
04E4:  XORLW  3D
04E6:  BTFSC  FD8.2
04E8:  BRA    0C76
04EA:  XORLW  01
04EC:  BTFSC  FD8.2
04EE:  GOTO   0CB0
04F2:  XORLW  03
04F4:  BTFSC  FD8.2
04F6:  GOTO   0CEA
04FA:  GOTO   0D24
.................... 				case 0x00:	//gamma 0					 
.................... 					MB_Buffer[j]=make8(Gamma0,1);	//high part 
04FE:  CLRF   03
0500:  MOVLB  5
0502:  MOVF   x03,W
0504:  ADDLW  F8
0506:  MOVWF  FE9
0508:  MOVLW  03
050A:  ADDWFC 03,W
050C:  MOVWF  FEA
050E:  MOVLB  3
0510:  MOVFF  3A9,FEF
.................... 					j++; 
0514:  MOVLB  5
0516:  INCF   x03,F
.................... 					MB_Buffer[j]=make8(Gamma0,0);	//low part 
0518:  CLRF   03
051A:  MOVF   x03,W
051C:  ADDLW  F8
051E:  MOVWF  FE9
0520:  MOVLW  03
0522:  ADDWFC 03,W
0524:  MOVWF  FEA
0526:  MOVLB  3
0528:  MOVFF  3A8,FEF
.................... 					j++; 
052C:  MOVLB  5
052E:  INCF   x03,F
.................... 					MB_Length+=2; 
0530:  MOVLW  02
0532:  MOVLB  4
0534:  ADDWF  xF8,F
.................... 					break; 
0536:  GOTO   0D40
.................... 				case 0x01:	//gamma1 
.................... 					MB_Buffer[j]=make8(Gamma1,1);	//high part 
053A:  CLRF   03
053C:  MOVLB  5
053E:  MOVF   x03,W
0540:  ADDLW  F8
0542:  MOVWF  FE9
0544:  MOVLW  03
0546:  ADDWFC 03,W
0548:  MOVWF  FEA
054A:  MOVLB  3
054C:  MOVFF  3B5,FEF
.................... 					j++; 
0550:  MOVLB  5
0552:  INCF   x03,F
.................... 					MB_Buffer[j]=make8(Gamma1,0);	//low part 
0554:  CLRF   03
0556:  MOVF   x03,W
0558:  ADDLW  F8
055A:  MOVWF  FE9
055C:  MOVLW  03
055E:  ADDWFC 03,W
0560:  MOVWF  FEA
0562:  MOVLB  3
0564:  MOVFF  3B4,FEF
.................... 					j++; 
0568:  MOVLB  5
056A:  INCF   x03,F
.................... 					MB_Length+=2; 
056C:  MOVLW  02
056E:  MOVLB  4
0570:  ADDWF  xF8,F
.................... 					break; 
0572:  GOTO   0D40
.................... 				case 0x02:	//pulse width 1/2 amp				 
.................... 					MB_Buffer[j]=make8(PulseWdt0,1);	//high part 
0576:  CLRF   03
0578:  MOVLB  5
057A:  MOVF   x03,W
057C:  ADDLW  F8
057E:  MOVWF  FE9
0580:  MOVLW  03
0582:  ADDWFC 03,W
0584:  MOVWF  FEA
0586:  MOVLB  3
0588:  MOVFF  3A7,FEF
.................... 					j++; 
058C:  MOVLB  5
058E:  INCF   x03,F
.................... 					MB_Buffer[j]=make8(PulseWdt0,0);	//low part 
0590:  CLRF   03
0592:  MOVF   x03,W
0594:  ADDLW  F8
0596:  MOVWF  FE9
0598:  MOVLW  03
059A:  ADDWFC 03,W
059C:  MOVWF  FEA
059E:  MOVLB  3
05A0:  MOVFF  3A6,FEF
.................... 					j++; 
05A4:  MOVLB  5
05A6:  INCF   x03,F
.................... 					MB_Length+=2; 
05A8:  MOVLW  02
05AA:  MOVLB  4
05AC:  ADDWF  xF8,F
.................... 					break; 
05AE:  BRA    0D40
.................... 				case 0x03:	//pulse width 1/2 amp 
.................... 					MB_Buffer[j]=0;	//high part 
05B0:  CLRF   03
05B2:  MOVLB  5
05B4:  MOVF   x03,W
05B6:  ADDLW  F8
05B8:  MOVWF  FE9
05BA:  MOVLW  03
05BC:  ADDWFC 03,W
05BE:  MOVWF  FEA
05C0:  CLRF   FEF
.................... 					j++; 
05C2:  INCF   x03,F
.................... 					MB_Buffer[j]=0;	//low part 
05C4:  CLRF   03
05C6:  MOVF   x03,W
05C8:  ADDLW  F8
05CA:  MOVWF  FE9
05CC:  MOVLW  03
05CE:  ADDWFC 03,W
05D0:  MOVWF  FEA
05D2:  CLRF   FEF
.................... 					j++; 
05D4:  INCF   x03,F
.................... 					MB_Length+=2; 
05D6:  MOVLW  02
05D8:  MOVLB  4
05DA:  ADDWF  xF8,F
.................... 					break; 
05DC:  BRA    0D40
.................... 				case 0x04:	//pulse amplitude			 
.................... 					MB_Buffer[j]=make8(Amplitude0,1);	//high part 
05DE:  CLRF   03
05E0:  MOVLB  5
05E2:  MOVF   x03,W
05E4:  ADDLW  F8
05E6:  MOVWF  FE9
05E8:  MOVLW  03
05EA:  ADDWFC 03,W
05EC:  MOVWF  FEA
05EE:  MOVLB  3
05F0:  MOVFF  3A5,FEF
.................... 					j++; 
05F4:  MOVLB  5
05F6:  INCF   x03,F
.................... 					MB_Buffer[j]=make8(Amplitude0,0);	//low part 
05F8:  CLRF   03
05FA:  MOVF   x03,W
05FC:  ADDLW  F8
05FE:  MOVWF  FE9
0600:  MOVLW  03
0602:  ADDWFC 03,W
0604:  MOVWF  FEA
0606:  MOVLB  3
0608:  MOVFF  3A4,FEF
.................... 					j++; 
060C:  MOVLB  5
060E:  INCF   x03,F
.................... 					MB_Length+=2; 
0610:  MOVLW  02
0612:  MOVLB  4
0614:  ADDWF  xF8,F
.................... 					break; 
0616:  BRA    0D40
.................... 				case 0x05:	//pulse amplitude				 
.................... 					MB_Buffer[j]=0;	//high part 
0618:  CLRF   03
061A:  MOVLB  5
061C:  MOVF   x03,W
061E:  ADDLW  F8
0620:  MOVWF  FE9
0622:  MOVLW  03
0624:  ADDWFC 03,W
0626:  MOVWF  FEA
0628:  CLRF   FEF
.................... 					j++; 
062A:  INCF   x03,F
.................... 					MB_Buffer[j]=0;	//low part 
062C:  CLRF   03
062E:  MOVF   x03,W
0630:  ADDLW  F8
0632:  MOVWF  FE9
0634:  MOVLW  03
0636:  ADDWFC 03,W
0638:  MOVWF  FEA
063A:  CLRF   FEF
.................... 					j++; 
063C:  INCF   x03,F
.................... 					MB_Length+=2; 
063E:  MOVLW  02
0640:  MOVLB  4
0642:  ADDWF  xF8,F
.................... 					break; 
0644:  BRA    0D40
.................... 				case 0x06:	//temp of gen				 
.................... 					MB_Buffer[j]=make8(T_GEN,1);	//high part 
0646:  CLRF   03
0648:  MOVLB  5
064A:  MOVF   x03,W
064C:  ADDLW  F8
064E:  MOVWF  FE9
0650:  MOVLW  03
0652:  ADDWFC 03,W
0654:  MOVWF  FEA
0656:  MOVLB  3
0658:  MOVFF  3C9,FEF
.................... 					j++; 
065C:  MOVLB  5
065E:  INCF   x03,F
.................... 					MB_Buffer[j]=make8(T_GEN,0);	//low part 
0660:  CLRF   03
0662:  MOVF   x03,W
0664:  ADDLW  F8
0666:  MOVWF  FE9
0668:  MOVLW  03
066A:  ADDWFC 03,W
066C:  MOVWF  FEA
066E:  MOVLB  3
0670:  MOVFF  3C8,FEF
.................... 					j++; 
0674:  MOVLB  5
0676:  INCF   x03,F
.................... 					MB_Length+=2; 
0678:  MOVLW  02
067A:  MOVLB  4
067C:  ADDWF  xF8,F
.................... 					break; 
067E:  BRA    0D40
.................... 				case 0x07:	//temp 0					 
.................... 					MB_Buffer[j]=make8(T_SR0,1);	//high part 
0680:  CLRF   03
0682:  MOVLB  5
0684:  MOVF   x03,W
0686:  ADDLW  F8
0688:  MOVWF  FE9
068A:  MOVLW  03
068C:  ADDWFC 03,W
068E:  MOVWF  FEA
0690:  MOVLB  3
0692:  MOVFF  3B3,FEF
.................... 					j++; 
0696:  MOVLB  5
0698:  INCF   x03,F
.................... 					MB_Buffer[j]=make8(T_SR0,0);	//low part 
069A:  CLRF   03
069C:  MOVF   x03,W
069E:  ADDLW  F8
06A0:  MOVWF  FE9
06A2:  MOVLW  03
06A4:  ADDWFC 03,W
06A6:  MOVWF  FEA
06A8:  MOVLB  3
06AA:  MOVFF  3B2,FEF
.................... 					j++; 
06AE:  MOVLB  5
06B0:  INCF   x03,F
.................... 					MB_Length+=2; 
06B2:  MOVLW  02
06B4:  MOVLB  4
06B6:  ADDWF  xF8,F
.................... 					break; 
06B8:  BRA    0D40
.................... 				case 0x08:	//temp 1 
.................... 					MB_Buffer[j]=make8(T_SR1,1);	//high part 
06BA:  CLRF   03
06BC:  MOVLB  5
06BE:  MOVF   x03,W
06C0:  ADDLW  F8
06C2:  MOVWF  FE9
06C4:  MOVLW  03
06C6:  ADDWFC 03,W
06C8:  MOVWF  FEA
06CA:  MOVLB  3
06CC:  MOVFF  3BF,FEF
.................... 					j++; 
06D0:  MOVLB  5
06D2:  INCF   x03,F
.................... 					MB_Buffer[j]=make8(T_SR1,0);	//low part 
06D4:  CLRF   03
06D6:  MOVF   x03,W
06D8:  ADDLW  F8
06DA:  MOVWF  FE9
06DC:  MOVLW  03
06DE:  ADDWFC 03,W
06E0:  MOVWF  FEA
06E2:  MOVLB  3
06E4:  MOVFF  3BE,FEF
.................... 					j++; 
06E8:  MOVLB  5
06EA:  INCF   x03,F
.................... 					MB_Length+=2; 
06EC:  MOVLW  02
06EE:  MOVLB  4
06F0:  ADDWF  xF8,F
.................... 					break; 
06F2:  BRA    0D40
.................... 				case 0x09:	//dummy command					 
.................... 					MB_Buffer[j]=make8(ADC0,1);	//high part 
06F4:  CLRF   03
06F6:  MOVLB  5
06F8:  MOVF   x03,W
06FA:  ADDLW  F8
06FC:  MOVWF  FE9
06FE:  MOVLW  03
0700:  ADDWFC 03,W
0702:  MOVWF  FEA
0704:  MOVLB  3
0706:  MOVFF  3DD,FEF
.................... 					j++; 
070A:  MOVLB  5
070C:  INCF   x03,F
.................... 					MB_Buffer[j]=make8(ADC0,0);	//low part 
070E:  CLRF   03
0710:  MOVF   x03,W
0712:  ADDLW  F8
0714:  MOVWF  FE9
0716:  MOVLW  03
0718:  ADDWFC 03,W
071A:  MOVWF  FEA
071C:  MOVLB  3
071E:  MOVFF  3DC,FEF
.................... 					j++; 
0722:  MOVLB  5
0724:  INCF   x03,F
.................... 					MB_Length+=2; 
0726:  MOVLW  02
0728:  MOVLB  4
072A:  ADDWF  xF8,F
.................... 					break; 
072C:  BRA    0D40
.................... 				case 0x0A:	//dummy command					 
.................... 					MB_Buffer[j]=0x00;	//high part 
072E:  CLRF   03
0730:  MOVLB  5
0732:  MOVF   x03,W
0734:  ADDLW  F8
0736:  MOVWF  FE9
0738:  MOVLW  03
073A:  ADDWFC 03,W
073C:  MOVWF  FEA
073E:  CLRF   FEF
.................... 					j++; 
0740:  INCF   x03,F
.................... 					MB_Buffer[j]=0x00;	//low part 
0742:  CLRF   03
0744:  MOVF   x03,W
0746:  ADDLW  F8
0748:  MOVWF  FE9
074A:  MOVLW  03
074C:  ADDWFC 03,W
074E:  MOVWF  FEA
0750:  CLRF   FEF
.................... 					j++; 
0752:  INCF   x03,F
.................... 					MB_Length+=2; 
0754:  MOVLW  02
0756:  MOVLB  4
0758:  ADDWF  xF8,F
.................... 					break; 
075A:  BRA    0D40
.................... 				case 0x0B:	//saw level 
.................... 					MB_Buffer[j]=make8(SAW_A0,1);	//high part 
075C:  CLRF   03
075E:  MOVLB  5
0760:  MOVF   x03,W
0762:  ADDLW  F8
0764:  MOVWF  FE9
0766:  MOVLW  03
0768:  ADDWFC 03,W
076A:  MOVWF  FEA
076C:  MOVLB  3
076E:  MOVFF  3CB,FEF
.................... 					j++; 
0772:  MOVLB  5
0774:  INCF   x03,F
.................... 					MB_Buffer[j]=make8(SAW_A0,0);	//low part 
0776:  CLRF   03
0778:  MOVF   x03,W
077A:  ADDLW  F8
077C:  MOVWF  FE9
077E:  MOVLW  03
0780:  ADDWFC 03,W
0782:  MOVWF  FEA
0784:  MOVLB  3
0786:  MOVFF  3CA,FEF
.................... 					j++; 
078A:  MOVLB  5
078C:  INCF   x03,F
.................... 					MB_Length+=2; 
078E:  MOVLW  02
0790:  MOVLB  4
0792:  ADDWF  xF8,F
.................... 					break; 
0794:  BRA    0D40
.................... 				case 0x0C:	//saw amplitude			 
.................... 					MB_Buffer[j]=make8(SAW_A1,1);	//high part 
0796:  CLRF   03
0798:  MOVLB  5
079A:  MOVF   x03,W
079C:  ADDLW  F8
079E:  MOVWF  FE9
07A0:  MOVLW  03
07A2:  ADDWFC 03,W
07A4:  MOVWF  FEA
07A6:  MOVLB  3
07A8:  MOVFF  3CF,FEF
.................... 					j++; 
07AC:  MOVLB  5
07AE:  INCF   x03,F
.................... 					MB_Buffer[j]=make8(SAW_A1,0);	//low part 
07B0:  CLRF   03
07B2:  MOVF   x03,W
07B4:  ADDLW  F8
07B6:  MOVWF  FE9
07B8:  MOVLW  03
07BA:  ADDWFC 03,W
07BC:  MOVWF  FEA
07BE:  MOVLB  3
07C0:  MOVFF  3CE,FEF
.................... 					j++; 
07C4:  MOVLB  5
07C6:  INCF   x03,F
.................... 					MB_Length+=2; 
07C8:  MOVLW  02
07CA:  MOVLB  4
07CC:  ADDWF  xF8,F
.................... 					break; 
07CE:  BRA    0D40
.................... 				case 0x0D:	//input coef 0					 
.................... 					MB_Buffer[j]=make8(AmpCoef0,1);	//high part 
07D0:  CLRF   03
07D2:  MOVLB  5
07D4:  MOVF   x03,W
07D6:  ADDLW  F8
07D8:  MOVWF  FE9
07DA:  MOVLW  03
07DC:  ADDWFC 03,W
07DE:  MOVWF  FEA
07E0:  MOVLB  3
07E2:  MOVFF  3AB,FEF
.................... 					j++; 
07E6:  MOVLB  5
07E8:  INCF   x03,F
.................... 					MB_Buffer[j]=make8(AmpCoef0,0);	//low part 
07EA:  CLRF   03
07EC:  MOVF   x03,W
07EE:  ADDLW  F8
07F0:  MOVWF  FE9
07F2:  MOVLW  03
07F4:  ADDWFC 03,W
07F6:  MOVWF  FEA
07F8:  MOVLB  3
07FA:  MOVFF  3AA,FEF
.................... 					j++; 
07FE:  MOVLB  5
0800:  INCF   x03,F
.................... 					MB_Length+=2; 
0802:  MOVLW  02
0804:  MOVLB  4
0806:  ADDWF  xF8,F
.................... 					break; 
0808:  BRA    0D40
.................... 				case 0x0E:	//input coef 1 
.................... 					MB_Buffer[j]=make8(AmpCoef1,1);	//high part 
080A:  CLRF   03
080C:  MOVLB  5
080E:  MOVF   x03,W
0810:  ADDLW  F8
0812:  MOVWF  FE9
0814:  MOVLW  03
0816:  ADDWFC 03,W
0818:  MOVWF  FEA
081A:  MOVLB  3
081C:  MOVFF  3B7,FEF
.................... 					j++; 
0820:  MOVLB  5
0822:  INCF   x03,F
.................... 					MB_Buffer[j]=make8(AmpCoef1,0);	//low part 
0824:  CLRF   03
0826:  MOVF   x03,W
0828:  ADDLW  F8
082A:  MOVWF  FE9
082C:  MOVLW  03
082E:  ADDWFC 03,W
0830:  MOVWF  FEA
0832:  MOVLB  3
0834:  MOVFF  3B6,FEF
.................... 					j++; 
0838:  MOVLB  5
083A:  INCF   x03,F
.................... 					MB_Length+=2; 
083C:  MOVLW  02
083E:  MOVLB  4
0840:  ADDWF  xF8,F
.................... 					break; 
0842:  BRA    0D40
.................... 				case 0x0F:	//measure points 
.................... 					MB_Buffer[j]=make8(TAQ,1);	//high part 
0844:  CLRF   03
0846:  MOVLB  5
0848:  MOVF   x03,W
084A:  ADDLW  F8
084C:  MOVWF  FE9
084E:  MOVLW  03
0850:  ADDWFC 03,W
0852:  MOVWF  FEA
0854:  MOVLB  3
0856:  MOVFF  3C1,FEF
.................... 					j++; 
085A:  MOVLB  5
085C:  INCF   x03,F
.................... 					MB_Buffer[j]=make8(TAQ,0);	//low part 
085E:  CLRF   03
0860:  MOVF   x03,W
0862:  ADDLW  F8
0864:  MOVWF  FE9
0866:  MOVLW  03
0868:  ADDWFC 03,W
086A:  MOVWF  FEA
086C:  MOVLB  3
086E:  MOVFF  3C0,FEF
.................... 					j++; 
0872:  MOVLB  5
0874:  INCF   x03,F
.................... 					MB_Length+=2; 
0876:  MOVLW  02
0878:  MOVLB  4
087A:  ADDWF  xF8,F
.................... 					break; 
087C:  BRA    0D40
.................... 				case 0x10:	//filter width				 
.................... 					MB_Buffer[j]=make8(FWDT,1);	//high part 
087E:  CLRF   03
0880:  MOVLB  5
0882:  MOVF   x03,W
0884:  ADDLW  F8
0886:  MOVWF  FE9
0888:  MOVLW  03
088A:  ADDWFC 03,W
088C:  MOVWF  FEA
088E:  MOVLB  3
0890:  MOVFF  3C3,FEF
.................... 					j++; 
0894:  MOVLB  5
0896:  INCF   x03,F
.................... 					MB_Buffer[j]=make8(FWDT,0);	//low part 
0898:  CLRF   03
089A:  MOVF   x03,W
089C:  ADDLW  F8
089E:  MOVWF  FE9
08A0:  MOVLW  03
08A2:  ADDWFC 03,W
08A4:  MOVWF  FEA
08A6:  MOVLB  3
08A8:  MOVFF  3C2,FEF
.................... 					j++; 
08AC:  MOVLB  5
08AE:  INCF   x03,F
.................... 					MB_Length+=2; 
08B0:  MOVLW  02
08B2:  MOVLB  4
08B4:  ADDWF  xF8,F
.................... 					break; 
08B6:  BRA    0D40
.................... 				case 0x11:	//measures count 
.................... 					MB_Buffer[j]=make8(PCOUNT,1);	//high part 
08B8:  CLRF   03
08BA:  MOVLB  5
08BC:  MOVF   x03,W
08BE:  ADDLW  F8
08C0:  MOVWF  FE9
08C2:  MOVLW  03
08C4:  ADDWFC 03,W
08C6:  MOVWF  FEA
08C8:  MOVLB  3
08CA:  MOVFF  3C5,FEF
.................... 					j++; 
08CE:  MOVLB  5
08D0:  INCF   x03,F
.................... 					MB_Buffer[j]=make8(PCOUNT,0);	//low part 
08D2:  CLRF   03
08D4:  MOVF   x03,W
08D6:  ADDLW  F8
08D8:  MOVWF  FE9
08DA:  MOVLW  03
08DC:  ADDWFC 03,W
08DE:  MOVWF  FEA
08E0:  MOVLB  3
08E2:  MOVFF  3C4,FEF
.................... 					j++; 
08E6:  MOVLB  5
08E8:  INCF   x03,F
.................... 					MB_Length+=2; 
08EA:  MOVLW  02
08EC:  MOVLB  4
08EE:  ADDWF  xF8,F
.................... 					break; 
08F0:  BRA    0D40
.................... 				case 0x12:	//speed register 
.................... 					MB_Buffer[j]=make8(Speed,1);	//high part 
08F2:  CLRF   03
08F4:  MOVLB  5
08F6:  MOVF   x03,W
08F8:  ADDLW  F8
08FA:  MOVWF  FE9
08FC:  MOVLW  03
08FE:  ADDWFC 03,W
0900:  MOVWF  FEA
0902:  MOVLB  3
0904:  MOVFF  3E5,FEF
.................... 					j++; 
0908:  MOVLB  5
090A:  INCF   x03,F
.................... 					MB_Buffer[j]=make8(Speed,0);	//low part 
090C:  CLRF   03
090E:  MOVF   x03,W
0910:  ADDLW  F8
0912:  MOVWF  FE9
0914:  MOVLW  03
0916:  ADDWFC 03,W
0918:  MOVWF  FEA
091A:  MOVLB  3
091C:  MOVFF  3E4,FEF
.................... 					j++; 
0920:  MOVLB  5
0922:  INCF   x03,F
.................... 					MB_Length+=2; 
0924:  MOVLW  02
0926:  MOVLB  4
0928:  ADDWF  xF8,F
.................... 					break; 
092A:  BRA    0D40
.................... 				case 0x13:	//host address register 
.................... 					MB_Buffer[j]=make8(Addr,1);	//high part 
092C:  CLRF   03
092E:  MOVLB  5
0930:  MOVF   x03,W
0932:  ADDLW  F8
0934:  MOVWF  FE9
0936:  MOVLW  03
0938:  ADDWFC 03,W
093A:  MOVWF  FEA
093C:  MOVLB  3
093E:  MOVFF  3E7,FEF
.................... 					j++; 
0942:  MOVLB  5
0944:  INCF   x03,F
.................... 					MB_Buffer[j]=make8(Addr,0);	//low part 
0946:  CLRF   03
0948:  MOVF   x03,W
094A:  ADDLW  F8
094C:  MOVWF  FE9
094E:  MOVLW  03
0950:  ADDWFC 03,W
0952:  MOVWF  FEA
0954:  MOVLB  3
0956:  MOVFF  3E6,FEF
.................... 					j++;								 
095A:  MOVLB  5
095C:  INCF   x03,F
.................... 					MB_Length+=2; 
095E:  MOVLW  02
0960:  MOVLB  4
0962:  ADDWF  xF8,F
.................... 					break; 
0964:  BRA    0D40
.................... 				case 0x14:	//Valid request register 
.................... 					MB_Buffer[j]=make8(ValidReq,1);	//high part 
0966:  CLRF   03
0968:  MOVLB  5
096A:  MOVF   x03,W
096C:  ADDLW  F8
096E:  MOVWF  FE9
0970:  MOVLW  03
0972:  ADDWFC 03,W
0974:  MOVWF  FEA
0976:  MOVLB  4
0978:  MOVFF  4FA,FEF
.................... 					j++; 
097C:  MOVLB  5
097E:  INCF   x03,F
.................... 					MB_Buffer[j]=make8(ValidReq,0);	//low part 
0980:  CLRF   03
0982:  MOVF   x03,W
0984:  ADDLW  F8
0986:  MOVWF  FE9
0988:  MOVLW  03
098A:  ADDWFC 03,W
098C:  MOVWF  FEA
098E:  MOVLB  4
0990:  MOVFF  4F9,FEF
.................... 					j++;								 
0994:  MOVLB  5
0996:  INCF   x03,F
.................... 					MB_Length+=2; 
0998:  MOVLW  02
099A:  MOVLB  4
099C:  ADDWF  xF8,F
.................... 					break; 
099E:  BRA    0D40
.................... 				case 0x15:	//CRC error register 
.................... 					MB_Buffer[j]=make8(CRCReq,1);	//high part 
09A0:  CLRF   03
09A2:  MOVLB  5
09A4:  MOVF   x03,W
09A6:  ADDLW  F8
09A8:  MOVWF  FE9
09AA:  MOVLW  03
09AC:  ADDWFC 03,W
09AE:  MOVWF  FEA
09B0:  MOVLB  4
09B2:  MOVFF  4FC,FEF
.................... 					j++; 
09B6:  MOVLB  5
09B8:  INCF   x03,F
.................... 					MB_Buffer[j]=make8(CRCReq,0);	//low part 
09BA:  CLRF   03
09BC:  MOVF   x03,W
09BE:  ADDLW  F8
09C0:  MOVWF  FE9
09C2:  MOVLW  03
09C4:  ADDWFC 03,W
09C6:  MOVWF  FEA
09C8:  MOVLB  4
09CA:  MOVFF  4FB,FEF
.................... 					j++;								 
09CE:  MOVLB  5
09D0:  INCF   x03,F
.................... 					MB_Length+=2; 
09D2:  MOVLW  02
09D4:  MOVLB  4
09D6:  ADDWF  xF8,F
.................... 					break; 
09D8:  BRA    0D40
.................... 				case 0x16:	//Exception register 
.................... 					MB_Buffer[j]=make8(ExcReq,1);	//high part 
09DA:  CLRF   03
09DC:  MOVLB  5
09DE:  MOVF   x03,W
09E0:  ADDLW  F8
09E2:  MOVWF  FE9
09E4:  MOVLW  03
09E6:  ADDWFC 03,W
09E8:  MOVWF  FEA
09EA:  MOVLB  4
09EC:  MOVFF  4FE,FEF
.................... 					j++; 
09F0:  MOVLB  5
09F2:  INCF   x03,F
.................... 					MB_Buffer[j]=make8(ExcReq,0);	//low part 
09F4:  CLRF   03
09F6:  MOVF   x03,W
09F8:  ADDLW  F8
09FA:  MOVWF  FE9
09FC:  MOVLW  03
09FE:  ADDWFC 03,W
0A00:  MOVWF  FEA
0A02:  MOVLB  4
0A04:  MOVFF  4FD,FEF
.................... 					j++;								 
0A08:  MOVLB  5
0A0A:  INCF   x03,F
.................... 					MB_Length+=2; 
0A0C:  MOVLW  02
0A0E:  MOVLB  4
0A10:  ADDWF  xF8,F
.................... 					break; 
0A12:  BRA    0D40
.................... 				case 0x17:	//KGT				 
.................... 					//copy 
.................... 					memcpy(&flcopy,&KGT,4); 
0A14:  MOVLW  05
0A16:  MOVWF  FEA
0A18:  MOVLW  38
0A1A:  MOVWF  FE9
0A1C:  MOVLW  03
0A1E:  MOVWF  FE2
0A20:  MOVLW  D2
0A22:  MOVWF  FE1
0A24:  MOVLW  04
0A26:  MOVWF  01
0A28:  MOVFF  FE6,FEE
0A2C:  DECFSZ 01,F
0A2E:  BRA    0A28
.................... 					//store to buf 
.................... 					MB_Buffer[j]=make8(flcopy,0);	//high part 
0A30:  CLRF   03
0A32:  MOVLB  5
0A34:  MOVF   x03,W
0A36:  ADDLW  F8
0A38:  MOVWF  FE9
0A3A:  MOVLW  03
0A3C:  ADDWFC 03,W
0A3E:  MOVWF  FEA
0A40:  MOVFF  538,FEF
.................... 					j++; 
0A44:  INCF   x03,F
.................... 					MB_Buffer[j]=make8(flcopy,1);	//high part 
0A46:  CLRF   03
0A48:  MOVF   x03,W
0A4A:  ADDLW  F8
0A4C:  MOVWF  FE9
0A4E:  MOVLW  03
0A50:  ADDWFC 03,W
0A52:  MOVWF  FEA
0A54:  MOVFF  539,FEF
.................... 					j++; 
0A58:  INCF   x03,F
.................... 					MB_Buffer[j]=make8(flcopy,2);	//high part 
0A5A:  CLRF   03
0A5C:  MOVF   x03,W
0A5E:  ADDLW  F8
0A60:  MOVWF  FE9
0A62:  MOVLW  03
0A64:  ADDWFC 03,W
0A66:  MOVWF  FEA
0A68:  MOVFF  53A,FEF
.................... 					j++; 
0A6C:  INCF   x03,F
.................... 					MB_Buffer[j]=make8(flcopy,3);	//high part 
0A6E:  CLRF   03
0A70:  MOVF   x03,W
0A72:  ADDLW  F8
0A74:  MOVWF  FE9
0A76:  MOVLW  03
0A78:  ADDWFC 03,W
0A7A:  MOVWF  FEA
0A7C:  MOVFF  53B,FEF
.................... 					j++; 
0A80:  INCF   x03,F
.................... 					MB_Length+=4; 
0A82:  MOVLW  04
0A84:  MOVLB  4
0A86:  ADDWF  xF8,F
.................... 					break; 
0A88:  BRA    0D40
.................... 				case 0x18:	//KGU				 
.................... 					//copy 
.................... 					memcpy(&flcopy,&KGU,4); 
0A8A:  MOVLW  05
0A8C:  MOVWF  FEA
0A8E:  MOVLW  38
0A90:  MOVWF  FE9
0A92:  MOVLW  03
0A94:  MOVWF  FE2
0A96:  MOVLW  D6
0A98:  MOVWF  FE1
0A9A:  MOVLW  04
0A9C:  MOVWF  01
0A9E:  MOVFF  FE6,FEE
0AA2:  DECFSZ 01,F
0AA4:  BRA    0A9E
.................... 					//store to buf 
.................... 					MB_Buffer[j]=make8(flcopy,0);	//high part 
0AA6:  CLRF   03
0AA8:  MOVLB  5
0AAA:  MOVF   x03,W
0AAC:  ADDLW  F8
0AAE:  MOVWF  FE9
0AB0:  MOVLW  03
0AB2:  ADDWFC 03,W
0AB4:  MOVWF  FEA
0AB6:  MOVFF  538,FEF
.................... 					j++; 
0ABA:  INCF   x03,F
.................... 					MB_Buffer[j]=make8(flcopy,1);	//high part 
0ABC:  CLRF   03
0ABE:  MOVF   x03,W
0AC0:  ADDLW  F8
0AC2:  MOVWF  FE9
0AC4:  MOVLW  03
0AC6:  ADDWFC 03,W
0AC8:  MOVWF  FEA
0ACA:  MOVFF  539,FEF
.................... 					j++; 
0ACE:  INCF   x03,F
.................... 					MB_Buffer[j]=make8(flcopy,2);	//high part 
0AD0:  CLRF   03
0AD2:  MOVF   x03,W
0AD4:  ADDLW  F8
0AD6:  MOVWF  FE9
0AD8:  MOVLW  03
0ADA:  ADDWFC 03,W
0ADC:  MOVWF  FEA
0ADE:  MOVFF  53A,FEF
.................... 					j++; 
0AE2:  INCF   x03,F
.................... 					MB_Buffer[j]=make8(flcopy,3);	//high part 
0AE4:  CLRF   03
0AE6:  MOVF   x03,W
0AE8:  ADDLW  F8
0AEA:  MOVWF  FE9
0AEC:  MOVLW  03
0AEE:  ADDWFC 03,W
0AF0:  MOVWF  FEA
0AF2:  MOVFF  53B,FEF
.................... 					j++; 
0AF6:  INCF   x03,F
.................... 					MB_Length+=4; 
0AF8:  MOVLW  04
0AFA:  MOVLB  4
0AFC:  ADDWF  xF8,F
.................... 					break; 
0AFE:  BRA    0D40
.................... 				case 0x19:	//KST0 
.................... 					//copy 
.................... 					memcpy(&flcopy,&KST0,4); 
0B00:  MOVLW  05
0B02:  MOVWF  FEA
0B04:  MOVLW  38
0B06:  MOVWF  FE9
0B08:  MOVLW  03
0B0A:  MOVWF  FE2
0B0C:  MOVLW  AC
0B0E:  MOVWF  FE1
0B10:  MOVLW  04
0B12:  MOVWF  01
0B14:  MOVFF  FE6,FEE
0B18:  DECFSZ 01,F
0B1A:  BRA    0B14
.................... 					//store to buf 
.................... 					MB_Buffer[j]=make8(flcopy,0);	//high part 
0B1C:  CLRF   03
0B1E:  MOVLB  5
0B20:  MOVF   x03,W
0B22:  ADDLW  F8
0B24:  MOVWF  FE9
0B26:  MOVLW  03
0B28:  ADDWFC 03,W
0B2A:  MOVWF  FEA
0B2C:  MOVFF  538,FEF
.................... 					j++; 
0B30:  INCF   x03,F
.................... 					MB_Buffer[j]=make8(flcopy,1);	//high part 
0B32:  CLRF   03
0B34:  MOVF   x03,W
0B36:  ADDLW  F8
0B38:  MOVWF  FE9
0B3A:  MOVLW  03
0B3C:  ADDWFC 03,W
0B3E:  MOVWF  FEA
0B40:  MOVFF  539,FEF
.................... 					j++; 
0B44:  INCF   x03,F
.................... 					MB_Buffer[j]=make8(flcopy,2);	//high part 
0B46:  CLRF   03
0B48:  MOVF   x03,W
0B4A:  ADDLW  F8
0B4C:  MOVWF  FE9
0B4E:  MOVLW  03
0B50:  ADDWFC 03,W
0B52:  MOVWF  FEA
0B54:  MOVFF  53A,FEF
.................... 					j++; 
0B58:  INCF   x03,F
.................... 					MB_Buffer[j]=make8(flcopy,3);	//high part 
0B5A:  CLRF   03
0B5C:  MOVF   x03,W
0B5E:  ADDLW  F8
0B60:  MOVWF  FE9
0B62:  MOVLW  03
0B64:  ADDWFC 03,W
0B66:  MOVWF  FEA
0B68:  MOVFF  53B,FEF
.................... 					j++; 
0B6C:  INCF   x03,F
.................... 					MB_Length+=4; 
0B6E:  MOVLW  04
0B70:  MOVLB  4
0B72:  ADDWF  xF8,F
.................... 					break; 
0B74:  BRA    0D40
.................... 				case 0x1A:	//KST1				 
.................... 					MB_Buffer[j]=0x00;	//high part 
0B76:  CLRF   03
0B78:  MOVLB  5
0B7A:  MOVF   x03,W
0B7C:  ADDLW  F8
0B7E:  MOVWF  FE9
0B80:  MOVLW  03
0B82:  ADDWFC 03,W
0B84:  MOVWF  FEA
0B86:  CLRF   FEF
.................... 					j++; 
0B88:  INCF   x03,F
.................... 					MB_Buffer[j]=0x00;	//low part 
0B8A:  CLRF   03
0B8C:  MOVF   x03,W
0B8E:  ADDLW  F8
0B90:  MOVWF  FE9
0B92:  MOVLW  03
0B94:  ADDWFC 03,W
0B96:  MOVWF  FEA
0B98:  CLRF   FEF
.................... 					j++; 
0B9A:  INCF   x03,F
.................... 					MB_Buffer[j]=0x00;	//low part 
0B9C:  CLRF   03
0B9E:  MOVF   x03,W
0BA0:  ADDLW  F8
0BA2:  MOVWF  FE9
0BA4:  MOVLW  03
0BA6:  ADDWFC 03,W
0BA8:  MOVWF  FEA
0BAA:  CLRF   FEF
.................... 					j++; 
0BAC:  INCF   x03,F
.................... 					MB_Buffer[j]=0x00;	//low part 
0BAE:  CLRF   03
0BB0:  MOVF   x03,W
0BB2:  ADDLW  F8
0BB4:  MOVWF  FE9
0BB6:  MOVLW  03
0BB8:  ADDWFC 03,W
0BBA:  MOVWF  FEA
0BBC:  CLRF   FEF
.................... 					j++; 
0BBE:  INCF   x03,F
.................... 					MB_Length+=4; 
0BC0:  MOVLW  04
0BC2:  MOVLB  4
0BC4:  ADDWF  xF8,F
.................... 					break; 
0BC6:  BRA    0D40
.................... 				case 0x1B:	//T0_CAL 
.................... 					MB_Buffer[j]=make8(T0_CAL,1);	//high part 
0BC8:  CLRF   03
0BCA:  MOVLB  5
0BCC:  MOVF   x03,W
0BCE:  ADDLW  F8
0BD0:  MOVWF  FE9
0BD2:  MOVLW  03
0BD4:  ADDWFC 03,W
0BD6:  MOVWF  FEA
0BD8:  MOVLB  3
0BDA:  MOVFF  3B1,FEF
.................... 					j++; 
0BDE:  MOVLB  5
0BE0:  INCF   x03,F
.................... 					MB_Buffer[j]=make8(T0_CAL,0);	//low part 
0BE2:  CLRF   03
0BE4:  MOVF   x03,W
0BE6:  ADDLW  F8
0BE8:  MOVWF  FE9
0BEA:  MOVLW  03
0BEC:  ADDWFC 03,W
0BEE:  MOVWF  FEA
0BF0:  MOVLB  3
0BF2:  MOVFF  3B0,FEF
.................... 					j++;								 
0BF6:  MOVLB  5
0BF8:  INCF   x03,F
.................... 					MB_Length+=2; 
0BFA:  MOVLW  02
0BFC:  MOVLB  4
0BFE:  ADDWF  xF8,F
.................... 					break; 
0C00:  BRA    0D40
.................... 				case 0x1C:	//T1_CAL 
.................... 					MB_Buffer[j]=make8(T1_CAL,1);	//high part 
0C02:  CLRF   03
0C04:  MOVLB  5
0C06:  MOVF   x03,W
0C08:  ADDLW  F8
0C0A:  MOVWF  FE9
0C0C:  MOVLW  03
0C0E:  ADDWFC 03,W
0C10:  MOVWF  FEA
0C12:  MOVLB  3
0C14:  MOVFF  3BD,FEF
.................... 					j++; 
0C18:  MOVLB  5
0C1A:  INCF   x03,F
.................... 					MB_Buffer[j]=make8(T1_CAL,0);	//low part 
0C1C:  CLRF   03
0C1E:  MOVF   x03,W
0C20:  ADDLW  F8
0C22:  MOVWF  FE9
0C24:  MOVLW  03
0C26:  ADDWFC 03,W
0C28:  MOVWF  FEA
0C2A:  MOVLB  3
0C2C:  MOVFF  3BC,FEF
.................... 					j++;								 
0C30:  MOVLB  5
0C32:  INCF   x03,F
.................... 					MB_Length+=2; 
0C34:  MOVLW  02
0C36:  MOVLB  4
0C38:  ADDWF  xF8,F
.................... 					break; 
0C3A:  BRA    0D40
.................... 				case 0x1D:	//TG_CAL 
.................... 					MB_Buffer[j]=make8(TG_CAL,1);	//high part 
0C3C:  CLRF   03
0C3E:  MOVLB  5
0C40:  MOVF   x03,W
0C42:  ADDLW  F8
0C44:  MOVWF  FE9
0C46:  MOVLW  03
0C48:  ADDWFC 03,W
0C4A:  MOVWF  FEA
0C4C:  MOVLB  3
0C4E:  MOVFF  3DB,FEF
.................... 					j++; 
0C52:  MOVLB  5
0C54:  INCF   x03,F
.................... 					MB_Buffer[j]=make8(TG_CAL,0);	//low part 
0C56:  CLRF   03
0C58:  MOVF   x03,W
0C5A:  ADDLW  F8
0C5C:  MOVWF  FE9
0C5E:  MOVLW  03
0C60:  ADDWFC 03,W
0C62:  MOVWF  FEA
0C64:  MOVLB  3
0C66:  MOVFF  3DA,FEF
.................... 					j++;								 
0C6A:  MOVLB  5
0C6C:  INCF   x03,F
.................... 					MB_Length+=2; 
0C6E:  MOVLW  02
0C70:  MOVLB  4
0C72:  ADDWF  xF8,F
.................... 					break; 
0C74:  BRA    0D40
.................... 				case 0x20:	//currentAlpha 
.................... 					MB_Buffer[j]=make8(currentAlpha,1);	//high part 
0C76:  CLRF   03
0C78:  MOVLB  5
0C7A:  MOVF   x03,W
0C7C:  ADDLW  F8
0C7E:  MOVWF  FE9
0C80:  MOVLW  03
0C82:  ADDWFC 03,W
0C84:  MOVWF  FEA
0C86:  MOVLB  3
0C88:  MOVFF  3DF,FEF
.................... 					j++; 
0C8C:  MOVLB  5
0C8E:  INCF   x03,F
.................... 					MB_Buffer[j]=make8(currentAlpha,0);	//low part 
0C90:  CLRF   03
0C92:  MOVF   x03,W
0C94:  ADDLW  F8
0C96:  MOVWF  FE9
0C98:  MOVLW  03
0C9A:  ADDWFC 03,W
0C9C:  MOVWF  FEA
0C9E:  MOVLB  3
0CA0:  MOVFF  3DE,FEF
.................... 					j++;								 
0CA4:  MOVLB  5
0CA6:  INCF   x03,F
.................... 					MB_Length+=2; 
0CA8:  MOVLW  02
0CAA:  MOVLB  4
0CAC:  ADDWF  xF8,F
.................... 					break; 
0CAE:  BRA    0D40
.................... 				case 0x21:	//currentBeta 
.................... 					MB_Buffer[j]=make8(currentBeta,1);	//high part 
0CB0:  CLRF   03
0CB2:  MOVLB  5
0CB4:  MOVF   x03,W
0CB6:  ADDLW  F8
0CB8:  MOVWF  FE9
0CBA:  MOVLW  03
0CBC:  ADDWFC 03,W
0CBE:  MOVWF  FEA
0CC0:  MOVLB  3
0CC2:  MOVFF  3E1,FEF
.................... 					j++; 
0CC6:  MOVLB  5
0CC8:  INCF   x03,F
.................... 					MB_Buffer[j]=make8(currentBeta,0);	//low part 
0CCA:  CLRF   03
0CCC:  MOVF   x03,W
0CCE:  ADDLW  F8
0CD0:  MOVWF  FE9
0CD2:  MOVLW  03
0CD4:  ADDWFC 03,W
0CD6:  MOVWF  FEA
0CD8:  MOVLB  3
0CDA:  MOVFF  3E0,FEF
.................... 					j++;								 
0CDE:  MOVLB  5
0CE0:  INCF   x03,F
.................... 					MB_Length+=2; 
0CE2:  MOVLW  02
0CE4:  MOVLB  4
0CE6:  ADDWF  xF8,F
.................... 					break; 
0CE8:  BRA    0D40
.................... 				case 0x22:	//currentGamma 
.................... 					MB_Buffer[j]=make8(currentGamma,1);	//high part 
0CEA:  CLRF   03
0CEC:  MOVLB  5
0CEE:  MOVF   x03,W
0CF0:  ADDLW  F8
0CF2:  MOVWF  FE9
0CF4:  MOVLW  03
0CF6:  ADDWFC 03,W
0CF8:  MOVWF  FEA
0CFA:  MOVLB  3
0CFC:  MOVFF  3E3,FEF
.................... 					j++; 
0D00:  MOVLB  5
0D02:  INCF   x03,F
.................... 					MB_Buffer[j]=make8(currentGamma,0);	//low part 
0D04:  CLRF   03
0D06:  MOVF   x03,W
0D08:  ADDLW  F8
0D0A:  MOVWF  FE9
0D0C:  MOVLW  03
0D0E:  ADDWFC 03,W
0D10:  MOVWF  FEA
0D12:  MOVLB  3
0D14:  MOVFF  3E2,FEF
.................... 					j++;								 
0D18:  MOVLB  5
0D1A:  INCF   x03,F
.................... 					MB_Length+=2; 
0D1C:  MOVLW  02
0D1E:  MOVLB  4
0D20:  ADDWF  xF8,F
.................... 					break; 
0D22:  BRA    0D40
.................... 				default:	//no valid registers							 
.................... 					MB_Buffer[1]|=0x80; 
0D24:  MOVLB  3
0D26:  BSF    xF9.7
.................... 					MB_Buffer[2]=illegal_data_value; 
0D28:  MOVLW  03
0D2A:  MOVWF  xFA
.................... 					MB_Length=5; 
0D2C:  MOVLW  05
0D2E:  MOVLB  4
0D30:  MOVWF  xF8
.................... 					ExcReq++; 
0D32:  INCF   xFD,F
0D34:  BTFSC  FD8.2
0D36:  INCF   xFE,F
.................... 					ValidReq--;  
0D38:  MOVF   xF9,W
0D3A:  BTFSC  FD8.2
0D3C:  DECF   xFA,F
0D3E:  DECF   xF9,F
.................... 			};	 
.................... } 
0D40:  MOVLB  0
0D42:  GOTO   1C9A (RETURN)
.................... // 
.................... static	int8	bytecount; 
.................... //write registers 
.................... void	SetRegData(int8 reg){ 
.................... 	int32	flcopy; 
.................... 	restart_wdt(); 
0D46:  CLRWDT
.................... 			switch(reg){ 
0D48:  MOVLB  5
0D4A:  MOVF   x37,W
0D4C:  XORLW  00
0D4E:  MOVLB  0
0D50:  BZ    0DF4
0D52:  XORLW  01
0D54:  BZ    0DFC
0D56:  XORLW  03
0D58:  BZ    0E04
0D5A:  XORLW  01
0D5C:  BZ    0E0C
0D5E:  XORLW  07
0D60:  BZ    0E14
0D62:  XORLW  01
0D64:  BZ    0E1C
0D66:  XORLW  03
0D68:  BZ    0E24
0D6A:  XORLW  01
0D6C:  BZ    0E2C
0D6E:  XORLW  0F
0D70:  BTFSC  FD8.2
0D72:  BRA    0E34
0D74:  XORLW  01
0D76:  BTFSC  FD8.2
0D78:  BRA    0E3C
0D7A:  XORLW  03
0D7C:  BTFSC  FD8.2
0D7E:  BRA    0E44
0D80:  XORLW  01
0D82:  BTFSC  FD8.2
0D84:  BRA    0E4C
0D86:  XORLW  07
0D88:  BTFSC  FD8.2
0D8A:  BRA    0E82
0D8C:  XORLW  01
0D8E:  BTFSC  FD8.2
0D90:  BRA    0EB8
0D92:  XORLW  03
0D94:  BTFSC  FD8.2
0D96:  BRA    0EEE
0D98:  XORLW  01
0D9A:  BTFSC  FD8.2
0D9C:  BRA    0F24
0D9E:  XORLW  1F
0DA0:  BTFSC  FD8.2
0DA2:  BRA    0F5A
0DA4:  XORLW  01
0DA6:  BTFSC  FD8.2
0DA8:  BRA    0F90
0DAA:  XORLW  03
0DAC:  BTFSC  FD8.2
0DAE:  BRA    0FC6
0DB0:  XORLW  01
0DB2:  BTFSC  FD8.2
0DB4:  BRA    0FCE
0DB6:  XORLW  07
0DB8:  BTFSC  FD8.2
0DBA:  BRA    1004
0DBC:  XORLW  01
0DBE:  BTFSC  FD8.2
0DC0:  BRA    100C
0DC2:  XORLW  03
0DC4:  BTFSC  FD8.2
0DC6:  BRA    1014
0DC8:  XORLW  01
0DCA:  BTFSC  FD8.2
0DCC:  BRA    101C
0DCE:  XORLW  0F
0DD0:  BTFSC  FD8.2
0DD2:  BRA    109E
0DD4:  XORLW  01
0DD6:  BTFSC  FD8.2
0DD8:  BRA    1120
0DDA:  XORLW  03
0DDC:  BTFSC  FD8.2
0DDE:  BRA    11A2
0DE0:  XORLW  01
0DE2:  BTFSC  FD8.2
0DE4:  BRA    11AA
0DE6:  XORLW  07
0DE8:  BTFSC  FD8.2
0DEA:  BRA    11E0
0DEC:  XORLW  01
0DEE:  BTFSC  FD8.2
0DF0:  BRA    1216
0DF2:  BRA    124C
.................... 				case 0x00:	//dummy command					 
.................... 					j+=2;	//set next data 
0DF4:  MOVLW  02
0DF6:  MOVLB  5
0DF8:  ADDWF  x03,F
.................... 					break; 
0DFA:  BRA    126A
.................... 				case 0x01:	//dummy command					 
.................... 					j+=2;	//set next data 
0DFC:  MOVLW  02
0DFE:  MOVLB  5
0E00:  ADDWF  x03,F
.................... 					break; 
0E02:  BRA    126A
.................... 				case 0x02:	//dummy command					 
.................... 					j+=2;	//set next data 
0E04:  MOVLW  02
0E06:  MOVLB  5
0E08:  ADDWF  x03,F
.................... 					break; 
0E0A:  BRA    126A
.................... 				case 0x03:	//dummy command					 
.................... 					j+=2;	//set next data 
0E0C:  MOVLW  02
0E0E:  MOVLB  5
0E10:  ADDWF  x03,F
.................... 					break; 
0E12:  BRA    126A
.................... 				case 0x04:	//dummy command					 
.................... 					j+=2;	//set next data 
0E14:  MOVLW  02
0E16:  MOVLB  5
0E18:  ADDWF  x03,F
.................... 					break; 
0E1A:  BRA    126A
.................... 				case 0x05:	//dummy command					 
.................... 					j+=2;	//set next data 
0E1C:  MOVLW  02
0E1E:  MOVLB  5
0E20:  ADDWF  x03,F
.................... 					break; 
0E22:  BRA    126A
.................... 				case 0x06:	//dummy command					 
.................... 					j+=2;	//set next data 
0E24:  MOVLW  02
0E26:  MOVLB  5
0E28:  ADDWF  x03,F
.................... 					break; 
0E2A:  BRA    126A
.................... 				case 0x07:	//dummy command					 
.................... 					j+=2;	//set next data 
0E2C:  MOVLW  02
0E2E:  MOVLB  5
0E30:  ADDWF  x03,F
.................... 					break; 
0E32:  BRA    126A
.................... 				case 0x08:	//dummy command					 
.................... 					j+=2;	//set next data 
0E34:  MOVLW  02
0E36:  MOVLB  5
0E38:  ADDWF  x03,F
.................... 					break; 
0E3A:  BRA    126A
.................... 				case 0x09:	//dummy command					 
.................... 					j+=2;	//set next data 
0E3C:  MOVLW  02
0E3E:  MOVLB  5
0E40:  ADDWF  x03,F
.................... 					break; 
0E42:  BRA    126A
.................... 				case 0x0A:	//dummy command					 
.................... 					j+=2;	//set next data 
0E44:  MOVLW  02
0E46:  MOVLB  5
0E48:  ADDWF  x03,F
.................... 					break; 
0E4A:  BRA    126A
.................... 				case 0x0B:	//SAW_A0 
.................... 					//read data from buffer 
.................... 					SAW_A0=make16(MB_Buffer[j],MB_Buffer[j+1]); 
0E4C:  CLRF   03
0E4E:  MOVLB  5
0E50:  MOVF   x03,W
0E52:  ADDLW  F8
0E54:  MOVWF  FE9
0E56:  MOVLW  03
0E58:  ADDWFC 03,W
0E5A:  MOVWF  FEA
0E5C:  MOVFF  FEF,53C
0E60:  MOVLW  01
0E62:  ADDWF  x03,W
0E64:  CLRF   03
0E66:  ADDLW  F8
0E68:  MOVWF  FE9
0E6A:  MOVLW  03
0E6C:  ADDWFC 03,W
0E6E:  MOVWF  FEA
0E70:  MOVFF  FEF,53D
0E74:  MOVFF  53C,3CB
0E78:  MOVFF  53D,3CA
.................... 					j+=2;	//set next data 
0E7C:  MOVLW  02
0E7E:  ADDWF  x03,F
.................... 					break; 
0E80:  BRA    126A
.................... 				case 0x0C:	//SAW_A1 
.................... 					//read data from buffer 
.................... 					SAW_A1=make16(MB_Buffer[j],MB_Buffer[j+1]); 
0E82:  CLRF   03
0E84:  MOVLB  5
0E86:  MOVF   x03,W
0E88:  ADDLW  F8
0E8A:  MOVWF  FE9
0E8C:  MOVLW  03
0E8E:  ADDWFC 03,W
0E90:  MOVWF  FEA
0E92:  MOVFF  FEF,53C
0E96:  MOVLW  01
0E98:  ADDWF  x03,W
0E9A:  CLRF   03
0E9C:  ADDLW  F8
0E9E:  MOVWF  FE9
0EA0:  MOVLW  03
0EA2:  ADDWFC 03,W
0EA4:  MOVWF  FEA
0EA6:  MOVFF  FEF,53D
0EAA:  MOVFF  53C,3CF
0EAE:  MOVFF  53D,3CE
.................... 					j+=2;	//set next data 
0EB2:  MOVLW  02
0EB4:  ADDWF  x03,F
.................... 					break; 
0EB6:  BRA    126A
.................... 				case 0x0D:	//KU0 
.................... 					//read data from buffer 
.................... 					AmpCoef0=make16(MB_Buffer[j],MB_Buffer[j+1]); 
0EB8:  CLRF   03
0EBA:  MOVLB  5
0EBC:  MOVF   x03,W
0EBE:  ADDLW  F8
0EC0:  MOVWF  FE9
0EC2:  MOVLW  03
0EC4:  ADDWFC 03,W
0EC6:  MOVWF  FEA
0EC8:  MOVFF  FEF,53C
0ECC:  MOVLW  01
0ECE:  ADDWF  x03,W
0ED0:  CLRF   03
0ED2:  ADDLW  F8
0ED4:  MOVWF  FE9
0ED6:  MOVLW  03
0ED8:  ADDWFC 03,W
0EDA:  MOVWF  FEA
0EDC:  MOVFF  FEF,53D
0EE0:  MOVFF  53C,3AB
0EE4:  MOVFF  53D,3AA
.................... 					j+=2;	//set next data 
0EE8:  MOVLW  02
0EEA:  ADDWF  x03,F
.................... 					break; 
0EEC:  BRA    126A
.................... 				case 0x0E:	//KU1 
.................... 					//read data from buffer 
.................... 					AmpCoef1=make16(MB_Buffer[j],MB_Buffer[j+1]); 
0EEE:  CLRF   03
0EF0:  MOVLB  5
0EF2:  MOVF   x03,W
0EF4:  ADDLW  F8
0EF6:  MOVWF  FE9
0EF8:  MOVLW  03
0EFA:  ADDWFC 03,W
0EFC:  MOVWF  FEA
0EFE:  MOVFF  FEF,53C
0F02:  MOVLW  01
0F04:  ADDWF  x03,W
0F06:  CLRF   03
0F08:  ADDLW  F8
0F0A:  MOVWF  FE9
0F0C:  MOVLW  03
0F0E:  ADDWFC 03,W
0F10:  MOVWF  FEA
0F12:  MOVFF  FEF,53D
0F16:  MOVFF  53C,3B7
0F1A:  MOVFF  53D,3B6
.................... 					j+=2;	//set next data 
0F1E:  MOVLW  02
0F20:  ADDWF  x03,F
.................... 					break; 
0F22:  BRA    126A
.................... 				case 0x0F:	//TAQ 
.................... 					//read data from buffer 
.................... 					TAQ=make16(MB_Buffer[j],MB_Buffer[j+1]); 
0F24:  CLRF   03
0F26:  MOVLB  5
0F28:  MOVF   x03,W
0F2A:  ADDLW  F8
0F2C:  MOVWF  FE9
0F2E:  MOVLW  03
0F30:  ADDWFC 03,W
0F32:  MOVWF  FEA
0F34:  MOVFF  FEF,53C
0F38:  MOVLW  01
0F3A:  ADDWF  x03,W
0F3C:  CLRF   03
0F3E:  ADDLW  F8
0F40:  MOVWF  FE9
0F42:  MOVLW  03
0F44:  ADDWFC 03,W
0F46:  MOVWF  FEA
0F48:  MOVFF  FEF,53D
0F4C:  MOVFF  53C,3C1
0F50:  MOVFF  53D,3C0
.................... 					j+=2;	//set next data 
0F54:  MOVLW  02
0F56:  ADDWF  x03,F
.................... 					break; 
0F58:  BRA    126A
.................... 				case 0x10:	//FWDT 
.................... 					//read data from buffer 
.................... 					FWDT=make16(MB_Buffer[j],MB_Buffer[j+1]); 
0F5A:  CLRF   03
0F5C:  MOVLB  5
0F5E:  MOVF   x03,W
0F60:  ADDLW  F8
0F62:  MOVWF  FE9
0F64:  MOVLW  03
0F66:  ADDWFC 03,W
0F68:  MOVWF  FEA
0F6A:  MOVFF  FEF,53C
0F6E:  MOVLW  01
0F70:  ADDWF  x03,W
0F72:  CLRF   03
0F74:  ADDLW  F8
0F76:  MOVWF  FE9
0F78:  MOVLW  03
0F7A:  ADDWFC 03,W
0F7C:  MOVWF  FEA
0F7E:  MOVFF  FEF,53D
0F82:  MOVFF  53C,3C3
0F86:  MOVFF  53D,3C2
.................... 					j+=2;	//set next data 
0F8A:  MOVLW  02
0F8C:  ADDWF  x03,F
.................... 					break; 
0F8E:  BRA    126A
.................... 				case 0x11:	//PCOUNT 
.................... 					//read data from buffer 
.................... 					PCOUNT=make16(MB_Buffer[j],MB_Buffer[j+1]); 
0F90:  CLRF   03
0F92:  MOVLB  5
0F94:  MOVF   x03,W
0F96:  ADDLW  F8
0F98:  MOVWF  FE9
0F9A:  MOVLW  03
0F9C:  ADDWFC 03,W
0F9E:  MOVWF  FEA
0FA0:  MOVFF  FEF,53C
0FA4:  MOVLW  01
0FA6:  ADDWF  x03,W
0FA8:  CLRF   03
0FAA:  ADDLW  F8
0FAC:  MOVWF  FE9
0FAE:  MOVLW  03
0FB0:  ADDWFC 03,W
0FB2:  MOVWF  FEA
0FB4:  MOVFF  FEF,53D
0FB8:  MOVFF  53C,3C5
0FBC:  MOVFF  53D,3C4
.................... 					j+=2;	//set next data 
0FC0:  MOVLW  02
0FC2:  ADDWF  x03,F
.................... 					break; 
0FC4:  BRA    126A
.................... 				case 0x12:	// 
.................... 					j+=2;	//set next data 
0FC6:  MOVLW  02
0FC8:  MOVLB  5
0FCA:  ADDWF  x03,F
.................... 					break; 
0FCC:  BRA    126A
.................... 				case 0x13:	// 
.................... 					Addr=make16(MB_Buffer[j],MB_Buffer[j+1]); 
0FCE:  CLRF   03
0FD0:  MOVLB  5
0FD2:  MOVF   x03,W
0FD4:  ADDLW  F8
0FD6:  MOVWF  FE9
0FD8:  MOVLW  03
0FDA:  ADDWFC 03,W
0FDC:  MOVWF  FEA
0FDE:  MOVFF  FEF,53C
0FE2:  MOVLW  01
0FE4:  ADDWF  x03,W
0FE6:  CLRF   03
0FE8:  ADDLW  F8
0FEA:  MOVWF  FE9
0FEC:  MOVLW  03
0FEE:  ADDWFC 03,W
0FF0:  MOVWF  FEA
0FF2:  MOVFF  FEF,53D
0FF6:  MOVFF  53C,3E7
0FFA:  MOVFF  53D,3E6
.................... 					j+=2;	//set next data 
0FFE:  MOVLW  02
1000:  ADDWF  x03,F
.................... 					break; 
1002:  BRA    126A
.................... 				case 0x14:	//Valid request register	- no acton 
.................... 					j+=2;	//set next data 
1004:  MOVLW  02
1006:  MOVLB  5
1008:  ADDWF  x03,F
.................... 					break; 
100A:  BRA    126A
.................... 				case 0x15:	//CRC error register - no action 
.................... 					j+=2;	//set next data 
100C:  MOVLW  02
100E:  MOVLB  5
1010:  ADDWF  x03,F
.................... 					break; 
1012:  BRA    126A
.................... 				case 0x16:	//Exception register - no action 
.................... 					j+=2;	//set next data 
1014:  MOVLW  02
1016:  MOVLB  5
1018:  ADDWF  x03,F
.................... 					break; 
101A:  BRA    126A
.................... 				case 0x17:	//KGT 
.................... 					flcopy=make32(MB_Buffer[j+3],MB_Buffer[j+2],MB_Buffer[j+1],MB_Buffer[j]); 
101C:  MOVLW  03
101E:  MOVLB  5
1020:  ADDWF  x03,W
1022:  CLRF   03
1024:  ADDLW  F8
1026:  MOVWF  FE9
1028:  MOVLW  03
102A:  ADDWFC 03,W
102C:  MOVWF  FEA
102E:  MOVFF  FEF,53C
1032:  MOVLW  02
1034:  ADDWF  x03,W
1036:  CLRF   03
1038:  ADDLW  F8
103A:  MOVWF  FE9
103C:  MOVLW  03
103E:  ADDWFC 03,W
1040:  MOVWF  FEA
1042:  MOVFF  FEF,53D
1046:  MOVLW  01
1048:  ADDWF  x03,W
104A:  CLRF   03
104C:  ADDLW  F8
104E:  MOVWF  FE9
1050:  MOVLW  03
1052:  ADDWFC 03,W
1054:  MOVWF  FEA
1056:  MOVFF  FEF,53E
105A:  CLRF   03
105C:  MOVF   x03,W
105E:  ADDLW  F8
1060:  MOVWF  FE9
1062:  MOVLW  03
1064:  ADDWFC 03,W
1066:  MOVWF  FEA
1068:  MOVFF  FEF,53F
106C:  MOVFF  53C,53B
1070:  MOVFF  53D,53A
1074:  MOVFF  53E,539
1078:  MOVFF  53F,538
.................... 					memcpy(&KGT,&flcopy,4); 
107C:  MOVLW  03
107E:  MOVWF  FEA
1080:  MOVLW  D2
1082:  MOVWF  FE9
1084:  MOVLW  05
1086:  MOVWF  FE2
1088:  MOVLW  38
108A:  MOVWF  FE1
108C:  MOVLW  04
108E:  MOVWF  01
1090:  MOVFF  FE6,FEE
1094:  DECFSZ 01,F
1096:  BRA    1090
.................... 					j+=4;	//set next data 
1098:  MOVLW  04
109A:  ADDWF  x03,F
.................... 					break; 
109C:  BRA    126A
.................... 				case 0x18:	//KGU 
.................... 					flcopy=make32(MB_Buffer[j+3],MB_Buffer[j+2],MB_Buffer[j+1],MB_Buffer[j]); 
109E:  MOVLW  03
10A0:  MOVLB  5
10A2:  ADDWF  x03,W
10A4:  CLRF   03
10A6:  ADDLW  F8
10A8:  MOVWF  FE9
10AA:  MOVLW  03
10AC:  ADDWFC 03,W
10AE:  MOVWF  FEA
10B0:  MOVFF  FEF,53C
10B4:  MOVLW  02
10B6:  ADDWF  x03,W
10B8:  CLRF   03
10BA:  ADDLW  F8
10BC:  MOVWF  FE9
10BE:  MOVLW  03
10C0:  ADDWFC 03,W
10C2:  MOVWF  FEA
10C4:  MOVFF  FEF,53D
10C8:  MOVLW  01
10CA:  ADDWF  x03,W
10CC:  CLRF   03
10CE:  ADDLW  F8
10D0:  MOVWF  FE9
10D2:  MOVLW  03
10D4:  ADDWFC 03,W
10D6:  MOVWF  FEA
10D8:  MOVFF  FEF,53E
10DC:  CLRF   03
10DE:  MOVF   x03,W
10E0:  ADDLW  F8
10E2:  MOVWF  FE9
10E4:  MOVLW  03
10E6:  ADDWFC 03,W
10E8:  MOVWF  FEA
10EA:  MOVFF  FEF,53F
10EE:  MOVFF  53C,53B
10F2:  MOVFF  53D,53A
10F6:  MOVFF  53E,539
10FA:  MOVFF  53F,538
.................... 					memcpy(&KGU,&flcopy,4); 
10FE:  MOVLW  03
1100:  MOVWF  FEA
1102:  MOVLW  D6
1104:  MOVWF  FE9
1106:  MOVLW  05
1108:  MOVWF  FE2
110A:  MOVLW  38
110C:  MOVWF  FE1
110E:  MOVLW  04
1110:  MOVWF  01
1112:  MOVFF  FE6,FEE
1116:  DECFSZ 01,F
1118:  BRA    1112
.................... 					j+=4;	//set next data 
111A:  MOVLW  04
111C:  ADDWF  x03,F
.................... 					break; 
111E:  BRA    126A
.................... 				case 0x19:	//KST0 
.................... 					flcopy=make32(MB_Buffer[j+3],MB_Buffer[j+2],MB_Buffer[j+1],MB_Buffer[j]); 
1120:  MOVLW  03
1122:  MOVLB  5
1124:  ADDWF  x03,W
1126:  CLRF   03
1128:  ADDLW  F8
112A:  MOVWF  FE9
112C:  MOVLW  03
112E:  ADDWFC 03,W
1130:  MOVWF  FEA
1132:  MOVFF  FEF,53C
1136:  MOVLW  02
1138:  ADDWF  x03,W
113A:  CLRF   03
113C:  ADDLW  F8
113E:  MOVWF  FE9
1140:  MOVLW  03
1142:  ADDWFC 03,W
1144:  MOVWF  FEA
1146:  MOVFF  FEF,53D
114A:  MOVLW  01
114C:  ADDWF  x03,W
114E:  CLRF   03
1150:  ADDLW  F8
1152:  MOVWF  FE9
1154:  MOVLW  03
1156:  ADDWFC 03,W
1158:  MOVWF  FEA
115A:  MOVFF  FEF,53E
115E:  CLRF   03
1160:  MOVF   x03,W
1162:  ADDLW  F8
1164:  MOVWF  FE9
1166:  MOVLW  03
1168:  ADDWFC 03,W
116A:  MOVWF  FEA
116C:  MOVFF  FEF,53F
1170:  MOVFF  53C,53B
1174:  MOVFF  53D,53A
1178:  MOVFF  53E,539
117C:  MOVFF  53F,538
.................... 					memcpy(&KST0,&flcopy,4); 
1180:  MOVLW  03
1182:  MOVWF  FEA
1184:  MOVLW  AC
1186:  MOVWF  FE9
1188:  MOVLW  05
118A:  MOVWF  FE2
118C:  MOVLW  38
118E:  MOVWF  FE1
1190:  MOVLW  04
1192:  MOVWF  01
1194:  MOVFF  FE6,FEE
1198:  DECFSZ 01,F
119A:  BRA    1194
.................... 					j+=4;	//set next data 
119C:  MOVLW  04
119E:  ADDWF  x03,F
.................... 					break; 
11A0:  BRA    126A
.................... 				case 0x1A:	//dummy command			 
.................... 					j+=4;	//set next data 
11A2:  MOVLW  04
11A4:  MOVLB  5
11A6:  ADDWF  x03,F
.................... 					break; 
11A8:  BRA    126A
.................... 				case 0x1B:	//T0_CAL 
.................... 					//read data from buffer 
.................... 					T0_CAL=make16(MB_Buffer[j],MB_Buffer[j+1]); 
11AA:  CLRF   03
11AC:  MOVLB  5
11AE:  MOVF   x03,W
11B0:  ADDLW  F8
11B2:  MOVWF  FE9
11B4:  MOVLW  03
11B6:  ADDWFC 03,W
11B8:  MOVWF  FEA
11BA:  MOVFF  FEF,53C
11BE:  MOVLW  01
11C0:  ADDWF  x03,W
11C2:  CLRF   03
11C4:  ADDLW  F8
11C6:  MOVWF  FE9
11C8:  MOVLW  03
11CA:  ADDWFC 03,W
11CC:  MOVWF  FEA
11CE:  MOVFF  FEF,53D
11D2:  MOVFF  53C,3B1
11D6:  MOVFF  53D,3B0
.................... 					j+=2;	//set next data 
11DA:  MOVLW  02
11DC:  ADDWF  x03,F
.................... 					break; 
11DE:  BRA    126A
.................... 				case 0x1C:	//T1_CAL 
.................... 					//read data from buffer 
.................... 					T1_CAL=make16(MB_Buffer[j],MB_Buffer[j+1]); 
11E0:  CLRF   03
11E2:  MOVLB  5
11E4:  MOVF   x03,W
11E6:  ADDLW  F8
11E8:  MOVWF  FE9
11EA:  MOVLW  03
11EC:  ADDWFC 03,W
11EE:  MOVWF  FEA
11F0:  MOVFF  FEF,53C
11F4:  MOVLW  01
11F6:  ADDWF  x03,W
11F8:  CLRF   03
11FA:  ADDLW  F8
11FC:  MOVWF  FE9
11FE:  MOVLW  03
1200:  ADDWFC 03,W
1202:  MOVWF  FEA
1204:  MOVFF  FEF,53D
1208:  MOVFF  53C,3BD
120C:  MOVFF  53D,3BC
.................... 					j+=2;	//set next data 
1210:  MOVLW  02
1212:  ADDWF  x03,F
.................... 					break; 
1214:  BRA    126A
.................... 				case 0x1D:	//TG_CAL 
.................... 					//read data from buffer 
.................... 					TG_CAL=make16(MB_Buffer[j],MB_Buffer[j+1]); 
1216:  CLRF   03
1218:  MOVLB  5
121A:  MOVF   x03,W
121C:  ADDLW  F8
121E:  MOVWF  FE9
1220:  MOVLW  03
1222:  ADDWFC 03,W
1224:  MOVWF  FEA
1226:  MOVFF  FEF,53C
122A:  MOVLW  01
122C:  ADDWF  x03,W
122E:  CLRF   03
1230:  ADDLW  F8
1232:  MOVWF  FE9
1234:  MOVLW  03
1236:  ADDWFC 03,W
1238:  MOVWF  FEA
123A:  MOVFF  FEF,53D
123E:  MOVFF  53C,3DB
1242:  MOVFF  53D,3DA
.................... 					j+=2;	//set next data 
1246:  MOVLW  02
1248:  ADDWF  x03,F
.................... 					break; 
124A:  BRA    126A
.................... 				default:	//no valid registers							 
.................... 					MB_Buffer[1]|=0x80; 
124C:  MOVLB  3
124E:  BSF    xF9.7
.................... 					MB_Buffer[2]=illegal_data_value; 
1250:  MOVLW  03
1252:  MOVWF  xFA
.................... 					MB_Length=5; 
1254:  MOVLW  05
1256:  MOVLB  4
1258:  MOVWF  xF8
.................... 					ExcReq++; 
125A:  INCF   xFD,F
125C:  BTFSC  FD8.2
125E:  INCF   xFE,F
.................... 					ValidReq--; 
1260:  MOVF   xF9,W
1262:  BTFSC  FD8.2
1264:  DECF   xFA,F
1266:  DECF   xF9,F
1268:  MOVLB  5
.................... 			};	 
.................... } 
126A:  MOVLB  0
126C:  GOTO   1D00 (RETURN)
.................... // 
.................... //timer 2 interrupt vector - packet recognition 
.................... #INT_TIMER1 
.................... void	Reaction(void){ 
.................... 	int8	StAddr,EnAddr;	 
.................... 	int8	bytecount; 
.................... 	int16	k,l; 
.................... 	//end of tramsmittion process 
.................... 	disable_interrupts(INT_RDA); 
*
1A1E:  BCF    F9D.5
.................... 	output_high(STAT);	//on led 
1A20:  BCF    F94.0
1A22:  BSF    F8B.0
.................... 	// 
.................... 	if (MB_Length<4)	goto exit;	//exit if to small 
1A24:  MOVLB  4
1A26:  MOVF   xF8,W
1A28:  SUBLW  03
1A2A:  BNC   1A2E
1A2C:  BRA    1FCC
.................... 	//detect adress 
.................... 	if((MB_Buffer[0]!=make8(Addr,0))&&(MB_Buffer[0]!=0))	goto exit;	//if not broadcast & not qwn address - then exit 
1A2E:  MOVLB  3
1A30:  MOVF   xE6,W
1A32:  SUBWF  xF8,W
1A34:  BZ    1A3E
1A36:  MOVF   xF8,F
1A38:  BZ    1A3E
1A3A:  MOVLB  4
1A3C:  BRA    1FCC
.................... 	//calculate CRC 
.................... 	CRCc=ModbusCRC(MB_Buffer,MB_Length-2); 
1A3E:  MOVLW  02
1A40:  MOVLB  4
1A42:  SUBWF  xF8,W
1A44:  MOVLB  5
1A46:  MOVWF  x37
1A48:  MOVLW  03
1A4A:  MOVWF  x39
1A4C:  MOVLW  F8
1A4E:  MOVWF  x38
1A50:  MOVFF  537,53A
1A54:  MOVLB  0
1A56:  CALL   03D0
1A5A:  MOVFF  02,502
1A5E:  MOVFF  01,501
.................... 	CRCr=make16(MB_Buffer[MB_Length-2],MB_Buffer[MB_Length-1]); 
1A62:  MOVLW  02
1A64:  MOVLB  4
1A66:  SUBWF  xF8,W
1A68:  CLRF   03
1A6A:  ADDLW  F8
1A6C:  MOVWF  FE9
1A6E:  MOVLW  03
1A70:  ADDWFC 03,W
1A72:  MOVWF  FEA
1A74:  MOVFF  FEF,537
1A78:  MOVLW  01
1A7A:  SUBWF  xF8,W
1A7C:  CLRF   03
1A7E:  ADDLW  F8
1A80:  MOVWF  FE9
1A82:  MOVLW  03
1A84:  ADDWFC 03,W
1A86:  MOVWF  FEA
1A88:  MOVFF  FEF,538
1A8C:  MOVFF  537,500
1A90:  MOVFF  538,4FF
.................... 	// 
.................... 	if(CRCc!=CRCr){				//if error CRC then exit 
1A94:  MOVF   xFF,W
1A96:  MOVLB  5
1A98:  SUBWF  x01,W
1A9A:  BNZ   1AA2
1A9C:  MOVF   x00,W
1A9E:  SUBWF  x02,W
1AA0:  BZ    1AAE
.................... 		CRCReq++;	 
1AA2:  MOVLB  4
1AA4:  INCF   xFB,F
1AA6:  BTFSC  FD8.2
1AA8:  INCF   xFC,F
.................... 		goto exit; 
1AAA:  BRA    1FCC
1AAC:  MOVLB  5
.................... 	}; 
.................... 	//proceed command 
.................... 	//analizing function code 
.................... 	switch(MB_Buffer[1]){ 
1AAE:  MOVLB  3
1AB0:  MOVF   xF9,W
1AB2:  XORLW  42
1AB4:  MOVLB  0
1AB6:  BZ    1ADE
1AB8:  XORLW  01
1ABA:  BTFSC  FD8.2
1ABC:  BRA    1BA0
1ABE:  XORLW  07
1AC0:  BTFSC  FD8.2
1AC2:  BRA    1C60
1AC4:  XORLW  01
1AC6:  BTFSC  FD8.2
1AC8:  BRA    1CBE
1ACA:  XORLW  20
1ACC:  BTFSC  FD8.2
1ACE:  BRA    1D2A
1AD0:  XORLW  0F
1AD2:  BTFSC  FD8.2
1AD4:  BRA    1D5C
1AD6:  XORLW  01
1AD8:  BTFSC  FD8.2
1ADA:  BRA    1EC8
1ADC:  BRA    1F28
.................... 		//CMODE 
.................... 		case	0x42: 
.................... 				if(MB_Length==5){ 
1ADE:  MOVLB  4
1AE0:  MOVF   xF8,W
1AE2:  SUBLW  05
1AE4:  BNZ   1B8A
.................... 					switch(MB_Buffer[2]){ 
1AE6:  MOVLB  3
1AE8:  MOVF   xFA,W
1AEA:  XORLW  00
1AEC:  MOVLB  0
1AEE:  BZ    1AFA
1AF0:  XORLW  01
1AF2:  BZ    1B10
1AF4:  XORLW  03
1AF6:  BZ    1B6E
1AF8:  BRA    1B74
.................... 						case	0x00:	//normal cycle 
.................... 							OneCycle=0;	//clear one cycle flag 
1AFA:  MOVLB  3
1AFC:  BCF    xC6.0
.................... 							DaqState=DaqStart;	//start new measuring 
1AFE:  MOVLW  01
1B00:  MOVWF  xF7
.................... 							MB_Length=4; 
1B02:  MOVLW  04
1B04:  MOVLB  4
1B06:  MOVWF  xF8
.................... 							ValidReq++; 
1B08:  INCF   xF9,F
1B0A:  BTFSC  FD8.2
1B0C:  INCF   xFA,F
.................... 							break; 
1B0E:  BRA    1B88
.................... 						case	0x01: 
.................... 							OneCycle=1;	//set one cycle flag 
1B10:  MOVLB  3
1B12:  BSF    xC6.0
.................... 							DaqState=DaqStart;	//set new cycle 
1B14:  MOVLW  01
1B16:  MOVWF  xF7
.................... 							for(k=0; k<PCOUNT; k++){ 
1B18:  MOVLB  5
1B1A:  CLRF   x34
1B1C:  CLRF   x33
1B1E:  MOVF   x34,W
1B20:  MOVLB  3
1B22:  SUBWF  xC5,W
1B24:  BNC   1B60
1B26:  BNZ   1B38
1B28:  MOVF   xC4,W
1B2A:  MOVLB  5
1B2C:  SUBWF  x33,W
1B2E:  BTFSS  FD8.0
1B30:  BRA    1B36
1B32:  MOVLB  3
1B34:  BRA    1B60
1B36:  MOVLB  3
.................... 								gam_buf0[k]=0;	//clear measuring buffer 
1B38:  BCF    FD8.0
1B3A:  MOVLB  5
1B3C:  RLCF   x33,W
1B3E:  MOVWF  02
1B40:  RLCF   x34,W
1B42:  MOVWF  03
1B44:  MOVF   02,W
1B46:  ADDLW  A4
1B48:  MOVWF  FE9
1B4A:  MOVLW  02
1B4C:  ADDWFC 03,W
1B4E:  MOVWF  FEA
1B50:  CLRF   FEC
1B52:  MOVF   FED,F
1B54:  CLRF   FEF
.................... 								}; 
1B56:  INCF   x33,F
1B58:  BTFSC  FD8.2
1B5A:  INCF   x34,F
1B5C:  BRA    1B1E
1B5E:  MOVLB  3
.................... 							MB_Length=4; 
1B60:  MOVLW  04
1B62:  MOVLB  4
1B64:  MOVWF  xF8
.................... 							ValidReq++; 
1B66:  INCF   xF9,F
1B68:  BTFSC  FD8.2
1B6A:  INCF   xFA,F
.................... 							break; 
1B6C:  BRA    1B88
.................... 						case	0x02:	//reset mcu 
.................... 							reset_cpu(); 
1B6E:  RESET
.................... 							break; 
1B70:  MOVLB  4
1B72:  BRA    1B88
.................... 						default: 
.................... 						MB_Buffer[1]|=0x80; 
1B74:  MOVLB  3
1B76:  BSF    xF9.7
.................... 						MB_Buffer[2]=illegal_data_value; 
1B78:  MOVLW  03
1B7A:  MOVWF  xFA
.................... 						ExcReq++; 
1B7C:  MOVLB  4
1B7E:  INCF   xFD,F
1B80:  BTFSC  FD8.2
1B82:  INCF   xFE,F
.................... 						MB_Length=5; 
1B84:  MOVLW  05
1B86:  MOVWF  xF8
.................... 						}; 
.................... 					}else{ 
1B88:  BRA    1B9E
.................... 					MB_Buffer[1]|=0x80; 
1B8A:  MOVLB  3
1B8C:  BSF    xF9.7
.................... 					MB_Buffer[2]=illegal_data_address; 
1B8E:  MOVLW  02
1B90:  MOVWF  xFA
.................... 					MB_Length=5; 
1B92:  MOVLW  05
1B94:  MOVLB  4
1B96:  MOVWF  xF8
.................... 					ExcReq++; 
1B98:  INCF   xFD,F
1B9A:  BTFSC  FD8.2
1B9C:  INCF   xFE,F
.................... 					}; 
.................... 				break; 
1B9E:  BRA    1F3C
.................... 		//read buffer 
.................... 		case	0x43: 
.................... 				if(MB_Length==7){ 
1BA0:  MOVLB  4
1BA2:  MOVF   xF8,W
1BA4:  SUBLW  07
1BA6:  BNZ   1C4A
.................... 					switch(MB_Buffer[3]){ 
1BA8:  MOVLB  3
1BAA:  MOVF   xFB,W
1BAC:  XORLW  00
1BAE:  MOVLB  0
1BB0:  BZ    1BB8
1BB2:  XORLW  01
1BB4:  BZ    1BF6
1BB6:  BRA    1C34
.................... 						case	0x00:	//channel 0 
.................... 							//pack 
.................... 							l=2; 
1BB8:  MOVLB  5
1BBA:  CLRF   x36
1BBC:  MOVLW  02
1BBE:  MOVWF  x35
.................... 							for(k=0; k<0x100; k+=2){ 
1BC0:  CLRF   x34
1BC2:  CLRF   x33
1BC4:  MOVF   x34,W
1BC6:  SUBLW  00
1BC8:  BNC   1BE8
.................... 								MB_Buffer[l]=0; 
1BCA:  MOVLW  F8
1BCC:  ADDWF  x35,W
1BCE:  MOVWF  FE9
1BD0:  MOVLW  03
1BD2:  ADDWFC x36,W
1BD4:  MOVWF  FEA
1BD6:  CLRF   FEF
.................... 								l++; 
1BD8:  INCF   x35,F
1BDA:  BTFSC  FD8.2
1BDC:  INCF   x36,F
.................... 								}; 
1BDE:  MOVLW  02
1BE0:  ADDWF  x33,F
1BE2:  MOVLW  00
1BE4:  ADDWFC x34,F
1BE6:  BRA    1BC4
.................... 							MB_Length=132; 
1BE8:  MOVLW  84
1BEA:  MOVLB  4
1BEC:  MOVWF  xF8
.................... 							ValidReq++; 
1BEE:  INCF   xF9,F
1BF0:  BTFSC  FD8.2
1BF2:  INCF   xFA,F
.................... 							break; 
1BF4:  BRA    1C48
.................... 						case	0x01:	//channel 1 
.................... 							//pack 
.................... 							l=2; 
1BF6:  MOVLB  5
1BF8:  CLRF   x36
1BFA:  MOVLW  02
1BFC:  MOVWF  x35
.................... 							for(k=0; k<0x100; k+=2){ 
1BFE:  CLRF   x34
1C00:  CLRF   x33
1C02:  MOVF   x34,W
1C04:  SUBLW  00
1C06:  BNC   1C26
.................... 								MB_Buffer[l]=0; 
1C08:  MOVLW  F8
1C0A:  ADDWF  x35,W
1C0C:  MOVWF  FE9
1C0E:  MOVLW  03
1C10:  ADDWFC x36,W
1C12:  MOVWF  FEA
1C14:  CLRF   FEF
.................... 								l++; 
1C16:  INCF   x35,F
1C18:  BTFSC  FD8.2
1C1A:  INCF   x36,F
.................... 								}; 
1C1C:  MOVLW  02
1C1E:  ADDWF  x33,F
1C20:  MOVLW  00
1C22:  ADDWFC x34,F
1C24:  BRA    1C02
.................... 							MB_Length=132; 
1C26:  MOVLW  84
1C28:  MOVLB  4
1C2A:  MOVWF  xF8
.................... 							ValidReq++; 
1C2C:  INCF   xF9,F
1C2E:  BTFSC  FD8.2
1C30:  INCF   xFA,F
.................... 							break; 
1C32:  BRA    1C48
.................... 						default:						 
.................... 						MB_Buffer[1]|=0x80; 
1C34:  MOVLB  3
1C36:  BSF    xF9.7
.................... 						MB_Buffer[2]=illegal_data_value; 
1C38:  MOVLW  03
1C3A:  MOVWF  xFA
.................... 						ExcReq++; 
1C3C:  MOVLB  4
1C3E:  INCF   xFD,F
1C40:  BTFSC  FD8.2
1C42:  INCF   xFE,F
.................... 						MB_Length=5; 
1C44:  MOVLW  05
1C46:  MOVWF  xF8
.................... 						}; 
.................... 					}else{ 
1C48:  BRA    1C5E
.................... 					MB_Buffer[1]|=0x80; 
1C4A:  MOVLB  3
1C4C:  BSF    xF9.7
.................... 					MB_Buffer[2]=illegal_data_address; 
1C4E:  MOVLW  02
1C50:  MOVWF  xFA
.................... 					MB_Length=5; 
1C52:  MOVLW  05
1C54:  MOVLB  4
1C56:  MOVWF  xF8
.................... 					ExcReq++; 
1C58:  INCF   xFD,F
1C5A:  BTFSC  FD8.2
1C5C:  INCF   xFE,F
.................... 					}; 
.................... 				break; 
1C5E:  BRA    1F3C
.................... 		//get registers 
.................... 		case	0x44: 
.................... 				if(MB_Length==7){ 
1C60:  MOVLB  4
1C62:  MOVF   xF8,W
1C64:  SUBLW  07
1C66:  BNZ   1CA4
.................... 					//valig req propose 
.................... 					MB_Length=4; 
1C68:  MOVLW  04
1C6A:  MOVWF  xF8
.................... 					ValidReq++; 
1C6C:  INCF   xF9,F
1C6E:  BTFSC  FD8.2
1C70:  INCF   xFA,F
.................... 					//action 
.................... 					//forming answer 
.................... 					j=2;	//set start answer pointer 
1C72:  MOVLW  02
1C74:  MOVLB  5
1C76:  MOVWF  x03
.................... 					StAddr=MB_Buffer[3]; 
1C78:  MOVFF  3FB,530
.................... 					EnAddr=(MB_Buffer[3]+MB_Buffer[4]); 
1C7C:  MOVLB  3
1C7E:  MOVF   xFC,W
1C80:  ADDWF  xFB,W
1C82:  MOVLB  5
1C84:  MOVWF  x31
.................... 					for(bytecount=StAddr; bytecount<EnAddr; bytecount++){ 
1C86:  MOVFF  530,532
1C8A:  MOVF   x31,W
1C8C:  SUBWF  x32,W
1C8E:  BC    1CA0
.................... 						AddRegData(bytecount);		//get registers						 
1C90:  MOVFF  532,537
1C94:  MOVLB  0
1C96:  GOTO   0428
.................... 					}; 
1C9A:  MOVLB  5
1C9C:  INCF   x32,F
1C9E:  BRA    1C8A
.................... 					}else{ 
1CA0:  BRA    1CBA
1CA2:  MOVLB  4
.................... 					MB_Buffer[1]|=0x80; 
1CA4:  MOVLB  3
1CA6:  BSF    xF9.7
.................... 					MB_Buffer[2]=illegal_data_address; 
1CA8:  MOVLW  02
1CAA:  MOVWF  xFA
.................... 					MB_Length=5; 
1CAC:  MOVLW  05
1CAE:  MOVLB  4
1CB0:  MOVWF  xF8
.................... 					ExcReq++; 
1CB2:  INCF   xFD,F
1CB4:  BTFSC  FD8.2
1CB6:  INCF   xFE,F
1CB8:  MOVLB  5
.................... 					};		 
.................... 				break; 
1CBA:  MOVLB  4
1CBC:  BRA    1F3C
.................... 		//set registers 
.................... 		case	0x45: 
.................... 				if((MB_Length>=8)&&(!(MB_Length&0x01))){ 
1CBE:  MOVLB  4
1CC0:  MOVF   xF8,W
1CC2:  SUBLW  07
1CC4:  BC    1D14
1CC6:  BTFSC  xF8.0
1CC8:  BRA    1D14
.................... 					//action 
.................... 					j=4;	//set start answer pointer 
1CCA:  MOVLW  04
1CCC:  MOVLB  5
1CCE:  MOVWF  x03
.................... 					StAddr=MB_Buffer[3]; 
1CD0:  MOVFF  3FB,530
.................... 					EnAddr=MB_Length-2; 
1CD4:  MOVLW  02
1CD6:  MOVLB  4
1CD8:  SUBWF  xF8,W
1CDA:  MOVLB  5
1CDC:  MOVWF  x31
.................... 					//valig req propose 
.................... 					MB_Length=4; 
1CDE:  MOVLW  04
1CE0:  MOVLB  4
1CE2:  MOVWF  xF8
.................... 					ValidReq++; 
1CE4:  INCF   xF9,F
1CE6:  BTFSC  FD8.2
1CE8:  INCF   xFA,F
.................... 					for(bytecount=StAddr; j<EnAddr; bytecount++){ 
1CEA:  MOVFF  530,532
1CEE:  MOVLB  5
1CF0:  MOVF   x31,W
1CF2:  SUBWF  x03,W
1CF4:  BC    1D06
.................... 						SetRegData(bytecount);		//get registers 
1CF6:  MOVFF  532,537
1CFA:  MOVLB  0
1CFC:  GOTO   0D46
.................... 					}; 
1D00:  MOVLB  5
1D02:  INCF   x32,F
1D04:  BRA    1CF0
.................... 					//forming answer 
.................... 					MB_Length=4; 
1D06:  MOVLW  04
1D08:  MOVLB  4
1D0A:  MOVWF  xF8
.................... 					ValidReq++; 
1D0C:  INCF   xF9,F
1D0E:  BTFSC  FD8.2
1D10:  INCF   xFA,F
.................... 					}else{ 
1D12:  BRA    1D28
.................... 					MB_Buffer[1]|=0x80; 
1D14:  MOVLB  3
1D16:  BSF    xF9.7
.................... 					MB_Buffer[2]=illegal_data_address; 
1D18:  MOVLW  02
1D1A:  MOVWF  xFA
.................... 					MB_Length=5; 
1D1C:  MOVLW  05
1D1E:  MOVLB  4
1D20:  MOVWF  xF8
.................... 					ExcReq++; 
1D22:  INCF   xFD,F
1D24:  BTFSC  FD8.2
1D26:  INCF   xFE,F
.................... 					};		 
.................... 				break; 
1D28:  BRA    1F3C
.................... 		//write to EEPROM command 
.................... 		case	0x65: 
.................... 				if(MB_Length==4){ 
1D2A:  MOVLB  4
1D2C:  MOVF   xF8,W
1D2E:  SUBLW  04
1D30:  BNZ   1D46
.................... 					BUWrite(); 
1D32:  MOVLB  0
1D34:  GOTO   1270
.................... 					MB_Length=4; 
1D38:  MOVLW  04
1D3A:  MOVLB  4
1D3C:  MOVWF  xF8
.................... 					ValidReq++; 
1D3E:  INCF   xF9,F
1D40:  BTFSC  FD8.2
1D42:  INCF   xFA,F
.................... 					}else{ 
1D44:  BRA    1D5A
.................... 					MB_Buffer[1]|=0x80; 
1D46:  MOVLB  3
1D48:  BSF    xF9.7
.................... 					MB_Buffer[2]=illegal_data_address; 
1D4A:  MOVLW  02
1D4C:  MOVWF  xFA
.................... 					MB_Length=5; 
1D4E:  MOVLW  05
1D50:  MOVLB  4
1D52:  MOVWF  xF8
.................... 					ExcReq++; 
1D54:  INCF   xFD,F
1D56:  BTFSC  FD8.2
1D58:  INCF   xFE,F
.................... 					};		 
.................... 				break; 
1D5A:  BRA    1F3C
.................... 		//set speed 
.................... 		case	0x6A: 
.................... 				if(MB_Length==5){ 
1D5C:  MOVLB  4
1D5E:  MOVF   xF8,W
1D60:  SUBLW  05
1D62:  BTFSS  FD8.2
1D64:  BRA    1EAE
.................... 					MB_Length=4; 
1D66:  MOVLW  04
1D68:  MOVWF  xF8
.................... 					ValidReq++; 
1D6A:  INCF   xF9,F
1D6C:  BTFSC  FD8.2
1D6E:  INCF   xFA,F
.................... 					switch(MB_Buffer[2]){ 
1D70:  MOVLB  3
1D72:  MOVF   xFA,W
1D74:  XORLW  00
1D76:  MOVLB  0
1D78:  BZ    1D98
1D7A:  XORLW  01
1D7C:  BZ    1DB6
1D7E:  XORLW  03
1D80:  BZ    1DD4
1D82:  XORLW  01
1D84:  BZ    1DF2
1D86:  XORLW  07
1D88:  BZ    1E10
1D8A:  XORLW  01
1D8C:  BZ    1E2E
1D8E:  XORLW  03
1D90:  BZ    1E4C
1D92:  XORLW  01
1D94:  BZ    1E66
1D96:  BRA    1E82
.................... 						case	0x00:	//1200 
.................... 							Speed=1200; 
1D98:  MOVLW  04
1D9A:  MOVLB  3
1D9C:  MOVWF  xE5
1D9E:  MOVLW  B0
1DA0:  MOVWF  xE4
.................... 							setup_uart(1200); 
1DA2:  BSF    FB8.3
1DA4:  MOVLW  0A
1DA6:  MOVWF  FAF
1DA8:  MOVLW  1A
1DAA:  MOVWF  FB0
1DAC:  MOVLW  A6
1DAE:  MOVWF  FAC
1DB0:  NOP   
1DB2:  NOP   
.................... 							break; 
1DB4:  BRA    1E98
.................... 						case	0x01:	//1800 
.................... 							Speed=1800; 
1DB6:  MOVLW  07
1DB8:  MOVLB  3
1DBA:  MOVWF  xE5
1DBC:  MOVLW  08
1DBE:  MOVWF  xE4
.................... 							setup_uart(1800); 
1DC0:  BSF    FB8.3
1DC2:  MOVLW  5B
1DC4:  MOVWF  FAF
1DC6:  MOVLW  11
1DC8:  MOVWF  FB0
1DCA:  MOVLW  A6
1DCC:  MOVWF  FAC
1DCE:  NOP   
1DD0:  NOP   
.................... 							break; 
1DD2:  BRA    1E98
.................... 						case	0x02:	//2400 
.................... 							Speed=2400; 
1DD4:  MOVLW  09
1DD6:  MOVLB  3
1DD8:  MOVWF  xE5
1DDA:  MOVLW  60
1DDC:  MOVWF  xE4
.................... 							setup_uart(2400); 
1DDE:  BSF    FB8.3
1DE0:  MOVLW  04
1DE2:  MOVWF  FAF
1DE4:  MOVLW  0D
1DE6:  MOVWF  FB0
1DE8:  MOVLW  A6
1DEA:  MOVWF  FAC
1DEC:  NOP   
1DEE:  NOP   
.................... 							break; 
1DF0:  BRA    1E98
.................... 						case	0x03:	//4800 
.................... 							Speed=4800; 
1DF2:  MOVLW  12
1DF4:  MOVLB  3
1DF6:  MOVWF  xE5
1DF8:  MOVLW  C0
1DFA:  MOVWF  xE4
.................... 							setup_uart(4800); 
1DFC:  BSF    FB8.3
1DFE:  MOVLW  82
1E00:  MOVWF  FAF
1E02:  MOVLW  06
1E04:  MOVWF  FB0
1E06:  MOVLW  A6
1E08:  MOVWF  FAC
1E0A:  NOP   
1E0C:  NOP   
.................... 							break; 
1E0E:  BRA    1E98
.................... 						case	0x04:	//7200 
.................... 							Speed=7200; 
1E10:  MOVLW  1C
1E12:  MOVLB  3
1E14:  MOVWF  xE5
1E16:  MOVLW  20
1E18:  MOVWF  xE4
.................... 							setup_uart(7200); 
1E1A:  BSF    FB8.3
1E1C:  MOVLW  56
1E1E:  MOVWF  FAF
1E20:  MOVLW  04
1E22:  MOVWF  FB0
1E24:  MOVLW  A6
1E26:  MOVWF  FAC
1E28:  NOP   
1E2A:  NOP   
.................... 							break; 
1E2C:  BRA    1E98
.................... 						case	0x05:	//9600 
.................... 							Speed=9600; 
1E2E:  MOVLW  25
1E30:  MOVLB  3
1E32:  MOVWF  xE5
1E34:  MOVLW  80
1E36:  MOVWF  xE4
.................... 							setup_uart(9600); 
1E38:  BSF    FB8.3
1E3A:  MOVLW  40
1E3C:  MOVWF  FAF
1E3E:  MOVLW  03
1E40:  MOVWF  FB0
1E42:  MOVLW  A6
1E44:  MOVWF  FAC
1E46:  NOP   
1E48:  NOP   
.................... 							break; 
1E4A:  BRA    1E98
.................... 						case	0x06:	//14400 
.................... 							Speed=14400; 
1E4C:  MOVLW  38
1E4E:  MOVLB  3
1E50:  MOVWF  xE5
1E52:  MOVLW  40
1E54:  MOVWF  xE4
.................... 							setup_uart(14400); 
1E56:  BCF    FB8.3
1E58:  MOVLW  8A
1E5A:  MOVWF  FAF
1E5C:  MOVLW  A6
1E5E:  MOVWF  FAC
1E60:  NOP   
1E62:  NOP   
.................... 							break; 
1E64:  BRA    1E98
.................... 						case	0x07:	//19200 
.................... 							Speed=19200; 
1E66:  MOVLW  4B
1E68:  MOVLB  3
1E6A:  MOVWF  xE5
1E6C:  CLRF   xE4
.................... 							setup_uart(19200); 
1E6E:  BSF    FB8.3
1E70:  MOVLW  A0
1E72:  MOVWF  FAF
1E74:  MOVLW  01
1E76:  MOVWF  FB0
1E78:  MOVLW  A6
1E7A:  MOVWF  FAC
1E7C:  NOP   
1E7E:  NOP   
.................... 							break; 
1E80:  BRA    1E98
.................... 						default: 
.................... 							MB_Buffer[1]|=0x80; 
1E82:  MOVLB  3
1E84:  BSF    xF9.7
.................... 							MB_Buffer[2]=illegal_data_value; 
1E86:  MOVLW  03
1E88:  MOVWF  xFA
.................... 							MB_Length=5; 
1E8A:  MOVLW  05
1E8C:  MOVLB  4
1E8E:  MOVWF  xF8
.................... 							ExcReq++; 
1E90:  INCF   xFD,F
1E92:  BTFSC  FD8.2
1E94:  INCF   xFE,F
1E96:  MOVLB  3
.................... 					}; 
.................... 					output_toggle(STAT); 
1E98:  BCF    F94.0
1E9A:  BTG    F8B.0
.................... 					//pause for master 
.................... 					delay_ms(100); 
1E9C:  MOVLW  64
1E9E:  MOVLB  5
1EA0:  MOVWF  x37
1EA2:  MOVLB  0
1EA4:  BRA    19CA
.................... 					output_toggle(STAT);					 
1EA6:  BCF    F94.0
1EA8:  BTG    F8B.0
.................... 					}else{ 
1EAA:  BRA    1EC4
1EAC:  MOVLB  4
.................... 					MB_Buffer[1]|=0x80; 
1EAE:  MOVLB  3
1EB0:  BSF    xF9.7
.................... 					MB_Buffer[2]=illegal_data_address; 
1EB2:  MOVLW  02
1EB4:  MOVWF  xFA
.................... 					MB_Length=5; 
1EB6:  MOVLW  05
1EB8:  MOVLB  4
1EBA:  MOVWF  xF8
.................... 					ExcReq++; 
1EBC:  INCF   xFD,F
1EBE:  BTFSC  FD8.2
1EC0:  INCF   xFE,F
1EC2:  MOVLB  0
.................... 					};		 
.................... 				break; 
1EC4:  MOVLB  4
1EC6:  BRA    1F3C
.................... 		//send id 
.................... 		case	0x6B: 
.................... 				if(MB_Length==4){ 
1EC8:  MOVLB  4
1ECA:  MOVF   xF8,W
1ECC:  SUBLW  04
1ECE:  BNZ   1F12
.................... 					MB_Buffer[2]="M"; 
1ED0:  MOVLW  4D
1ED2:  MOVLB  3
1ED4:  MOVWF  xFA
.................... 					MB_Buffer[3]="W"; 
1ED6:  MOVLW  57
1ED8:  MOVWF  xFB
.................... 					MB_Buffer[4]="T"; 
1EDA:  MOVLW  54
1EDC:  MOVWF  xFC
.................... 					MB_Buffer[5]="-"; 
1EDE:  MOVLW  2D
1EE0:  MOVWF  xFD
.................... 					MB_Buffer[6]="S"; 
1EE2:  MOVLW  53
1EE4:  MOVWF  xFE
.................... 					MB_Buffer[7]="P"; 
1EE6:  MOVLW  50
1EE8:  MOVWF  xFF
.................... 					MB_Buffer[8]="M"; 
1EEA:  MOVLW  4D
1EEC:  MOVLB  4
1EEE:  MOVWF  x00
.................... 					MB_Buffer[9]="3"; 
1EF0:  MOVLW  33
1EF2:  MOVWF  x01
.................... 					MB_Buffer[10]="v"; 
1EF4:  MOVLW  76
1EF6:  MOVWF  x02
.................... 					MB_Buffer[11]="1"; 
1EF8:  MOVLW  31
1EFA:  MOVWF  x03
.................... 					MB_Buffer[12]="."; 
1EFC:  MOVLW  2E
1EFE:  MOVWF  x04
.................... 					MB_Buffer[13]="0"; 
1F00:  MOVLW  30
1F02:  MOVWF  x05
.................... 					MB_Buffer[14]="0"; 
1F04:  MOVWF  x06
.................... 					MB_Length=16; 
1F06:  MOVLW  10
1F08:  MOVWF  xF8
.................... 					ValidReq++; 
1F0A:  INCF   xF9,F
1F0C:  BTFSC  FD8.2
1F0E:  INCF   xFA,F
.................... 					}else{ 
1F10:  BRA    1F26
.................... 					MB_Buffer[1]|=0x80; 
1F12:  MOVLB  3
1F14:  BSF    xF9.7
.................... 					MB_Buffer[2]=illegal_data_address; 
1F16:  MOVLW  02
1F18:  MOVWF  xFA
.................... 					MB_Length=5; 
1F1A:  MOVLW  05
1F1C:  MOVLB  4
1F1E:  MOVWF  xF8
.................... 					ExcReq++; 
1F20:  INCF   xFD,F
1F22:  BTFSC  FD8.2
1F24:  INCF   xFE,F
.................... 					};		 
.................... 				break; 
1F26:  BRA    1F3C
.................... 		//not recognized 
.................... 		default:		//not recognized command 
.................... 		MB_Buffer[1]|=0x80;	//set error code 
1F28:  MOVLB  3
1F2A:  BSF    xF9.7
.................... 		MB_Buffer[2]=illegal_function; 
1F2C:  MOVLW  01
1F2E:  MOVWF  xFA
.................... 		MB_Length=5; 
1F30:  MOVLW  05
1F32:  MOVLB  4
1F34:  MOVWF  xF8
.................... 		ExcReq++; 
1F36:  INCF   xFD,F
1F38:  BTFSC  FD8.2
1F3A:  INCF   xFE,F
.................... 	};	 
.................... 	//send answer 
.................... 	if(MB_Buffer[0]!=0){	//if unicast req - then send answer 
1F3C:  MOVLB  3
1F3E:  MOVF   xF8,F
1F40:  BZ    1FCE
.................... 	CRCc=ModbusCRC(MB_Buffer,MB_Length-2);	//calc CRC 
1F42:  MOVLW  02
1F44:  MOVLB  4
1F46:  SUBWF  xF8,W
1F48:  MOVLB  5
1F4A:  MOVWF  x37
1F4C:  MOVLW  03
1F4E:  MOVWF  x39
1F50:  MOVLW  F8
1F52:  MOVWF  x38
1F54:  MOVFF  537,53A
1F58:  MOVLB  0
1F5A:  CALL   03D0
1F5E:  MOVFF  02,502
1F62:  MOVFF  01,501
.................... 	MB_Buffer[MB_Length-2]=make8(CRCc,1);	//high CRC 
1F66:  MOVLW  02
1F68:  MOVLB  4
1F6A:  SUBWF  xF8,W
1F6C:  CLRF   03
1F6E:  ADDLW  F8
1F70:  MOVWF  FE9
1F72:  MOVLW  03
1F74:  ADDWFC 03,W
1F76:  MOVWF  FEA
1F78:  MOVLB  5
1F7A:  MOVFF  502,FEF
.................... 	MB_Buffer[MB_Length-1]=make8(CRCc,0);	//low CRC 
1F7E:  MOVLW  01
1F80:  MOVLB  4
1F82:  SUBWF  xF8,W
1F84:  CLRF   03
1F86:  ADDLW  F8
1F88:  MOVWF  FE9
1F8A:  MOVLW  03
1F8C:  ADDWFC 03,W
1F8E:  MOVWF  FEA
1F90:  MOVLB  5
1F92:  MOVFF  501,FEF
.................... 	//send 
.................... 	for(bytecount=0; bytecount<MB_Length; bytecount++){ 
1F96:  CLRF   x32
1F98:  MOVLB  4
1F9A:  MOVF   xF8,W
1F9C:  MOVLB  5
1F9E:  SUBWF  x32,W
1FA0:  BC    1FC8
.................... 		restart_wdt(); 
1FA2:  CLRWDT
.................... 		putc(MB_Buffer[bytecount]); 
1FA4:  CLRF   03
1FA6:  MOVF   x32,W
1FA8:  ADDLW  F8
1FAA:  MOVWF  FE9
1FAC:  MOVLW  03
1FAE:  ADDWFC 03,W
1FB0:  MOVWF  FEA
1FB2:  MOVFF  FEF,537
1FB6:  MOVFF  537,538
1FBA:  MOVLB  0
1FBC:  BRA    19FC
.................... 		output_low(STAT);	//toggle led 
1FBE:  BCF    F94.0
1FC0:  BCF    F8B.0
.................... 		}; 
1FC2:  MOVLB  5
1FC4:  INCF   x32,F
1FC6:  BRA    1F98
.................... 		goto exit; 
1FC8:  MOVLB  4
1FCA:  BRA    1FCC
1FCC:  MOVLB  3
.................... 	};	 
.................... 	// 
.................... 	 
.................... exit:	//exit 
.................... 	output_high(STAT);	//on led 
1FCE:  BCF    F94.0
1FD0:  BSF    F8B.0
.................... 	MB_Length=0; 
1FD2:  MOVLB  4
1FD4:  CLRF   xF8
.................... 	clear_interrupt(INT_RDA);	 
.................... 	clear_interrupt(INT_TIMER1);	 
1FD6:  BCF    F9E.0
.................... 	disable_interrupts(INT_TIMER1);	 
1FD8:  BCF    F9D.0
.................... 	enable_interrupts(INT_RDA); 
1FDA:  BSF    F9D.5
.................... } 
.................... // 
....................  
....................  
1FDC:  BCF    F9E.0
1FDE:  MOVLB  0
1FE0:  GOTO   006C
.................... void main(void) 
.................... { 
*
2F64:  CLRF   FF8
2F66:  BCF    FD0.7
2F68:  BSF    07.7
2F6A:  CLRF   FEA
2F6C:  CLRF   FE9
2F6E:  MOVLW  70
2F70:  MOVWF  FD3
2F72:  MOVLW  40
2F74:  MOVWF  F9B
2F76:  MOVF   FD3,W
2F78:  MOVLB  3
2F7A:  CLRF   xC7
2F7C:  CLRF   xF6
2F7E:  MOVLW  32
2F80:  MOVWF  xF5
2F82:  MOVLB  4
2F84:  CLRF   xF8
2F86:  BCF    F92.6
2F88:  BCF    F89.6
2F8A:  BSF    FB8.3
2F8C:  MOVLW  40
2F8E:  MOVWF  FAF
2F90:  MOVLW  03
2F92:  MOVWF  FB0
2F94:  MOVLW  A6
2F96:  MOVWF  FAC
2F98:  MOVLW  90
2F9A:  MOVWF  FAB
2F9C:  NOP   
2F9E:  NOP   
2FA0:  MOVF   FC1,W
2FA2:  ANDLW  C0
2FA4:  IORLW  0F
2FA6:  MOVWF  FC1
2FA8:  MOVLW  07
2FAA:  MOVWF  FB4
2FAC:  CLRF   1A
2FAE:  CLRF   1B
2FB0:  CLRF   1C
2FB2:  CLRF   1D
2FB4:  CLRF   1E
2FB6:  CLRF   1F
2FB8:  CLRF   20
2FBA:  CLRF   21
2FBC:  CLRF   22
2FBE:  CLRF   23
2FC0:  CLRF   24
2FC2:  CLRF   25
2FC4:  CLRF   26
2FC6:  CLRF   27
2FC8:  CLRF   28
2FCA:  CLRF   29
2FCC:  CLRF   2A
2FCE:  CLRF   2B
2FD0:  CLRF   2C
2FD2:  CLRF   2D
2FD4:  CLRF   2E
2FD6:  CLRF   2F
2FD8:  CLRF   30
2FDA:  CLRF   31
2FDC:  CLRF   32
2FDE:  CLRF   33
2FE0:  CLRF   34
2FE2:  CLRF   35
2FE4:  CLRF   36
2FE6:  CLRF   37
2FE8:  CLRF   38
2FEA:  CLRF   39
2FEC:  CLRF   3A
2FEE:  CLRF   3B
2FF0:  CLRF   3C
2FF2:  CLRF   3D
2FF4:  CLRF   3E
2FF6:  CLRF   3F
2FF8:  CLRF   40
2FFA:  CLRF   41
2FFC:  CLRF   42
2FFE:  CLRF   43
3000:  CLRF   44
3002:  CLRF   45
3004:  CLRF   46
3006:  CLRF   47
3008:  CLRF   48
300A:  CLRF   49
300C:  CLRF   4A
300E:  CLRF   4B
3010:  CLRF   4C
3012:  CLRF   4D
3014:  CLRF   4E
3016:  CLRF   4F
3018:  CLRF   50
301A:  CLRF   51
301C:  CLRF   52
301E:  CLRF   53
3020:  CLRF   54
3022:  CLRF   55
3024:  CLRF   56
3026:  CLRF   57
3028:  CLRF   58
302A:  CLRF   59
302C:  CLRF   5A
302E:  CLRF   5B
3030:  CLRF   5C
3032:  CLRF   5D
3034:  CLRF   5E
3036:  CLRF   5F
3038:  CLRF   60
303A:  CLRF   61
303C:  CLRF   62
303E:  CLRF   63
3040:  CLRF   64
3042:  CLRF   65
3044:  CLRF   66
3046:  CLRF   67
3048:  CLRF   68
304A:  CLRF   69
304C:  CLRF   6A
304E:  CLRF   6B
3050:  CLRF   6C
3052:  CLRF   6D
3054:  CLRF   6E
3056:  CLRF   6F
3058:  CLRF   70
305A:  CLRF   71
305C:  CLRF   72
305E:  CLRF   73
3060:  CLRF   74
3062:  CLRF   75
3064:  CLRF   76
3066:  CLRF   77
3068:  CLRF   78
306A:  CLRF   79
306C:  CLRF   7A
306E:  CLRF   7B
3070:  CLRF   7C
3072:  CLRF   7D
3074:  CLRF   7E
3076:  CLRF   7F
3078:  MOVLB  0
307A:  CLRF   x80
307C:  CLRF   x81
307E:  CLRF   x82
3080:  CLRF   x83
3082:  CLRF   x84
3084:  CLRF   x85
3086:  CLRF   x86
3088:  CLRF   x87
308A:  CLRF   x88
308C:  CLRF   x89
308E:  CLRF   x8A
3090:  CLRF   x8B
3092:  CLRF   x8C
3094:  CLRF   x8D
3096:  CLRF   x8E
3098:  CLRF   x8F
309A:  CLRF   x90
309C:  CLRF   x91
309E:  CLRF   x92
30A0:  CLRF   x93
30A2:  CLRF   x94
30A4:  CLRF   x95
30A6:  CLRF   x96
30A8:  CLRF   x97
30AA:  CLRF   x98
30AC:  CLRF   x99
30AE:  CLRF   x9A
30B0:  CLRF   x9B
30B2:  CLRF   x9C
30B4:  CLRF   x9D
30B6:  CLRF   x9E
30B8:  CLRF   x9F
30BA:  CLRF   xA0
30BC:  CLRF   xA1
30BE:  CLRF   xA2
30C0:  CLRF   xA3
30C2:  CLRF   xA4
30C4:  CLRF   xA5
30C6:  CLRF   xA6
30C8:  CLRF   xA7
30CA:  CLRF   xA8
30CC:  CLRF   xA9
30CE:  CLRF   xAA
30D0:  CLRF   xAB
30D2:  CLRF   xAC
30D4:  CLRF   xAD
30D6:  CLRF   xAE
30D8:  CLRF   xAF
30DA:  CLRF   xB0
30DC:  CLRF   xB1
30DE:  CLRF   xB2
30E0:  CLRF   xB3
30E2:  CLRF   xB4
30E4:  CLRF   xB5
30E6:  CLRF   xB6
30E8:  CLRF   xB7
30EA:  CLRF   xB8
30EC:  CLRF   xB9
30EE:  CLRF   xBA
30F0:  CLRF   xBB
30F2:  CLRF   xBC
30F4:  CLRF   xBD
30F6:  CLRF   xBE
30F8:  CLRF   xBF
30FA:  CLRF   xC0
30FC:  CLRF   xC1
30FE:  CLRF   xC2
3100:  CLRF   xC3
3102:  CLRF   xC4
3104:  CLRF   xC5
3106:  CLRF   xC6
3108:  CLRF   xC7
310A:  CLRF   xC8
310C:  CLRF   xC9
310E:  CLRF   xCA
3110:  CLRF   xCB
3112:  CLRF   xCC
3114:  CLRF   xCD
3116:  CLRF   xCE
3118:  CLRF   xCF
311A:  CLRF   xD0
311C:  CLRF   xD1
311E:  CLRF   xD2
3120:  CLRF   xD3
3122:  CLRF   xD4
3124:  CLRF   xD5
3126:  CLRF   xD6
3128:  CLRF   xD7
312A:  CLRF   xD8
312C:  CLRF   xD9
312E:  CLRF   xDA
3130:  CLRF   xDB
3132:  CLRF   xDC
3134:  CLRF   xDD
3136:  CLRF   xDE
3138:  CLRF   xDF
313A:  CLRF   xE0
313C:  CLRF   xE1
313E:  CLRF   xE2
3140:  CLRF   xE3
3142:  CLRF   xE4
3144:  CLRF   xE5
3146:  CLRF   xE6
3148:  CLRF   xE7
314A:  CLRF   xE8
314C:  CLRF   xE9
314E:  CLRF   xEA
3150:  CLRF   xEB
3152:  CLRF   xEC
3154:  CLRF   xED
3156:  CLRF   xEE
3158:  CLRF   xEF
315A:  CLRF   xF0
315C:  CLRF   xF1
315E:  CLRF   xF2
3160:  CLRF   xF3
3162:  CLRF   xF4
3164:  CLRF   xF5
3166:  CLRF   xF6
3168:  CLRF   xF7
316A:  CLRF   xF8
316C:  CLRF   xF9
316E:  CLRF   xFA
3170:  CLRF   xFB
3172:  CLRF   xFC
3174:  CLRF   xFD
3176:  CLRF   xFE
3178:  CLRF   xFF
317A:  MOVLB  1
317C:  CLRF   x00
317E:  CLRF   x01
3180:  CLRF   x02
3182:  CLRF   x03
3184:  CLRF   x04
3186:  CLRF   x05
3188:  CLRF   x06
318A:  CLRF   x07
318C:  CLRF   x08
318E:  CLRF   x09
3190:  CLRF   x0A
3192:  CLRF   x0B
3194:  CLRF   x0C
3196:  CLRF   x0D
3198:  CLRF   x0E
319A:  CLRF   x0F
319C:  CLRF   x10
319E:  CLRF   x11
31A0:  CLRF   x12
31A2:  CLRF   x13
31A4:  CLRF   x14
31A6:  CLRF   x15
31A8:  CLRF   x16
31AA:  CLRF   x17
31AC:  CLRF   x18
31AE:  CLRF   x19
31B0:  CLRF   x1A
31B2:  CLRF   x1B
31B4:  CLRF   x1C
31B6:  CLRF   x1D
31B8:  CLRF   x1E
31BA:  CLRF   x1F
31BC:  CLRF   x20
31BE:  CLRF   x21
31C0:  CLRF   x22
31C2:  CLRF   x23
31C4:  CLRF   x24
31C6:  CLRF   x25
31C8:  CLRF   x26
31CA:  CLRF   x27
31CC:  CLRF   x28
31CE:  CLRF   x29
31D0:  CLRF   x2A
31D2:  CLRF   x2B
31D4:  CLRF   x2C
31D6:  CLRF   x2D
31D8:  CLRF   x2E
31DA:  CLRF   x2F
31DC:  CLRF   x30
31DE:  CLRF   x31
31E0:  CLRF   x32
31E2:  CLRF   x33
31E4:  CLRF   x34
31E6:  CLRF   x35
31E8:  CLRF   x36
31EA:  CLRF   x37
31EC:  CLRF   x38
31EE:  CLRF   x39
31F0:  CLRF   x3A
31F2:  CLRF   x3B
31F4:  CLRF   x3C
31F6:  CLRF   x3D
31F8:  CLRF   x3E
31FA:  CLRF   x3F
31FC:  CLRF   x40
31FE:  CLRF   x41
3200:  CLRF   x42
3202:  CLRF   x43
3204:  CLRF   x44
3206:  CLRF   x45
3208:  CLRF   x46
320A:  CLRF   x47
320C:  CLRF   x48
320E:  CLRF   x49
3210:  CLRF   x4A
3212:  CLRF   x4B
3214:  CLRF   x4C
3216:  CLRF   x4D
3218:  CLRF   x4E
321A:  CLRF   x4F
321C:  CLRF   x50
321E:  CLRF   x51
3220:  CLRF   x52
3222:  CLRF   x53
3224:  CLRF   x54
3226:  CLRF   x55
3228:  CLRF   x56
322A:  CLRF   x57
322C:  CLRF   x58
322E:  CLRF   x59
3230:  CLRF   x5A
3232:  CLRF   x5B
3234:  CLRF   x5C
3236:  CLRF   x5D
3238:  CLRF   x5E
323A:  CLRF   x5F
323C:  CLRF   x60
323E:  CLRF   x61
3240:  CLRF   x62
3242:  CLRF   x63
3244:  CLRF   x64
3246:  CLRF   x65
3248:  CLRF   x66
324A:  CLRF   x67
324C:  CLRF   x68
324E:  CLRF   x69
3250:  CLRF   x6A
3252:  CLRF   x6B
3254:  CLRF   x6C
3256:  CLRF   x6D
3258:  CLRF   x6E
325A:  CLRF   x6F
325C:  CLRF   x70
325E:  CLRF   x71
3260:  CLRF   x72
3262:  CLRF   x73
3264:  CLRF   x74
3266:  CLRF   x75
3268:  CLRF   x76
326A:  CLRF   x77
326C:  CLRF   x78
326E:  CLRF   x79
3270:  CLRF   x7A
3272:  CLRF   x7B
3274:  CLRF   x7C
3276:  CLRF   x7D
3278:  CLRF   x7E
327A:  CLRF   x7F
327C:  CLRF   x80
327E:  CLRF   x81
3280:  CLRF   x82
3282:  CLRF   x83
3284:  CLRF   x84
3286:  CLRF   x85
3288:  CLRF   x86
328A:  CLRF   x87
328C:  CLRF   x88
328E:  CLRF   x89
3290:  CLRF   x8A
3292:  CLRF   x8B
3294:  CLRF   x8C
3296:  CLRF   x8D
3298:  CLRF   x8E
329A:  CLRF   x8F
329C:  CLRF   x90
329E:  CLRF   x91
32A0:  CLRF   x92
32A2:  CLRF   x93
32A4:  CLRF   x94
32A6:  CLRF   x95
32A8:  CLRF   x96
32AA:  CLRF   x97
32AC:  CLRF   x98
32AE:  CLRF   x99
32B0:  CLRF   x9A
32B2:  CLRF   x9B
32B4:  CLRF   x9C
32B6:  CLRF   x9D
32B8:  CLRF   x9E
32BA:  CLRF   x9F
32BC:  CLRF   xA0
32BE:  CLRF   xA1
32C0:  CLRF   xA2
32C2:  CLRF   xA3
32C4:  CLRF   xA4
32C6:  CLRF   xA5
32C8:  CLRF   xA6
32CA:  CLRF   xA7
32CC:  CLRF   xA8
32CE:  CLRF   xA9
32D0:  CLRF   xAA
32D2:  CLRF   xAB
32D4:  CLRF   xAC
32D6:  CLRF   xAD
32D8:  CLRF   xAE
32DA:  CLRF   xAF
32DC:  CLRF   xB0
32DE:  CLRF   xB1
32E0:  CLRF   xB2
32E2:  CLRF   xB3
32E4:  CLRF   xB4
32E6:  CLRF   xB5
32E8:  CLRF   xB6
32EA:  CLRF   xB7
32EC:  CLRF   xB8
32EE:  CLRF   xB9
32F0:  CLRF   xBA
32F2:  CLRF   xBB
32F4:  CLRF   xBC
32F6:  CLRF   xBD
32F8:  CLRF   xBE
32FA:  CLRF   xBF
32FC:  CLRF   xC0
32FE:  CLRF   xC1
3300:  CLRF   xC2
3302:  CLRF   xC3
3304:  CLRF   xC4
3306:  CLRF   xC5
3308:  CLRF   xC6
330A:  CLRF   xC7
330C:  CLRF   xC8
330E:  CLRF   xC9
3310:  CLRF   xCA
3312:  CLRF   xCB
3314:  CLRF   xCC
3316:  CLRF   xCD
3318:  CLRF   xCE
331A:  CLRF   xCF
331C:  CLRF   xD0
331E:  CLRF   xD1
3320:  CLRF   xD2
3322:  CLRF   xD3
3324:  CLRF   xD4
3326:  CLRF   xD5
3328:  CLRF   xD6
332A:  CLRF   xD7
332C:  CLRF   xD8
332E:  CLRF   xD9
3330:  CLRF   xDA
3332:  CLRF   xDB
3334:  CLRF   xDC
3336:  CLRF   xDD
3338:  CLRF   xDE
333A:  CLRF   xDF
333C:  CLRF   xE0
333E:  CLRF   xE1
3340:  CLRF   xE2
3342:  CLRF   xE3
3344:  CLRF   xE4
3346:  CLRF   xE5
3348:  CLRF   xE6
334A:  CLRF   xE7
334C:  CLRF   xE8
334E:  CLRF   xE9
3350:  CLRF   xEA
3352:  CLRF   xEB
3354:  CLRF   xEC
3356:  CLRF   xED
3358:  CLRF   xEE
335A:  CLRF   xEF
335C:  CLRF   xF0
335E:  CLRF   xF1
3360:  CLRF   xF2
3362:  CLRF   xF3
3364:  CLRF   xF4
3366:  CLRF   xF5
3368:  CLRF   xF6
336A:  CLRF   xF7
336C:  CLRF   xF8
336E:  CLRF   xF9
3370:  CLRF   xFA
3372:  CLRF   xFB
3374:  CLRF   xFC
3376:  CLRF   xFD
3378:  CLRF   xFE
337A:  CLRF   xFF
337C:  MOVLB  2
337E:  CLRF   x00
3380:  CLRF   x01
3382:  CLRF   x02
3384:  CLRF   x03
3386:  CLRF   x04
3388:  CLRF   x05
338A:  CLRF   x06
338C:  CLRF   x07
338E:  CLRF   x08
3390:  CLRF   x09
3392:  CLRF   x0A
3394:  CLRF   x0B
3396:  CLRF   x0C
3398:  CLRF   x0D
339A:  CLRF   x0E
339C:  CLRF   x0F
339E:  CLRF   x10
33A0:  CLRF   x11
33A2:  CLRF   x12
33A4:  CLRF   x13
33A6:  CLRF   x14
33A8:  CLRF   x15
33AA:  CLRF   x16
33AC:  CLRF   x17
33AE:  CLRF   x18
33B0:  CLRF   x19
33B2:  CLRF   x1A
33B4:  CLRF   x1B
33B6:  CLRF   x1C
33B8:  CLRF   x1D
33BA:  CLRF   x1E
33BC:  CLRF   x1F
33BE:  CLRF   x20
33C0:  CLRF   x21
33C2:  CLRF   x22
33C4:  CLRF   x23
33C6:  CLRF   x24
33C8:  CLRF   x25
33CA:  CLRF   x26
33CC:  CLRF   x27
33CE:  CLRF   x28
33D0:  CLRF   x29
33D2:  CLRF   x2A
33D4:  CLRF   x2B
33D6:  CLRF   x2C
33D8:  CLRF   x2D
33DA:  CLRF   x2E
33DC:  CLRF   x2F
33DE:  CLRF   x30
33E0:  CLRF   x31
33E2:  CLRF   x32
33E4:  CLRF   x33
33E6:  CLRF   x34
33E8:  CLRF   x35
33EA:  CLRF   x36
33EC:  CLRF   x37
33EE:  CLRF   x38
33F0:  CLRF   x39
33F2:  CLRF   x3A
33F4:  CLRF   x3B
33F6:  CLRF   x3C
33F8:  CLRF   x3D
33FA:  CLRF   x3E
33FC:  CLRF   x3F
33FE:  CLRF   x40
3400:  CLRF   x41
3402:  CLRF   x42
3404:  CLRF   x43
3406:  CLRF   x44
3408:  CLRF   x45
340A:  CLRF   x46
340C:  CLRF   x47
340E:  CLRF   x48
3410:  CLRF   x49
3412:  CLRF   x4A
3414:  CLRF   x4B
3416:  CLRF   x4C
3418:  CLRF   x4D
341A:  CLRF   x4E
341C:  CLRF   x4F
341E:  CLRF   x50
3420:  CLRF   x51
3422:  CLRF   x52
3424:  CLRF   x53
3426:  CLRF   x54
3428:  CLRF   x55
342A:  CLRF   x56
342C:  CLRF   x57
342E:  CLRF   x58
3430:  CLRF   x59
3432:  CLRF   x5A
3434:  CLRF   x5B
3436:  CLRF   x5C
3438:  CLRF   x5D
343A:  CLRF   x5E
343C:  CLRF   x5F
343E:  CLRF   x60
3440:  CLRF   x61
3442:  CLRF   x62
3444:  CLRF   x63
3446:  CLRF   x64
3448:  CLRF   x65
344A:  CLRF   x66
344C:  CLRF   x67
344E:  CLRF   x68
3450:  CLRF   x69
3452:  CLRF   x6A
3454:  CLRF   x6B
3456:  CLRF   x6C
3458:  CLRF   x6D
345A:  CLRF   x6E
345C:  CLRF   x6F
345E:  CLRF   x70
3460:  CLRF   x71
3462:  CLRF   x72
3464:  CLRF   x73
3466:  CLRF   x74
3468:  CLRF   x75
346A:  CLRF   x76
346C:  CLRF   x77
346E:  CLRF   x78
3470:  CLRF   x79
3472:  CLRF   x7A
3474:  CLRF   x7B
3476:  CLRF   x7C
3478:  CLRF   x7D
347A:  CLRF   x7E
347C:  CLRF   x7F
347E:  CLRF   x80
3480:  CLRF   x81
3482:  CLRF   x82
3484:  CLRF   x83
3486:  CLRF   x84
3488:  CLRF   x85
348A:  CLRF   x86
348C:  CLRF   x87
348E:  CLRF   x88
3490:  CLRF   x89
3492:  CLRF   x8A
3494:  CLRF   x8B
3496:  CLRF   x8C
3498:  CLRF   x8D
349A:  CLRF   x8E
349C:  CLRF   x8F
349E:  CLRF   x90
34A0:  CLRF   x91
34A2:  CLRF   x92
34A4:  CLRF   x93
34A6:  CLRF   x94
34A8:  CLRF   x95
34AA:  CLRF   x96
34AC:  CLRF   x97
34AE:  CLRF   x98
34B0:  CLRF   x99
34B2:  CLRF   x9A
34B4:  CLRF   x9B
34B6:  CLRF   x9C
34B8:  CLRF   x9D
34BA:  CLRF   x9E
34BC:  CLRF   x9F
34BE:  CLRF   xA0
34C0:  CLRF   xA1
34C2:  CLRF   xA2
34C4:  CLRF   xA3
34C6:  CLRF   xA4
34C8:  CLRF   xA5
34CA:  CLRF   xA6
34CC:  CLRF   xA7
34CE:  CLRF   xA8
34D0:  CLRF   xA9
34D2:  CLRF   xAA
34D4:  CLRF   xAB
34D6:  CLRF   xAC
34D8:  CLRF   xAD
34DA:  CLRF   xAE
34DC:  CLRF   xAF
34DE:  CLRF   xB0
34E0:  CLRF   xB1
34E2:  CLRF   xB2
34E4:  CLRF   xB3
34E6:  CLRF   xB4
34E8:  CLRF   xB5
34EA:  CLRF   xB6
34EC:  CLRF   xB7
34EE:  CLRF   xB8
34F0:  CLRF   xB9
34F2:  CLRF   xBA
34F4:  CLRF   xBB
34F6:  CLRF   xBC
34F8:  CLRF   xBD
34FA:  CLRF   xBE
34FC:  CLRF   xBF
34FE:  CLRF   xC0
3500:  CLRF   xC1
3502:  CLRF   xC2
3504:  CLRF   xC3
3506:  CLRF   xC4
3508:  CLRF   xC5
350A:  CLRF   xC6
350C:  CLRF   xC7
350E:  CLRF   xC8
3510:  CLRF   xC9
3512:  CLRF   xCA
3514:  CLRF   xCB
3516:  CLRF   xCC
3518:  CLRF   xCD
351A:  CLRF   xCE
351C:  CLRF   xCF
351E:  CLRF   xD0
3520:  CLRF   xD1
3522:  CLRF   xD2
3524:  CLRF   xD3
3526:  CLRF   xD4
3528:  CLRF   xD5
352A:  CLRF   xD6
352C:  CLRF   xD7
352E:  CLRF   xD8
3530:  CLRF   xD9
3532:  CLRF   xDA
3534:  CLRF   xDB
3536:  CLRF   xDC
3538:  CLRF   xDD
353A:  CLRF   xDE
353C:  CLRF   xDF
353E:  CLRF   xE0
3540:  CLRF   xE1
3542:  CLRF   xE2
3544:  CLRF   xE3
3546:  CLRF   xE4
3548:  CLRF   xE5
354A:  CLRF   xE6
354C:  CLRF   xE7
354E:  CLRF   xE8
3550:  CLRF   xE9
3552:  CLRF   xEA
3554:  CLRF   xEB
3556:  CLRF   xEC
3558:  CLRF   xED
355A:  CLRF   xEE
355C:  CLRF   xEF
355E:  CLRF   xF0
3560:  CLRF   xF1
3562:  CLRF   xF2
3564:  CLRF   xF3
3566:  CLRF   xF4
3568:  CLRF   xF5
356A:  CLRF   xF6
356C:  CLRF   xF7
356E:  CLRF   xF8
3570:  CLRF   xF9
3572:  CLRF   xFA
3574:  CLRF   xFB
3576:  CLRF   xFC
3578:  CLRF   xFD
357A:  CLRF   xFE
357C:  CLRF   xFF
357E:  MOVLB  3
3580:  CLRF   x00
3582:  CLRF   x01
3584:  CLRF   x02
3586:  CLRF   x03
3588:  CLRF   x04
358A:  CLRF   x05
358C:  CLRF   x06
358E:  CLRF   x07
3590:  CLRF   x08
3592:  CLRF   x09
3594:  CLRF   x0A
3596:  CLRF   x0B
3598:  CLRF   x0C
359A:  CLRF   x0D
359C:  CLRF   x0E
359E:  CLRF   x0F
35A0:  CLRF   x10
35A2:  CLRF   x11
35A4:  CLRF   x12
35A6:  CLRF   x13
35A8:  CLRF   x14
35AA:  CLRF   x15
35AC:  CLRF   x16
35AE:  CLRF   x17
35B0:  CLRF   x18
35B2:  CLRF   x19
35B4:  CLRF   x1A
35B6:  CLRF   x1B
35B8:  CLRF   x1C
35BA:  CLRF   x1D
35BC:  CLRF   x1E
35BE:  CLRF   x1F
35C0:  CLRF   x20
35C2:  CLRF   x21
35C4:  CLRF   x22
35C6:  CLRF   x23
35C8:  CLRF   x24
35CA:  CLRF   x25
35CC:  CLRF   x26
35CE:  CLRF   x27
35D0:  CLRF   x28
35D2:  CLRF   x29
35D4:  CLRF   x2A
35D6:  CLRF   x2B
35D8:  CLRF   x2C
35DA:  CLRF   x2D
35DC:  CLRF   x2E
35DE:  CLRF   x2F
35E0:  CLRF   x30
35E2:  CLRF   x31
35E4:  CLRF   x32
35E6:  CLRF   x33
35E8:  CLRF   x34
35EA:  CLRF   x35
35EC:  CLRF   x36
35EE:  CLRF   x37
35F0:  CLRF   x38
35F2:  CLRF   x39
35F4:  CLRF   x3A
35F6:  CLRF   x3B
35F8:  CLRF   x3C
35FA:  CLRF   x3D
35FC:  CLRF   x3E
35FE:  CLRF   x3F
3600:  CLRF   x40
3602:  CLRF   x41
3604:  CLRF   x42
3606:  CLRF   x43
3608:  CLRF   x44
360A:  CLRF   x45
360C:  CLRF   x46
360E:  CLRF   x47
3610:  CLRF   x48
3612:  CLRF   x49
3614:  CLRF   x4A
3616:  CLRF   x4B
3618:  CLRF   x4C
361A:  CLRF   x4D
361C:  CLRF   x4E
361E:  CLRF   x4F
3620:  CLRF   x50
3622:  CLRF   x51
3624:  CLRF   x52
3626:  CLRF   x53
3628:  CLRF   x54
362A:  CLRF   x55
362C:  CLRF   x56
362E:  CLRF   x57
3630:  CLRF   x58
3632:  CLRF   x59
3634:  CLRF   x5A
3636:  CLRF   x5B
3638:  CLRF   x5C
363A:  CLRF   x5D
363C:  CLRF   x5E
363E:  CLRF   x5F
3640:  CLRF   x60
3642:  CLRF   x61
3644:  CLRF   x62
3646:  CLRF   x63
3648:  CLRF   x64
364A:  CLRF   x65
364C:  CLRF   x66
364E:  CLRF   x67
3650:  CLRF   x68
3652:  CLRF   x69
3654:  CLRF   x6A
3656:  CLRF   x6B
3658:  CLRF   x6C
365A:  CLRF   x6D
365C:  CLRF   x6E
365E:  CLRF   x6F
3660:  CLRF   x70
3662:  CLRF   x71
3664:  CLRF   x72
3666:  CLRF   x73
3668:  CLRF   x74
366A:  CLRF   x75
366C:  CLRF   x76
366E:  CLRF   x77
3670:  CLRF   x78
3672:  CLRF   x79
3674:  CLRF   x7A
3676:  CLRF   x7B
3678:  CLRF   x7C
367A:  CLRF   x7D
367C:  CLRF   x7E
367E:  CLRF   x7F
3680:  CLRF   x80
3682:  CLRF   x81
3684:  CLRF   x82
3686:  CLRF   x83
3688:  CLRF   x84
368A:  CLRF   x85
368C:  CLRF   x86
368E:  CLRF   x87
3690:  CLRF   x88
3692:  CLRF   x89
3694:  CLRF   x8A
3696:  CLRF   x8B
3698:  CLRF   x8C
369A:  CLRF   x8D
369C:  CLRF   x8E
369E:  CLRF   x8F
36A0:  CLRF   x90
36A2:  CLRF   x91
36A4:  CLRF   x92
36A6:  CLRF   x93
36A8:  CLRF   x94
36AA:  CLRF   x95
36AC:  CLRF   x96
36AE:  CLRF   x97
36B0:  CLRF   x98
36B2:  CLRF   x99
36B4:  CLRF   x9A
36B6:  CLRF   x9B
36B8:  CLRF   x9C
36BA:  CLRF   x9D
36BC:  CLRF   x9E
36BE:  CLRF   x9F
36C0:  CLRF   xA0
36C2:  CLRF   xA1
36C4:  CLRF   xA2
36C6:  CLRF   xA3
36C8:  CLRF   xA4
36CA:  CLRF   xA5
36CC:  CLRF   xA6
36CE:  CLRF   xA7
36D0:  CLRF   xA8
36D2:  CLRF   xA9
36D4:  CLRF   xAA
36D6:  CLRF   xAB
36D8:  CLRF   xAC
36DA:  CLRF   xAD
36DC:  CLRF   xAE
36DE:  CLRF   xAF
36E0:  CLRF   xB0
36E2:  CLRF   xB1
36E4:  CLRF   xB2
36E6:  CLRF   xB3
36E8:  CLRF   xB4
36EA:  CLRF   xB5
36EC:  CLRF   xB6
36EE:  CLRF   xB7
36F0:  CLRF   xB8
36F2:  CLRF   xB9
36F4:  CLRF   xBA
36F6:  CLRF   xBB
36F8:  CLRF   xBC
36FA:  CLRF   xBD
36FC:  CLRF   xBE
36FE:  CLRF   xBF
3700:  CLRF   xC0
3702:  CLRF   xC1
3704:  CLRF   xC2
3706:  CLRF   xC3
3708:  CLRF   xC4
370A:  CLRF   xC5
370C:  BCF    xC6.0
370E:  CLRF   xC8
3710:  CLRF   xC9
3712:  CLRF   xCA
3714:  CLRF   xCB
3716:  CLRF   xCC
3718:  CLRF   xCD
371A:  CLRF   xCE
371C:  CLRF   xCF
371E:  CLRF   xD0
3720:  CLRF   xD1
3722:  CLRF   xD2
3724:  CLRF   xD3
3726:  CLRF   xD4
3728:  CLRF   xD5
372A:  CLRF   xD6
372C:  CLRF   xD7
372E:  CLRF   xD8
3730:  CLRF   xD9
3732:  CLRF   xDA
3734:  CLRF   xDB
3736:  CLRF   xDC
3738:  CLRF   xDD
373A:  CLRF   xDE
373C:  CLRF   xDF
373E:  CLRF   xE0
3740:  CLRF   xE1
3742:  CLRF   xE2
3744:  CLRF   xE3
3746:  CLRF   xE4
3748:  CLRF   xE5
374A:  CLRF   xE6
374C:  CLRF   xE7
374E:  CLRF   xE8
3750:  CLRF   xE9
3752:  CLRF   xEA
3754:  CLRF   xEB
3756:  CLRF   xEC
3758:  CLRF   xED
375A:  CLRF   xEE
375C:  CLRF   xEF
375E:  CLRF   xF0
3760:  CLRF   xF1
3762:  CLRF   xF2
3764:  CLRF   xF3
3766:  CLRF   xF4
3768:  CLRF   xF8
376A:  CLRF   xF9
376C:  CLRF   xFA
376E:  CLRF   xFB
3770:  CLRF   xFC
3772:  CLRF   xFD
3774:  CLRF   xFE
3776:  CLRF   xFF
3778:  MOVLB  4
377A:  CLRF   x00
377C:  CLRF   x01
377E:  CLRF   x02
3780:  CLRF   x03
3782:  CLRF   x04
3784:  CLRF   x05
3786:  CLRF   x06
3788:  CLRF   x07
378A:  CLRF   x08
378C:  CLRF   x09
378E:  CLRF   x0A
3790:  CLRF   x0B
3792:  CLRF   x0C
3794:  CLRF   x0D
3796:  CLRF   x0E
3798:  CLRF   x0F
379A:  CLRF   x10
379C:  CLRF   x11
379E:  CLRF   x12
37A0:  CLRF   x13
37A2:  CLRF   x14
37A4:  CLRF   x15
37A6:  CLRF   x16
37A8:  CLRF   x17
37AA:  CLRF   x18
37AC:  CLRF   x19
37AE:  CLRF   x1A
37B0:  CLRF   x1B
37B2:  CLRF   x1C
37B4:  CLRF   x1D
37B6:  CLRF   x1E
37B8:  CLRF   x1F
37BA:  CLRF   x20
37BC:  CLRF   x21
37BE:  CLRF   x22
37C0:  CLRF   x23
37C2:  CLRF   x24
37C4:  CLRF   x25
37C6:  CLRF   x26
37C8:  CLRF   x27
37CA:  CLRF   x28
37CC:  CLRF   x29
37CE:  CLRF   x2A
37D0:  CLRF   x2B
37D2:  CLRF   x2C
37D4:  CLRF   x2D
37D6:  CLRF   x2E
37D8:  CLRF   x2F
37DA:  CLRF   x30
37DC:  CLRF   x31
37DE:  CLRF   x32
37E0:  CLRF   x33
37E2:  CLRF   x34
37E4:  CLRF   x35
37E6:  CLRF   x36
37E8:  CLRF   x37
37EA:  CLRF   x38
37EC:  CLRF   x39
37EE:  CLRF   x3A
37F0:  CLRF   x3B
37F2:  CLRF   x3C
37F4:  CLRF   x3D
37F6:  CLRF   x3E
37F8:  CLRF   x3F
37FA:  CLRF   x40
37FC:  CLRF   x41
37FE:  CLRF   x42
3800:  CLRF   x43
3802:  CLRF   x44
3804:  CLRF   x45
3806:  CLRF   x46
3808:  CLRF   x47
380A:  CLRF   x48
380C:  CLRF   x49
380E:  CLRF   x4A
3810:  CLRF   x4B
3812:  CLRF   x4C
3814:  CLRF   x4D
3816:  CLRF   x4E
3818:  CLRF   x4F
381A:  CLRF   x50
381C:  CLRF   x51
381E:  CLRF   x52
3820:  CLRF   x53
3822:  CLRF   x54
3824:  CLRF   x55
3826:  CLRF   x56
3828:  CLRF   x57
382A:  CLRF   x58
382C:  CLRF   x59
382E:  CLRF   x5A
3830:  CLRF   x5B
3832:  CLRF   x5C
3834:  CLRF   x5D
3836:  CLRF   x5E
3838:  CLRF   x5F
383A:  CLRF   x60
383C:  CLRF   x61
383E:  CLRF   x62
3840:  CLRF   x63
3842:  CLRF   x64
3844:  CLRF   x65
3846:  CLRF   x66
3848:  CLRF   x67
384A:  CLRF   x68
384C:  CLRF   x69
384E:  CLRF   x6A
3850:  CLRF   x6B
3852:  CLRF   x6C
3854:  CLRF   x6D
3856:  CLRF   x6E
3858:  CLRF   x6F
385A:  CLRF   x70
385C:  CLRF   x71
385E:  CLRF   x72
3860:  CLRF   x73
3862:  CLRF   x74
3864:  CLRF   x75
3866:  CLRF   x76
3868:  CLRF   x77
386A:  CLRF   x78
386C:  CLRF   x79
386E:  CLRF   x7A
3870:  CLRF   x7B
3872:  CLRF   x7C
3874:  CLRF   x7D
3876:  CLRF   x7E
3878:  CLRF   x7F
387A:  CLRF   x80
387C:  CLRF   x81
387E:  CLRF   x82
3880:  CLRF   x83
3882:  CLRF   x84
3884:  CLRF   x85
3886:  CLRF   x86
3888:  CLRF   x87
388A:  CLRF   x88
388C:  CLRF   x89
388E:  CLRF   x8A
3890:  CLRF   x8B
3892:  CLRF   x8C
3894:  CLRF   x8D
3896:  CLRF   x8E
3898:  CLRF   x8F
389A:  CLRF   x90
389C:  CLRF   x91
389E:  CLRF   x92
38A0:  CLRF   x93
38A2:  CLRF   x94
38A4:  CLRF   x95
38A6:  CLRF   x96
38A8:  CLRF   x97
38AA:  CLRF   x98
38AC:  CLRF   x99
38AE:  CLRF   x9A
38B0:  CLRF   x9B
38B2:  CLRF   x9C
38B4:  CLRF   x9D
38B6:  CLRF   x9E
38B8:  CLRF   x9F
38BA:  CLRF   xA0
38BC:  CLRF   xA1
38BE:  CLRF   xA2
38C0:  CLRF   xA3
38C2:  CLRF   xA4
38C4:  CLRF   xA5
38C6:  CLRF   xA6
38C8:  CLRF   xA7
38CA:  CLRF   xA8
38CC:  CLRF   xA9
38CE:  CLRF   xAA
38D0:  CLRF   xAB
38D2:  CLRF   xAC
38D4:  CLRF   xAD
38D6:  CLRF   xAE
38D8:  CLRF   xAF
38DA:  CLRF   xB0
38DC:  CLRF   xB1
38DE:  CLRF   xB2
38E0:  CLRF   xB3
38E2:  CLRF   xB4
38E4:  CLRF   xB5
38E6:  CLRF   xB6
38E8:  CLRF   xB7
38EA:  CLRF   xB8
38EC:  CLRF   xB9
38EE:  CLRF   xBA
38F0:  CLRF   xBB
38F2:  CLRF   xBC
38F4:  CLRF   xBD
38F6:  CLRF   xBE
38F8:  CLRF   xBF
38FA:  CLRF   xC0
38FC:  CLRF   xC1
38FE:  CLRF   xC2
3900:  CLRF   xC3
3902:  CLRF   xC4
3904:  CLRF   xC5
3906:  CLRF   xC6
3908:  CLRF   xC7
390A:  CLRF   xC8
390C:  CLRF   xC9
390E:  CLRF   xCA
3910:  CLRF   xCB
3912:  CLRF   xCC
3914:  CLRF   xCD
3916:  CLRF   xCE
3918:  CLRF   xCF
391A:  CLRF   xD0
391C:  CLRF   xD1
391E:  CLRF   xD2
3920:  CLRF   xD3
3922:  CLRF   xD4
3924:  CLRF   xD5
3926:  CLRF   xD6
3928:  CLRF   xD7
392A:  CLRF   xD8
392C:  CLRF   xD9
392E:  CLRF   xDA
3930:  CLRF   xDB
3932:  CLRF   xDC
3934:  CLRF   xDD
3936:  CLRF   xDE
3938:  CLRF   xDF
393A:  CLRF   xE0
393C:  CLRF   xE1
393E:  CLRF   xE2
3940:  CLRF   xE3
3942:  CLRF   xE4
3944:  CLRF   xE5
3946:  CLRF   xE6
3948:  CLRF   xE7
394A:  CLRF   xE8
394C:  CLRF   xE9
394E:  CLRF   xEA
3950:  CLRF   xEB
3952:  CLRF   xEC
3954:  CLRF   xED
3956:  CLRF   xEE
3958:  CLRF   xEF
395A:  CLRF   xF0
395C:  CLRF   xF1
395E:  CLRF   xF2
3960:  CLRF   xF3
3962:  CLRF   xF4
3964:  CLRF   xF5
3966:  CLRF   xF6
3968:  CLRF   xF7
396A:  CLRF   xF9
396C:  CLRF   xFA
396E:  CLRF   xFB
3970:  CLRF   xFC
3972:  CLRF   xFD
3974:  CLRF   xFE
3976:  CLRF   xFF
3978:  MOVLB  5
397A:  CLRF   x00
397C:  CLRF   x01
397E:  CLRF   x02
3980:  CLRF   x03
3982:  CLRF   x04
3984:  CLRF   x06
3986:  CLRF   x05
3988:  CLRF   x0C
398A:  CLRF   x0B
398C:  CLRF   x0A
398E:  CLRF   x09
3990:  MOVLW  01
3992:  MOVWF  x15
3994:  MOVLW  FF
3996:  MOVWF  x14
3998:  CLRF   x19
399A:  MOVLW  01
399C:  MOVWF  x18
.................... 	//addition variables 
.................... 	int16 maxCycles = 0; 
.................... 	int16 cnt; 
.................... 	int32 Wrk0 = 0;	//sum mean value 
.................... 	int16 StorAddr;	//storage address 
.................... 	int8 OutBufAddr;	//out buffer address 
.................... 	int32 Sum; 
.................... 	int16 BetTrsh = 0x01ff; //beta treshold 
.................... 	int16 bet_cur; //current beta value 
.................... 	int16 filterWidth = 1; 
.................... 	int16 sawLevel; 
....................  
.................... 	InitMcu();		//mcu init 
399E:  MOVLB  0
39A0:  GOTO   1FE4
.................... 	BURead();		//read registers from EE 
39A4:  GOTO   2082
.................... 	RsInit(); 
39A8:  GOTO   2558
....................  
.................... 	//interrupt configuration 
.................... 	enable_interrupts(INT_RDA); 
39AC:  BSF    F9D.5
.................... 	disable_interrupts(INT_TIMER1); 
39AE:  BCF    F9D.0
.................... 	enable_interrupts(GLOBAL); 
39B0:  MOVLW  C0
39B2:  IORWF  FF2,F
....................  
.................... 	output_high(TERMO); 
39B4:  BCF    F96.1
39B6:  BSF    F8D.1
....................  
.................... 	DaqState = DaqStart; 
39B8:  MOVLW  01
39BA:  MOVLB  3
39BC:  MOVWF  xF7
.................... 	//main cycle 
.................... 	while (TRUE) 
.................... 	{ 
.................... 		restart_wdt(); 
39BE:  CLRWDT
.................... 		//state procesor 
.................... 		switch (DaqState) 
.................... 		{ 
39C0:  MOVF   xF7,W
39C2:  ADDLW  FC
39C4:  BTFSC  FD8.0
39C6:  GOTO   4314
39CA:  ADDLW  04
39CC:  MOVLB  0
39CE:  GOTO   431A
.................... 		case DaqIdle: 
.................... 			Termometer(); 
39D2:  CALL   281E
.................... 			//wait for state changing 
.................... 			break; 
39D6:  MOVLB  3
39D8:  GOTO   4314
....................  
.................... 		case DaqStart: 
.................... 			//prepare for measuring 
.................... 			bet_cur = 0;		//reset beta value 
39DC:  MOVLB  5
39DE:  CLRF   x17
39E0:  CLRF   x16
....................  
.................... 			//set input amplifiers 
.................... 			SetKU0(AmpCoef0); 
39E2:  MOVFF  3AB,51D
39E6:  MOVFF  3AA,51C
39EA:  MOVLB  0
39EC:  GOTO   2994
.................... 			SetKU1(AmpCoef1); 
39F0:  MOVFF  3B7,51D
39F4:  MOVFF  3B6,51C
39F8:  GOTO   2A10
....................  
.................... 			//filtering window setup 
.................... 			if (FWDT > 0 && FWDT < 7) 
39FC:  MOVLB  3
39FE:  MOVF   xC2,F
3A00:  BNZ   3A06
3A02:  MOVF   xC3,F
3A04:  BZ    3A36
3A06:  MOVF   xC3,F
3A08:  BNZ   3A36
3A0A:  MOVF   xC2,W
3A0C:  SUBLW  06
3A0E:  BNC   3A36
.................... 			{ 
.................... 				filterWidth = (int16)(0x0001 << FWDT); //power 2 for FWDT factor 
3A10:  MOVLB  5
3A12:  CLRF   x19
3A14:  MOVLW  01
3A16:  MOVWF  x18
3A18:  MOVLB  3
3A1A:  MOVF   xC2,W
3A1C:  MOVWF  00
3A1E:  BZ    3A34
3A20:  BCF    FD8.0
3A22:  MOVLB  5
3A24:  RLCF   x18,F
3A26:  RLCF   x19,F
3A28:  DECFSZ 00,F
3A2A:  BRA    3A2E
3A2C:  BRA    3A32
3A2E:  MOVLB  3
3A30:  BRA    3A20
3A32:  MOVLB  3
.................... 			} 
.................... 			else 
3A34:  BRA    3A3E
.................... 				filterWidth = 1; 
3A36:  MOVLB  5
3A38:  CLRF   x19
3A3A:  MOVLW  01
3A3C:  MOVWF  x18
....................  
.................... 			//zero buffers & variables 
.................... 			for (cnt = 0; cnt < filterWidth; cnt++) 
3A3E:  MOVLB  5
3A40:  CLRF   x08
3A42:  CLRF   x07
3A44:  MOVF   x08,W
3A46:  SUBWF  x19,W
3A48:  BNC   3A76
3A4A:  BNZ   3A52
3A4C:  MOVF   x18,W
3A4E:  SUBWF  x07,W
3A50:  BC    3A76
.................... 			{ 
.................... 				data_filt0[cnt] = 0;	//clear buffer 
3A52:  BCF    FD8.0
3A54:  RLCF   x07,W
3A56:  MOVWF  02
3A58:  RLCF   x08,W
3A5A:  MOVWF  03
3A5C:  MOVF   02,W
3A5E:  ADDLW  1A
3A60:  MOVWF  FE9
3A62:  MOVLW  00
3A64:  ADDWFC 03,W
3A66:  MOVWF  FEA
3A68:  CLRF   FEC
3A6A:  MOVF   FED,F
3A6C:  CLRF   FEF
.................... 			} 
3A6E:  INCF   x07,F
3A70:  BTFSC  FD8.2
3A72:  INCF   x08,F
3A74:  BRA    3A44
....................  
.................... 			StorAddr = 0; 
3A76:  CLRF   x0E
3A78:  CLRF   x0D
.................... 			OutBufAddr = 0; 
3A7A:  CLRF   x0F
.................... 			iWin = 0; 
3A7C:  MOVLB  3
3A7E:  CLRF   xE8
.................... 			iMaxFall0 = 0; 
3A80:  MOVLB  0
3A82:  CLRF   xA3
3A84:  CLRF   xA2
.................... 			iMaxRise0 = 0; 
3A86:  CLRF   x9F
3A88:  CLRF   x9E
.................... 			maxFall0 = 0; 
3A8A:  CLRF   xA1
3A8C:  CLRF   xA0
.................... 			maxRise0 = 0; 
3A8E:  CLRF   x9D
3A90:  CLRF   x9C
.................... 			data_mean0 = 0; 
3A92:  CLRF   x9B
3A94:  CLRF   x9A
....................  
.................... 			//DAC parameters initialization 
.................... 			sawStartLevel = (int16)(((float)SAW_A0 / 1000) * volts2dac); //convert to ADC discretes 
3A96:  MOVFF  3CB,51D
3A9A:  MOVFF  3CA,51C
3A9E:  CALL   2A8C
3AA2:  MOVFF  00,51C
3AA6:  MOVFF  01,51D
3AAA:  MOVFF  02,51E
3AAE:  MOVFF  03,51F
3AB2:  MOVFF  03,523
3AB6:  MOVFF  02,522
3ABA:  MOVFF  01,521
3ABE:  MOVFF  00,520
3AC2:  MOVLB  5
3AC4:  CLRF   x27
3AC6:  CLRF   x26
3AC8:  MOVLW  7A
3ACA:  MOVWF  x25
3ACC:  MOVLW  88
3ACE:  MOVWF  x24
3AD0:  MOVLB  0
3AD2:  CALL   2AC2
3AD6:  MOVFF  00,51C
3ADA:  MOVFF  01,51D
3ADE:  MOVFF  02,51E
3AE2:  MOVFF  03,51F
3AE6:  MOVFF  03,525
3AEA:  MOVFF  02,524
3AEE:  MOVFF  01,523
3AF2:  MOVFF  00,522
3AF6:  MOVLW  CD
3AF8:  MOVLB  5
3AFA:  MOVWF  x29
3AFC:  MOVLW  CC
3AFE:  MOVWF  x28
3B00:  MOVLW  4C
3B02:  MOVWF  x27
3B04:  MOVLW  86
3B06:  MOVWF  x26
3B08:  MOVLB  0
3B0A:  CALL   26EC
3B0E:  MOVFF  03,525
3B12:  MOVFF  02,524
3B16:  MOVFF  01,523
3B1A:  MOVFF  00,522
3B1E:  CALL   27E2
3B22:  MOVFF  02,3CD
3B26:  MOVFF  01,3CC
....................  
.................... 			sawEndLevel = sawStartLevel 
.................... 				+ (int16)(((float)SAW_A1 / 1000) * volts2dac); 
3B2A:  MOVFF  3CF,51D
3B2E:  MOVFF  3CE,51C
3B32:  CALL   2A8C
3B36:  MOVFF  00,51C
3B3A:  MOVFF  01,51D
3B3E:  MOVFF  02,51E
3B42:  MOVFF  03,51F
3B46:  MOVFF  03,523
3B4A:  MOVFF  02,522
3B4E:  MOVFF  01,521
3B52:  MOVFF  00,520
3B56:  MOVLB  5
3B58:  CLRF   x27
3B5A:  CLRF   x26
3B5C:  MOVLW  7A
3B5E:  MOVWF  x25
3B60:  MOVLW  88
3B62:  MOVWF  x24
3B64:  MOVLB  0
3B66:  CALL   2AC2
3B6A:  MOVFF  00,51C
3B6E:  MOVFF  01,51D
3B72:  MOVFF  02,51E
3B76:  MOVFF  03,51F
3B7A:  MOVFF  03,525
3B7E:  MOVFF  02,524
3B82:  MOVFF  01,523
3B86:  MOVFF  00,522
3B8A:  MOVLW  CD
3B8C:  MOVLB  5
3B8E:  MOVWF  x29
3B90:  MOVLW  CC
3B92:  MOVWF  x28
3B94:  MOVLW  4C
3B96:  MOVWF  x27
3B98:  MOVLW  86
3B9A:  MOVWF  x26
3B9C:  MOVLB  0
3B9E:  CALL   26EC
3BA2:  MOVFF  03,525
3BA6:  MOVFF  02,524
3BAA:  MOVFF  01,523
3BAE:  MOVFF  00,522
3BB2:  CALL   27E2
3BB6:  MOVF   01,W
3BB8:  MOVLB  3
3BBA:  ADDWF  xCC,W
3BBC:  MOVWF  xD0
3BBE:  MOVF   02,W
3BC0:  ADDWFC xCD,W
3BC2:  MOVWF  xD1
....................  
.................... 			if (sawEndLevel >= 4096){ 
3BC4:  MOVF   xD1,W
3BC6:  SUBLW  0F
3BC8:  BC    3BD2
.................... 				sawEndLevel = 4095; 
3BCA:  MOVLW  0F
3BCC:  MOVWF  xD1
3BCE:  MOVLW  FF
3BD0:  MOVWF  xD0
.................... 			} 
.................... 				 
....................  
.................... 			//next state 
.................... 			DaqState = DaqMeasure;	//set measuring state 
3BD2:  MOVLW  02
3BD4:  MOVWF  xF7
.................... 			break; 
3BD6:  BRA    4314
....................  
.................... 		case DaqMeasure: 
.................... 			//indicate 
.................... 			output_toggle(STAT); 
3BD8:  BCF    F94.0
3BDA:  BTG    F8B.0
....................  
.................... 			//set initial DAC level 
.................... 			SetSawDac(sawStartLevel); 
3BDC:  MOVFF  3CD,51D
3BE0:  MOVFF  3CC,51C
3BE4:  CALL   2C20
....................  
.................... 			//read data from ADC 
.................... 			//select ADC channel 
.................... 			set_adc_channel(0);	//select ch0 
3BE8:  MOVLW  00
3BEA:  MOVWF  01
3BEC:  MOVF   FC2,W
3BEE:  ANDLW  C3
3BF0:  IORWF  01,W
3BF2:  MOVWF  FC2
....................  
.................... 			Sum = 0; 
3BF4:  MOVLB  5
3BF6:  CLRF   x13
3BF8:  CLRF   x12
3BFA:  CLRF   x11
3BFC:  CLRF   x10
.................... 			Wrk0 = 0; 
3BFE:  CLRF   x0C
3C00:  CLRF   x0B
3C02:  CLRF   x0A
3C04:  CLRF   x09
.................... 			maxCycles = 0; 
3C06:  CLRF   x06
3C08:  CLRF   x05
....................  
.................... 			// Rising saw part 
.................... 			for (sawLevel = sawStartLevel; sawLevel <= sawEndLevel; sawLevel++) 
3C0A:  MOVFF  3CD,51B
3C0E:  MOVFF  3CC,51A
3C12:  MOVF   x1B,W
3C14:  MOVLB  3
3C16:  SUBWF  xD1,W
3C18:  BTFSS  FD8.0
3C1A:  BRA    3D4E
3C1C:  BNZ   3C2A
3C1E:  MOVLB  5
3C20:  MOVF   x1A,W
3C22:  MOVLB  3
3C24:  SUBWF  xD0,W
3C26:  BTFSS  FD8.0
3C28:  BRA    3D4E
.................... 			{ 
....................  
.................... 				restart_wdt(); 
3C2A:  CLRWDT
....................  
.................... 				read_adc(ADC_START_ONLY); //read measured value 
3C2C:  BSF    FC2.1
....................  
.................... 				SetSawDac(sawLevel);	//set next saw level 
3C2E:  MOVFF  51B,51D
3C32:  MOVFF  51A,51C
3C36:  MOVLB  0
3C38:  CALL   2C20
....................  
.................... 				ADC0 = read_adc(ADC_READ_ONLY); //read measured value 
3C3C:  BTFSC  FC2.1
3C3E:  BRA    3C3C
3C40:  MOVFF  FC4,3DD
3C44:  MOVLB  3
3C46:  MOVFF  FC3,3DC
.................... 				 
.................... 				//filtering 
.................... 				Wrk0 -= data_filt0[iWin];	//calc new sum mean val 
3C4A:  BCF    FD8.0
3C4C:  RLCF   xE8,W
3C4E:  CLRF   03
3C50:  ADDLW  1A
3C52:  MOVWF  FE9
3C54:  MOVLW  00
3C56:  ADDWFC 03,W
3C58:  MOVWF  FEA
3C5A:  MOVFF  FEC,03
3C5E:  MOVF   FED,F
3C60:  MOVF   FEF,W
3C62:  MOVLB  5
3C64:  SUBWF  x09,F
3C66:  MOVF   03,W
3C68:  SUBWFB x0A,F
3C6A:  MOVLW  00
3C6C:  SUBWFB x0B,F
3C6E:  SUBWFB x0C,F
.................... 				 
.................... 				Wrk0 += ADC0; 
3C70:  MOVLB  3
3C72:  MOVF   xDC,W
3C74:  MOVLB  5
3C76:  ADDWF  x09,F
3C78:  MOVLB  3
3C7A:  MOVF   xDD,W
3C7C:  MOVLB  5
3C7E:  ADDWFC x0A,F
3C80:  MOVLW  00
3C82:  ADDWFC x0B,F
3C84:  ADDWFC x0C,F
....................  
.................... 				data_filt0[iWin] = ADC0; 
3C86:  BCF    FD8.0
3C88:  MOVLB  3
3C8A:  RLCF   xE8,W
3C8C:  CLRF   03
3C8E:  ADDLW  1A
3C90:  MOVWF  FE9
3C92:  MOVLW  00
3C94:  ADDWFC 03,W
3C96:  MOVWF  FEA
3C98:  MOVFF  3DD,FEC
3C9C:  MOVF   FED,F
3C9E:  MOVFF  3DC,FEF
....................  
.................... 				//next filter value 
.................... 				if (iWin == 0) 
3CA2:  MOVF   xE8,F
3CA4:  BNZ   3CAE
.................... 				{ 
.................... 					iWin = filterWidth; 
3CA6:  MOVFF  518,3E8
.................... 					iWin--; 
3CAA:  DECF   xE8,F
.................... 				} 
.................... 				else 
3CAC:  BRA    3CB0
.................... 					iWin--; 
3CAE:  DECF   xE8,F
.................... 					 
.................... 				//cycle meaning 
.................... 				/*Wrk0=0; 
.................... 				int8 i; 
.................... 				for (i = 0; i<filterWidth; i++) 
.................... 				{ 
.................... 					Wrk0 +=data_filt0[i]; 
.................... 				}*/ 
.................... 					 
....................  
.................... 				//calc mean value 
.................... 				data_mean0 = (int16)(Wrk0 >> FWDT); //divide by filterWidth = 2^FWDT 
3CB0:  MOVFF  50C,03
3CB4:  MOVFF  50B,02
3CB8:  MOVFF  50A,01
3CBC:  MOVFF  509,00
3CC0:  MOVF   xC2,W
3CC2:  MOVLB  5
3CC4:  MOVWF  x1C
3CC6:  BZ    3CD6
3CC8:  BCF    FD8.0
3CCA:  RRCF   03,F
3CCC:  RRCF   02,F
3CCE:  RRCF   01,F
3CD0:  RRCF   00,F
3CD2:  DECFSZ x1C,F
3CD4:  BRA    3CC8
3CD6:  MOVFF  01,9B
3CDA:  MOVFF  00,9A
.................... 				Sum += data_mean0; 
3CDE:  MOVLB  0
3CE0:  MOVF   x9A,W
3CE2:  MOVLB  5
3CE4:  ADDWF  x10,F
3CE6:  MOVLB  0
3CE8:  MOVF   x9B,W
3CEA:  MOVLB  5
3CEC:  ADDWFC x11,F
3CEE:  MOVLW  00
3CF0:  ADDWFC x12,F
3CF2:  ADDWFC x13,F
....................  
.................... 				//extremum 
.................... 				//estim max val 
.................... 				if (data_mean0 > maxRise0) 
3CF4:  MOVLB  0
3CF6:  MOVF   x9D,W
3CF8:  SUBWF  x9B,W
3CFA:  BNC   3D14
3CFC:  BNZ   3D04
3CFE:  MOVF   x9A,W
3D00:  SUBWF  x9C,W
3D02:  BC    3D14
.................... 				{ 
.................... 					iMaxRise0 = StorAddr; 
3D04:  MOVFF  50E,9F
3D08:  MOVFF  50D,9E
.................... 					maxRise0 = data_mean0; 
3D0C:  MOVFF  9B,9D
3D10:  MOVFF  9A,9C
.................... 				}; 
....................  
.................... 				StorAddr++; 
3D14:  MOVLB  5
3D16:  INCF   x0D,F
3D18:  BTFSC  FD8.2
3D1A:  INCF   x0E,F
....................  
.................... 				//beta measuring 
.................... 				if (data_mean0 > BetTrsh) 
3D1C:  MOVF   x15,W
3D1E:  MOVLB  0
3D20:  SUBWF  x9B,W
3D22:  BNC   3D3C
3D24:  BNZ   3D34
3D26:  MOVF   x9A,W
3D28:  MOVLB  5
3D2A:  SUBWF  x14,W
3D2C:  BTFSS  FD8.0
3D2E:  BRA    3D34
3D30:  MOVLB  0
3D32:  BRA    3D3C
.................... 					bet_cur++; 
3D34:  MOVLB  5
3D36:  INCF   x16,F
3D38:  BTFSC  FD8.2
3D3A:  INCF   x17,F
....................  
.................... 				maxCycles++; //add cycle count 
3D3C:  MOVLB  5
3D3E:  INCF   x05,F
3D40:  BTFSC  FD8.2
3D42:  INCF   x06,F
....................  
.................... 			} 
3D44:  INCF   x1A,F
3D46:  BTFSC  FD8.2
3D48:  INCF   x1B,F
3D4A:  BRA    3C12
3D4C:  MOVLB  3
....................  
.................... 			DaqState = DaqScale; 
3D4E:  MOVLW  03
3D50:  MOVWF  xF7
.................... 			break; 
3D52:  BRA    4314
....................  
.................... 		case DaqScale: 
.................... 			//scaling & result storing 
....................  
.................... 			//temperature 
.................... 			Termometer(); 
3D54:  CALL   281E
.................... 			restart_wdt(); 
3D58:  CLRWDT
....................  
.................... 			//regulator 
.................... 			if (T_GEN > (TG_CAL + Hst)) 
3D5A:  MOVLB  3
3D5C:  MOVF   xF5,W
3D5E:  ADDWF  xDA,W
3D60:  MOVWF  01
3D62:  MOVF   xF6,W
3D64:  ADDWFC xDB,W
3D66:  MOVWF  03
3D68:  MOVF   01,W
3D6A:  BTFSC  xC9.7
3D6C:  BRA    3D80
3D6E:  MOVF   03,W
3D70:  SUBWF  xC9,W
3D72:  BNC   3D80
3D74:  BNZ   3D7C
3D76:  MOVF   xC8,W
3D78:  SUBWF  01,W
3D7A:  BC    3D80
.................... 			{ //if temperature above rated & histeresis 
.................... 				output_low(TERMO);				//off heater 
3D7C:  BCF    F96.1
3D7E:  BCF    F8D.1
.................... 			} 
....................  
.................... 			if (T_GEN < (TG_CAL - Hst)) 
3D80:  MOVF   xF5,W
3D82:  SUBWF  xDA,W
3D84:  MOVWF  00
3D86:  MOVF   xF6,W
3D88:  SUBWFB xDB,W
3D8A:  MOVWF  03
3D8C:  MOVFF  00,01
3D90:  BTFSC  xC9.7
3D92:  BRA    3DA2
3D94:  MOVF   xC9,W
3D96:  SUBWF  03,W
3D98:  BNC   3DA6
3D9A:  BNZ   3DA2
3D9C:  MOVF   01,W
3D9E:  SUBWF  xC8,W
3DA0:  BC    3DA6
.................... 			{			//if temperature below rated & histeresis 
.................... 				output_high(TERMO);				//on heater 
3DA2:  BCF    F96.1
3DA4:  BSF    F8D.1
.................... 			} 
....................  
.................... 			//amplitude - alpha 
.................... 			alp_buf0[iGam] = maxRise0; 
3DA6:  BCF    FD8.0
3DA8:  RLCF   xC7,W
3DAA:  CLRF   03
3DAC:  ADDLW  A4
3DAE:  MOVWF  FE9
3DB0:  MOVLW  00
3DB2:  ADDWFC 03,W
3DB4:  MOVWF  FEA
3DB6:  MOVFF  9D,FEC
3DBA:  MOVF   FED,F
3DBC:  MOVFF  9C,FEF
.................... 			currentAlpha = maxRise0; 
3DC0:  MOVFF  9D,3DF
3DC4:  MOVFF  9C,3DE
....................  
.................... 			//treshold estimation by /2 
.................... 			BetTrsh = alp_buf0[iGam] >> 1; 
3DC8:  BCF    FD8.0
3DCA:  RLCF   xC7,W
3DCC:  CLRF   03
3DCE:  ADDLW  A4
3DD0:  MOVWF  FE9
3DD2:  MOVLW  00
3DD4:  ADDWFC 03,W
3DD6:  MOVWF  FEA
3DD8:  MOVFF  FEC,51D
3DDC:  MOVF   FED,F
3DDE:  MOVFF  FEF,51C
3DE2:  BCF    FD8.0
3DE4:  MOVLB  5
3DE6:  RRCF   x1D,W
3DE8:  MOVWF  x15
3DEA:  RRCF   x1C,W
3DEC:  MOVWF  x14
....................  
.................... 			//pulse width 
.................... 			bet_buf0[iGam] = bet_cur; 
3DEE:  BCF    FD8.0
3DF0:  MOVLB  3
3DF2:  RLCF   xC7,W
3DF4:  CLRF   03
3DF6:  ADDLW  A4
3DF8:  MOVWF  FE9
3DFA:  MOVLW  01
3DFC:  ADDWFC 03,W
3DFE:  MOVWF  FEA
3E00:  MOVFF  517,FEC
3E04:  MOVF   FED,F
3E06:  MOVFF  516,FEF
.................... 			currentBeta = bet_cur; 
3E0A:  MOVFF  517,3E1
3E0E:  MOVFF  516,3E0
....................  
.................... 			//gamma meaning 
.................... 			gam_buf0[iGam] = iMaxRise0; //meaning buffer 
3E12:  BCF    FD8.0
3E14:  RLCF   xC7,W
3E16:  CLRF   03
3E18:  ADDLW  A4
3E1A:  MOVWF  FE9
3E1C:  MOVLW  02
3E1E:  ADDWFC 03,W
3E20:  MOVWF  FEA
3E22:  MOVFF  9F,FEC
3E26:  MOVF   FED,F
3E28:  MOVFF  9E,FEF
.................... 			currentGamma = iMaxRise0; 
3E2C:  MOVFF  9F,3E3
3E30:  MOVFF  9E,3E2
....................  
.................... 			//next index 
.................... 			if (iGam == 0) 
3E34:  MOVF   xC7,F
3E36:  BNZ   3E40
.................... 			{ 
.................... 				iGam = PCOUNT - 1; 
3E38:  MOVLW  01
3E3A:  SUBWF  xC4,W
3E3C:  MOVWF  xC7
.................... 			} 
.................... 			else 
3E3E:  BRA    3E42
.................... 				iGam--; 
3E40:  DECF   xC7,F
....................  
.................... 			AlpSum = 0; 
3E42:  CLRF   xEC
3E44:  CLRF   xEB
3E46:  CLRF   xEA
3E48:  CLRF   xE9
.................... 			BetSum = 0; 
3E4A:  CLRF   xF0
3E4C:  CLRF   xEF
3E4E:  CLRF   xEE
3E50:  CLRF   xED
.................... 			GamSum = 0; 
3E52:  CLRF   xF4
3E54:  CLRF   xF3
3E56:  CLRF   xF2
3E58:  CLRF   xF1
....................  
.................... 			for (cnt = 0; cnt < PCOUNT; cnt++) 
3E5A:  MOVLB  5
3E5C:  CLRF   x08
3E5E:  CLRF   x07
3E60:  MOVF   x08,W
3E62:  MOVLB  3
3E64:  SUBWF  xC5,W
3E66:  BNC   3F12
3E68:  BNZ   3E7A
3E6A:  MOVF   xC4,W
3E6C:  MOVLB  5
3E6E:  SUBWF  x07,W
3E70:  BTFSS  FD8.0
3E72:  BRA    3E78
3E74:  MOVLB  3
3E76:  BRA    3F12
3E78:  MOVLB  3
.................... 			{ 
.................... 				restart_wdt(); 
3E7A:  CLRWDT
.................... 				AlpSum += alp_buf0[cnt]; 
3E7C:  BCF    FD8.0
3E7E:  MOVLB  5
3E80:  RLCF   x07,W
3E82:  MOVWF  02
3E84:  RLCF   x08,W
3E86:  MOVWF  03
3E88:  MOVF   02,W
3E8A:  ADDLW  A4
3E8C:  MOVWF  FE9
3E8E:  MOVLW  00
3E90:  ADDWFC 03,W
3E92:  MOVWF  FEA
3E94:  MOVFF  FEC,03
3E98:  MOVF   FED,F
3E9A:  MOVF   FEF,W
3E9C:  MOVLB  3
3E9E:  ADDWF  xE9,F
3EA0:  MOVF   03,W
3EA2:  ADDWFC xEA,F
3EA4:  MOVLW  00
3EA6:  ADDWFC xEB,F
3EA8:  ADDWFC xEC,F
.................... 				BetSum += bet_buf0[cnt]; 
3EAA:  BCF    FD8.0
3EAC:  MOVLB  5
3EAE:  RLCF   x07,W
3EB0:  MOVWF  02
3EB2:  RLCF   x08,W
3EB4:  MOVWF  03
3EB6:  MOVF   02,W
3EB8:  ADDLW  A4
3EBA:  MOVWF  FE9
3EBC:  MOVLW  01
3EBE:  ADDWFC 03,W
3EC0:  MOVWF  FEA
3EC2:  MOVFF  FEC,03
3EC6:  MOVF   FED,F
3EC8:  MOVF   FEF,W
3ECA:  MOVLB  3
3ECC:  ADDWF  xED,F
3ECE:  MOVF   03,W
3ED0:  ADDWFC xEE,F
3ED2:  MOVLW  00
3ED4:  ADDWFC xEF,F
3ED6:  ADDWFC xF0,F
.................... 				GamSum += gam_buf0[cnt]; 
3ED8:  BCF    FD8.0
3EDA:  MOVLB  5
3EDC:  RLCF   x07,W
3EDE:  MOVWF  02
3EE0:  RLCF   x08,W
3EE2:  MOVWF  03
3EE4:  MOVF   02,W
3EE6:  ADDLW  A4
3EE8:  MOVWF  FE9
3EEA:  MOVLW  02
3EEC:  ADDWFC 03,W
3EEE:  MOVWF  FEA
3EF0:  MOVFF  FEC,03
3EF4:  MOVF   FED,F
3EF6:  MOVF   FEF,W
3EF8:  MOVLB  3
3EFA:  ADDWF  xF1,F
3EFC:  MOVF   03,W
3EFE:  ADDWFC xF2,F
3F00:  MOVLW  00
3F02:  ADDWFC xF3,F
3F04:  ADDWFC xF4,F
.................... 			} 
3F06:  MOVLB  5
3F08:  INCF   x07,F
3F0A:  BTFSC  FD8.2
3F0C:  INCF   x08,F
3F0E:  BRA    3E60
3F10:  MOVLB  3
....................  
.................... 			//alpha 
.................... 			restart_wdt(); 
3F12:  CLRWDT
.................... 			Amplitude0 = (int16)(((AlpSum >> 7) >> (AmpCoef0)) * 2.4414); //divide sum by 128 and conver to volts with amplify coeff 
3F14:  RRCF   xEC,W
3F16:  MOVLB  5
3F18:  MOVWF  x20
3F1A:  MOVLB  3
3F1C:  RRCF   xEB,W
3F1E:  MOVLB  5
3F20:  MOVWF  x1F
3F22:  MOVLB  3
3F24:  RRCF   xEA,W
3F26:  MOVLB  5
3F28:  MOVWF  x1E
3F2A:  MOVLB  3
3F2C:  RRCF   xE9,W
3F2E:  MOVLB  5
3F30:  MOVWF  x1D
3F32:  RRCF   x20,F
3F34:  RRCF   x1F,F
3F36:  RRCF   x1E,F
3F38:  RRCF   x1D,F
3F3A:  RRCF   x20,F
3F3C:  RRCF   x1F,F
3F3E:  RRCF   x1E,F
3F40:  RRCF   x1D,F
3F42:  RRCF   x20,F
3F44:  RRCF   x1F,F
3F46:  RRCF   x1E,F
3F48:  RRCF   x1D,F
3F4A:  RRCF   x20,F
3F4C:  RRCF   x1F,F
3F4E:  RRCF   x1E,F
3F50:  RRCF   x1D,F
3F52:  RRCF   x20,F
3F54:  RRCF   x1F,F
3F56:  RRCF   x1E,F
3F58:  RRCF   x1D,F
3F5A:  RRCF   x20,F
3F5C:  RRCF   x1F,F
3F5E:  RRCF   x1E,F
3F60:  RRCF   x1D,F
3F62:  MOVLW  01
3F64:  ANDWF  x20,F
3F66:  MOVLB  3
3F68:  MOVF   xAA,W
3F6A:  MOVLB  5
3F6C:  MOVWF  x21
3F6E:  BZ    3F7E
3F70:  BCF    FD8.0
3F72:  RRCF   x20,F
3F74:  RRCF   x1F,F
3F76:  RRCF   x1E,F
3F78:  RRCF   x1D,F
3F7A:  DECFSZ x21,F
3F7C:  BRA    3F70
3F7E:  MOVFF  520,525
3F82:  MOVFF  51F,524
3F86:  MOVFF  51E,523
3F8A:  MOVFF  51D,522
3F8E:  MOVLB  0
3F90:  CALL   2C56
3F94:  MOVFF  03,525
3F98:  MOVFF  02,524
3F9C:  MOVFF  01,523
3FA0:  MOVFF  00,522
3FA4:  MOVLW  E6
3FA6:  MOVLB  5
3FA8:  MOVWF  x29
3FAA:  MOVLW  3F
3FAC:  MOVWF  x28
3FAE:  MOVLW  1C
3FB0:  MOVWF  x27
3FB2:  MOVLW  80
3FB4:  MOVWF  x26
3FB6:  MOVLB  0
3FB8:  CALL   26EC
3FBC:  MOVFF  03,525
3FC0:  MOVFF  02,524
3FC4:  MOVFF  01,523
3FC8:  MOVFF  00,522
3FCC:  CALL   27E2
3FD0:  MOVFF  02,3A5
3FD4:  MOVFF  01,3A4
.................... 			currentAlpha = (int16)(((int32)(currentAlpha >> (AmpCoef0)) * 2.4414) - 0); 
3FD8:  MOVFF  3DF,03
3FDC:  MOVLB  3
3FDE:  MOVFF  3DE,02
3FE2:  MOVF   xAA,W
3FE4:  MOVWF  00
3FE6:  BZ    3FF2
3FE8:  BCF    FD8.0
3FEA:  RRCF   03,F
3FEC:  RRCF   02,F
3FEE:  DECFSZ 00,F
3FF0:  BRA    3FE8
3FF2:  MOVF   02,W
3FF4:  MOVLB  5
3FF6:  MOVWF  x1C
3FF8:  MOVFF  03,51D
3FFC:  CLRF   x1E
3FFE:  CLRF   x1F
4000:  MOVFF  51F,525
4004:  MOVFF  51E,524
4008:  MOVFF  03,523
400C:  MOVWF  x22
400E:  MOVLB  0
4010:  CALL   2C56
4014:  MOVFF  03,525
4018:  MOVFF  02,524
401C:  MOVFF  01,523
4020:  MOVFF  00,522
4024:  MOVLW  E6
4026:  MOVLB  5
4028:  MOVWF  x29
402A:  MOVLW  3F
402C:  MOVWF  x28
402E:  MOVLW  1C
4030:  MOVWF  x27
4032:  MOVLW  80
4034:  MOVWF  x26
4036:  MOVLB  0
4038:  CALL   26EC
403C:  MOVFF  00,51C
4040:  MOVFF  01,51D
4044:  MOVFF  02,51E
4048:  MOVFF  03,51F
404C:  BSF    FD8.1
404E:  MOVFF  03,523
4052:  MOVFF  02,522
4056:  MOVFF  01,521
405A:  MOVFF  00,520
405E:  MOVLB  5
4060:  CLRF   x27
4062:  CLRF   x26
4064:  CLRF   x25
4066:  CLRF   x24
4068:  MOVLB  0
406A:  GOTO   2C8E
406E:  MOVFF  03,525
4072:  MOVFF  02,524
4076:  MOVFF  01,523
407A:  MOVFF  00,522
407E:  CALL   27E2
4082:  MOVFF  02,3DF
4086:  MOVFF  01,3DE
....................  
.................... 			//beta 
.................... 			restart_wdt(); 
408A:  CLRWDT
.................... 			PulseWdt0 = (int16)((BetSum>>7) * 10000 / maxCycles); //divide sum by 128 and norming 
408C:  MOVLB  3
408E:  RRCF   xF0,W
4090:  MOVLB  5
4092:  MOVWF  x20
4094:  MOVLB  3
4096:  RRCF   xEF,W
4098:  MOVLB  5
409A:  MOVWF  x1F
409C:  MOVLB  3
409E:  RRCF   xEE,W
40A0:  MOVLB  5
40A2:  MOVWF  x1E
40A4:  MOVLB  3
40A6:  RRCF   xED,W
40A8:  MOVLB  5
40AA:  MOVWF  x1D
40AC:  RRCF   x20,F
40AE:  RRCF   x1F,F
40B0:  RRCF   x1E,F
40B2:  RRCF   x1D,F
40B4:  RRCF   x20,F
40B6:  RRCF   x1F,F
40B8:  RRCF   x1E,F
40BA:  RRCF   x1D,F
40BC:  RRCF   x20,F
40BE:  RRCF   x1F,F
40C0:  RRCF   x1E,F
40C2:  RRCF   x1D,F
40C4:  RRCF   x20,F
40C6:  RRCF   x1F,F
40C8:  RRCF   x1E,F
40CA:  RRCF   x1D,F
40CC:  RRCF   x20,F
40CE:  RRCF   x1F,F
40D0:  RRCF   x1E,F
40D2:  RRCF   x1D,F
40D4:  RRCF   x20,F
40D6:  RRCF   x1F,F
40D8:  RRCF   x1E,F
40DA:  RRCF   x1D,F
40DC:  MOVLW  01
40DE:  ANDWF  x20,F
40E0:  MOVFF  520,524
40E4:  MOVFF  51F,523
40E8:  MOVFF  51E,522
40EC:  MOVFF  51D,521
40F0:  CLRF   x28
40F2:  CLRF   x27
40F4:  MOVLW  27
40F6:  MOVWF  x26
40F8:  MOVLW  10
40FA:  MOVWF  x25
40FC:  MOVLB  0
40FE:  CALL   2F08
4102:  MOVFF  03,520
4106:  MOVFF  02,51F
410A:  MOVFF  01,51E
410E:  MOVFF  00,51D
4112:  BCF    FD8.1
4114:  CLRF   19
4116:  BTFSC  FF2.7
4118:  BSF    19.7
411A:  BCF    FF2.7
411C:  MOVFF  03,533
4120:  MOVFF  02,532
4124:  MOVFF  01,531
4128:  MOVFF  00,530
412C:  MOVLB  5
412E:  CLRF   x37
4130:  CLRF   x36
4132:  MOVFF  506,535
4136:  MOVFF  505,534
413A:  MOVLB  0
413C:  CALL   02DA
4140:  BTFSC  19.7
4142:  BSF    FF2.7
4144:  MOVFF  01,3A7
4148:  MOVFF  00,3A6
.................... 			currentBeta = (int16)((int32)currentBeta * 10000 / maxCycles); 
414C:  MOVLB  5
414E:  CLRF   x1F
4150:  CLRF   x1E
4152:  MOVFF  3E1,51D
4156:  MOVFF  3E0,51C
415A:  MOVFF  51F,524
415E:  MOVFF  51E,523
4162:  MOVFF  3E1,522
4166:  MOVFF  3E0,521
416A:  CLRF   x28
416C:  CLRF   x27
416E:  MOVLW  27
4170:  MOVWF  x26
4172:  MOVLW  10
4174:  MOVWF  x25
4176:  MOVLB  0
4178:  CALL   2F08
417C:  MOVFF  03,51F
4180:  MOVFF  02,51E
4184:  MOVFF  01,51D
4188:  MOVFF  00,51C
418C:  BCF    FD8.1
418E:  CLRF   19
4190:  BTFSC  FF2.7
4192:  BSF    19.7
4194:  BCF    FF2.7
4196:  MOVFF  03,533
419A:  MOVFF  02,532
419E:  MOVFF  01,531
41A2:  MOVFF  00,530
41A6:  MOVLB  5
41A8:  CLRF   x37
41AA:  CLRF   x36
41AC:  MOVFF  506,535
41B0:  MOVFF  505,534
41B4:  MOVLB  0
41B6:  CALL   02DA
41BA:  BTFSC  19.7
41BC:  BSF    FF2.7
41BE:  MOVFF  01,3E1
41C2:  MOVFF  00,3E0
....................  
.................... 			//gamma 
.................... 			restart_wdt(); 
41C6:  CLRWDT
.................... 			Gamma0 = (int16)((GamSum>>7) * 10000 / maxCycles); //divide sum by 128 and norming 
41C8:  MOVLB  3
41CA:  RRCF   xF4,W
41CC:  MOVLB  5
41CE:  MOVWF  x20
41D0:  MOVLB  3
41D2:  RRCF   xF3,W
41D4:  MOVLB  5
41D6:  MOVWF  x1F
41D8:  MOVLB  3
41DA:  RRCF   xF2,W
41DC:  MOVLB  5
41DE:  MOVWF  x1E
41E0:  MOVLB  3
41E2:  RRCF   xF1,W
41E4:  MOVLB  5
41E6:  MOVWF  x1D
41E8:  RRCF   x20,F
41EA:  RRCF   x1F,F
41EC:  RRCF   x1E,F
41EE:  RRCF   x1D,F
41F0:  RRCF   x20,F
41F2:  RRCF   x1F,F
41F4:  RRCF   x1E,F
41F6:  RRCF   x1D,F
41F8:  RRCF   x20,F
41FA:  RRCF   x1F,F
41FC:  RRCF   x1E,F
41FE:  RRCF   x1D,F
4200:  RRCF   x20,F
4202:  RRCF   x1F,F
4204:  RRCF   x1E,F
4206:  RRCF   x1D,F
4208:  RRCF   x20,F
420A:  RRCF   x1F,F
420C:  RRCF   x1E,F
420E:  RRCF   x1D,F
4210:  RRCF   x20,F
4212:  RRCF   x1F,F
4214:  RRCF   x1E,F
4216:  RRCF   x1D,F
4218:  MOVLW  01
421A:  ANDWF  x20,F
421C:  MOVFF  520,524
4220:  MOVFF  51F,523
4224:  MOVFF  51E,522
4228:  MOVFF  51D,521
422C:  CLRF   x28
422E:  CLRF   x27
4230:  MOVLW  27
4232:  MOVWF  x26
4234:  MOVLW  10
4236:  MOVWF  x25
4238:  MOVLB  0
423A:  CALL   2F08
423E:  MOVFF  03,520
4242:  MOVFF  02,51F
4246:  MOVFF  01,51E
424A:  MOVFF  00,51D
424E:  BCF    FD8.1
4250:  CLRF   19
4252:  BTFSC  FF2.7
4254:  BSF    19.7
4256:  BCF    FF2.7
4258:  MOVFF  03,533
425C:  MOVFF  02,532
4260:  MOVFF  01,531
4264:  MOVFF  00,530
4268:  MOVLB  5
426A:  CLRF   x37
426C:  CLRF   x36
426E:  MOVFF  506,535
4272:  MOVFF  505,534
4276:  MOVLB  0
4278:  CALL   02DA
427C:  BTFSC  19.7
427E:  BSF    FF2.7
4280:  MOVFF  01,3A9
4284:  MOVFF  00,3A8
.................... 			currentGamma = (int16)((int32)currentGamma * 10000 / maxCycles); 
4288:  MOVLB  5
428A:  CLRF   x1F
428C:  CLRF   x1E
428E:  MOVFF  3E3,51D
4292:  MOVFF  3E2,51C
4296:  MOVFF  51F,524
429A:  MOVFF  51E,523
429E:  MOVFF  3E3,522
42A2:  MOVFF  3E2,521
42A6:  CLRF   x28
42A8:  CLRF   x27
42AA:  MOVLW  27
42AC:  MOVWF  x26
42AE:  MOVLW  10
42B0:  MOVWF  x25
42B2:  MOVLB  0
42B4:  CALL   2F08
42B8:  MOVFF  03,51F
42BC:  MOVFF  02,51E
42C0:  MOVFF  01,51D
42C4:  MOVFF  00,51C
42C8:  BCF    FD8.1
42CA:  CLRF   19
42CC:  BTFSC  FF2.7
42CE:  BSF    19.7
42D0:  BCF    FF2.7
42D2:  MOVFF  03,533
42D6:  MOVFF  02,532
42DA:  MOVFF  01,531
42DE:  MOVFF  00,530
42E2:  MOVLB  5
42E4:  CLRF   x37
42E6:  CLRF   x36
42E8:  MOVFF  506,535
42EC:  MOVFF  505,534
42F0:  MOVLB  0
42F2:  CALL   02DA
42F6:  BTFSC  19.7
42F8:  BSF    FF2.7
42FA:  MOVFF  01,3E3
42FE:  MOVFF  00,3E2
....................  
.................... 			//repeat testing 
.................... 			if (OneCycle) 
4302:  MOVLB  3
4304:  BTFSS  xC6.0
4306:  BRA    430C
.................... 			{ 
.................... 				DaqState = DaqIdle;	//if one cycle  - next-idle 
4308:  CLRF   xF7
.................... 			} 
.................... 			else 
430A:  BRA    4310
.................... 				DaqState = DaqStart;	//else normal measuring 
430C:  MOVLW  01
430E:  MOVWF  xF7
.................... 	 
.................... 			break; 
4310:  BRA    4314
4312:  MOVLB  3
.................... 		} 
.................... 	} 
4314:  GOTO   39BE
.................... } 
4318:  BRA    4318

Configuration Fuses:
   Word  1: C800   IESO FCMEN INTRC_IO
   Word  2: 0019   NOBROWNOUT WDT1 NOWDT BORV20 NOPUT
   Word  3: 0700   PBADEN CCP2C1 LPT1OSC NOMCLR
   Word  4: 0000   NOSTVREN DEBUG NOLVP NOXINST
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB

   Some fuses have been forced to be compatible with the ICD debugger.

ROM data:
F00000: 00 00 20 4E 01 00 01 00 00 08 80 00 03 00 00 4B 
F00010: 01 00 C4 09 C4 09 B8 0B 00 00 00 00 00 7F 00 00 
F00020: 00 00 00 00 00 00 00 00 
