CCS PCH C Compiler, Version 4.110, 5967               29-дек-15 02:25

               Filename: C:\Projects\MWT-3\SPM3Firmware\spm3.lst

               ROM used: 16572 bytes (52%)
                         Largest free fragment is 15360
               RAM used: 1307 (86%) at main() level
                         1342 (88%) worst case
               Stack:    5 worst case (2 in main + 3 for interrupts)

*
0000:  GOTO   2E5A
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  F9D.0
0056:  GOTO   0060
005A:  BTFSC  F9E.0
005C:  GOTO   1920
0060:  BTFSS  F9D.5
0062:  GOTO   006C
0066:  BTFSC  F9E.5
0068:  GOTO   036E
006C:  MOVFF  0E,00
0070:  MOVFF  0F,01
0074:  MOVFF  10,02
0078:  MOVFF  11,03
007C:  MOVFF  0C,FE9
0080:  MOVFF  07,FEA
0084:  BSF    07.7
0086:  MOVFF  08,FE1
008A:  MOVFF  09,FE2
008E:  MOVFF  0A,FD9
0092:  MOVFF  0B,FDA
0096:  MOVFF  12,FF3
009A:  MOVFF  13,FF4
009E:  MOVFF  14,FFA
00A2:  MOVFF  15,FF5
00A6:  MOVFF  16,FF6
00AA:  MOVFF  17,FF7
00AE:  MOVF   04,W
00B0:  MOVFF  06,FE0
00B4:  MOVFF  05,FD8
00B8:  RETFIE 0
.................... #include "spm3.h" 
.................... #include <18F4520.h> 
.................... //////// Standard Header file for the PIC18F4520 device //////////////// 
.................... #device PIC18F4520 
.................... #list 
....................  
.................... #device ICD=TRUE 
.................... #device adc=10 
.................... #FUSES WDT                      //Watch Dog Timer  
.................... #FUSES WDT1                     //Watch Dog Timer uses 1:1 Postscale 
.................... #FUSES INTRC_IO                 //Internal RC Osc, no CLKOUT 
.................... #FUSES NOPROTECT                //Code not protected from reading 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... //#FUSES BORV20                   //Brownout reset at 2.0V 
.................... #FUSES PUT                      //Power Up Timer 
.................... #FUSES NOCPD                    //No EE protection 
.................... #FUSES STVREN                   //Stack full/underflow will cause reset 
.................... #FUSES NODEBUG                  //No Debug mode for ICD 
.................... #FUSES LVP                      //Low Voltage Programming on B3(PIC16) or B5(PIC18) 
.................... #FUSES NOWRT                    //Program memory not write protected 
.................... #FUSES NOWRTD                   //Data EEPROM not write protected 
.................... #FUSES IESO                     //Internal External Switch Over mode enabled 
.................... #FUSES FCMEN                    //Fail-safe clock monitor enabled 
.................... #FUSES PBADEN                   //PORTB pins are configured as analog input channels on RESET 
.................... #FUSES NOWRTC                   //configuration not registers write protected 
.................... #FUSES NOWRTB                   //Boot block not write protected 
.................... #FUSES NOEBTR                   //Memory not protected from table reads 
.................... #FUSES NOEBTRB                  //Boot block not protected from table reads 
.................... #FUSES NOCPB                    //No Boot Block code protection 
.................... #FUSES LPT1OSC                  //Timer1 configured for low-power operation 
.................... #FUSES NOMCLR                   //Master Clear pin enabled 
.................... #FUSES XINST                    //Extended set extension and Indexed Addressing mode enabled 
....................  
.................... #use delay(clock=32000000,RESTART_WDT) 
*
18CC:  MOVLW  05
18CE:  MOVWF  FEA
18D0:  MOVLW  35
18D2:  MOVWF  FE9
18D4:  MOVF   FEF,W
18D6:  BZ    18FA
18D8:  MOVLW  0A
18DA:  MOVWF  01
18DC:  MOVLW  BF
18DE:  MOVWF  00
18E0:  CLRWDT
18E2:  DECFSZ 00,F
18E4:  BRA    18E0
18E6:  DECFSZ 01,F
18E8:  BRA    18DC
18EA:  MOVLW  5E
18EC:  MOVWF  00
18EE:  DECFSZ 00,F
18F0:  BRA    18EE
18F2:  BRA    18F4
18F4:  CLRWDT
18F6:  DECFSZ FEF,F
18F8:  BRA    18D8
18FA:  GOTO   1D9E (RETURN)
.................... #define S0   PIN_A0 
.................... #define S1   PIN_A1 
.................... #define T0   PIN_A2 
.................... #define Uref   PIN_A3 
.................... #define T1   PIN_A4 
.................... #define T2   PIN_A5 
.................... #define DIR   PIN_A6 
.................... #define LDAC   PIN_A7 
.................... #define STAT   PIN_C0 
.................... #define MEM0   PIN_C1 
.................... #define MEM1   PIN_C2 
.................... #define SCK   PIN_C3 
.................... #define SDI   PIN_C4 
.................... #define SDO   PIN_C5 
.................... #define TX   PIN_C6 
.................... #define RX   PIN_C7 
.................... #define DAC0   PIN_D0 
.................... #define DAC1   PIN_D1 
.................... #define KU1   PIN_D4 
.................... #define KU0   PIN_D5 
.................... #define SYNC_POS   PIN_E0 
.................... #define TERMO   PIN_E1 
....................  
....................  
....................  
.................... #include "ee_var.h" 
.................... //SPM-3 EEPROM storage structure 
.................... //define adresses of EEPROM locations 
.................... /*		LocName		Addr	Discr			*/ 
.................... /*==========================================*/ 
.................... #define	EE_SAW_A0	0x00	//define saw level 
.................... #define	EE_SAW_A1	0x02	//define saw amplitude 
.................... #define	EE_KU0		0x04	//amp coeff for in0 
.................... #define	EE_KU1		0x06	//amp coeff for in1 
.................... #define	EE_TAQ		0x08	//number of DAQ points 
.................... #define	EE_PCOUNT	0x0A	//num of measures for meaning 
.................... #define	EE_FWDT		0x0C 
.................... #define	EE_Speed	0x0E	//serial device speed 
.................... #define	EE_Host		0x10	//host address & serial number	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<!!! Device ID!!! 
.................... #define	EE_T0_CAL	0x12	//cal temperature of cn0  
.................... #define	EE_T1_CAL	0x14	//cal temperature of cn1  
.................... #define	EE_TG_CAL	0x16	//cal temperature of generator  
.................... #define	EE_KGT		0x18	//termo coeff of generator 
.................... #define	EE_KGU		0x1C	//voltage coeff of generator 
.................... #define	EE_KST0		0x20	//termo coeff of cn0 
.................... #define	EE_KST1		0x24	//termo coeff of cn1 
....................  
.................... //EEPROM data definition 
.................... #ROM	0xf00000={0000,	//EE_SAW_A0 
.................... 				  20000,	//EE_SAW_A1 
.................... 				  0x0001,	//EE_KU0				   
.................... 				  0x0001,	//EE_KU1 
.................... 				  0x0800,	//EE_TAQ 
.................... 				  0x0080,	//EE_PCOUNT 
.................... 				  0x0003,	//EE_FWDT 
.................... 				  0x4B00,	//EE_Speed 
.................... 				  0x0001,	//EE_Host				   
.................... 				  0x09C4,	//EE_TO_CAL 
.................... 				  0x09C4,	//EE_T1_CAL 
.................... 				  0x0BB8,	//EE_TG_CAL 
.................... 				  0x0000,	//EE_KGT 
.................... 				  0x0000, 
.................... 				  0x7F00,	//EE_KGU 
.................... 				  0x0000, 
.................... 				  0x0000,	//EE_KST0 
.................... 				  0x0000, 
.................... 				  0x0000,	//EE_KST1 
.................... 				  0x0000 
.................... } 
.................... // 
....................  
....................  
.................... //directives 
.................... //#USE FAST_IO(A) 
.................... //#USE FAST_IO(C) 
.................... //#USE FAST_IO(D) 
....................  
.................... //const 
.................... float const volts2dac = 4096.0 / 20.0; // use for value from volts to DAC conversion 
....................  
.................... //variables 
.................... //buffers 
.................... //channel 0 
.................... static int16 data_filt0[64];		//filtering buffer for ch0 
.................... static int16 data_mean0;			//mean value 
.................... static int16 maxRise0;			//max value at rising saw 
.................... static int16 iMaxRise0;			//index of maximum at rising saw 
.................... static int16 maxFall0;			//max value at falling saw 
.................... static int16 iMaxFall0;			//index of maximum at falling saw 
.................... static int16 alp_buf0[128];		//alpha meaning buffer 
.................... static int16 bet_buf0[128];		//beta meaning buffer 
.................... static int16 gam_buf0[128];		//gamma meaning buffer 
.................... static int16 Amplitude0;			//amplitude in B*1000 
.................... static int16 PulseWdt0;			//pulse width in uS/10 
.................... static int16 Gamma0;				//gamma in uS/10 
.................... static int16 AmpCoef0;			//input amplifier coeff 
.................... static float KST0;				// 
.................... static int16 T0_CAL;				// 
.................... static signed int16 T_SR0;				//temperature of cn0 
.................... static int16 Gamma1;				//gamma in uS/10 
.................... static int16 AmpCoef1;			//input amplifier coeff 
.................... static float KST1;				// 
.................... static int16 T1_CAL;				// 
.................... static signed int16 T_SR1;				//temperature of cn1 
....................  
.................... //common 
.................... static int16 TAQ;		//number of data samples at measuring period 
.................... static int16 FWDT;				//filering window width 
.................... static int16 PCOUNT;				//measuring periods for meaning 
.................... static int1 OneCycle;			//one cycle flag 
.................... static int8 iGam = 0;				//gamma meaning index 
....................  
.................... //saw 
.................... static signed int16 T_GEN;//generator temperature 
.................... static int16 SAW_A0;				//level of saw 
.................... static int16 sawStartLevel;			//current saw level 
.................... static int16 SAW_A1;				//saw amplitude 
.................... static int16 sawEndLevel;			//saw step 
.................... static float KGT;				// 
.................... static float KGU;				// 
.................... static int16 TG_CAL;				// 
....................  
.................... //communication 
.................... static int16 Speed;				//USART speed 
.................... static int16 Addr;				//own USART host adress 
....................  
.................... //filtering 
.................... static int8 iWin;				//meaning window index 
.................... static int32 AlpSum; 
.................... static int32 BetSum; 
.................... static int32 GamSum; 
....................  
.................... //temperature regulator 
.................... static int16 Hst = 50;				//Histeresis 
....................  
.................... //states 
.................... enum daq_states 
.................... { 
.................... 	DaqIdle,		//idle state - state after daq stop 
.................... 	DaqStart,		//cyclic mesuring start for one cycle 
.................... 	DaqMeasure,		//measuring 
.................... 	DaqScale,		//scaling measured values 
.................... 	DaqEnd			//ending measuring cycle 
.................... }; 
.................... int8 DaqState;	//Daq procedure state 
.................... // 
.................... //math variables 
.................... /*float kgv; 
.................... float Va; 
.................... float delta_gamma, delta_gamma2; 
.................... float T_0, T_G, T_G_k; 
.................... float Gam0, Gam0_k; 
.................... float k1, tsn; 
.................... float W; 
.................... float Haw0, Haw0_k; 
.................... float AA, BB, a0, a1, a2, a3, a4, a5; 
.................... float Am0, Am0_k; 
.................... float T_S0, T_S0_k; 
.................... */ 
....................  
.................... //procedures 
.................... //mathematics 
.................... /*char Calc() // Humidity calculation 
....................  { 
....................  float difftime0; 
....................  //coeff validation 
....................  if (kgv == 0) 
....................  kgv = 1; 
....................  if (Va == 0) 
....................  Va = 1; 
....................  // 
....................  delta_gamma = (kgt / kgv) * (T_0 / Va) * (T_G - T_G_k);	//generator temperature correction 
....................  delta_gamma2 = k1 * (T_S0 - tsn);	//object temperature correction 
....................  difftime0 = (Gam0 - Gam0_k);	//addition parameter estimation 
....................  difftime0 = difftime0 + delta_gamma + delta_gamma2;	//adding corecction 
....................  //main regression 
....................  W = AA 
....................  + BB 
....................  * (a0 + a1 * (Am0 - Am0_k) * 10 
....................  + a2 * (Haw0 - Haw0_k) / 1000 
....................  + a3 * difftime0 / 1000 + a4 * (T_G - T_G_k) / 100 
....................  + a5 * (T_S0 - T_S0_k) / 100); 
....................  
....................  return 0; 
....................  }*/ 
....................  
.................... //Peripherals setup 
.................... void InitMcu(void) 
.................... {		//initialization of MCU 
....................  
.................... 	//oscillator configuration 
.................... 	setup_oscillator(OSC_32MHZ | OSC_NORMAL | OSC_31250); 
*
1ED8:  MOVLW  70
1EDA:  MOVWF  FD3
1EDC:  MOVLW  C0
1EDE:  MOVWF  F9B
1EE0:  MOVF   FD3,W
.................... 	//disable PSP 
.................... 	setup_psp(PSP_DISABLED); 
1EE2:  BCF    F96.4
.................... 	//WDT config 
.................... 	setup_wdt(WDT_OFF); 
1EE4:  BCF    FD1.0
.................... 	//disable comparators 
.................... 	setup_comparator(NC_NC_NC_NC); 
1EE6:  MOVLW  07
1EE8:  MOVWF  FB4
1EEA:  MOVF   F92,W
1EEC:  MOVWF  F92
1EEE:  CLRWDT
1EF0:  MOVLW  1A
1EF2:  MOVWF  00
1EF4:  DECFSZ 00,F
1EF6:  BRA    1EF4
1EF8:  MOVF   FB4,W
1EFA:  BCF    FA1.6
.................... 	setup_vref(FALSE); 
1EFC:  CLRF   FB5
....................  
.................... 	//config ADC module 
.................... 	setup_adc_ports(AN0_TO_AN5 | VSS_VREF); 
1EFE:  MOVF   FC1,W
1F00:  ANDLW  C0
1F02:  IORLW  19
1F04:  MOVWF  FC1
.................... 	setup_adc(ADC_CLOCK_DIV_16 | ADC_TAD_MUL_2); 
1F06:  MOVF   FC0,W
1F08:  ANDLW  C0
1F0A:  IORLW  0D
1F0C:  MOVWF  FC0
1F0E:  BSF    FC0.7
1F10:  BSF    FC2.0
....................  
.................... 	//port configuration 
.................... 	set_tris_a(0x3f); 
1F12:  MOVLW  3F
1F14:  MOVWF  F92
.................... 	set_tris_c(0xf8); 
1F16:  MOVLW  F8
1F18:  MOVWF  F94
.................... 	set_tris_d(0x00); 
1F1A:  MOVLW  00
1F1C:  MOVWF  F95
....................  
.................... 	//set high all selectors 
.................... 	output_high(LDAC); 
1F1E:  BCF    F92.7
1F20:  BSF    F89.7
.................... 	output_high(MEM0); 
1F22:  BCF    F94.1
1F24:  BSF    F8B.1
.................... 	output_high(MEM1); 
1F26:  BCF    F94.2
1F28:  BSF    F8B.2
.................... 	output_high(DAC0); 
1F2A:  BCF    F95.0
1F2C:  BSF    F8C.0
.................... 	output_high(DAC1); 
1F2E:  BCF    F95.1
1F30:  BSF    F8C.1
.................... 	output_high(KU0); 
1F32:  BCF    F95.5
1F34:  BSF    F8C.5
.................... 	output_high(KU1); 
1F36:  BCF    F95.4
1F38:  BSF    F8C.4
.................... 	output_high(STAT); 
1F3A:  BCF    F94.0
1F3C:  BSF    F8B.0
....................  
.................... 	//timers configuration 
.................... 	setup_timer_0(RTCC_INTERNAL); 
1F3E:  MOVLW  80
1F40:  MOVWF  FD5
....................  
.................... 	setup_timer_1(T1_INTERNAL | T1_DIV_BY_8); 
1F42:  MOVLW  B5
1F44:  MOVWF  FCD
....................  
.................... 	setup_timer_2(T2_DISABLED, 0, 1); 
1F46:  MOVLW  00
1F48:  MOVWF  FCA
1F4A:  MOVLW  00
1F4C:  MOVWF  FCB
....................  
.................... 	setup_timer_3(T3_INTERNAL | T3_DIV_BY_1); 
1F4E:  MOVLW  85
1F50:  MOVWF  FB1
....................  
.................... 	//setup communications 
.................... 	//setup usart 
.................... 	output_low(DIR);	//enable receiving 
1F52:  BCF    F92.6
1F54:  BCF    F89.6
....................  
.................... 	//SPI configuration 
.................... 	setup_spi(SPI_MASTER | SPI_CLK_DIV_4 | SPI_H_TO_L); 
1F56:  BCF    FC6.5
1F58:  BCF    F94.5
1F5A:  BSF    F94.4
1F5C:  BCF    F94.3
1F5E:  MOVLW  30
1F60:  MOVWF  FC6
1F62:  MOVLW  40
1F64:  MOVWF  FC7
....................  
.................... 	//interrupt configuration 
.................... 	enable_interrupts(INT_RDA); 
1F66:  BSF    F9D.5
....................  
.................... 	enable_interrupts(GLOBAL); 
1F68:  MOVLW  C0
1F6A:  IORWF  FF2,F
....................  
.................... 	//States reset 
.................... 	DaqState = DaqIdle;	//initial state 
1F6C:  MOVLB  3
1F6E:  CLRF   xEF
.................... } 
1F70:  MOVLB  0
1F72:  GOTO   388A (RETURN)
.................... // 
.................... //read registers from EE 
.................... void BURead(void) 
.................... {	//back up read 
.................... 	int32 temp; 
....................  
.................... 	//reading 
.................... 	SAW_A0 = make16(read_eeprom(EE_SAW_A0 + 1), read_eeprom(EE_SAW_A0)); //rise saw level 
1F76:  MOVFF  FF2,51D
1F7A:  BCF    FF2.7
1F7C:  MOVLW  01
1F7E:  MOVWF  FA9
1F80:  BCF    FA6.6
1F82:  BCF    FA6.7
1F84:  BSF    FA6.0
1F86:  MOVF   FA8,W
1F88:  MOVLB  5
1F8A:  BTFSC  x1D.7
1F8C:  BSF    FF2.7
1F8E:  MOVWF  x1E
1F90:  MOVFF  FF2,51F
1F94:  BCF    FF2.7
1F96:  CLRF   FA9
1F98:  BCF    FA6.6
1F9A:  BCF    FA6.7
1F9C:  BSF    FA6.0
1F9E:  MOVF   FA8,W
1FA0:  BTFSC  x1F.7
1FA2:  BSF    FF2.7
1FA4:  MOVWF  x20
1FA6:  MOVFF  51E,3CB
1FAA:  MOVFF  520,3CA
.................... 	SAW_A1 = make16(read_eeprom(EE_SAW_A1 + 1), read_eeprom(EE_SAW_A1)); //rise saw amplitude 
1FAE:  MOVFF  FF2,51D
1FB2:  BCF    FF2.7
1FB4:  MOVLW  03
1FB6:  MOVWF  FA9
1FB8:  BCF    FA6.6
1FBA:  BCF    FA6.7
1FBC:  BSF    FA6.0
1FBE:  MOVF   FA8,W
1FC0:  BTFSC  x1D.7
1FC2:  BSF    FF2.7
1FC4:  MOVWF  x1E
1FC6:  MOVFF  FF2,51F
1FCA:  BCF    FF2.7
1FCC:  MOVLW  02
1FCE:  MOVWF  FA9
1FD0:  BCF    FA6.6
1FD2:  BCF    FA6.7
1FD4:  BSF    FA6.0
1FD6:  MOVF   FA8,W
1FD8:  BTFSC  x1F.7
1FDA:  BSF    FF2.7
1FDC:  MOVWF  x20
1FDE:  MOVFF  51E,3CF
1FE2:  MOVFF  520,3CE
.................... 	AmpCoef0 = make16(read_eeprom(EE_KU0 + 1), read_eeprom(EE_KU0)); // 
1FE6:  MOVFF  FF2,51D
1FEA:  BCF    FF2.7
1FEC:  MOVLW  05
1FEE:  MOVWF  FA9
1FF0:  BCF    FA6.6
1FF2:  BCF    FA6.7
1FF4:  BSF    FA6.0
1FF6:  MOVF   FA8,W
1FF8:  BTFSC  x1D.7
1FFA:  BSF    FF2.7
1FFC:  MOVWF  x1E
1FFE:  MOVFF  FF2,51F
2002:  BCF    FF2.7
2004:  MOVLW  04
2006:  MOVWF  FA9
2008:  BCF    FA6.6
200A:  BCF    FA6.7
200C:  BSF    FA6.0
200E:  MOVF   FA8,W
2010:  BTFSC  x1F.7
2012:  BSF    FF2.7
2014:  MOVWF  x20
2016:  MOVFF  51E,3AB
201A:  MOVFF  520,3AA
.................... 	AmpCoef1 = make16(read_eeprom(EE_KU1 + 1), read_eeprom(EE_KU1)); // 
201E:  MOVFF  FF2,51D
2022:  BCF    FF2.7
2024:  MOVLW  07
2026:  MOVWF  FA9
2028:  BCF    FA6.6
202A:  BCF    FA6.7
202C:  BSF    FA6.0
202E:  MOVF   FA8,W
2030:  BTFSC  x1D.7
2032:  BSF    FF2.7
2034:  MOVWF  x1E
2036:  MOVFF  FF2,51F
203A:  BCF    FF2.7
203C:  MOVLW  06
203E:  MOVWF  FA9
2040:  BCF    FA6.6
2042:  BCF    FA6.7
2044:  BSF    FA6.0
2046:  MOVF   FA8,W
2048:  BTFSC  x1F.7
204A:  BSF    FF2.7
204C:  MOVWF  x20
204E:  MOVFF  51E,3B7
2052:  MOVFF  520,3B6
.................... 	TAQ = make16(read_eeprom(EE_TAQ + 1), read_eeprom(EE_TAQ)); // 
2056:  MOVFF  FF2,51D
205A:  BCF    FF2.7
205C:  MOVLW  09
205E:  MOVWF  FA9
2060:  BCF    FA6.6
2062:  BCF    FA6.7
2064:  BSF    FA6.0
2066:  MOVF   FA8,W
2068:  BTFSC  x1D.7
206A:  BSF    FF2.7
206C:  MOVWF  x1E
206E:  MOVFF  FF2,51F
2072:  BCF    FF2.7
2074:  MOVLW  08
2076:  MOVWF  FA9
2078:  BCF    FA6.6
207A:  BCF    FA6.7
207C:  BSF    FA6.0
207E:  MOVF   FA8,W
2080:  BTFSC  x1F.7
2082:  BSF    FF2.7
2084:  MOVWF  x20
2086:  MOVFF  51E,3C1
208A:  MOVFF  520,3C0
.................... 	PCOUNT = make16(read_eeprom(EE_PCOUNT + 1), read_eeprom(EE_PCOUNT)); // 
208E:  MOVFF  FF2,51D
2092:  BCF    FF2.7
2094:  MOVLW  0B
2096:  MOVWF  FA9
2098:  BCF    FA6.6
209A:  BCF    FA6.7
209C:  BSF    FA6.0
209E:  MOVF   FA8,W
20A0:  BTFSC  x1D.7
20A2:  BSF    FF2.7
20A4:  MOVWF  x1E
20A6:  MOVFF  FF2,51F
20AA:  BCF    FF2.7
20AC:  MOVLW  0A
20AE:  MOVWF  FA9
20B0:  BCF    FA6.6
20B2:  BCF    FA6.7
20B4:  BSF    FA6.0
20B6:  MOVF   FA8,W
20B8:  BTFSC  x1F.7
20BA:  BSF    FF2.7
20BC:  MOVWF  x20
20BE:  MOVFF  51E,3C5
20C2:  MOVFF  520,3C4
.................... 	FWDT = make16(read_eeprom(EE_FWDT + 1), read_eeprom(EE_FWDT)); // 
20C6:  MOVFF  FF2,51D
20CA:  BCF    FF2.7
20CC:  MOVLW  0D
20CE:  MOVWF  FA9
20D0:  BCF    FA6.6
20D2:  BCF    FA6.7
20D4:  BSF    FA6.0
20D6:  MOVF   FA8,W
20D8:  BTFSC  x1D.7
20DA:  BSF    FF2.7
20DC:  MOVWF  x1E
20DE:  MOVFF  FF2,51F
20E2:  BCF    FF2.7
20E4:  MOVLW  0C
20E6:  MOVWF  FA9
20E8:  BCF    FA6.6
20EA:  BCF    FA6.7
20EC:  BSF    FA6.0
20EE:  MOVF   FA8,W
20F0:  BTFSC  x1F.7
20F2:  BSF    FF2.7
20F4:  MOVWF  x20
20F6:  MOVFF  51E,3C3
20FA:  MOVFF  520,3C2
.................... 	Speed = make16(read_eeprom(EE_Speed + 1), read_eeprom(EE_Speed)); // 
20FE:  MOVFF  FF2,51D
2102:  BCF    FF2.7
2104:  MOVLW  0F
2106:  MOVWF  FA9
2108:  BCF    FA6.6
210A:  BCF    FA6.7
210C:  BSF    FA6.0
210E:  MOVF   FA8,W
2110:  BTFSC  x1D.7
2112:  BSF    FF2.7
2114:  MOVWF  x1E
2116:  MOVFF  FF2,51F
211A:  BCF    FF2.7
211C:  MOVLW  0E
211E:  MOVWF  FA9
2120:  BCF    FA6.6
2122:  BCF    FA6.7
2124:  BSF    FA6.0
2126:  MOVF   FA8,W
2128:  BTFSC  x1F.7
212A:  BSF    FF2.7
212C:  MOVWF  x20
212E:  MOVFF  51E,3DD
2132:  MOVFF  520,3DC
.................... 	Addr = make16(read_eeprom(EE_Host + 1), read_eeprom(EE_Host)); // 
2136:  MOVFF  FF2,51D
213A:  BCF    FF2.7
213C:  MOVLW  11
213E:  MOVWF  FA9
2140:  BCF    FA6.6
2142:  BCF    FA6.7
2144:  BSF    FA6.0
2146:  MOVF   FA8,W
2148:  BTFSC  x1D.7
214A:  BSF    FF2.7
214C:  MOVWF  x1E
214E:  MOVFF  FF2,51F
2152:  BCF    FF2.7
2154:  MOVLW  10
2156:  MOVWF  FA9
2158:  BCF    FA6.6
215A:  BCF    FA6.7
215C:  BSF    FA6.0
215E:  MOVF   FA8,W
2160:  BTFSC  x1F.7
2162:  BSF    FF2.7
2164:  MOVWF  x20
2166:  MOVFF  51E,3DF
216A:  MOVFF  520,3DE
.................... 	T0_CAL = make32(read_eeprom(EE_T0_CAL + 1), read_eeprom(EE_T0_CAL)); // 
216E:  MOVFF  FF2,51D
2172:  BCF    FF2.7
2174:  MOVLW  13
2176:  MOVWF  FA9
2178:  BCF    FA6.6
217A:  BCF    FA6.7
217C:  BSF    FA6.0
217E:  MOVF   FA8,W
2180:  BTFSC  x1D.7
2182:  BSF    FF2.7
2184:  MOVWF  x1E
2186:  MOVFF  FF2,51F
218A:  BCF    FF2.7
218C:  MOVLW  12
218E:  MOVWF  FA9
2190:  BCF    FA6.6
2192:  BCF    FA6.7
2194:  BSF    FA6.0
2196:  MOVF   FA8,W
2198:  BTFSC  x1F.7
219A:  BSF    FF2.7
219C:  MOVWF  x20
219E:  MOVFF  51E,3B1
21A2:  MOVFF  520,3B0
.................... 	T1_CAL = make16(read_eeprom(EE_T1_CAL + 1), read_eeprom(EE_T1_CAL)); // 
21A6:  MOVFF  FF2,51D
21AA:  BCF    FF2.7
21AC:  MOVLW  15
21AE:  MOVWF  FA9
21B0:  BCF    FA6.6
21B2:  BCF    FA6.7
21B4:  BSF    FA6.0
21B6:  MOVF   FA8,W
21B8:  BTFSC  x1D.7
21BA:  BSF    FF2.7
21BC:  MOVWF  x1E
21BE:  MOVFF  FF2,51F
21C2:  BCF    FF2.7
21C4:  MOVLW  14
21C6:  MOVWF  FA9
21C8:  BCF    FA6.6
21CA:  BCF    FA6.7
21CC:  BSF    FA6.0
21CE:  MOVF   FA8,W
21D0:  BTFSC  x1F.7
21D2:  BSF    FF2.7
21D4:  MOVWF  x20
21D6:  MOVFF  51E,3BD
21DA:  MOVFF  520,3BC
.................... 	TG_CAL = make16(read_eeprom(EE_TG_CAL + 1), read_eeprom(EE_TG_CAL)); // 
21DE:  MOVFF  FF2,51D
21E2:  BCF    FF2.7
21E4:  MOVLW  17
21E6:  MOVWF  FA9
21E8:  BCF    FA6.6
21EA:  BCF    FA6.7
21EC:  BSF    FA6.0
21EE:  MOVF   FA8,W
21F0:  BTFSC  x1D.7
21F2:  BSF    FF2.7
21F4:  MOVWF  x1E
21F6:  MOVFF  FF2,51F
21FA:  BCF    FF2.7
21FC:  MOVLW  16
21FE:  MOVWF  FA9
2200:  BCF    FA6.6
2202:  BCF    FA6.7
2204:  BSF    FA6.0
2206:  MOVF   FA8,W
2208:  BTFSC  x1F.7
220A:  BSF    FF2.7
220C:  MOVWF  x20
220E:  MOVFF  51E,3DB
2212:  MOVFF  520,3DA
.................... 	temp = make32(read_eeprom(EE_KGT + 2), read_eeprom(EE_KGT + 3), 
.................... 		read_eeprom(EE_KGT), read_eeprom(EE_KGT + 1)); // 
2216:  MOVFF  FF2,51D
221A:  BCF    FF2.7
221C:  MOVLW  1A
221E:  MOVWF  FA9
2220:  BCF    FA6.6
2222:  BCF    FA6.7
2224:  BSF    FA6.0
2226:  MOVF   FA8,W
2228:  BTFSC  x1D.7
222A:  BSF    FF2.7
222C:  MOVWF  x1E
222E:  MOVFF  FF2,51F
2232:  BCF    FF2.7
2234:  MOVLW  1B
2236:  MOVWF  FA9
2238:  BCF    FA6.6
223A:  BCF    FA6.7
223C:  BSF    FA6.0
223E:  MOVF   FA8,W
2240:  BTFSC  x1F.7
2242:  BSF    FF2.7
2244:  MOVWF  x20
2246:  MOVFF  FF2,521
224A:  BCF    FF2.7
224C:  MOVLW  18
224E:  MOVWF  FA9
2250:  BCF    FA6.6
2252:  BCF    FA6.7
2254:  BSF    FA6.0
2256:  MOVF   FA8,W
2258:  BTFSC  x21.7
225A:  BSF    FF2.7
225C:  MOVWF  x22
225E:  MOVFF  FF2,523
2262:  BCF    FF2.7
2264:  MOVLW  19
2266:  MOVWF  FA9
2268:  BCF    FA6.6
226A:  BCF    FA6.7
226C:  BSF    FA6.0
226E:  MOVF   FA8,W
2270:  BTFSC  x23.7
2272:  BSF    FF2.7
2274:  MOVWF  x24
2276:  MOVFF  51E,51C
227A:  MOVFF  520,51B
227E:  MOVFF  522,51A
2282:  MOVFF  524,519
.................... 	memcpy(&KGT, &temp, 4); 
2286:  MOVLW  03
2288:  MOVWF  FEA
228A:  MOVLW  D2
228C:  MOVWF  FE9
228E:  MOVLW  05
2290:  MOVWF  FE2
2292:  MOVLW  19
2294:  MOVWF  FE1
2296:  MOVLW  04
2298:  MOVWF  01
229A:  MOVFF  FE6,FEE
229E:  DECFSZ 01,F
22A0:  BRA    229A
.................... 	temp = make32(read_eeprom(EE_KGU + 2), read_eeprom(EE_KGU + 3), 
.................... 		read_eeprom(EE_KGU), read_eeprom(EE_KGU + 1)); // 
22A2:  MOVFF  FF2,51D
22A6:  BCF    FF2.7
22A8:  MOVLW  1E
22AA:  MOVWF  FA9
22AC:  BCF    FA6.6
22AE:  BCF    FA6.7
22B0:  BSF    FA6.0
22B2:  MOVF   FA8,W
22B4:  BTFSC  x1D.7
22B6:  BSF    FF2.7
22B8:  MOVWF  x1E
22BA:  MOVFF  FF2,51F
22BE:  BCF    FF2.7
22C0:  MOVLW  1F
22C2:  MOVWF  FA9
22C4:  BCF    FA6.6
22C6:  BCF    FA6.7
22C8:  BSF    FA6.0
22CA:  MOVF   FA8,W
22CC:  BTFSC  x1F.7
22CE:  BSF    FF2.7
22D0:  MOVWF  x20
22D2:  MOVFF  FF2,521
22D6:  BCF    FF2.7
22D8:  MOVLW  1C
22DA:  MOVWF  FA9
22DC:  BCF    FA6.6
22DE:  BCF    FA6.7
22E0:  BSF    FA6.0
22E2:  MOVF   FA8,W
22E4:  BTFSC  x21.7
22E6:  BSF    FF2.7
22E8:  MOVWF  x22
22EA:  MOVFF  FF2,523
22EE:  BCF    FF2.7
22F0:  MOVLW  1D
22F2:  MOVWF  FA9
22F4:  BCF    FA6.6
22F6:  BCF    FA6.7
22F8:  BSF    FA6.0
22FA:  MOVF   FA8,W
22FC:  BTFSC  x23.7
22FE:  BSF    FF2.7
2300:  MOVWF  x24
2302:  MOVFF  51E,51C
2306:  MOVFF  520,51B
230A:  MOVFF  522,51A
230E:  MOVFF  524,519
.................... 	memcpy(&KGU, &temp, 4); 
2312:  MOVLW  03
2314:  MOVWF  FEA
2316:  MOVLW  D6
2318:  MOVWF  FE9
231A:  MOVLW  05
231C:  MOVWF  FE2
231E:  MOVLW  19
2320:  MOVWF  FE1
2322:  MOVLW  04
2324:  MOVWF  01
2326:  MOVFF  FE6,FEE
232A:  DECFSZ 01,F
232C:  BRA    2326
.................... 	temp = make32(read_eeprom(EE_KST0 + 2), read_eeprom(EE_KST0 + 3), 
.................... 		read_eeprom(EE_KST0), read_eeprom(EE_KST0 + 1)); // 
232E:  MOVFF  FF2,51D
2332:  BCF    FF2.7
2334:  MOVLW  22
2336:  MOVWF  FA9
2338:  BCF    FA6.6
233A:  BCF    FA6.7
233C:  BSF    FA6.0
233E:  MOVF   FA8,W
2340:  BTFSC  x1D.7
2342:  BSF    FF2.7
2344:  MOVWF  x1E
2346:  MOVFF  FF2,51F
234A:  BCF    FF2.7
234C:  MOVLW  23
234E:  MOVWF  FA9
2350:  BCF    FA6.6
2352:  BCF    FA6.7
2354:  BSF    FA6.0
2356:  MOVF   FA8,W
2358:  BTFSC  x1F.7
235A:  BSF    FF2.7
235C:  MOVWF  x20
235E:  MOVFF  FF2,521
2362:  BCF    FF2.7
2364:  MOVLW  20
2366:  MOVWF  FA9
2368:  BCF    FA6.6
236A:  BCF    FA6.7
236C:  BSF    FA6.0
236E:  MOVF   FA8,W
2370:  BTFSC  x21.7
2372:  BSF    FF2.7
2374:  MOVWF  x22
2376:  MOVFF  FF2,523
237A:  BCF    FF2.7
237C:  MOVLW  21
237E:  MOVWF  FA9
2380:  BCF    FA6.6
2382:  BCF    FA6.7
2384:  BSF    FA6.0
2386:  MOVF   FA8,W
2388:  BTFSC  x23.7
238A:  BSF    FF2.7
238C:  MOVWF  x24
238E:  MOVFF  51E,51C
2392:  MOVFF  520,51B
2396:  MOVFF  522,51A
239A:  MOVFF  524,519
.................... 	memcpy(&KST0, &temp, 4); 
239E:  MOVLW  03
23A0:  MOVWF  FEA
23A2:  MOVLW  AC
23A4:  MOVWF  FE9
23A6:  MOVLW  05
23A8:  MOVWF  FE2
23AA:  MOVLW  19
23AC:  MOVWF  FE1
23AE:  MOVLW  04
23B0:  MOVWF  01
23B2:  MOVFF  FE6,FEE
23B6:  DECFSZ 01,F
23B8:  BRA    23B2
.................... 	temp = make32(read_eeprom(EE_KST1 + 2), read_eeprom(EE_KST1 + 3), 
.................... 		read_eeprom(EE_KST1), read_eeprom(EE_KST1 + 1)); // 
23BA:  MOVFF  FF2,51D
23BE:  BCF    FF2.7
23C0:  MOVLW  26
23C2:  MOVWF  FA9
23C4:  BCF    FA6.6
23C6:  BCF    FA6.7
23C8:  BSF    FA6.0
23CA:  MOVF   FA8,W
23CC:  BTFSC  x1D.7
23CE:  BSF    FF2.7
23D0:  MOVWF  x1E
23D2:  MOVFF  FF2,51F
23D6:  BCF    FF2.7
23D8:  MOVLW  27
23DA:  MOVWF  FA9
23DC:  BCF    FA6.6
23DE:  BCF    FA6.7
23E0:  BSF    FA6.0
23E2:  MOVF   FA8,W
23E4:  BTFSC  x1F.7
23E6:  BSF    FF2.7
23E8:  MOVWF  x20
23EA:  MOVFF  FF2,521
23EE:  BCF    FF2.7
23F0:  MOVLW  24
23F2:  MOVWF  FA9
23F4:  BCF    FA6.6
23F6:  BCF    FA6.7
23F8:  BSF    FA6.0
23FA:  MOVF   FA8,W
23FC:  BTFSC  x21.7
23FE:  BSF    FF2.7
2400:  MOVWF  x22
2402:  MOVFF  FF2,523
2406:  BCF    FF2.7
2408:  MOVLW  25
240A:  MOVWF  FA9
240C:  BCF    FA6.6
240E:  BCF    FA6.7
2410:  BSF    FA6.0
2412:  MOVF   FA8,W
2414:  BTFSC  x23.7
2416:  BSF    FF2.7
2418:  MOVWF  x24
241A:  MOVFF  51E,51C
241E:  MOVFF  520,51B
2422:  MOVFF  522,51A
2426:  MOVFF  524,519
.................... 	memcpy(&KST1, &temp, 4); 
242A:  MOVLW  03
242C:  MOVWF  FEA
242E:  MOVLW  B8
2430:  MOVWF  FE9
2432:  MOVLW  05
2434:  MOVWF  FE2
2436:  MOVLW  19
2438:  MOVWF  FE1
243A:  MOVLW  04
243C:  MOVWF  01
243E:  MOVFF  FE6,FEE
2442:  DECFSZ 01,F
2444:  BRA    243E
.................... } 
2446:  MOVLB  0
2448:  GOTO   388E (RETURN)
.................... // 
.................... //write registers to EE 
.................... void BUWrite(void) 
.................... {	//back up write 
.................... 	int32 temp; 
....................  
.................... 	setup_wdt(WDT_OFF); 
*
1172:  BCF    FD1.0
....................  
.................... 	//writing 
.................... 	//int16 
.................... 	write_eeprom(EE_SAW_A0, make8(SAW_A0, 0)); 
1174:  MOVFF  3CA,539
1178:  CLRF   FA9
117A:  MOVFF  539,FA8
117E:  BCF    FA6.6
1180:  BCF    FA6.7
1182:  BSF    FA6.2
1184:  MOVF   FF2,W
1186:  MOVWF  00
1188:  BCF    FF2.7
118A:  MOVLB  F
118C:  MOVLW  55
118E:  MOVWF  FA7
1190:  MOVLW  AA
1192:  MOVWF  FA7
1194:  BSF    FA6.1
1196:  BTFSC  FA6.1
1198:  BRA    1196
119A:  BCF    FA6.2
119C:  MOVF   00,W
119E:  IORWF  FF2,F
.................... 	write_eeprom(EE_SAW_A0 + 1, make8(SAW_A0, 1)); 
11A0:  MOVFF  3CB,539
11A4:  MOVLW  01
11A6:  MOVWF  FA9
11A8:  MOVFF  3CB,FA8
11AC:  BCF    FA6.6
11AE:  BCF    FA6.7
11B0:  BSF    FA6.2
11B2:  MOVFF  FF2,00
11B6:  BCF    FF2.7
11B8:  MOVLW  55
11BA:  MOVWF  FA7
11BC:  MOVLW  AA
11BE:  MOVWF  FA7
11C0:  BSF    FA6.1
11C2:  BTFSC  FA6.1
11C4:  BRA    11C2
11C6:  BCF    FA6.2
11C8:  MOVF   00,W
11CA:  IORWF  FF2,F
.................... 	write_eeprom(EE_SAW_A1, make8(SAW_A1, 0)); 
11CC:  MOVFF  3CE,539
11D0:  MOVLW  02
11D2:  MOVWF  FA9
11D4:  MOVFF  3CE,FA8
11D8:  BCF    FA6.6
11DA:  BCF    FA6.7
11DC:  BSF    FA6.2
11DE:  MOVFF  FF2,00
11E2:  BCF    FF2.7
11E4:  MOVLW  55
11E6:  MOVWF  FA7
11E8:  MOVLW  AA
11EA:  MOVWF  FA7
11EC:  BSF    FA6.1
11EE:  BTFSC  FA6.1
11F0:  BRA    11EE
11F2:  BCF    FA6.2
11F4:  MOVF   00,W
11F6:  IORWF  FF2,F
.................... 	write_eeprom(EE_SAW_A1 + 1, make8(SAW_A1, 1)); 
11F8:  MOVFF  3CF,539
11FC:  MOVLW  03
11FE:  MOVWF  FA9
1200:  MOVFF  3CF,FA8
1204:  BCF    FA6.6
1206:  BCF    FA6.7
1208:  BSF    FA6.2
120A:  MOVFF  FF2,00
120E:  BCF    FF2.7
1210:  MOVLW  55
1212:  MOVWF  FA7
1214:  MOVLW  AA
1216:  MOVWF  FA7
1218:  BSF    FA6.1
121A:  BTFSC  FA6.1
121C:  BRA    121A
121E:  BCF    FA6.2
1220:  MOVF   00,W
1222:  IORWF  FF2,F
.................... 	write_eeprom(EE_KU0, make8(AmpCoef0, 0)); 
1224:  MOVFF  3AA,539
1228:  MOVLW  04
122A:  MOVWF  FA9
122C:  MOVFF  3AA,FA8
1230:  BCF    FA6.6
1232:  BCF    FA6.7
1234:  BSF    FA6.2
1236:  MOVFF  FF2,00
123A:  BCF    FF2.7
123C:  MOVLW  55
123E:  MOVWF  FA7
1240:  MOVLW  AA
1242:  MOVWF  FA7
1244:  BSF    FA6.1
1246:  BTFSC  FA6.1
1248:  BRA    1246
124A:  BCF    FA6.2
124C:  MOVF   00,W
124E:  IORWF  FF2,F
.................... 	write_eeprom(EE_KU0 + 1, make8(AmpCoef0, 1)); 
1250:  MOVFF  3AB,539
1254:  MOVLW  05
1256:  MOVWF  FA9
1258:  MOVFF  3AB,FA8
125C:  BCF    FA6.6
125E:  BCF    FA6.7
1260:  BSF    FA6.2
1262:  MOVFF  FF2,00
1266:  BCF    FF2.7
1268:  MOVLW  55
126A:  MOVWF  FA7
126C:  MOVLW  AA
126E:  MOVWF  FA7
1270:  BSF    FA6.1
1272:  BTFSC  FA6.1
1274:  BRA    1272
1276:  BCF    FA6.2
1278:  MOVF   00,W
127A:  IORWF  FF2,F
.................... 	write_eeprom(EE_KU1, make8(AmpCoef1, 0)); 
127C:  MOVFF  3B6,539
1280:  MOVLW  06
1282:  MOVWF  FA9
1284:  MOVFF  3B6,FA8
1288:  BCF    FA6.6
128A:  BCF    FA6.7
128C:  BSF    FA6.2
128E:  MOVFF  FF2,00
1292:  BCF    FF2.7
1294:  MOVLW  55
1296:  MOVWF  FA7
1298:  MOVLW  AA
129A:  MOVWF  FA7
129C:  BSF    FA6.1
129E:  BTFSC  FA6.1
12A0:  BRA    129E
12A2:  BCF    FA6.2
12A4:  MOVF   00,W
12A6:  IORWF  FF2,F
.................... 	write_eeprom(EE_KU1 + 1, make8(AmpCoef1, 1)); 
12A8:  MOVFF  3B7,539
12AC:  MOVLW  07
12AE:  MOVWF  FA9
12B0:  MOVFF  3B7,FA8
12B4:  BCF    FA6.6
12B6:  BCF    FA6.7
12B8:  BSF    FA6.2
12BA:  MOVFF  FF2,00
12BE:  BCF    FF2.7
12C0:  MOVLW  55
12C2:  MOVWF  FA7
12C4:  MOVLW  AA
12C6:  MOVWF  FA7
12C8:  BSF    FA6.1
12CA:  BTFSC  FA6.1
12CC:  BRA    12CA
12CE:  BCF    FA6.2
12D0:  MOVF   00,W
12D2:  IORWF  FF2,F
.................... 	write_eeprom(EE_TAQ, make8(TAQ, 0)); 
12D4:  MOVFF  3C0,539
12D8:  MOVLW  08
12DA:  MOVWF  FA9
12DC:  MOVFF  3C0,FA8
12E0:  BCF    FA6.6
12E2:  BCF    FA6.7
12E4:  BSF    FA6.2
12E6:  MOVFF  FF2,00
12EA:  BCF    FF2.7
12EC:  MOVLW  55
12EE:  MOVWF  FA7
12F0:  MOVLW  AA
12F2:  MOVWF  FA7
12F4:  BSF    FA6.1
12F6:  BTFSC  FA6.1
12F8:  BRA    12F6
12FA:  BCF    FA6.2
12FC:  MOVF   00,W
12FE:  IORWF  FF2,F
.................... 	write_eeprom(EE_TAQ + 1, make8(TAQ, 1)); 
1300:  MOVFF  3C1,539
1304:  MOVLW  09
1306:  MOVWF  FA9
1308:  MOVFF  3C1,FA8
130C:  BCF    FA6.6
130E:  BCF    FA6.7
1310:  BSF    FA6.2
1312:  MOVFF  FF2,00
1316:  BCF    FF2.7
1318:  MOVLW  55
131A:  MOVWF  FA7
131C:  MOVLW  AA
131E:  MOVWF  FA7
1320:  BSF    FA6.1
1322:  BTFSC  FA6.1
1324:  BRA    1322
1326:  BCF    FA6.2
1328:  MOVF   00,W
132A:  IORWF  FF2,F
.................... 	write_eeprom(EE_PCOUNT, make8(PCOUNT, 0)); 
132C:  MOVFF  3C4,539
1330:  MOVLW  0A
1332:  MOVWF  FA9
1334:  MOVFF  3C4,FA8
1338:  BCF    FA6.6
133A:  BCF    FA6.7
133C:  BSF    FA6.2
133E:  MOVFF  FF2,00
1342:  BCF    FF2.7
1344:  MOVLW  55
1346:  MOVWF  FA7
1348:  MOVLW  AA
134A:  MOVWF  FA7
134C:  BSF    FA6.1
134E:  BTFSC  FA6.1
1350:  BRA    134E
1352:  BCF    FA6.2
1354:  MOVF   00,W
1356:  IORWF  FF2,F
.................... 	write_eeprom(EE_PCOUNT + 1, make8(PCOUNT, 1)); 
1358:  MOVFF  3C5,539
135C:  MOVLW  0B
135E:  MOVWF  FA9
1360:  MOVFF  3C5,FA8
1364:  BCF    FA6.6
1366:  BCF    FA6.7
1368:  BSF    FA6.2
136A:  MOVFF  FF2,00
136E:  BCF    FF2.7
1370:  MOVLW  55
1372:  MOVWF  FA7
1374:  MOVLW  AA
1376:  MOVWF  FA7
1378:  BSF    FA6.1
137A:  BTFSC  FA6.1
137C:  BRA    137A
137E:  BCF    FA6.2
1380:  MOVF   00,W
1382:  IORWF  FF2,F
.................... 	write_eeprom(EE_FWDT, make8(FWDT, 0)); 
1384:  MOVFF  3C2,539
1388:  MOVLW  0C
138A:  MOVWF  FA9
138C:  MOVFF  3C2,FA8
1390:  BCF    FA6.6
1392:  BCF    FA6.7
1394:  BSF    FA6.2
1396:  MOVFF  FF2,00
139A:  BCF    FF2.7
139C:  MOVLW  55
139E:  MOVWF  FA7
13A0:  MOVLW  AA
13A2:  MOVWF  FA7
13A4:  BSF    FA6.1
13A6:  BTFSC  FA6.1
13A8:  BRA    13A6
13AA:  BCF    FA6.2
13AC:  MOVF   00,W
13AE:  IORWF  FF2,F
.................... 	write_eeprom(EE_FWDT + 1, make8(FWDT, 1)); 
13B0:  MOVFF  3C3,539
13B4:  MOVLW  0D
13B6:  MOVWF  FA9
13B8:  MOVFF  3C3,FA8
13BC:  BCF    FA6.6
13BE:  BCF    FA6.7
13C0:  BSF    FA6.2
13C2:  MOVFF  FF2,00
13C6:  BCF    FF2.7
13C8:  MOVLW  55
13CA:  MOVWF  FA7
13CC:  MOVLW  AA
13CE:  MOVWF  FA7
13D0:  BSF    FA6.1
13D2:  BTFSC  FA6.1
13D4:  BRA    13D2
13D6:  BCF    FA6.2
13D8:  MOVF   00,W
13DA:  IORWF  FF2,F
.................... 	write_eeprom(EE_Speed, make8(Speed, 0)); 
13DC:  MOVFF  3DC,539
13E0:  MOVLW  0E
13E2:  MOVWF  FA9
13E4:  MOVFF  3DC,FA8
13E8:  BCF    FA6.6
13EA:  BCF    FA6.7
13EC:  BSF    FA6.2
13EE:  MOVFF  FF2,00
13F2:  BCF    FF2.7
13F4:  MOVLW  55
13F6:  MOVWF  FA7
13F8:  MOVLW  AA
13FA:  MOVWF  FA7
13FC:  BSF    FA6.1
13FE:  BTFSC  FA6.1
1400:  BRA    13FE
1402:  BCF    FA6.2
1404:  MOVF   00,W
1406:  IORWF  FF2,F
.................... 	write_eeprom(EE_Speed + 1, make8(Speed, 1)); 
1408:  MOVFF  3DD,539
140C:  MOVLW  0F
140E:  MOVWF  FA9
1410:  MOVFF  3DD,FA8
1414:  BCF    FA6.6
1416:  BCF    FA6.7
1418:  BSF    FA6.2
141A:  MOVFF  FF2,00
141E:  BCF    FF2.7
1420:  MOVLW  55
1422:  MOVWF  FA7
1424:  MOVLW  AA
1426:  MOVWF  FA7
1428:  BSF    FA6.1
142A:  BTFSC  FA6.1
142C:  BRA    142A
142E:  BCF    FA6.2
1430:  MOVF   00,W
1432:  IORWF  FF2,F
.................... 	write_eeprom(EE_Host, make8(Addr, 0)); 
1434:  MOVFF  3DE,539
1438:  MOVLW  10
143A:  MOVWF  FA9
143C:  MOVFF  3DE,FA8
1440:  BCF    FA6.6
1442:  BCF    FA6.7
1444:  BSF    FA6.2
1446:  MOVFF  FF2,00
144A:  BCF    FF2.7
144C:  MOVLW  55
144E:  MOVWF  FA7
1450:  MOVLW  AA
1452:  MOVWF  FA7
1454:  BSF    FA6.1
1456:  BTFSC  FA6.1
1458:  BRA    1456
145A:  BCF    FA6.2
145C:  MOVF   00,W
145E:  IORWF  FF2,F
.................... 	write_eeprom(EE_Host + 1, make8(Addr, 1)); 
1460:  MOVFF  3DF,539
1464:  MOVLW  11
1466:  MOVWF  FA9
1468:  MOVFF  3DF,FA8
146C:  BCF    FA6.6
146E:  BCF    FA6.7
1470:  BSF    FA6.2
1472:  MOVFF  FF2,00
1476:  BCF    FF2.7
1478:  MOVLW  55
147A:  MOVWF  FA7
147C:  MOVLW  AA
147E:  MOVWF  FA7
1480:  BSF    FA6.1
1482:  BTFSC  FA6.1
1484:  BRA    1482
1486:  BCF    FA6.2
1488:  MOVF   00,W
148A:  IORWF  FF2,F
.................... 	write_eeprom(EE_T0_CAL, make8(T0_CAL, 0)); 
148C:  MOVFF  3B0,539
1490:  MOVLW  12
1492:  MOVWF  FA9
1494:  MOVFF  3B0,FA8
1498:  BCF    FA6.6
149A:  BCF    FA6.7
149C:  BSF    FA6.2
149E:  MOVFF  FF2,00
14A2:  BCF    FF2.7
14A4:  MOVLW  55
14A6:  MOVWF  FA7
14A8:  MOVLW  AA
14AA:  MOVWF  FA7
14AC:  BSF    FA6.1
14AE:  BTFSC  FA6.1
14B0:  BRA    14AE
14B2:  BCF    FA6.2
14B4:  MOVF   00,W
14B6:  IORWF  FF2,F
.................... 	write_eeprom(EE_T0_CAL + 1, make8(T0_CAL, 1)); 
14B8:  MOVFF  3B1,539
14BC:  MOVLW  13
14BE:  MOVWF  FA9
14C0:  MOVFF  3B1,FA8
14C4:  BCF    FA6.6
14C6:  BCF    FA6.7
14C8:  BSF    FA6.2
14CA:  MOVFF  FF2,00
14CE:  BCF    FF2.7
14D0:  MOVLW  55
14D2:  MOVWF  FA7
14D4:  MOVLW  AA
14D6:  MOVWF  FA7
14D8:  BSF    FA6.1
14DA:  BTFSC  FA6.1
14DC:  BRA    14DA
14DE:  BCF    FA6.2
14E0:  MOVF   00,W
14E2:  IORWF  FF2,F
.................... 	write_eeprom(EE_T1_CAL, make8(T1_CAL, 0)); 
14E4:  MOVFF  3BC,539
14E8:  MOVLW  14
14EA:  MOVWF  FA9
14EC:  MOVFF  3BC,FA8
14F0:  BCF    FA6.6
14F2:  BCF    FA6.7
14F4:  BSF    FA6.2
14F6:  MOVFF  FF2,00
14FA:  BCF    FF2.7
14FC:  MOVLW  55
14FE:  MOVWF  FA7
1500:  MOVLW  AA
1502:  MOVWF  FA7
1504:  BSF    FA6.1
1506:  BTFSC  FA6.1
1508:  BRA    1506
150A:  BCF    FA6.2
150C:  MOVF   00,W
150E:  IORWF  FF2,F
.................... 	write_eeprom(EE_T1_CAL + 1, make8(T1_CAL, 1)); 
1510:  MOVFF  3BD,539
1514:  MOVLW  15
1516:  MOVWF  FA9
1518:  MOVFF  3BD,FA8
151C:  BCF    FA6.6
151E:  BCF    FA6.7
1520:  BSF    FA6.2
1522:  MOVFF  FF2,00
1526:  BCF    FF2.7
1528:  MOVLW  55
152A:  MOVWF  FA7
152C:  MOVLW  AA
152E:  MOVWF  FA7
1530:  BSF    FA6.1
1532:  BTFSC  FA6.1
1534:  BRA    1532
1536:  BCF    FA6.2
1538:  MOVF   00,W
153A:  IORWF  FF2,F
.................... 	write_eeprom(EE_TG_CAL, make8(TG_CAL, 0)); 
153C:  MOVFF  3DA,539
1540:  MOVLW  16
1542:  MOVWF  FA9
1544:  MOVFF  3DA,FA8
1548:  BCF    FA6.6
154A:  BCF    FA6.7
154C:  BSF    FA6.2
154E:  MOVFF  FF2,00
1552:  BCF    FF2.7
1554:  MOVLW  55
1556:  MOVWF  FA7
1558:  MOVLW  AA
155A:  MOVWF  FA7
155C:  BSF    FA6.1
155E:  BTFSC  FA6.1
1560:  BRA    155E
1562:  BCF    FA6.2
1564:  MOVF   00,W
1566:  IORWF  FF2,F
.................... 	write_eeprom(EE_TG_CAL + 1, make8(TG_CAL, 1)); 
1568:  MOVFF  3DB,539
156C:  MOVLW  17
156E:  MOVWF  FA9
1570:  MOVFF  3DB,FA8
1574:  BCF    FA6.6
1576:  BCF    FA6.7
1578:  BSF    FA6.2
157A:  MOVFF  FF2,00
157E:  BCF    FF2.7
1580:  MOVLW  55
1582:  MOVWF  FA7
1584:  MOVLW  AA
1586:  MOVWF  FA7
1588:  BSF    FA6.1
158A:  BTFSC  FA6.1
158C:  BRA    158A
158E:  BCF    FA6.2
1590:  MOVF   00,W
1592:  IORWF  FF2,F
....................  
.................... 	//float 
.................... 	memcpy(&temp, &KGT, 4); 
1594:  MOVLW  05
1596:  MOVWF  FEA
1598:  MOVLW  35
159A:  MOVWF  FE9
159C:  MOVLW  03
159E:  MOVWF  FE2
15A0:  MOVLW  D2
15A2:  MOVWF  FE1
15A4:  MOVLW  04
15A6:  MOVWF  01
15A8:  MOVFF  FE6,FEE
15AC:  DECFSZ 01,F
15AE:  BRA    15A8
.................... 	write_eeprom(EE_KGT + 2, make8(temp, 3)); 
15B0:  MOVFF  538,539
15B4:  MOVLW  1A
15B6:  MOVWF  FA9
15B8:  MOVFF  538,FA8
15BC:  BCF    FA6.6
15BE:  BCF    FA6.7
15C0:  BSF    FA6.2
15C2:  MOVFF  FF2,00
15C6:  BCF    FF2.7
15C8:  MOVLW  55
15CA:  MOVWF  FA7
15CC:  MOVLW  AA
15CE:  MOVWF  FA7
15D0:  BSF    FA6.1
15D2:  BTFSC  FA6.1
15D4:  BRA    15D2
15D6:  BCF    FA6.2
15D8:  MOVF   00,W
15DA:  IORWF  FF2,F
.................... 	write_eeprom(EE_KGT + 3, make8(temp, 2)); 
15DC:  MOVFF  537,539
15E0:  MOVLW  1B
15E2:  MOVWF  FA9
15E4:  MOVFF  537,FA8
15E8:  BCF    FA6.6
15EA:  BCF    FA6.7
15EC:  BSF    FA6.2
15EE:  MOVFF  FF2,00
15F2:  BCF    FF2.7
15F4:  MOVLW  55
15F6:  MOVWF  FA7
15F8:  MOVLW  AA
15FA:  MOVWF  FA7
15FC:  BSF    FA6.1
15FE:  BTFSC  FA6.1
1600:  BRA    15FE
1602:  BCF    FA6.2
1604:  MOVF   00,W
1606:  IORWF  FF2,F
.................... 	write_eeprom(EE_KGT, make8(temp, 1)); 
1608:  MOVFF  536,539
160C:  MOVLW  18
160E:  MOVWF  FA9
1610:  MOVFF  536,FA8
1614:  BCF    FA6.6
1616:  BCF    FA6.7
1618:  BSF    FA6.2
161A:  MOVFF  FF2,00
161E:  BCF    FF2.7
1620:  MOVLW  55
1622:  MOVWF  FA7
1624:  MOVLW  AA
1626:  MOVWF  FA7
1628:  BSF    FA6.1
162A:  BTFSC  FA6.1
162C:  BRA    162A
162E:  BCF    FA6.2
1630:  MOVF   00,W
1632:  IORWF  FF2,F
.................... 	write_eeprom(EE_KGT + 1, make8(temp, 0)); 
1634:  MOVFF  535,539
1638:  MOVLW  19
163A:  MOVWF  FA9
163C:  MOVFF  535,FA8
1640:  BCF    FA6.6
1642:  BCF    FA6.7
1644:  BSF    FA6.2
1646:  MOVFF  FF2,00
164A:  BCF    FF2.7
164C:  MOVLW  55
164E:  MOVWF  FA7
1650:  MOVLW  AA
1652:  MOVWF  FA7
1654:  BSF    FA6.1
1656:  BTFSC  FA6.1
1658:  BRA    1656
165A:  BCF    FA6.2
165C:  MOVF   00,W
165E:  IORWF  FF2,F
....................  
.................... 	memcpy(&temp, &KGU, 4); 
1660:  MOVLW  05
1662:  MOVWF  FEA
1664:  MOVLW  35
1666:  MOVWF  FE9
1668:  MOVLW  03
166A:  MOVWF  FE2
166C:  MOVLW  D6
166E:  MOVWF  FE1
1670:  MOVLW  04
1672:  MOVWF  01
1674:  MOVFF  FE6,FEE
1678:  DECFSZ 01,F
167A:  BRA    1674
.................... 	write_eeprom(EE_KGU + 2, make8(temp, 3)); 
167C:  MOVFF  538,539
1680:  MOVLW  1E
1682:  MOVWF  FA9
1684:  MOVFF  538,FA8
1688:  BCF    FA6.6
168A:  BCF    FA6.7
168C:  BSF    FA6.2
168E:  MOVFF  FF2,00
1692:  BCF    FF2.7
1694:  MOVLW  55
1696:  MOVWF  FA7
1698:  MOVLW  AA
169A:  MOVWF  FA7
169C:  BSF    FA6.1
169E:  BTFSC  FA6.1
16A0:  BRA    169E
16A2:  BCF    FA6.2
16A4:  MOVF   00,W
16A6:  IORWF  FF2,F
.................... 	write_eeprom(EE_KGU + 3, make8(temp, 2)); 
16A8:  MOVFF  537,539
16AC:  MOVLW  1F
16AE:  MOVWF  FA9
16B0:  MOVFF  537,FA8
16B4:  BCF    FA6.6
16B6:  BCF    FA6.7
16B8:  BSF    FA6.2
16BA:  MOVFF  FF2,00
16BE:  BCF    FF2.7
16C0:  MOVLW  55
16C2:  MOVWF  FA7
16C4:  MOVLW  AA
16C6:  MOVWF  FA7
16C8:  BSF    FA6.1
16CA:  BTFSC  FA6.1
16CC:  BRA    16CA
16CE:  BCF    FA6.2
16D0:  MOVF   00,W
16D2:  IORWF  FF2,F
.................... 	write_eeprom(EE_KGU, make8(temp, 1)); 
16D4:  MOVFF  536,539
16D8:  MOVLW  1C
16DA:  MOVWF  FA9
16DC:  MOVFF  536,FA8
16E0:  BCF    FA6.6
16E2:  BCF    FA6.7
16E4:  BSF    FA6.2
16E6:  MOVFF  FF2,00
16EA:  BCF    FF2.7
16EC:  MOVLW  55
16EE:  MOVWF  FA7
16F0:  MOVLW  AA
16F2:  MOVWF  FA7
16F4:  BSF    FA6.1
16F6:  BTFSC  FA6.1
16F8:  BRA    16F6
16FA:  BCF    FA6.2
16FC:  MOVF   00,W
16FE:  IORWF  FF2,F
.................... 	write_eeprom(EE_KGU + 1, make8(temp, 0)); 
1700:  MOVFF  535,539
1704:  MOVLW  1D
1706:  MOVWF  FA9
1708:  MOVFF  535,FA8
170C:  BCF    FA6.6
170E:  BCF    FA6.7
1710:  BSF    FA6.2
1712:  MOVFF  FF2,00
1716:  BCF    FF2.7
1718:  MOVLW  55
171A:  MOVWF  FA7
171C:  MOVLW  AA
171E:  MOVWF  FA7
1720:  BSF    FA6.1
1722:  BTFSC  FA6.1
1724:  BRA    1722
1726:  BCF    FA6.2
1728:  MOVF   00,W
172A:  IORWF  FF2,F
....................  
.................... 	memcpy(&temp, &KGT, 4); 
172C:  MOVLW  05
172E:  MOVWF  FEA
1730:  MOVLW  35
1732:  MOVWF  FE9
1734:  MOVLW  03
1736:  MOVWF  FE2
1738:  MOVLW  D2
173A:  MOVWF  FE1
173C:  MOVLW  04
173E:  MOVWF  01
1740:  MOVFF  FE6,FEE
1744:  DECFSZ 01,F
1746:  BRA    1740
.................... 	write_eeprom(EE_KST0 + 2, make8(temp, 3)); 
1748:  MOVFF  538,539
174C:  MOVLW  22
174E:  MOVWF  FA9
1750:  MOVFF  538,FA8
1754:  BCF    FA6.6
1756:  BCF    FA6.7
1758:  BSF    FA6.2
175A:  MOVFF  FF2,00
175E:  BCF    FF2.7
1760:  MOVLW  55
1762:  MOVWF  FA7
1764:  MOVLW  AA
1766:  MOVWF  FA7
1768:  BSF    FA6.1
176A:  BTFSC  FA6.1
176C:  BRA    176A
176E:  BCF    FA6.2
1770:  MOVF   00,W
1772:  IORWF  FF2,F
.................... 	write_eeprom(EE_KST0 + 3, make8(temp, 2)); 
1774:  MOVFF  537,539
1778:  MOVLW  23
177A:  MOVWF  FA9
177C:  MOVFF  537,FA8
1780:  BCF    FA6.6
1782:  BCF    FA6.7
1784:  BSF    FA6.2
1786:  MOVFF  FF2,00
178A:  BCF    FF2.7
178C:  MOVLW  55
178E:  MOVWF  FA7
1790:  MOVLW  AA
1792:  MOVWF  FA7
1794:  BSF    FA6.1
1796:  BTFSC  FA6.1
1798:  BRA    1796
179A:  BCF    FA6.2
179C:  MOVF   00,W
179E:  IORWF  FF2,F
.................... 	write_eeprom(EE_KST0, make8(temp, 1)); 
17A0:  MOVFF  536,539
17A4:  MOVLW  20
17A6:  MOVWF  FA9
17A8:  MOVFF  536,FA8
17AC:  BCF    FA6.6
17AE:  BCF    FA6.7
17B0:  BSF    FA6.2
17B2:  MOVFF  FF2,00
17B6:  BCF    FF2.7
17B8:  MOVLW  55
17BA:  MOVWF  FA7
17BC:  MOVLW  AA
17BE:  MOVWF  FA7
17C0:  BSF    FA6.1
17C2:  BTFSC  FA6.1
17C4:  BRA    17C2
17C6:  BCF    FA6.2
17C8:  MOVF   00,W
17CA:  IORWF  FF2,F
.................... 	write_eeprom(EE_KST0 + 1, make8(temp, 0)); 
17CC:  MOVFF  535,539
17D0:  MOVLW  21
17D2:  MOVWF  FA9
17D4:  MOVFF  535,FA8
17D8:  BCF    FA6.6
17DA:  BCF    FA6.7
17DC:  BSF    FA6.2
17DE:  MOVFF  FF2,00
17E2:  BCF    FF2.7
17E4:  MOVLW  55
17E6:  MOVWF  FA7
17E8:  MOVLW  AA
17EA:  MOVWF  FA7
17EC:  BSF    FA6.1
17EE:  BTFSC  FA6.1
17F0:  BRA    17EE
17F2:  BCF    FA6.2
17F4:  MOVF   00,W
17F6:  IORWF  FF2,F
....................  
.................... 	memcpy(&temp, &KGT, 4); 
17F8:  MOVLW  05
17FA:  MOVWF  FEA
17FC:  MOVLW  35
17FE:  MOVWF  FE9
1800:  MOVLW  03
1802:  MOVWF  FE2
1804:  MOVLW  D2
1806:  MOVWF  FE1
1808:  MOVLW  04
180A:  MOVWF  01
180C:  MOVFF  FE6,FEE
1810:  DECFSZ 01,F
1812:  BRA    180C
.................... 	write_eeprom(EE_KST1 + 2, make8(temp, 3)); 
1814:  MOVFF  538,539
1818:  MOVLW  26
181A:  MOVWF  FA9
181C:  MOVFF  538,FA8
1820:  BCF    FA6.6
1822:  BCF    FA6.7
1824:  BSF    FA6.2
1826:  MOVFF  FF2,00
182A:  BCF    FF2.7
182C:  MOVLW  55
182E:  MOVWF  FA7
1830:  MOVLW  AA
1832:  MOVWF  FA7
1834:  BSF    FA6.1
1836:  BTFSC  FA6.1
1838:  BRA    1836
183A:  BCF    FA6.2
183C:  MOVF   00,W
183E:  IORWF  FF2,F
.................... 	write_eeprom(EE_KST1 + 3, make8(temp, 2)); 
1840:  MOVFF  537,539
1844:  MOVLW  27
1846:  MOVWF  FA9
1848:  MOVFF  537,FA8
184C:  BCF    FA6.6
184E:  BCF    FA6.7
1850:  BSF    FA6.2
1852:  MOVFF  FF2,00
1856:  BCF    FF2.7
1858:  MOVLW  55
185A:  MOVWF  FA7
185C:  MOVLW  AA
185E:  MOVWF  FA7
1860:  BSF    FA6.1
1862:  BTFSC  FA6.1
1864:  BRA    1862
1866:  BCF    FA6.2
1868:  MOVF   00,W
186A:  IORWF  FF2,F
.................... 	write_eeprom(EE_KST1, make8(temp, 1)); 
186C:  MOVFF  536,539
1870:  MOVLW  24
1872:  MOVWF  FA9
1874:  MOVFF  536,FA8
1878:  BCF    FA6.6
187A:  BCF    FA6.7
187C:  BSF    FA6.2
187E:  MOVFF  FF2,00
1882:  BCF    FF2.7
1884:  MOVLW  55
1886:  MOVWF  FA7
1888:  MOVLW  AA
188A:  MOVWF  FA7
188C:  BSF    FA6.1
188E:  BTFSC  FA6.1
1890:  BRA    188E
1892:  BCF    FA6.2
1894:  MOVF   00,W
1896:  IORWF  FF2,F
.................... 	write_eeprom(EE_KST1 + 1, make8(temp, 0)); 
1898:  MOVFF  535,539
189C:  MOVLW  25
189E:  MOVWF  FA9
18A0:  MOVFF  535,FA8
18A4:  BCF    FA6.6
18A6:  BCF    FA6.7
18A8:  BSF    FA6.2
18AA:  MOVFF  FF2,00
18AE:  BCF    FF2.7
18B0:  MOVLW  55
18B2:  MOVWF  FA7
18B4:  MOVLW  AA
18B6:  MOVWF  FA7
18B8:  BSF    FA6.1
18BA:  BTFSC  FA6.1
18BC:  BRA    18BA
18BE:  BCF    FA6.2
18C0:  MOVF   00,W
18C2:  IORWF  FF2,F
....................  
.................... 	setup_wdt(WDT_ON); 
18C4:  BSF    FD1.0
.................... } 
18C6:  MOVLB  0
18C8:  GOTO   1C30 (RETURN)
....................  
.................... //temperature measuring 
.................... void Termometer(void) 
.................... { 
.................... 	signed int16 
.................... 		temp; 
....................  
.................... 	//generator 
.................... 	set_adc_channel(2);	//select generator channel 
*
2712:  MOVLW  08
2714:  MOVWF  01
2716:  MOVF   FC2,W
2718:  ANDLW  C3
271A:  IORWF  01,W
271C:  MOVWF  FC2
.................... 	delay_us(10);		//small wait 
271E:  CLRWDT
2720:  MOVLW  1A
2722:  MOVWF  00
2724:  DECFSZ 00,F
2726:  BRA    2724
.................... 	temp = read_adc();	//read value 
2728:  BSF    FC2.1
272A:  BTFSC  FC2.1
272C:  BRA    272A
272E:  MOVFF  FC4,51A
2732:  MOVLB  5
2734:  MOVFF  FC3,519
.................... 	T_GEN = (signed int16)((temp - 205)*24.414); 
2738:  MOVLW  CD
273A:  SUBWF  x19,W
273C:  MOVWF  x1B
273E:  MOVLW  00
2740:  SUBWFB x1A,W
2742:  MOVWF  x1C
2744:  MOVWF  x1E
2746:  MOVFF  51B,51D
274A:  MOVLB  0
274C:  RCALL  2590
274E:  MOVFF  03,521
2752:  MOVFF  02,520
2756:  MOVFF  01,51F
275A:  MOVFF  00,51E
275E:  MOVLW  DF
2760:  MOVLB  5
2762:  MOVWF  x25
2764:  MOVLW  4F
2766:  MOVWF  x24
2768:  MOVLW  43
276A:  MOVWF  x23
276C:  MOVLW  83
276E:  MOVWF  x22
2770:  MOVLB  0
2772:  RCALL  25E0
2774:  MOVFF  03,51E
2778:  MOVFF  02,51D
277C:  MOVFF  01,51C
2780:  MOVFF  00,51B
2784:  RCALL  26D6
2786:  MOVFF  02,3C9
278A:  MOVFF  01,3C8
....................  
.................... 	//t0 
.................... 	set_adc_channel(5);	//select generator channel 
278E:  MOVLW  14
2790:  MOVWF  01
2792:  MOVF   FC2,W
2794:  ANDLW  C3
2796:  IORWF  01,W
2798:  MOVWF  FC2
.................... 	delay_us(10);		//small wait 
279A:  CLRWDT
279C:  MOVLW  1A
279E:  MOVWF  00
27A0:  DECFSZ 00,F
27A2:  BRA    27A0
.................... 	temp = read_adc();	//read value 
27A4:  BSF    FC2.1
27A6:  BTFSC  FC2.1
27A8:  BRA    27A6
27AA:  MOVFF  FC4,51A
27AE:  MOVLB  5
27B0:  MOVFF  FC3,519
.................... 	T_SR0 = (signed int16)((temp - 205)*24.414); 
27B4:  MOVLW  CD
27B6:  SUBWF  x19,W
27B8:  MOVWF  x1B
27BA:  MOVLW  00
27BC:  SUBWFB x1A,W
27BE:  MOVWF  x1C
27C0:  MOVWF  x1E
27C2:  MOVFF  51B,51D
27C6:  MOVLB  0
27C8:  RCALL  2590
27CA:  MOVFF  03,521
27CE:  MOVFF  02,520
27D2:  MOVFF  01,51F
27D6:  MOVFF  00,51E
27DA:  MOVLW  DF
27DC:  MOVLB  5
27DE:  MOVWF  x25
27E0:  MOVLW  4F
27E2:  MOVWF  x24
27E4:  MOVLW  43
27E6:  MOVWF  x23
27E8:  MOVLW  83
27EA:  MOVWF  x22
27EC:  MOVLB  0
27EE:  RCALL  25E0
27F0:  MOVFF  03,51E
27F4:  MOVFF  02,51D
27F8:  MOVFF  01,51C
27FC:  MOVFF  00,51B
2800:  RCALL  26D6
2802:  MOVFF  02,3B3
2806:  MOVFF  01,3B2
....................  
.................... 	//t1 
.................... 	set_adc_channel(4);	//select generator channel 
280A:  MOVLW  10
280C:  MOVWF  01
280E:  MOVF   FC2,W
2810:  ANDLW  C3
2812:  IORWF  01,W
2814:  MOVWF  FC2
.................... 	delay_us(10);		//small wait 
2816:  CLRWDT
2818:  MOVLW  1A
281A:  MOVWF  00
281C:  DECFSZ 00,F
281E:  BRA    281C
.................... 	temp = read_adc();	//read value 
2820:  BSF    FC2.1
2822:  BTFSC  FC2.1
2824:  BRA    2822
2826:  MOVFF  FC4,51A
282A:  MOVLB  5
282C:  MOVFF  FC3,519
.................... 	T_SR1 = (signed int16)((temp - 205)*24.414); 
2830:  MOVLW  CD
2832:  SUBWF  x19,W
2834:  MOVWF  x1B
2836:  MOVLW  00
2838:  SUBWFB x1A,W
283A:  MOVWF  x1C
283C:  MOVWF  x1E
283E:  MOVFF  51B,51D
2842:  MOVLB  0
2844:  RCALL  2590
2846:  MOVFF  03,521
284A:  MOVFF  02,520
284E:  MOVFF  01,51F
2852:  MOVFF  00,51E
2856:  MOVLW  DF
2858:  MOVLB  5
285A:  MOVWF  x25
285C:  MOVLW  4F
285E:  MOVWF  x24
2860:  MOVLW  43
2862:  MOVWF  x23
2864:  MOVLW  83
2866:  MOVWF  x22
2868:  MOVLB  0
286A:  RCALL  25E0
286C:  MOVFF  03,51E
2870:  MOVFF  02,51D
2874:  MOVFF  01,51C
2878:  MOVFF  00,51B
287C:  RCALL  26D6
287E:  MOVFF  02,3BF
2882:  MOVFF  01,3BE
.................... } 
2886:  RETLW  00
....................  
.................... //DAC setting 
.................... void SetSawDac(int16 level) { 
....................  
.................... 	output_low(DAC1);			//select course DAC 
*
2B14:  BCF    F95.1
2B16:  BCF    F8C.1
.................... 	spi_write((make8(level, 1) & 0x0f) | 0x10);	//send high part 
2B18:  MOVLB  5
2B1A:  MOVF   x1A,W
2B1C:  ANDLW  0F
2B1E:  IORLW  10
2B20:  MOVWF  x1B
2B22:  MOVF   FC9,W
2B24:  MOVFF  51B,FC9
2B28:  RRCF   FC7,W
2B2A:  BNC   2B28
.................... 	spi_write(make8(level, 0));		//send low part 
2B2C:  MOVFF  519,51B
2B30:  MOVF   FC9,W
2B32:  MOVFF  519,FC9
2B36:  RRCF   FC7,W
2B38:  BNC   2B36
.................... 	output_high(DAC1);			//deselect 
2B3A:  BCF    F95.1
2B3C:  BSF    F8C.1
.................... 	output_low(LDAC);			//send DAC 
2B3E:  BCF    F92.7
2B40:  BCF    F89.7
.................... 	output_high(LDAC);			//strobe 
2B42:  BCF    F92.7
2B44:  BSF    F89.7
.................... } 
2B46:  MOVLB  0
2B48:  RETLW  00
....................  
.................... //KU setting 
.................... void SetKU0(int16 coeff) 
.................... { 
.................... 	int16 dacval; 
.................... 	setup_wdt(WDT_OFF); 
*
2888:  BCF    FD1.0
.................... 	if ((coeff < 1) & (coeff > 6)) 
288A:  MOVLB  5
288C:  MOVF   x19,F
288E:  BNZ   2894
2890:  MOVF   x1A,F
2892:  BZ    2898
2894:  MOVLW  00
2896:  BRA    289A
2898:  MOVLW  01
289A:  MOVWF  x1D
289C:  MOVF   x1A,F
289E:  BNZ   28AA
28A0:  MOVF   x19,W
28A2:  SUBLW  06
28A4:  BNC   28AA
28A6:  MOVLW  00
28A8:  BRA    28AC
28AA:  MOVLW  01
28AC:  ANDWF  x1D,W
28AE:  BZ    28B6
.................... 		coeff = 1; 
28B0:  CLRF   x1A
28B2:  MOVLW  01
28B4:  MOVWF  x19
.................... 	dacval = (0x1fff >> coeff) | 0x7000; 
28B6:  MOVLW  1F
28B8:  MOVWF  x1E
28BA:  MOVLW  FF
28BC:  MOVWF  x1D
28BE:  MOVF   x19,W
28C0:  MOVWF  00
28C2:  BZ    28CE
28C4:  BCF    FD8.0
28C6:  RRCF   x1E,F
28C8:  RRCF   x1D,F
28CA:  DECFSZ 00,F
28CC:  BRA    28C4
28CE:  MOVF   x1D,W
28D0:  MOVWF  x1B
28D2:  MOVF   x1E,W
28D4:  IORLW  70
28D6:  MOVWF  x1C
.................... 	output_low(KU0);				//select KU0 DAC 
28D8:  BCF    F95.5
28DA:  BCF    F8C.5
.................... 	spi_write(make8(dacval, 1));		//send high part 
28DC:  MOVFF  51C,51D
28E0:  MOVF   FC9,W
28E2:  MOVFF  51C,FC9
28E6:  RRCF   FC7,W
28E8:  BNC   28E6
.................... 	spi_write(make8(dacval, 0));		//send low part 
28EA:  MOVFF  51B,51D
28EE:  MOVF   FC9,W
28F0:  MOVFF  51B,FC9
28F4:  RRCF   FC7,W
28F6:  BNC   28F4
.................... 	output_high(KU0);				//deselect 
28F8:  BCF    F95.5
28FA:  BSF    F8C.5
.................... 	setup_wdt(WDT_ON); 
28FC:  BSF    FD1.0
.................... } 
28FE:  MOVLB  0
2900:  GOTO   38D6 (RETURN)
....................  
.................... void SetKU1(int16 coeff) 
.................... { 
.................... 	int16 dacval; 
.................... 	setup_wdt(WDT_OFF); 
2904:  BCF    FD1.0
.................... 	if ((coeff < 1) & (coeff > 6)) 
2906:  MOVLB  5
2908:  MOVF   x19,F
290A:  BNZ   2910
290C:  MOVF   x1A,F
290E:  BZ    2914
2910:  MOVLW  00
2912:  BRA    2916
2914:  MOVLW  01
2916:  MOVWF  x1D
2918:  MOVF   x1A,F
291A:  BNZ   2926
291C:  MOVF   x19,W
291E:  SUBLW  06
2920:  BNC   2926
2922:  MOVLW  00
2924:  BRA    2928
2926:  MOVLW  01
2928:  ANDWF  x1D,W
292A:  BZ    2932
.................... 		coeff = 1; 
292C:  CLRF   x1A
292E:  MOVLW  01
2930:  MOVWF  x19
.................... 	dacval = (0x1fff >> coeff) | 0x7000; 
2932:  MOVLW  1F
2934:  MOVWF  x1E
2936:  MOVLW  FF
2938:  MOVWF  x1D
293A:  MOVF   x19,W
293C:  MOVWF  00
293E:  BZ    294A
2940:  BCF    FD8.0
2942:  RRCF   x1E,F
2944:  RRCF   x1D,F
2946:  DECFSZ 00,F
2948:  BRA    2940
294A:  MOVF   x1D,W
294C:  MOVWF  x1B
294E:  MOVF   x1E,W
2950:  IORLW  70
2952:  MOVWF  x1C
.................... 	output_low(KU1);				//select KU0 DAC 
2954:  BCF    F95.4
2956:  BCF    F8C.4
.................... 	spi_write(make8(dacval, 1));		//send high part 
2958:  MOVFF  51C,51D
295C:  MOVF   FC9,W
295E:  MOVFF  51C,FC9
2962:  RRCF   FC7,W
2964:  BNC   2962
.................... 	spi_write(make8(dacval, 0));		//send low part 
2966:  MOVFF  51B,51D
296A:  MOVF   FC9,W
296C:  MOVFF  51B,FC9
2970:  RRCF   FC7,W
2972:  BNC   2970
.................... 	output_high(KU1);				//deselect 
2974:  BCF    F95.4
2976:  BSF    F8C.4
.................... 	setup_wdt(WDT_ON); 
2978:  BSF    FD1.0
.................... } 
297A:  MOVLB  0
297C:  GOTO   38E2 (RETURN)
....................  
.................... //ISR 
.................... #include	"modbus_isr.h" 
.................... //modbus realization 
.................... // 
.................... //values 
.................... enum modbus_exceptions{ 
.................... 	illegal_function=1, 
.................... 	illegal_data_address=2, 
.................... 	illegal_data_value=3, 
.................... 	slave_device_failure=4, 
.................... 	acknowledge=5, 
.................... 	slave_device_busy=6 
.................... }; 
.................... static 	int8	MB_Buffer[256];		//incoming buffer 
.................... static	int8	MB_Length=0;			//message length 
.................... static	int16	ValidReq;			//valid req count 
.................... static	int16	CRCReq;				//CRC error count 
.................... static	int16	ExcReq;				//ecxcept error count 
.................... // 
.................... //CRC table 
.................... /* Table of CRC values for high–order byte */ 
.................... const int8 modbus_auchCRCHi[] = { 
....................    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 
....................    0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 
....................    0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 
....................    0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 
....................    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 
....................    0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 
....................    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 
....................    0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 
....................    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 
....................    0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 
....................    0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 
....................    0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 
....................    0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 
....................    0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 
....................    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 
....................    0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 
....................    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 
....................    0x40 
.................... }; 
....................  
.................... /* Table of CRC values for low–order byte */ 
.................... const int8 modbus_auchCRCLo[] = { 
....................    0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4, 
....................    0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09, 
....................    0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 
....................    0x1D, 0x1C, 0xDC, 0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3, 
....................    0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7, 
....................    0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A, 
....................    0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 
....................    0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26, 
....................    0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2, 
....................    0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F, 
....................    0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB, 
....................    0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5, 
....................    0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91, 
....................    0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C, 
....................    0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88, 
....................    0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C, 
....................    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80, 
....................    0x40 
.................... }; 
.................... //procedures 
.................... // 
.................... // 
.................... //UART preset 
.................... #USE RS232(baud=9600, xmit=TX, rcv=RX, enable=DIR, parity=N) 
*
18FE:  BCF    F92.6
1900:  BSF    F89.6
1902:  BTFSS  F9E.4
1904:  BRA    1902
1906:  MOVLB  5
1908:  MOVFF  536,FAD
190C:  NOP   
190E:  BCF    F92.6
1910:  BSF    F89.6
1912:  BTFSS  FAC.1
1914:  BRA    1912
1916:  BCF    F92.6
1918:  BCF    F89.6
191A:  MOVLB  0
191C:  GOTO   1EB2 (RETURN)
.................... void	RsInit(void){ 
.................... 	MB_Length=0;	//set clear buffer 
*
244C:  MOVLB  4
244E:  CLRF   xF0
.................... 	//select rate 
.................... 	switch(Speed){ 
2450:  MOVLB  3
2452:  MOVF   xDC,W
2454:  MOVWF  00
2456:  MOVF   xDD,W
2458:  MOVWF  03
245A:  MOVLW  04
245C:  SUBWF  03,W
245E:  BNZ   246A
2460:  MOVLW  B0
2462:  SUBWF  00,W
2464:  MOVLB  0
2466:  BZ    24DA
2468:  MOVLB  3
246A:  MOVLW  07
246C:  SUBWF  03,W
246E:  BNZ   247A
2470:  MOVLW  08
2472:  SUBWF  00,W
2474:  MOVLB  0
2476:  BZ    24EE
2478:  MOVLB  3
247A:  MOVLW  09
247C:  SUBWF  03,W
247E:  BNZ   248A
2480:  MOVLW  60
2482:  SUBWF  00,W
2484:  MOVLB  0
2486:  BZ    2502
2488:  MOVLB  3
248A:  MOVLW  12
248C:  SUBWF  03,W
248E:  BNZ   249A
2490:  MOVLW  C0
2492:  SUBWF  00,W
2494:  MOVLB  0
2496:  BZ    2516
2498:  MOVLB  3
249A:  MOVLW  1C
249C:  SUBWF  03,W
249E:  BNZ   24AA
24A0:  MOVLW  20
24A2:  SUBWF  00,W
24A4:  MOVLB  0
24A6:  BZ    252A
24A8:  MOVLB  3
24AA:  MOVLW  25
24AC:  SUBWF  03,W
24AE:  BNZ   24BA
24B0:  MOVLW  80
24B2:  SUBWF  00,W
24B4:  MOVLB  0
24B6:  BZ    253E
24B8:  MOVLB  3
24BA:  MOVLW  38
24BC:  SUBWF  03,W
24BE:  BNZ   24CA
24C0:  MOVLW  40
24C2:  SUBWF  00,W
24C4:  MOVLB  0
24C6:  BZ    2552
24C8:  MOVLB  3
24CA:  MOVLW  4B
24CC:  SUBWF  03,W
24CE:  BNZ   24D8
24D0:  MOVF   00,F
24D2:  MOVLB  0
24D4:  BZ    2562
24D6:  MOVLB  3
24D8:  BRA    2578
.................... 		case	1200:	setup_uart(1200); 
24DA:  BSF    FB8.3
24DC:  MOVLW  0A
24DE:  MOVWF  FAF
24E0:  MOVLW  1A
24E2:  MOVWF  FB0
24E4:  MOVLW  A6
24E6:  MOVWF  FAC
24E8:  NOP   
24EA:  NOP   
.................... 						break; 
24EC:  BRA    258A
.................... 		case	1800:	setup_uart(1800); 
24EE:  BSF    FB8.3
24F0:  MOVLW  5B
24F2:  MOVWF  FAF
24F4:  MOVLW  11
24F6:  MOVWF  FB0
24F8:  MOVLW  A6
24FA:  MOVWF  FAC
24FC:  NOP   
24FE:  NOP   
.................... 						break; 
2500:  BRA    258A
.................... 		case	2400:	setup_uart(2400); 
2502:  BSF    FB8.3
2504:  MOVLW  04
2506:  MOVWF  FAF
2508:  MOVLW  0D
250A:  MOVWF  FB0
250C:  MOVLW  A6
250E:  MOVWF  FAC
2510:  NOP   
2512:  NOP   
.................... 						break; 
2514:  BRA    258A
.................... 		case	4800:	setup_uart(4800); 
2516:  BSF    FB8.3
2518:  MOVLW  82
251A:  MOVWF  FAF
251C:  MOVLW  06
251E:  MOVWF  FB0
2520:  MOVLW  A6
2522:  MOVWF  FAC
2524:  NOP   
2526:  NOP   
.................... 						break; 
2528:  BRA    258A
.................... 		case	7200:	setup_uart(7200); 
252A:  BSF    FB8.3
252C:  MOVLW  56
252E:  MOVWF  FAF
2530:  MOVLW  04
2532:  MOVWF  FB0
2534:  MOVLW  A6
2536:  MOVWF  FAC
2538:  NOP   
253A:  NOP   
.................... 						break; 
253C:  BRA    258A
.................... 		case	9600:	setup_uart(9600); 
253E:  BSF    FB8.3
2540:  MOVLW  40
2542:  MOVWF  FAF
2544:  MOVLW  03
2546:  MOVWF  FB0
2548:  MOVLW  A6
254A:  MOVWF  FAC
254C:  NOP   
254E:  NOP   
.................... 						break; 
2550:  BRA    258A
.................... 		case	14400:	setup_uart(14400); 
2552:  BCF    FB8.3
2554:  MOVLW  8A
2556:  MOVWF  FAF
2558:  MOVLW  A6
255A:  MOVWF  FAC
255C:  NOP   
255E:  NOP   
.................... 						break; 
2560:  BRA    258A
.................... 		case	19200:	setup_uart(19200); 
2562:  BSF    FB8.3
2564:  MOVLW  A0
2566:  MOVWF  FAF
2568:  MOVLW  01
256A:  MOVWF  FB0
256C:  MOVLW  A6
256E:  MOVWF  FAC
2570:  NOP   
2572:  NOP   
.................... 						break; 
2574:  BRA    258A
2576:  MOVLB  3
.................... 		default:		setup_uart(9600); 
2578:  BSF    FB8.3
257A:  MOVLW  40
257C:  MOVWF  FAF
257E:  MOVLW  03
2580:  MOVWF  FB0
2582:  MOVLW  A6
2584:  MOVWF  FAC
2586:  NOP   
2588:  NOP   
258A:  MOVLB  0
.................... 	};	 
.................... //	dmy=getc(); 
.................... } 
258C:  GOTO   3892 (RETURN)
.................... // 
....................  
.................... //usart settings 
....................  
.................... //usart interrupt vector - packet interception 
.................... #INT_RDA 
.................... void	Incoming(void){ 
.................... 	MB_Buffer[MB_Length]=getc();	//read stream 
*
036E:  CLRF   03
0370:  MOVLB  4
0372:  MOVF   xF0,W
0374:  ADDLW  F0
0376:  MOVWF  FE9
0378:  MOVLW  03
037A:  ADDWFC 03,W
037C:  MOVWF  FEA
037E:  BTFSS  F9E.5
0380:  BRA    037E
0382:  MOVFF  FAE,FEF
.................... 	MB_Length++;					//set new point 
0386:  INCF   xF0,F
.................... 	output_low(STAT); 
0388:  BCF    F94.0
038A:  BCF    F8B.0
.................... 	set_timer1((int16)(0xffff-35000000/Speed));	//set wait time 
038C:  BCF    FD8.1
038E:  MOVLW  02
0390:  MOVLB  5
0392:  MOVWF  x31
0394:  MOVLW  16
0396:  MOVWF  x30
0398:  MOVLW  0E
039A:  MOVWF  x2F
039C:  MOVLW  C0
039E:  MOVWF  x2E
03A0:  CLRF   x35
03A2:  CLRF   x34
03A4:  MOVFF  3DD,533
03A8:  MOVFF  3DC,532
03AC:  MOVLB  0
03AE:  RCALL  02DA
03B0:  MOVLW  FF
03B2:  BSF    FD8.0
03B4:  SUBFWB 00,F
03B6:  SUBFWB 01,F
03B8:  MOVLW  00
03BA:  SUBFWB 02,F
03BC:  SUBFWB 03,F
03BE:  MOVFF  01,FCF
03C2:  MOVFF  00,FCE
.................... 	clear_interrupt(INT_TIMER1);		//clear timer 1 int 
03C6:  BCF    F9E.0
.................... 	enable_interrupts(INT_TIMER1);	//enable timer 1 interrupt 
03C8:  BSF    F9D.0
.................... //	clear_interrupt(int_rda);		//clear interrupt flag 
.................... } 
.................... // 
.................... //calculate CRC16 : 1st - buffer, 2d - length of data 
03CA:  BCF    F9E.5
03CC:  GOTO   006C
.................... int16	ModbusCRC(int8 * buf, int8 len){ 
03D0:  MOVLW  FF
03D2:  MOVLB  5
03D4:  MOVWF  x3B
03D6:  MOVWF  x3C
.................... 	int8	i,index; 
.................... 	int8	CRC_Low=0xff,CRC_High=0xff; 
.................... 	// 
.................... 	for(i=0; i<len; i++){ 
03D8:  CLRF   x39
03DA:  MOVF   x38,W
03DC:  SUBWF  x39,W
03DE:  BC    0418
.................... 		index=CRC_High^buf[i]; 
03E0:  CLRF   03
03E2:  MOVF   x39,W
03E4:  ADDWF  x36,W
03E6:  MOVWF  FE9
03E8:  MOVF   x37,W
03EA:  ADDWFC 03,W
03EC:  MOVWF  FEA
03EE:  MOVF   FEF,W
03F0:  XORWF  x3C,W
03F2:  MOVWF  x3A
.................... 		CRC_High=CRC_Low^modbus_auchCRCHi[index]; 
03F4:  CLRF   03
03F6:  MOVF   x3A,W
03F8:  MOVLB  0
03FA:  RCALL  00BA
03FC:  MOVWF  01
03FE:  MOVLB  5
0400:  MOVF   x3B,W
0402:  XORWF  01,W
0404:  MOVWF  x3C
.................... 		CRC_Low=modbus_auchCRCLo[index]; 
0406:  CLRF   03
0408:  MOVF   x3A,W
040A:  MOVLB  0
040C:  RCALL  01CA
040E:  MOVFF  FE8,53B
.................... 	} 
0412:  MOVLB  5
0414:  INCF   x39,F
0416:  BRA    03DA
.................... 	// 
.................... 	return	make16(CRC_High,CRC_Low); 
0418:  MOVFF  53C,03
041C:  MOVFF  53B,01
0420:  MOVFF  53C,02
.................... } 
0424:  MOVLB  0
0426:  RETLW  00
.................... //read registers 
.................... static int16	CRCr,CRCc; 
.................... static int8	j; 
.................... // 
....................  
.................... //add register data 
.................... void	AddRegData(int8 regist){ 
.................... 	int32	flcopy; 
.................... 	restart_wdt(); 
0428:  CLRWDT
.................... 			switch(regist){ 
042A:  MOVLB  5
042C:  MOVF   x35,W
042E:  XORLW  00
0430:  MOVLB  0
0432:  BZ    04E4
0434:  XORLW  01
0436:  BTFSC  FD8.2
0438:  BRA    051C
043A:  XORLW  03
043C:  BTFSC  FD8.2
043E:  BRA    0554
0440:  XORLW  01
0442:  BTFSC  FD8.2
0444:  BRA    058C
0446:  XORLW  07
0448:  BTFSC  FD8.2
044A:  BRA    05B8
044C:  XORLW  01
044E:  BTFSC  FD8.2
0450:  BRA    05F0
0452:  XORLW  03
0454:  BTFSC  FD8.2
0456:  BRA    061C
0458:  XORLW  01
045A:  BTFSC  FD8.2
045C:  BRA    0654
045E:  XORLW  0F
0460:  BTFSC  FD8.2
0462:  BRA    068C
0464:  XORLW  01
0466:  BTFSC  FD8.2
0468:  BRA    06C4
046A:  XORLW  03
046C:  BTFSC  FD8.2
046E:  BRA    06F0
0470:  XORLW  01
0472:  BTFSC  FD8.2
0474:  BRA    071C
0476:  XORLW  07
0478:  BTFSC  FD8.2
047A:  BRA    0754
047C:  XORLW  01
047E:  BTFSC  FD8.2
0480:  BRA    078C
0482:  XORLW  03
0484:  BTFSC  FD8.2
0486:  BRA    07C4
0488:  XORLW  01
048A:  BTFSC  FD8.2
048C:  BRA    07FC
048E:  XORLW  1F
0490:  BTFSC  FD8.2
0492:  BRA    0834
0494:  XORLW  01
0496:  BTFSC  FD8.2
0498:  BRA    086C
049A:  XORLW  03
049C:  BTFSC  FD8.2
049E:  BRA    08A4
04A0:  XORLW  01
04A2:  BTFSC  FD8.2
04A4:  BRA    08DC
04A6:  XORLW  07
04A8:  BTFSC  FD8.2
04AA:  BRA    0914
04AC:  XORLW  01
04AE:  BTFSC  FD8.2
04B0:  BRA    0944
04B2:  XORLW  03
04B4:  BTFSC  FD8.2
04B6:  BRA    0974
04B8:  XORLW  01
04BA:  BTFSC  FD8.2
04BC:  BRA    09A4
04BE:  XORLW  0F
04C0:  BTFSC  FD8.2
04C2:  BRA    0A28
04C4:  XORLW  01
04C6:  BTFSC  FD8.2
04C8:  BRA    0AAC
04CA:  XORLW  03
04CC:  BTFSC  FD8.2
04CE:  BRA    0B30
04D0:  XORLW  01
04D2:  BTFSC  FD8.2
04D4:  BRA    0B80
04D6:  XORLW  07
04D8:  BTFSC  FD8.2
04DA:  BRA    0BB8
04DC:  XORLW  01
04DE:  BTFSC  FD8.2
04E0:  BRA    0BF0
04E2:  BRA    0C28
.................... 				case 0x00:	//gamma 0					 
.................... 					MB_Buffer[j]=make8(Gamma0,1);	//high part 
04E4:  CLRF   03
04E6:  MOVLB  4
04E8:  MOVF   xFB,W
04EA:  ADDLW  F0
04EC:  MOVWF  FE9
04EE:  MOVLW  03
04F0:  ADDWFC 03,W
04F2:  MOVWF  FEA
04F4:  MOVLB  3
04F6:  MOVFF  3A9,FEF
.................... 					j++; 
04FA:  MOVLB  4
04FC:  INCF   xFB,F
.................... 					MB_Buffer[j]=make8(Gamma0,0);	//low part 
04FE:  CLRF   03
0500:  MOVF   xFB,W
0502:  ADDLW  F0
0504:  MOVWF  FE9
0506:  MOVLW  03
0508:  ADDWFC 03,W
050A:  MOVWF  FEA
050C:  MOVLB  3
050E:  MOVFF  3A8,FEF
.................... 					j++; 
0512:  MOVLB  4
0514:  INCF   xFB,F
.................... 					MB_Length+=2; 
0516:  MOVLW  02
0518:  ADDWF  xF0,F
.................... 					break; 
051A:  BRA    0C44
.................... 				case 0x01:	//gamma1 
.................... 					MB_Buffer[j]=make8(Gamma1,1);	//high part 
051C:  CLRF   03
051E:  MOVLB  4
0520:  MOVF   xFB,W
0522:  ADDLW  F0
0524:  MOVWF  FE9
0526:  MOVLW  03
0528:  ADDWFC 03,W
052A:  MOVWF  FEA
052C:  MOVLB  3
052E:  MOVFF  3B5,FEF
.................... 					j++; 
0532:  MOVLB  4
0534:  INCF   xFB,F
.................... 					MB_Buffer[j]=make8(Gamma1,0);	//low part 
0536:  CLRF   03
0538:  MOVF   xFB,W
053A:  ADDLW  F0
053C:  MOVWF  FE9
053E:  MOVLW  03
0540:  ADDWFC 03,W
0542:  MOVWF  FEA
0544:  MOVLB  3
0546:  MOVFF  3B4,FEF
.................... 					j++; 
054A:  MOVLB  4
054C:  INCF   xFB,F
.................... 					MB_Length+=2; 
054E:  MOVLW  02
0550:  ADDWF  xF0,F
.................... 					break; 
0552:  BRA    0C44
.................... 				case 0x02:	//pulse width 1/2 amp				 
.................... 					MB_Buffer[j]=make8(PulseWdt0,1);	//high part 
0554:  CLRF   03
0556:  MOVLB  4
0558:  MOVF   xFB,W
055A:  ADDLW  F0
055C:  MOVWF  FE9
055E:  MOVLW  03
0560:  ADDWFC 03,W
0562:  MOVWF  FEA
0564:  MOVLB  3
0566:  MOVFF  3A7,FEF
.................... 					j++; 
056A:  MOVLB  4
056C:  INCF   xFB,F
.................... 					MB_Buffer[j]=make8(PulseWdt0,0);	//low part 
056E:  CLRF   03
0570:  MOVF   xFB,W
0572:  ADDLW  F0
0574:  MOVWF  FE9
0576:  MOVLW  03
0578:  ADDWFC 03,W
057A:  MOVWF  FEA
057C:  MOVLB  3
057E:  MOVFF  3A6,FEF
.................... 					j++; 
0582:  MOVLB  4
0584:  INCF   xFB,F
.................... 					MB_Length+=2; 
0586:  MOVLW  02
0588:  ADDWF  xF0,F
.................... 					break; 
058A:  BRA    0C44
.................... 				case 0x03:	//pulse width 1/2 amp 
.................... 					MB_Buffer[j]=0;	//high part 
058C:  CLRF   03
058E:  MOVLB  4
0590:  MOVF   xFB,W
0592:  ADDLW  F0
0594:  MOVWF  FE9
0596:  MOVLW  03
0598:  ADDWFC 03,W
059A:  MOVWF  FEA
059C:  CLRF   FEF
.................... 					j++; 
059E:  INCF   xFB,F
.................... 					MB_Buffer[j]=0;	//low part 
05A0:  CLRF   03
05A2:  MOVF   xFB,W
05A4:  ADDLW  F0
05A6:  MOVWF  FE9
05A8:  MOVLW  03
05AA:  ADDWFC 03,W
05AC:  MOVWF  FEA
05AE:  CLRF   FEF
.................... 					j++; 
05B0:  INCF   xFB,F
.................... 					MB_Length+=2; 
05B2:  MOVLW  02
05B4:  ADDWF  xF0,F
.................... 					break; 
05B6:  BRA    0C44
.................... 				case 0x04:	//pulse amplitude			 
.................... 					MB_Buffer[j]=make8(Amplitude0,1);	//high part 
05B8:  CLRF   03
05BA:  MOVLB  4
05BC:  MOVF   xFB,W
05BE:  ADDLW  F0
05C0:  MOVWF  FE9
05C2:  MOVLW  03
05C4:  ADDWFC 03,W
05C6:  MOVWF  FEA
05C8:  MOVLB  3
05CA:  MOVFF  3A5,FEF
.................... 					j++; 
05CE:  MOVLB  4
05D0:  INCF   xFB,F
.................... 					MB_Buffer[j]=make8(Amplitude0,0);	//low part 
05D2:  CLRF   03
05D4:  MOVF   xFB,W
05D6:  ADDLW  F0
05D8:  MOVWF  FE9
05DA:  MOVLW  03
05DC:  ADDWFC 03,W
05DE:  MOVWF  FEA
05E0:  MOVLB  3
05E2:  MOVFF  3A4,FEF
.................... 					j++; 
05E6:  MOVLB  4
05E8:  INCF   xFB,F
.................... 					MB_Length+=2; 
05EA:  MOVLW  02
05EC:  ADDWF  xF0,F
.................... 					break; 
05EE:  BRA    0C44
.................... 				case 0x05:	//pulse amplitude				 
.................... 					MB_Buffer[j]=0;	//high part 
05F0:  CLRF   03
05F2:  MOVLB  4
05F4:  MOVF   xFB,W
05F6:  ADDLW  F0
05F8:  MOVWF  FE9
05FA:  MOVLW  03
05FC:  ADDWFC 03,W
05FE:  MOVWF  FEA
0600:  CLRF   FEF
.................... 					j++; 
0602:  INCF   xFB,F
.................... 					MB_Buffer[j]=0;	//low part 
0604:  CLRF   03
0606:  MOVF   xFB,W
0608:  ADDLW  F0
060A:  MOVWF  FE9
060C:  MOVLW  03
060E:  ADDWFC 03,W
0610:  MOVWF  FEA
0612:  CLRF   FEF
.................... 					j++; 
0614:  INCF   xFB,F
.................... 					MB_Length+=2; 
0616:  MOVLW  02
0618:  ADDWF  xF0,F
.................... 					break; 
061A:  BRA    0C44
.................... 				case 0x06:	//temp of gen				 
.................... 					MB_Buffer[j]=make8(T_GEN,1);	//high part 
061C:  CLRF   03
061E:  MOVLB  4
0620:  MOVF   xFB,W
0622:  ADDLW  F0
0624:  MOVWF  FE9
0626:  MOVLW  03
0628:  ADDWFC 03,W
062A:  MOVWF  FEA
062C:  MOVLB  3
062E:  MOVFF  3C9,FEF
.................... 					j++; 
0632:  MOVLB  4
0634:  INCF   xFB,F
.................... 					MB_Buffer[j]=make8(T_GEN,0);	//low part 
0636:  CLRF   03
0638:  MOVF   xFB,W
063A:  ADDLW  F0
063C:  MOVWF  FE9
063E:  MOVLW  03
0640:  ADDWFC 03,W
0642:  MOVWF  FEA
0644:  MOVLB  3
0646:  MOVFF  3C8,FEF
.................... 					j++; 
064A:  MOVLB  4
064C:  INCF   xFB,F
.................... 					MB_Length+=2; 
064E:  MOVLW  02
0650:  ADDWF  xF0,F
.................... 					break; 
0652:  BRA    0C44
.................... 				case 0x07:	//temp 0					 
.................... 					MB_Buffer[j]=make8(T_SR0,1);	//high part 
0654:  CLRF   03
0656:  MOVLB  4
0658:  MOVF   xFB,W
065A:  ADDLW  F0
065C:  MOVWF  FE9
065E:  MOVLW  03
0660:  ADDWFC 03,W
0662:  MOVWF  FEA
0664:  MOVLB  3
0666:  MOVFF  3B3,FEF
.................... 					j++; 
066A:  MOVLB  4
066C:  INCF   xFB,F
.................... 					MB_Buffer[j]=make8(T_SR0,0);	//low part 
066E:  CLRF   03
0670:  MOVF   xFB,W
0672:  ADDLW  F0
0674:  MOVWF  FE9
0676:  MOVLW  03
0678:  ADDWFC 03,W
067A:  MOVWF  FEA
067C:  MOVLB  3
067E:  MOVFF  3B2,FEF
.................... 					j++; 
0682:  MOVLB  4
0684:  INCF   xFB,F
.................... 					MB_Length+=2; 
0686:  MOVLW  02
0688:  ADDWF  xF0,F
.................... 					break; 
068A:  BRA    0C44
.................... 				case 0x08:	//temp 1 
.................... 					MB_Buffer[j]=make8(T_SR1,1);	//high part 
068C:  CLRF   03
068E:  MOVLB  4
0690:  MOVF   xFB,W
0692:  ADDLW  F0
0694:  MOVWF  FE9
0696:  MOVLW  03
0698:  ADDWFC 03,W
069A:  MOVWF  FEA
069C:  MOVLB  3
069E:  MOVFF  3BF,FEF
.................... 					j++; 
06A2:  MOVLB  4
06A4:  INCF   xFB,F
.................... 					MB_Buffer[j]=make8(T_SR1,0);	//low part 
06A6:  CLRF   03
06A8:  MOVF   xFB,W
06AA:  ADDLW  F0
06AC:  MOVWF  FE9
06AE:  MOVLW  03
06B0:  ADDWFC 03,W
06B2:  MOVWF  FEA
06B4:  MOVLB  3
06B6:  MOVFF  3BE,FEF
.................... 					j++; 
06BA:  MOVLB  4
06BC:  INCF   xFB,F
.................... 					MB_Length+=2; 
06BE:  MOVLW  02
06C0:  ADDWF  xF0,F
.................... 					break; 
06C2:  BRA    0C44
.................... 				case 0x09:	//dummy command					 
.................... 					MB_Buffer[j]=0x00;	//high part 
06C4:  CLRF   03
06C6:  MOVLB  4
06C8:  MOVF   xFB,W
06CA:  ADDLW  F0
06CC:  MOVWF  FE9
06CE:  MOVLW  03
06D0:  ADDWFC 03,W
06D2:  MOVWF  FEA
06D4:  CLRF   FEF
.................... 					j++; 
06D6:  INCF   xFB,F
.................... 					MB_Buffer[j]=0x00;	//low part 
06D8:  CLRF   03
06DA:  MOVF   xFB,W
06DC:  ADDLW  F0
06DE:  MOVWF  FE9
06E0:  MOVLW  03
06E2:  ADDWFC 03,W
06E4:  MOVWF  FEA
06E6:  CLRF   FEF
.................... 					j++; 
06E8:  INCF   xFB,F
.................... 					MB_Length+=2; 
06EA:  MOVLW  02
06EC:  ADDWF  xF0,F
.................... 					break; 
06EE:  BRA    0C44
.................... 				case 0x0A:	//dummy command					 
.................... 					MB_Buffer[j]=0x00;	//high part 
06F0:  CLRF   03
06F2:  MOVLB  4
06F4:  MOVF   xFB,W
06F6:  ADDLW  F0
06F8:  MOVWF  FE9
06FA:  MOVLW  03
06FC:  ADDWFC 03,W
06FE:  MOVWF  FEA
0700:  CLRF   FEF
.................... 					j++; 
0702:  INCF   xFB,F
.................... 					MB_Buffer[j]=0x00;	//low part 
0704:  CLRF   03
0706:  MOVF   xFB,W
0708:  ADDLW  F0
070A:  MOVWF  FE9
070C:  MOVLW  03
070E:  ADDWFC 03,W
0710:  MOVWF  FEA
0712:  CLRF   FEF
.................... 					j++; 
0714:  INCF   xFB,F
.................... 					MB_Length+=2; 
0716:  MOVLW  02
0718:  ADDWF  xF0,F
.................... 					break; 
071A:  BRA    0C44
.................... 				case 0x0B:	//saw level 
.................... 					MB_Buffer[j]=make8(SAW_A0,1);	//high part 
071C:  CLRF   03
071E:  MOVLB  4
0720:  MOVF   xFB,W
0722:  ADDLW  F0
0724:  MOVWF  FE9
0726:  MOVLW  03
0728:  ADDWFC 03,W
072A:  MOVWF  FEA
072C:  MOVLB  3
072E:  MOVFF  3CB,FEF
.................... 					j++; 
0732:  MOVLB  4
0734:  INCF   xFB,F
.................... 					MB_Buffer[j]=make8(SAW_A0,0);	//low part 
0736:  CLRF   03
0738:  MOVF   xFB,W
073A:  ADDLW  F0
073C:  MOVWF  FE9
073E:  MOVLW  03
0740:  ADDWFC 03,W
0742:  MOVWF  FEA
0744:  MOVLB  3
0746:  MOVFF  3CA,FEF
.................... 					j++; 
074A:  MOVLB  4
074C:  INCF   xFB,F
.................... 					MB_Length+=2; 
074E:  MOVLW  02
0750:  ADDWF  xF0,F
.................... 					break; 
0752:  BRA    0C44
.................... 				case 0x0C:	//saw amplitude			 
.................... 					MB_Buffer[j]=make8(SAW_A1,1);	//high part 
0754:  CLRF   03
0756:  MOVLB  4
0758:  MOVF   xFB,W
075A:  ADDLW  F0
075C:  MOVWF  FE9
075E:  MOVLW  03
0760:  ADDWFC 03,W
0762:  MOVWF  FEA
0764:  MOVLB  3
0766:  MOVFF  3CF,FEF
.................... 					j++; 
076A:  MOVLB  4
076C:  INCF   xFB,F
.................... 					MB_Buffer[j]=make8(SAW_A1,0);	//low part 
076E:  CLRF   03
0770:  MOVF   xFB,W
0772:  ADDLW  F0
0774:  MOVWF  FE9
0776:  MOVLW  03
0778:  ADDWFC 03,W
077A:  MOVWF  FEA
077C:  MOVLB  3
077E:  MOVFF  3CE,FEF
.................... 					j++; 
0782:  MOVLB  4
0784:  INCF   xFB,F
.................... 					MB_Length+=2; 
0786:  MOVLW  02
0788:  ADDWF  xF0,F
.................... 					break; 
078A:  BRA    0C44
.................... 				case 0x0D:	//input coef 0					 
.................... 					MB_Buffer[j]=make8(AmpCoef0,1);	//high part 
078C:  CLRF   03
078E:  MOVLB  4
0790:  MOVF   xFB,W
0792:  ADDLW  F0
0794:  MOVWF  FE9
0796:  MOVLW  03
0798:  ADDWFC 03,W
079A:  MOVWF  FEA
079C:  MOVLB  3
079E:  MOVFF  3AB,FEF
.................... 					j++; 
07A2:  MOVLB  4
07A4:  INCF   xFB,F
.................... 					MB_Buffer[j]=make8(AmpCoef0,0);	//low part 
07A6:  CLRF   03
07A8:  MOVF   xFB,W
07AA:  ADDLW  F0
07AC:  MOVWF  FE9
07AE:  MOVLW  03
07B0:  ADDWFC 03,W
07B2:  MOVWF  FEA
07B4:  MOVLB  3
07B6:  MOVFF  3AA,FEF
.................... 					j++; 
07BA:  MOVLB  4
07BC:  INCF   xFB,F
.................... 					MB_Length+=2; 
07BE:  MOVLW  02
07C0:  ADDWF  xF0,F
.................... 					break; 
07C2:  BRA    0C44
.................... 				case 0x0E:	//input coef 1 
.................... 					MB_Buffer[j]=make8(AmpCoef1,1);	//high part 
07C4:  CLRF   03
07C6:  MOVLB  4
07C8:  MOVF   xFB,W
07CA:  ADDLW  F0
07CC:  MOVWF  FE9
07CE:  MOVLW  03
07D0:  ADDWFC 03,W
07D2:  MOVWF  FEA
07D4:  MOVLB  3
07D6:  MOVFF  3B7,FEF
.................... 					j++; 
07DA:  MOVLB  4
07DC:  INCF   xFB,F
.................... 					MB_Buffer[j]=make8(AmpCoef1,0);	//low part 
07DE:  CLRF   03
07E0:  MOVF   xFB,W
07E2:  ADDLW  F0
07E4:  MOVWF  FE9
07E6:  MOVLW  03
07E8:  ADDWFC 03,W
07EA:  MOVWF  FEA
07EC:  MOVLB  3
07EE:  MOVFF  3B6,FEF
.................... 					j++; 
07F2:  MOVLB  4
07F4:  INCF   xFB,F
.................... 					MB_Length+=2; 
07F6:  MOVLW  02
07F8:  ADDWF  xF0,F
.................... 					break; 
07FA:  BRA    0C44
.................... 				case 0x0F:	//measure points 
.................... 					MB_Buffer[j]=make8(TAQ,1);	//high part 
07FC:  CLRF   03
07FE:  MOVLB  4
0800:  MOVF   xFB,W
0802:  ADDLW  F0
0804:  MOVWF  FE9
0806:  MOVLW  03
0808:  ADDWFC 03,W
080A:  MOVWF  FEA
080C:  MOVLB  3
080E:  MOVFF  3C1,FEF
.................... 					j++; 
0812:  MOVLB  4
0814:  INCF   xFB,F
.................... 					MB_Buffer[j]=make8(TAQ,0);	//low part 
0816:  CLRF   03
0818:  MOVF   xFB,W
081A:  ADDLW  F0
081C:  MOVWF  FE9
081E:  MOVLW  03
0820:  ADDWFC 03,W
0822:  MOVWF  FEA
0824:  MOVLB  3
0826:  MOVFF  3C0,FEF
.................... 					j++; 
082A:  MOVLB  4
082C:  INCF   xFB,F
.................... 					MB_Length+=2; 
082E:  MOVLW  02
0830:  ADDWF  xF0,F
.................... 					break; 
0832:  BRA    0C44
.................... 				case 0x10:	//filter width				 
.................... 					MB_Buffer[j]=make8(FWDT,1);	//high part 
0834:  CLRF   03
0836:  MOVLB  4
0838:  MOVF   xFB,W
083A:  ADDLW  F0
083C:  MOVWF  FE9
083E:  MOVLW  03
0840:  ADDWFC 03,W
0842:  MOVWF  FEA
0844:  MOVLB  3
0846:  MOVFF  3C3,FEF
.................... 					j++; 
084A:  MOVLB  4
084C:  INCF   xFB,F
.................... 					MB_Buffer[j]=make8(FWDT,0);	//low part 
084E:  CLRF   03
0850:  MOVF   xFB,W
0852:  ADDLW  F0
0854:  MOVWF  FE9
0856:  MOVLW  03
0858:  ADDWFC 03,W
085A:  MOVWF  FEA
085C:  MOVLB  3
085E:  MOVFF  3C2,FEF
.................... 					j++; 
0862:  MOVLB  4
0864:  INCF   xFB,F
.................... 					MB_Length+=2; 
0866:  MOVLW  02
0868:  ADDWF  xF0,F
.................... 					break; 
086A:  BRA    0C44
.................... 				case 0x11:	//measures count 
.................... 					MB_Buffer[j]=make8(PCOUNT,1);	//high part 
086C:  CLRF   03
086E:  MOVLB  4
0870:  MOVF   xFB,W
0872:  ADDLW  F0
0874:  MOVWF  FE9
0876:  MOVLW  03
0878:  ADDWFC 03,W
087A:  MOVWF  FEA
087C:  MOVLB  3
087E:  MOVFF  3C5,FEF
.................... 					j++; 
0882:  MOVLB  4
0884:  INCF   xFB,F
.................... 					MB_Buffer[j]=make8(PCOUNT,0);	//low part 
0886:  CLRF   03
0888:  MOVF   xFB,W
088A:  ADDLW  F0
088C:  MOVWF  FE9
088E:  MOVLW  03
0890:  ADDWFC 03,W
0892:  MOVWF  FEA
0894:  MOVLB  3
0896:  MOVFF  3C4,FEF
.................... 					j++; 
089A:  MOVLB  4
089C:  INCF   xFB,F
.................... 					MB_Length+=2; 
089E:  MOVLW  02
08A0:  ADDWF  xF0,F
.................... 					break; 
08A2:  BRA    0C44
.................... 				case 0x12:	//speed register 
.................... 					MB_Buffer[j]=make8(Speed,1);	//high part 
08A4:  CLRF   03
08A6:  MOVLB  4
08A8:  MOVF   xFB,W
08AA:  ADDLW  F0
08AC:  MOVWF  FE9
08AE:  MOVLW  03
08B0:  ADDWFC 03,W
08B2:  MOVWF  FEA
08B4:  MOVLB  3
08B6:  MOVFF  3DD,FEF
.................... 					j++; 
08BA:  MOVLB  4
08BC:  INCF   xFB,F
.................... 					MB_Buffer[j]=make8(Speed,0);	//low part 
08BE:  CLRF   03
08C0:  MOVF   xFB,W
08C2:  ADDLW  F0
08C4:  MOVWF  FE9
08C6:  MOVLW  03
08C8:  ADDWFC 03,W
08CA:  MOVWF  FEA
08CC:  MOVLB  3
08CE:  MOVFF  3DC,FEF
.................... 					j++; 
08D2:  MOVLB  4
08D4:  INCF   xFB,F
.................... 					MB_Length+=2; 
08D6:  MOVLW  02
08D8:  ADDWF  xF0,F
.................... 					break; 
08DA:  BRA    0C44
.................... 				case 0x13:	//host address register 
.................... 					MB_Buffer[j]=make8(Addr,1);	//high part 
08DC:  CLRF   03
08DE:  MOVLB  4
08E0:  MOVF   xFB,W
08E2:  ADDLW  F0
08E4:  MOVWF  FE9
08E6:  MOVLW  03
08E8:  ADDWFC 03,W
08EA:  MOVWF  FEA
08EC:  MOVLB  3
08EE:  MOVFF  3DF,FEF
.................... 					j++; 
08F2:  MOVLB  4
08F4:  INCF   xFB,F
.................... 					MB_Buffer[j]=make8(Addr,0);	//low part 
08F6:  CLRF   03
08F8:  MOVF   xFB,W
08FA:  ADDLW  F0
08FC:  MOVWF  FE9
08FE:  MOVLW  03
0900:  ADDWFC 03,W
0902:  MOVWF  FEA
0904:  MOVLB  3
0906:  MOVFF  3DE,FEF
.................... 					j++;								 
090A:  MOVLB  4
090C:  INCF   xFB,F
.................... 					MB_Length+=2; 
090E:  MOVLW  02
0910:  ADDWF  xF0,F
.................... 					break; 
0912:  BRA    0C44
.................... 				case 0x14:	//Valid request register 
.................... 					MB_Buffer[j]=make8(ValidReq,1);	//high part 
0914:  CLRF   03
0916:  MOVLB  4
0918:  MOVF   xFB,W
091A:  ADDLW  F0
091C:  MOVWF  FE9
091E:  MOVLW  03
0920:  ADDWFC 03,W
0922:  MOVWF  FEA
0924:  MOVFF  4F2,FEF
.................... 					j++; 
0928:  INCF   xFB,F
.................... 					MB_Buffer[j]=make8(ValidReq,0);	//low part 
092A:  CLRF   03
092C:  MOVF   xFB,W
092E:  ADDLW  F0
0930:  MOVWF  FE9
0932:  MOVLW  03
0934:  ADDWFC 03,W
0936:  MOVWF  FEA
0938:  MOVFF  4F1,FEF
.................... 					j++;								 
093C:  INCF   xFB,F
.................... 					MB_Length+=2; 
093E:  MOVLW  02
0940:  ADDWF  xF0,F
.................... 					break; 
0942:  BRA    0C44
.................... 				case 0x15:	//CRC error register 
.................... 					MB_Buffer[j]=make8(CRCReq,1);	//high part 
0944:  CLRF   03
0946:  MOVLB  4
0948:  MOVF   xFB,W
094A:  ADDLW  F0
094C:  MOVWF  FE9
094E:  MOVLW  03
0950:  ADDWFC 03,W
0952:  MOVWF  FEA
0954:  MOVFF  4F4,FEF
.................... 					j++; 
0958:  INCF   xFB,F
.................... 					MB_Buffer[j]=make8(CRCReq,0);	//low part 
095A:  CLRF   03
095C:  MOVF   xFB,W
095E:  ADDLW  F0
0960:  MOVWF  FE9
0962:  MOVLW  03
0964:  ADDWFC 03,W
0966:  MOVWF  FEA
0968:  MOVFF  4F3,FEF
.................... 					j++;								 
096C:  INCF   xFB,F
.................... 					MB_Length+=2; 
096E:  MOVLW  02
0970:  ADDWF  xF0,F
.................... 					break; 
0972:  BRA    0C44
.................... 				case 0x16:	//Exception register 
.................... 					MB_Buffer[j]=make8(ExcReq,1);	//high part 
0974:  CLRF   03
0976:  MOVLB  4
0978:  MOVF   xFB,W
097A:  ADDLW  F0
097C:  MOVWF  FE9
097E:  MOVLW  03
0980:  ADDWFC 03,W
0982:  MOVWF  FEA
0984:  MOVFF  4F6,FEF
.................... 					j++; 
0988:  INCF   xFB,F
.................... 					MB_Buffer[j]=make8(ExcReq,0);	//low part 
098A:  CLRF   03
098C:  MOVF   xFB,W
098E:  ADDLW  F0
0990:  MOVWF  FE9
0992:  MOVLW  03
0994:  ADDWFC 03,W
0996:  MOVWF  FEA
0998:  MOVFF  4F5,FEF
.................... 					j++;								 
099C:  INCF   xFB,F
.................... 					MB_Length+=2; 
099E:  MOVLW  02
09A0:  ADDWF  xF0,F
.................... 					break; 
09A2:  BRA    0C44
.................... 				case 0x17:	//KGT				 
.................... 					//copy 
.................... 					memcpy(&flcopy,&KGT,4); 
09A4:  MOVLW  05
09A6:  MOVWF  FEA
09A8:  MOVLW  36
09AA:  MOVWF  FE9
09AC:  MOVLW  03
09AE:  MOVWF  FE2
09B0:  MOVLW  D2
09B2:  MOVWF  FE1
09B4:  MOVLW  04
09B6:  MOVWF  01
09B8:  MOVFF  FE6,FEE
09BC:  DECFSZ 01,F
09BE:  BRA    09B8
.................... 					//store to buf 
.................... 					MB_Buffer[j]=make8(flcopy,0);	//high part 
09C0:  CLRF   03
09C2:  MOVLB  4
09C4:  MOVF   xFB,W
09C6:  ADDLW  F0
09C8:  MOVWF  FE9
09CA:  MOVLW  03
09CC:  ADDWFC 03,W
09CE:  MOVWF  FEA
09D0:  MOVLB  5
09D2:  MOVFF  536,FEF
.................... 					j++; 
09D6:  MOVLB  4
09D8:  INCF   xFB,F
.................... 					MB_Buffer[j]=make8(flcopy,1);	//high part 
09DA:  CLRF   03
09DC:  MOVF   xFB,W
09DE:  ADDLW  F0
09E0:  MOVWF  FE9
09E2:  MOVLW  03
09E4:  ADDWFC 03,W
09E6:  MOVWF  FEA
09E8:  MOVLB  5
09EA:  MOVFF  537,FEF
.................... 					j++; 
09EE:  MOVLB  4
09F0:  INCF   xFB,F
.................... 					MB_Buffer[j]=make8(flcopy,2);	//high part 
09F2:  CLRF   03
09F4:  MOVF   xFB,W
09F6:  ADDLW  F0
09F8:  MOVWF  FE9
09FA:  MOVLW  03
09FC:  ADDWFC 03,W
09FE:  MOVWF  FEA
0A00:  MOVLB  5
0A02:  MOVFF  538,FEF
.................... 					j++; 
0A06:  MOVLB  4
0A08:  INCF   xFB,F
.................... 					MB_Buffer[j]=make8(flcopy,3);	//high part 
0A0A:  CLRF   03
0A0C:  MOVF   xFB,W
0A0E:  ADDLW  F0
0A10:  MOVWF  FE9
0A12:  MOVLW  03
0A14:  ADDWFC 03,W
0A16:  MOVWF  FEA
0A18:  MOVLB  5
0A1A:  MOVFF  539,FEF
.................... 					j++; 
0A1E:  MOVLB  4
0A20:  INCF   xFB,F
.................... 					MB_Length+=4; 
0A22:  MOVLW  04
0A24:  ADDWF  xF0,F
.................... 					break; 
0A26:  BRA    0C44
.................... 				case 0x18:	//KGU				 
.................... 					//copy 
.................... 					memcpy(&flcopy,&KGU,4); 
0A28:  MOVLW  05
0A2A:  MOVWF  FEA
0A2C:  MOVLW  36
0A2E:  MOVWF  FE9
0A30:  MOVLW  03
0A32:  MOVWF  FE2
0A34:  MOVLW  D6
0A36:  MOVWF  FE1
0A38:  MOVLW  04
0A3A:  MOVWF  01
0A3C:  MOVFF  FE6,FEE
0A40:  DECFSZ 01,F
0A42:  BRA    0A3C
.................... 					//store to buf 
.................... 					MB_Buffer[j]=make8(flcopy,0);	//high part 
0A44:  CLRF   03
0A46:  MOVLB  4
0A48:  MOVF   xFB,W
0A4A:  ADDLW  F0
0A4C:  MOVWF  FE9
0A4E:  MOVLW  03
0A50:  ADDWFC 03,W
0A52:  MOVWF  FEA
0A54:  MOVLB  5
0A56:  MOVFF  536,FEF
.................... 					j++; 
0A5A:  MOVLB  4
0A5C:  INCF   xFB,F
.................... 					MB_Buffer[j]=make8(flcopy,1);	//high part 
0A5E:  CLRF   03
0A60:  MOVF   xFB,W
0A62:  ADDLW  F0
0A64:  MOVWF  FE9
0A66:  MOVLW  03
0A68:  ADDWFC 03,W
0A6A:  MOVWF  FEA
0A6C:  MOVLB  5
0A6E:  MOVFF  537,FEF
.................... 					j++; 
0A72:  MOVLB  4
0A74:  INCF   xFB,F
.................... 					MB_Buffer[j]=make8(flcopy,2);	//high part 
0A76:  CLRF   03
0A78:  MOVF   xFB,W
0A7A:  ADDLW  F0
0A7C:  MOVWF  FE9
0A7E:  MOVLW  03
0A80:  ADDWFC 03,W
0A82:  MOVWF  FEA
0A84:  MOVLB  5
0A86:  MOVFF  538,FEF
.................... 					j++; 
0A8A:  MOVLB  4
0A8C:  INCF   xFB,F
.................... 					MB_Buffer[j]=make8(flcopy,3);	//high part 
0A8E:  CLRF   03
0A90:  MOVF   xFB,W
0A92:  ADDLW  F0
0A94:  MOVWF  FE9
0A96:  MOVLW  03
0A98:  ADDWFC 03,W
0A9A:  MOVWF  FEA
0A9C:  MOVLB  5
0A9E:  MOVFF  539,FEF
.................... 					j++; 
0AA2:  MOVLB  4
0AA4:  INCF   xFB,F
.................... 					MB_Length+=4; 
0AA6:  MOVLW  04
0AA8:  ADDWF  xF0,F
.................... 					break; 
0AAA:  BRA    0C44
.................... 				case 0x19:	//KST0 
.................... 					//copy 
.................... 					memcpy(&flcopy,&KST0,4); 
0AAC:  MOVLW  05
0AAE:  MOVWF  FEA
0AB0:  MOVLW  36
0AB2:  MOVWF  FE9
0AB4:  MOVLW  03
0AB6:  MOVWF  FE2
0AB8:  MOVLW  AC
0ABA:  MOVWF  FE1
0ABC:  MOVLW  04
0ABE:  MOVWF  01
0AC0:  MOVFF  FE6,FEE
0AC4:  DECFSZ 01,F
0AC6:  BRA    0AC0
.................... 					//store to buf 
.................... 					MB_Buffer[j]=make8(flcopy,0);	//high part 
0AC8:  CLRF   03
0ACA:  MOVLB  4
0ACC:  MOVF   xFB,W
0ACE:  ADDLW  F0
0AD0:  MOVWF  FE9
0AD2:  MOVLW  03
0AD4:  ADDWFC 03,W
0AD6:  MOVWF  FEA
0AD8:  MOVLB  5
0ADA:  MOVFF  536,FEF
.................... 					j++; 
0ADE:  MOVLB  4
0AE0:  INCF   xFB,F
.................... 					MB_Buffer[j]=make8(flcopy,1);	//high part 
0AE2:  CLRF   03
0AE4:  MOVF   xFB,W
0AE6:  ADDLW  F0
0AE8:  MOVWF  FE9
0AEA:  MOVLW  03
0AEC:  ADDWFC 03,W
0AEE:  MOVWF  FEA
0AF0:  MOVLB  5
0AF2:  MOVFF  537,FEF
.................... 					j++; 
0AF6:  MOVLB  4
0AF8:  INCF   xFB,F
.................... 					MB_Buffer[j]=make8(flcopy,2);	//high part 
0AFA:  CLRF   03
0AFC:  MOVF   xFB,W
0AFE:  ADDLW  F0
0B00:  MOVWF  FE9
0B02:  MOVLW  03
0B04:  ADDWFC 03,W
0B06:  MOVWF  FEA
0B08:  MOVLB  5
0B0A:  MOVFF  538,FEF
.................... 					j++; 
0B0E:  MOVLB  4
0B10:  INCF   xFB,F
.................... 					MB_Buffer[j]=make8(flcopy,3);	//high part 
0B12:  CLRF   03
0B14:  MOVF   xFB,W
0B16:  ADDLW  F0
0B18:  MOVWF  FE9
0B1A:  MOVLW  03
0B1C:  ADDWFC 03,W
0B1E:  MOVWF  FEA
0B20:  MOVLB  5
0B22:  MOVFF  539,FEF
.................... 					j++; 
0B26:  MOVLB  4
0B28:  INCF   xFB,F
.................... 					MB_Length+=4; 
0B2A:  MOVLW  04
0B2C:  ADDWF  xF0,F
.................... 					break; 
0B2E:  BRA    0C44
.................... 				case 0x1A:	//KST1				 
.................... 					MB_Buffer[j]=0x00;	//high part 
0B30:  CLRF   03
0B32:  MOVLB  4
0B34:  MOVF   xFB,W
0B36:  ADDLW  F0
0B38:  MOVWF  FE9
0B3A:  MOVLW  03
0B3C:  ADDWFC 03,W
0B3E:  MOVWF  FEA
0B40:  CLRF   FEF
.................... 					j++; 
0B42:  INCF   xFB,F
.................... 					MB_Buffer[j]=0x00;	//low part 
0B44:  CLRF   03
0B46:  MOVF   xFB,W
0B48:  ADDLW  F0
0B4A:  MOVWF  FE9
0B4C:  MOVLW  03
0B4E:  ADDWFC 03,W
0B50:  MOVWF  FEA
0B52:  CLRF   FEF
.................... 					j++; 
0B54:  INCF   xFB,F
.................... 					MB_Buffer[j]=0x00;	//low part 
0B56:  CLRF   03
0B58:  MOVF   xFB,W
0B5A:  ADDLW  F0
0B5C:  MOVWF  FE9
0B5E:  MOVLW  03
0B60:  ADDWFC 03,W
0B62:  MOVWF  FEA
0B64:  CLRF   FEF
.................... 					j++; 
0B66:  INCF   xFB,F
.................... 					MB_Buffer[j]=0x00;	//low part 
0B68:  CLRF   03
0B6A:  MOVF   xFB,W
0B6C:  ADDLW  F0
0B6E:  MOVWF  FE9
0B70:  MOVLW  03
0B72:  ADDWFC 03,W
0B74:  MOVWF  FEA
0B76:  CLRF   FEF
.................... 					j++; 
0B78:  INCF   xFB,F
.................... 					MB_Length+=4; 
0B7A:  MOVLW  04
0B7C:  ADDWF  xF0,F
.................... 					break; 
0B7E:  BRA    0C44
.................... 				case 0x1B:	//T0_CAL 
.................... 					MB_Buffer[j]=make8(T0_CAL,1);	//high part 
0B80:  CLRF   03
0B82:  MOVLB  4
0B84:  MOVF   xFB,W
0B86:  ADDLW  F0
0B88:  MOVWF  FE9
0B8A:  MOVLW  03
0B8C:  ADDWFC 03,W
0B8E:  MOVWF  FEA
0B90:  MOVLB  3
0B92:  MOVFF  3B1,FEF
.................... 					j++; 
0B96:  MOVLB  4
0B98:  INCF   xFB,F
.................... 					MB_Buffer[j]=make8(T0_CAL,0);	//low part 
0B9A:  CLRF   03
0B9C:  MOVF   xFB,W
0B9E:  ADDLW  F0
0BA0:  MOVWF  FE9
0BA2:  MOVLW  03
0BA4:  ADDWFC 03,W
0BA6:  MOVWF  FEA
0BA8:  MOVLB  3
0BAA:  MOVFF  3B0,FEF
.................... 					j++;								 
0BAE:  MOVLB  4
0BB0:  INCF   xFB,F
.................... 					MB_Length+=2; 
0BB2:  MOVLW  02
0BB4:  ADDWF  xF0,F
.................... 					break; 
0BB6:  BRA    0C44
.................... 				case 0x1C:	//T1_CAL 
.................... 					MB_Buffer[j]=make8(T1_CAL,1);	//high part 
0BB8:  CLRF   03
0BBA:  MOVLB  4
0BBC:  MOVF   xFB,W
0BBE:  ADDLW  F0
0BC0:  MOVWF  FE9
0BC2:  MOVLW  03
0BC4:  ADDWFC 03,W
0BC6:  MOVWF  FEA
0BC8:  MOVLB  3
0BCA:  MOVFF  3BD,FEF
.................... 					j++; 
0BCE:  MOVLB  4
0BD0:  INCF   xFB,F
.................... 					MB_Buffer[j]=make8(T1_CAL,0);	//low part 
0BD2:  CLRF   03
0BD4:  MOVF   xFB,W
0BD6:  ADDLW  F0
0BD8:  MOVWF  FE9
0BDA:  MOVLW  03
0BDC:  ADDWFC 03,W
0BDE:  MOVWF  FEA
0BE0:  MOVLB  3
0BE2:  MOVFF  3BC,FEF
.................... 					j++;								 
0BE6:  MOVLB  4
0BE8:  INCF   xFB,F
.................... 					MB_Length+=2; 
0BEA:  MOVLW  02
0BEC:  ADDWF  xF0,F
.................... 					break; 
0BEE:  BRA    0C44
.................... 				case 0x1D:	//TG_CAL 
.................... 					MB_Buffer[j]=make8(TG_CAL,1);	//high part 
0BF0:  CLRF   03
0BF2:  MOVLB  4
0BF4:  MOVF   xFB,W
0BF6:  ADDLW  F0
0BF8:  MOVWF  FE9
0BFA:  MOVLW  03
0BFC:  ADDWFC 03,W
0BFE:  MOVWF  FEA
0C00:  MOVLB  3
0C02:  MOVFF  3DB,FEF
.................... 					j++; 
0C06:  MOVLB  4
0C08:  INCF   xFB,F
.................... 					MB_Buffer[j]=make8(TG_CAL,0);	//low part 
0C0A:  CLRF   03
0C0C:  MOVF   xFB,W
0C0E:  ADDLW  F0
0C10:  MOVWF  FE9
0C12:  MOVLW  03
0C14:  ADDWFC 03,W
0C16:  MOVWF  FEA
0C18:  MOVLB  3
0C1A:  MOVFF  3DA,FEF
.................... 					j++;								 
0C1E:  MOVLB  4
0C20:  INCF   xFB,F
.................... 					MB_Length+=2; 
0C22:  MOVLW  02
0C24:  ADDWF  xF0,F
.................... 					break; 
0C26:  BRA    0C44
.................... 				default:	//no valid registers							 
.................... 					MB_Buffer[1]|=0x80; 
0C28:  MOVLB  3
0C2A:  BSF    xF1.7
.................... 					MB_Buffer[2]=illegal_data_value; 
0C2C:  MOVLW  03
0C2E:  MOVWF  xF2
.................... 					MB_Length=5; 
0C30:  MOVLW  05
0C32:  MOVLB  4
0C34:  MOVWF  xF0
.................... 					ExcReq++; 
0C36:  INCF   xF5,F
0C38:  BTFSC  FD8.2
0C3A:  INCF   xF6,F
.................... 					ValidReq--;  
0C3C:  MOVF   xF1,W
0C3E:  BTFSC  FD8.2
0C40:  DECF   xF2,F
0C42:  DECF   xF1,F
.................... 			};	 
.................... } 
0C44:  MOVLB  0
0C46:  GOTO   1B94 (RETURN)
.................... // 
.................... static	int8	bytecount; 
.................... //write registers 
.................... void	SetRegData(int8 reg){ 
.................... 	int32	flcopy; 
.................... 	restart_wdt(); 
0C4A:  CLRWDT
.................... 			switch(reg){ 
0C4C:  MOVLB  5
0C4E:  MOVF   x35,W
0C50:  XORLW  00
0C52:  MOVLB  0
0C54:  BZ    0CF8
0C56:  XORLW  01
0C58:  BZ    0D00
0C5A:  XORLW  03
0C5C:  BZ    0D08
0C5E:  XORLW  01
0C60:  BZ    0D10
0C62:  XORLW  07
0C64:  BZ    0D18
0C66:  XORLW  01
0C68:  BZ    0D20
0C6A:  XORLW  03
0C6C:  BZ    0D28
0C6E:  XORLW  01
0C70:  BZ    0D30
0C72:  XORLW  0F
0C74:  BTFSC  FD8.2
0C76:  BRA    0D38
0C78:  XORLW  01
0C7A:  BTFSC  FD8.2
0C7C:  BRA    0D40
0C7E:  XORLW  03
0C80:  BTFSC  FD8.2
0C82:  BRA    0D48
0C84:  XORLW  01
0C86:  BTFSC  FD8.2
0C88:  BRA    0D50
0C8A:  XORLW  07
0C8C:  BTFSC  FD8.2
0C8E:  BRA    0D86
0C90:  XORLW  01
0C92:  BTFSC  FD8.2
0C94:  BRA    0DBC
0C96:  XORLW  03
0C98:  BTFSC  FD8.2
0C9A:  BRA    0DF2
0C9C:  XORLW  01
0C9E:  BTFSC  FD8.2
0CA0:  BRA    0E28
0CA2:  XORLW  1F
0CA4:  BTFSC  FD8.2
0CA6:  BRA    0E5E
0CA8:  XORLW  01
0CAA:  BTFSC  FD8.2
0CAC:  BRA    0E94
0CAE:  XORLW  03
0CB0:  BTFSC  FD8.2
0CB2:  BRA    0ECA
0CB4:  XORLW  01
0CB6:  BTFSC  FD8.2
0CB8:  BRA    0ED2
0CBA:  XORLW  07
0CBC:  BTFSC  FD8.2
0CBE:  BRA    0F08
0CC0:  XORLW  01
0CC2:  BTFSC  FD8.2
0CC4:  BRA    0F10
0CC6:  XORLW  03
0CC8:  BTFSC  FD8.2
0CCA:  BRA    0F18
0CCC:  XORLW  01
0CCE:  BTFSC  FD8.2
0CD0:  BRA    0F20
0CD2:  XORLW  0F
0CD4:  BTFSC  FD8.2
0CD6:  BRA    0FA2
0CD8:  XORLW  01
0CDA:  BTFSC  FD8.2
0CDC:  BRA    1024
0CDE:  XORLW  03
0CE0:  BTFSC  FD8.2
0CE2:  BRA    10A6
0CE4:  XORLW  01
0CE6:  BTFSC  FD8.2
0CE8:  BRA    10AE
0CEA:  XORLW  07
0CEC:  BTFSC  FD8.2
0CEE:  BRA    10E4
0CF0:  XORLW  01
0CF2:  BTFSC  FD8.2
0CF4:  BRA    111A
0CF6:  BRA    1150
.................... 				case 0x00:	//dummy command					 
.................... 					j+=2;	//set next data 
0CF8:  MOVLW  02
0CFA:  MOVLB  4
0CFC:  ADDWF  xFB,F
.................... 					break; 
0CFE:  BRA    116C
.................... 				case 0x01:	//dummy command					 
.................... 					j+=2;	//set next data 
0D00:  MOVLW  02
0D02:  MOVLB  4
0D04:  ADDWF  xFB,F
.................... 					break; 
0D06:  BRA    116C
.................... 				case 0x02:	//dummy command					 
.................... 					j+=2;	//set next data 
0D08:  MOVLW  02
0D0A:  MOVLB  4
0D0C:  ADDWF  xFB,F
.................... 					break; 
0D0E:  BRA    116C
.................... 				case 0x03:	//dummy command					 
.................... 					j+=2;	//set next data 
0D10:  MOVLW  02
0D12:  MOVLB  4
0D14:  ADDWF  xFB,F
.................... 					break; 
0D16:  BRA    116C
.................... 				case 0x04:	//dummy command					 
.................... 					j+=2;	//set next data 
0D18:  MOVLW  02
0D1A:  MOVLB  4
0D1C:  ADDWF  xFB,F
.................... 					break; 
0D1E:  BRA    116C
.................... 				case 0x05:	//dummy command					 
.................... 					j+=2;	//set next data 
0D20:  MOVLW  02
0D22:  MOVLB  4
0D24:  ADDWF  xFB,F
.................... 					break; 
0D26:  BRA    116C
.................... 				case 0x06:	//dummy command					 
.................... 					j+=2;	//set next data 
0D28:  MOVLW  02
0D2A:  MOVLB  4
0D2C:  ADDWF  xFB,F
.................... 					break; 
0D2E:  BRA    116C
.................... 				case 0x07:	//dummy command					 
.................... 					j+=2;	//set next data 
0D30:  MOVLW  02
0D32:  MOVLB  4
0D34:  ADDWF  xFB,F
.................... 					break; 
0D36:  BRA    116C
.................... 				case 0x08:	//dummy command					 
.................... 					j+=2;	//set next data 
0D38:  MOVLW  02
0D3A:  MOVLB  4
0D3C:  ADDWF  xFB,F
.................... 					break; 
0D3E:  BRA    116C
.................... 				case 0x09:	//dummy command					 
.................... 					j+=2;	//set next data 
0D40:  MOVLW  02
0D42:  MOVLB  4
0D44:  ADDWF  xFB,F
.................... 					break; 
0D46:  BRA    116C
.................... 				case 0x0A:	//dummy command					 
.................... 					j+=2;	//set next data 
0D48:  MOVLW  02
0D4A:  MOVLB  4
0D4C:  ADDWF  xFB,F
.................... 					break; 
0D4E:  BRA    116C
.................... 				case 0x0B:	//SAW_A0 
.................... 					//read data from buffer 
.................... 					SAW_A0=make16(MB_Buffer[j],MB_Buffer[j+1]); 
0D50:  CLRF   03
0D52:  MOVLB  4
0D54:  MOVF   xFB,W
0D56:  ADDLW  F0
0D58:  MOVWF  FE9
0D5A:  MOVLW  03
0D5C:  ADDWFC 03,W
0D5E:  MOVWF  FEA
0D60:  MOVFF  FEF,53A
0D64:  MOVLW  01
0D66:  ADDWF  xFB,W
0D68:  CLRF   03
0D6A:  ADDLW  F0
0D6C:  MOVWF  FE9
0D6E:  MOVLW  03
0D70:  ADDWFC 03,W
0D72:  MOVWF  FEA
0D74:  MOVFF  FEF,53B
0D78:  MOVFF  53A,3CB
0D7C:  MOVFF  53B,3CA
.................... 					j+=2;	//set next data 
0D80:  MOVLW  02
0D82:  ADDWF  xFB,F
.................... 					break; 
0D84:  BRA    116C
.................... 				case 0x0C:	//SAW_A1 
.................... 					//read data from buffer 
.................... 					SAW_A1=make16(MB_Buffer[j],MB_Buffer[j+1]); 
0D86:  CLRF   03
0D88:  MOVLB  4
0D8A:  MOVF   xFB,W
0D8C:  ADDLW  F0
0D8E:  MOVWF  FE9
0D90:  MOVLW  03
0D92:  ADDWFC 03,W
0D94:  MOVWF  FEA
0D96:  MOVFF  FEF,53A
0D9A:  MOVLW  01
0D9C:  ADDWF  xFB,W
0D9E:  CLRF   03
0DA0:  ADDLW  F0
0DA2:  MOVWF  FE9
0DA4:  MOVLW  03
0DA6:  ADDWFC 03,W
0DA8:  MOVWF  FEA
0DAA:  MOVFF  FEF,53B
0DAE:  MOVFF  53A,3CF
0DB2:  MOVFF  53B,3CE
.................... 					j+=2;	//set next data 
0DB6:  MOVLW  02
0DB8:  ADDWF  xFB,F
.................... 					break; 
0DBA:  BRA    116C
.................... 				case 0x0D:	//KU0 
.................... 					//read data from buffer 
.................... 					AmpCoef0=make16(MB_Buffer[j],MB_Buffer[j+1]); 
0DBC:  CLRF   03
0DBE:  MOVLB  4
0DC0:  MOVF   xFB,W
0DC2:  ADDLW  F0
0DC4:  MOVWF  FE9
0DC6:  MOVLW  03
0DC8:  ADDWFC 03,W
0DCA:  MOVWF  FEA
0DCC:  MOVFF  FEF,53A
0DD0:  MOVLW  01
0DD2:  ADDWF  xFB,W
0DD4:  CLRF   03
0DD6:  ADDLW  F0
0DD8:  MOVWF  FE9
0DDA:  MOVLW  03
0DDC:  ADDWFC 03,W
0DDE:  MOVWF  FEA
0DE0:  MOVFF  FEF,53B
0DE4:  MOVFF  53A,3AB
0DE8:  MOVFF  53B,3AA
.................... 					j+=2;	//set next data 
0DEC:  MOVLW  02
0DEE:  ADDWF  xFB,F
.................... 					break; 
0DF0:  BRA    116C
.................... 				case 0x0E:	//KU1 
.................... 					//read data from buffer 
.................... 					AmpCoef1=make16(MB_Buffer[j],MB_Buffer[j+1]); 
0DF2:  CLRF   03
0DF4:  MOVLB  4
0DF6:  MOVF   xFB,W
0DF8:  ADDLW  F0
0DFA:  MOVWF  FE9
0DFC:  MOVLW  03
0DFE:  ADDWFC 03,W
0E00:  MOVWF  FEA
0E02:  MOVFF  FEF,53A
0E06:  MOVLW  01
0E08:  ADDWF  xFB,W
0E0A:  CLRF   03
0E0C:  ADDLW  F0
0E0E:  MOVWF  FE9
0E10:  MOVLW  03
0E12:  ADDWFC 03,W
0E14:  MOVWF  FEA
0E16:  MOVFF  FEF,53B
0E1A:  MOVFF  53A,3B7
0E1E:  MOVFF  53B,3B6
.................... 					j+=2;	//set next data 
0E22:  MOVLW  02
0E24:  ADDWF  xFB,F
.................... 					break; 
0E26:  BRA    116C
.................... 				case 0x0F:	//TAQ 
.................... 					//read data from buffer 
.................... 					TAQ=make16(MB_Buffer[j],MB_Buffer[j+1]); 
0E28:  CLRF   03
0E2A:  MOVLB  4
0E2C:  MOVF   xFB,W
0E2E:  ADDLW  F0
0E30:  MOVWF  FE9
0E32:  MOVLW  03
0E34:  ADDWFC 03,W
0E36:  MOVWF  FEA
0E38:  MOVFF  FEF,53A
0E3C:  MOVLW  01
0E3E:  ADDWF  xFB,W
0E40:  CLRF   03
0E42:  ADDLW  F0
0E44:  MOVWF  FE9
0E46:  MOVLW  03
0E48:  ADDWFC 03,W
0E4A:  MOVWF  FEA
0E4C:  MOVFF  FEF,53B
0E50:  MOVFF  53A,3C1
0E54:  MOVFF  53B,3C0
.................... 					j+=2;	//set next data 
0E58:  MOVLW  02
0E5A:  ADDWF  xFB,F
.................... 					break; 
0E5C:  BRA    116C
.................... 				case 0x10:	//FWDT 
.................... 					//read data from buffer 
.................... 					FWDT=make16(MB_Buffer[j],MB_Buffer[j+1]); 
0E5E:  CLRF   03
0E60:  MOVLB  4
0E62:  MOVF   xFB,W
0E64:  ADDLW  F0
0E66:  MOVWF  FE9
0E68:  MOVLW  03
0E6A:  ADDWFC 03,W
0E6C:  MOVWF  FEA
0E6E:  MOVFF  FEF,53A
0E72:  MOVLW  01
0E74:  ADDWF  xFB,W
0E76:  CLRF   03
0E78:  ADDLW  F0
0E7A:  MOVWF  FE9
0E7C:  MOVLW  03
0E7E:  ADDWFC 03,W
0E80:  MOVWF  FEA
0E82:  MOVFF  FEF,53B
0E86:  MOVFF  53A,3C3
0E8A:  MOVFF  53B,3C2
.................... 					j+=2;	//set next data 
0E8E:  MOVLW  02
0E90:  ADDWF  xFB,F
.................... 					break; 
0E92:  BRA    116C
.................... 				case 0x11:	//PCOUNT 
.................... 					//read data from buffer 
.................... 					PCOUNT=make16(MB_Buffer[j],MB_Buffer[j+1]); 
0E94:  CLRF   03
0E96:  MOVLB  4
0E98:  MOVF   xFB,W
0E9A:  ADDLW  F0
0E9C:  MOVWF  FE9
0E9E:  MOVLW  03
0EA0:  ADDWFC 03,W
0EA2:  MOVWF  FEA
0EA4:  MOVFF  FEF,53A
0EA8:  MOVLW  01
0EAA:  ADDWF  xFB,W
0EAC:  CLRF   03
0EAE:  ADDLW  F0
0EB0:  MOVWF  FE9
0EB2:  MOVLW  03
0EB4:  ADDWFC 03,W
0EB6:  MOVWF  FEA
0EB8:  MOVFF  FEF,53B
0EBC:  MOVFF  53A,3C5
0EC0:  MOVFF  53B,3C4
.................... 					j+=2;	//set next data 
0EC4:  MOVLW  02
0EC6:  ADDWF  xFB,F
.................... 					break; 
0EC8:  BRA    116C
.................... 				case 0x12:	// 
.................... 					j+=2;	//set next data 
0ECA:  MOVLW  02
0ECC:  MOVLB  4
0ECE:  ADDWF  xFB,F
.................... 					break; 
0ED0:  BRA    116C
.................... 				case 0x13:	// 
.................... 					Addr=make16(MB_Buffer[j],MB_Buffer[j+1]); 
0ED2:  CLRF   03
0ED4:  MOVLB  4
0ED6:  MOVF   xFB,W
0ED8:  ADDLW  F0
0EDA:  MOVWF  FE9
0EDC:  MOVLW  03
0EDE:  ADDWFC 03,W
0EE0:  MOVWF  FEA
0EE2:  MOVFF  FEF,53A
0EE6:  MOVLW  01
0EE8:  ADDWF  xFB,W
0EEA:  CLRF   03
0EEC:  ADDLW  F0
0EEE:  MOVWF  FE9
0EF0:  MOVLW  03
0EF2:  ADDWFC 03,W
0EF4:  MOVWF  FEA
0EF6:  MOVFF  FEF,53B
0EFA:  MOVFF  53A,3DF
0EFE:  MOVFF  53B,3DE
.................... 					j+=2;	//set next data 
0F02:  MOVLW  02
0F04:  ADDWF  xFB,F
.................... 					break; 
0F06:  BRA    116C
.................... 				case 0x14:	//Valid request register	- no acton 
.................... 					j+=2;	//set next data 
0F08:  MOVLW  02
0F0A:  MOVLB  4
0F0C:  ADDWF  xFB,F
.................... 					break; 
0F0E:  BRA    116C
.................... 				case 0x15:	//CRC error register - no action 
.................... 					j+=2;	//set next data 
0F10:  MOVLW  02
0F12:  MOVLB  4
0F14:  ADDWF  xFB,F
.................... 					break; 
0F16:  BRA    116C
.................... 				case 0x16:	//Exception register - no action 
.................... 					j+=2;	//set next data 
0F18:  MOVLW  02
0F1A:  MOVLB  4
0F1C:  ADDWF  xFB,F
.................... 					break; 
0F1E:  BRA    116C
.................... 				case 0x17:	//KGT 
.................... 					flcopy=make32(MB_Buffer[j+3],MB_Buffer[j+2],MB_Buffer[j+1],MB_Buffer[j]); 
0F20:  MOVLW  03
0F22:  MOVLB  4
0F24:  ADDWF  xFB,W
0F26:  CLRF   03
0F28:  ADDLW  F0
0F2A:  MOVWF  FE9
0F2C:  MOVLW  03
0F2E:  ADDWFC 03,W
0F30:  MOVWF  FEA
0F32:  MOVFF  FEF,53A
0F36:  MOVLW  02
0F38:  ADDWF  xFB,W
0F3A:  CLRF   03
0F3C:  ADDLW  F0
0F3E:  MOVWF  FE9
0F40:  MOVLW  03
0F42:  ADDWFC 03,W
0F44:  MOVWF  FEA
0F46:  MOVFF  FEF,53B
0F4A:  MOVLW  01
0F4C:  ADDWF  xFB,W
0F4E:  CLRF   03
0F50:  ADDLW  F0
0F52:  MOVWF  FE9
0F54:  MOVLW  03
0F56:  ADDWFC 03,W
0F58:  MOVWF  FEA
0F5A:  MOVFF  FEF,53C
0F5E:  CLRF   03
0F60:  MOVF   xFB,W
0F62:  ADDLW  F0
0F64:  MOVWF  FE9
0F66:  MOVLW  03
0F68:  ADDWFC 03,W
0F6A:  MOVWF  FEA
0F6C:  MOVFF  FEF,53D
0F70:  MOVFF  53A,539
0F74:  MOVFF  53B,538
0F78:  MOVFF  53C,537
0F7C:  MOVFF  53D,536
.................... 					memcpy(&KGT,&flcopy,4); 
0F80:  MOVLW  03
0F82:  MOVWF  FEA
0F84:  MOVLW  D2
0F86:  MOVWF  FE9
0F88:  MOVLW  05
0F8A:  MOVWF  FE2
0F8C:  MOVLW  36
0F8E:  MOVWF  FE1
0F90:  MOVLW  04
0F92:  MOVWF  01
0F94:  MOVFF  FE6,FEE
0F98:  DECFSZ 01,F
0F9A:  BRA    0F94
.................... 					j+=4;	//set next data 
0F9C:  MOVLW  04
0F9E:  ADDWF  xFB,F
.................... 					break; 
0FA0:  BRA    116C
.................... 				case 0x18:	//KGU 
.................... 					flcopy=make32(MB_Buffer[j+3],MB_Buffer[j+2],MB_Buffer[j+1],MB_Buffer[j]); 
0FA2:  MOVLW  03
0FA4:  MOVLB  4
0FA6:  ADDWF  xFB,W
0FA8:  CLRF   03
0FAA:  ADDLW  F0
0FAC:  MOVWF  FE9
0FAE:  MOVLW  03
0FB0:  ADDWFC 03,W
0FB2:  MOVWF  FEA
0FB4:  MOVFF  FEF,53A
0FB8:  MOVLW  02
0FBA:  ADDWF  xFB,W
0FBC:  CLRF   03
0FBE:  ADDLW  F0
0FC0:  MOVWF  FE9
0FC2:  MOVLW  03
0FC4:  ADDWFC 03,W
0FC6:  MOVWF  FEA
0FC8:  MOVFF  FEF,53B
0FCC:  MOVLW  01
0FCE:  ADDWF  xFB,W
0FD0:  CLRF   03
0FD2:  ADDLW  F0
0FD4:  MOVWF  FE9
0FD6:  MOVLW  03
0FD8:  ADDWFC 03,W
0FDA:  MOVWF  FEA
0FDC:  MOVFF  FEF,53C
0FE0:  CLRF   03
0FE2:  MOVF   xFB,W
0FE4:  ADDLW  F0
0FE6:  MOVWF  FE9
0FE8:  MOVLW  03
0FEA:  ADDWFC 03,W
0FEC:  MOVWF  FEA
0FEE:  MOVFF  FEF,53D
0FF2:  MOVFF  53A,539
0FF6:  MOVFF  53B,538
0FFA:  MOVFF  53C,537
0FFE:  MOVFF  53D,536
.................... 					memcpy(&KGU,&flcopy,4); 
1002:  MOVLW  03
1004:  MOVWF  FEA
1006:  MOVLW  D6
1008:  MOVWF  FE9
100A:  MOVLW  05
100C:  MOVWF  FE2
100E:  MOVLW  36
1010:  MOVWF  FE1
1012:  MOVLW  04
1014:  MOVWF  01
1016:  MOVFF  FE6,FEE
101A:  DECFSZ 01,F
101C:  BRA    1016
.................... 					j+=4;	//set next data 
101E:  MOVLW  04
1020:  ADDWF  xFB,F
.................... 					break; 
1022:  BRA    116C
.................... 				case 0x19:	//KST0 
.................... 					flcopy=make32(MB_Buffer[j+3],MB_Buffer[j+2],MB_Buffer[j+1],MB_Buffer[j]); 
1024:  MOVLW  03
1026:  MOVLB  4
1028:  ADDWF  xFB,W
102A:  CLRF   03
102C:  ADDLW  F0
102E:  MOVWF  FE9
1030:  MOVLW  03
1032:  ADDWFC 03,W
1034:  MOVWF  FEA
1036:  MOVFF  FEF,53A
103A:  MOVLW  02
103C:  ADDWF  xFB,W
103E:  CLRF   03
1040:  ADDLW  F0
1042:  MOVWF  FE9
1044:  MOVLW  03
1046:  ADDWFC 03,W
1048:  MOVWF  FEA
104A:  MOVFF  FEF,53B
104E:  MOVLW  01
1050:  ADDWF  xFB,W
1052:  CLRF   03
1054:  ADDLW  F0
1056:  MOVWF  FE9
1058:  MOVLW  03
105A:  ADDWFC 03,W
105C:  MOVWF  FEA
105E:  MOVFF  FEF,53C
1062:  CLRF   03
1064:  MOVF   xFB,W
1066:  ADDLW  F0
1068:  MOVWF  FE9
106A:  MOVLW  03
106C:  ADDWFC 03,W
106E:  MOVWF  FEA
1070:  MOVFF  FEF,53D
1074:  MOVFF  53A,539
1078:  MOVFF  53B,538
107C:  MOVFF  53C,537
1080:  MOVFF  53D,536
.................... 					memcpy(&KST0,&flcopy,4); 
1084:  MOVLW  03
1086:  MOVWF  FEA
1088:  MOVLW  AC
108A:  MOVWF  FE9
108C:  MOVLW  05
108E:  MOVWF  FE2
1090:  MOVLW  36
1092:  MOVWF  FE1
1094:  MOVLW  04
1096:  MOVWF  01
1098:  MOVFF  FE6,FEE
109C:  DECFSZ 01,F
109E:  BRA    1098
.................... 					j+=4;	//set next data 
10A0:  MOVLW  04
10A2:  ADDWF  xFB,F
.................... 					break; 
10A4:  BRA    116C
.................... 				case 0x1A:	//dummy command			 
.................... 					j+=4;	//set next data 
10A6:  MOVLW  04
10A8:  MOVLB  4
10AA:  ADDWF  xFB,F
.................... 					break; 
10AC:  BRA    116C
.................... 				case 0x1B:	//T0_CAL 
.................... 					//read data from buffer 
.................... 					T0_CAL=make16(MB_Buffer[j],MB_Buffer[j+1]); 
10AE:  CLRF   03
10B0:  MOVLB  4
10B2:  MOVF   xFB,W
10B4:  ADDLW  F0
10B6:  MOVWF  FE9
10B8:  MOVLW  03
10BA:  ADDWFC 03,W
10BC:  MOVWF  FEA
10BE:  MOVFF  FEF,53A
10C2:  MOVLW  01
10C4:  ADDWF  xFB,W
10C6:  CLRF   03
10C8:  ADDLW  F0
10CA:  MOVWF  FE9
10CC:  MOVLW  03
10CE:  ADDWFC 03,W
10D0:  MOVWF  FEA
10D2:  MOVFF  FEF,53B
10D6:  MOVFF  53A,3B1
10DA:  MOVFF  53B,3B0
.................... 					j+=2;	//set next data 
10DE:  MOVLW  02
10E0:  ADDWF  xFB,F
.................... 					break; 
10E2:  BRA    116C
.................... 				case 0x1C:	//T1_CAL 
.................... 					//read data from buffer 
.................... 					T1_CAL=make16(MB_Buffer[j],MB_Buffer[j+1]); 
10E4:  CLRF   03
10E6:  MOVLB  4
10E8:  MOVF   xFB,W
10EA:  ADDLW  F0
10EC:  MOVWF  FE9
10EE:  MOVLW  03
10F0:  ADDWFC 03,W
10F2:  MOVWF  FEA
10F4:  MOVFF  FEF,53A
10F8:  MOVLW  01
10FA:  ADDWF  xFB,W
10FC:  CLRF   03
10FE:  ADDLW  F0
1100:  MOVWF  FE9
1102:  MOVLW  03
1104:  ADDWFC 03,W
1106:  MOVWF  FEA
1108:  MOVFF  FEF,53B
110C:  MOVFF  53A,3BD
1110:  MOVFF  53B,3BC
.................... 					j+=2;	//set next data 
1114:  MOVLW  02
1116:  ADDWF  xFB,F
.................... 					break; 
1118:  BRA    116C
.................... 				case 0x1D:	//TG_CAL 
.................... 					//read data from buffer 
.................... 					TG_CAL=make16(MB_Buffer[j],MB_Buffer[j+1]); 
111A:  CLRF   03
111C:  MOVLB  4
111E:  MOVF   xFB,W
1120:  ADDLW  F0
1122:  MOVWF  FE9
1124:  MOVLW  03
1126:  ADDWFC 03,W
1128:  MOVWF  FEA
112A:  MOVFF  FEF,53A
112E:  MOVLW  01
1130:  ADDWF  xFB,W
1132:  CLRF   03
1134:  ADDLW  F0
1136:  MOVWF  FE9
1138:  MOVLW  03
113A:  ADDWFC 03,W
113C:  MOVWF  FEA
113E:  MOVFF  FEF,53B
1142:  MOVFF  53A,3DB
1146:  MOVFF  53B,3DA
.................... 					j+=2;	//set next data 
114A:  MOVLW  02
114C:  ADDWF  xFB,F
.................... 					break; 
114E:  BRA    116C
.................... 				default:	//no valid registers							 
.................... 					MB_Buffer[1]|=0x80; 
1150:  MOVLB  3
1152:  BSF    xF1.7
.................... 					MB_Buffer[2]=illegal_data_value; 
1154:  MOVLW  03
1156:  MOVWF  xF2
.................... 					MB_Length=5; 
1158:  MOVLW  05
115A:  MOVLB  4
115C:  MOVWF  xF0
.................... 					ExcReq++; 
115E:  INCF   xF5,F
1160:  BTFSC  FD8.2
1162:  INCF   xF6,F
.................... 					ValidReq--; 
1164:  MOVF   xF1,W
1166:  BTFSC  FD8.2
1168:  DECF   xF2,F
116A:  DECF   xF1,F
.................... 			};	 
.................... } 
116C:  MOVLB  0
116E:  GOTO   1BF8 (RETURN)
.................... // 
.................... //timer 2 interrupt vector - packet recognition 
.................... #INT_TIMER1 
.................... void	Reaction(void){ 
.................... 	int8	StAddr,EnAddr;	 
.................... 	int8	bytecount; 
.................... 	int16	k,l; 
.................... 	//end of tramsmittion process 
.................... 	disable_interrupts(INT_RDA); 
*
1920:  BCF    F9D.5
.................... 	output_high(STAT);	//on led 
1922:  BCF    F94.0
1924:  BSF    F8B.0
.................... 	// 
.................... 	if (MB_Length<4)	goto exit;	//exit if to small 
1926:  MOVLB  4
1928:  MOVF   xF0,W
192A:  SUBLW  03
192C:  BNC   1930
192E:  BRA    1EC0
.................... 	//detect adress 
.................... 	if((MB_Buffer[0]!=make8(Addr,0))&&(MB_Buffer[0]!=0))	goto exit;	//if not broadcast & not qwn address - then exit 
1930:  MOVLB  3
1932:  MOVF   xDE,W
1934:  SUBWF  xF0,W
1936:  BZ    1940
1938:  MOVF   xF0,F
193A:  BZ    1940
193C:  MOVLB  4
193E:  BRA    1EC0
.................... 	//calculate CRC 
.................... 	CRCc=ModbusCRC(MB_Buffer,MB_Length-2); 
1940:  MOVLW  02
1942:  MOVLB  4
1944:  SUBWF  xF0,W
1946:  MOVLB  5
1948:  MOVWF  x35
194A:  MOVLW  03
194C:  MOVWF  x37
194E:  MOVLW  F0
1950:  MOVWF  x36
1952:  MOVFF  535,538
1956:  MOVLB  0
1958:  CALL   03D0
195C:  MOVFF  02,4FA
1960:  MOVFF  01,4F9
.................... 	CRCr=make16(MB_Buffer[MB_Length-2],MB_Buffer[MB_Length-1]); 
1964:  MOVLW  02
1966:  MOVLB  4
1968:  SUBWF  xF0,W
196A:  CLRF   03
196C:  ADDLW  F0
196E:  MOVWF  FE9
1970:  MOVLW  03
1972:  ADDWFC 03,W
1974:  MOVWF  FEA
1976:  MOVFF  FEF,535
197A:  MOVLW  01
197C:  SUBWF  xF0,W
197E:  CLRF   03
1980:  ADDLW  F0
1982:  MOVWF  FE9
1984:  MOVLW  03
1986:  ADDWFC 03,W
1988:  MOVWF  FEA
198A:  MOVFF  FEF,536
198E:  MOVFF  535,4F8
1992:  MOVFF  536,4F7
.................... 	// 
.................... 	if(CRCc!=CRCr){				//if error CRC then exit 
1996:  MOVF   xF7,W
1998:  SUBWF  xF9,W
199A:  BNZ   19A2
199C:  MOVF   xF8,W
199E:  SUBWF  xFA,W
19A0:  BZ    19AA
.................... 		CRCReq++;	 
19A2:  INCF   xF3,F
19A4:  BTFSC  FD8.2
19A6:  INCF   xF4,F
.................... 		goto exit; 
19A8:  BRA    1EC0
.................... 	}; 
.................... 	//proceed command 
.................... 	//analizing function code 
.................... 	switch(MB_Buffer[1]){ 
19AA:  MOVLB  3
19AC:  MOVF   xF1,W
19AE:  XORLW  42
19B0:  MOVLB  0
19B2:  BZ    19DA
19B4:  XORLW  01
19B6:  BTFSC  FD8.2
19B8:  BRA    1A9C
19BA:  XORLW  07
19BC:  BTFSC  FD8.2
19BE:  BRA    1B5C
19C0:  XORLW  01
19C2:  BTFSC  FD8.2
19C4:  BRA    1BB8
19C6:  XORLW  20
19C8:  BTFSC  FD8.2
19CA:  BRA    1C22
19CC:  XORLW  0F
19CE:  BTFSC  FD8.2
19D0:  BRA    1C54
19D2:  XORLW  01
19D4:  BTFSC  FD8.2
19D6:  BRA    1DC0
19D8:  BRA    1E20
.................... 		//CMODE 
.................... 		case	0x42: 
.................... 				if(MB_Length==5){ 
19DA:  MOVLB  4
19DC:  MOVF   xF0,W
19DE:  SUBLW  05
19E0:  BNZ   1A86
.................... 					switch(MB_Buffer[2]){ 
19E2:  MOVLB  3
19E4:  MOVF   xF2,W
19E6:  XORLW  00
19E8:  MOVLB  0
19EA:  BZ    19F6
19EC:  XORLW  01
19EE:  BZ    1A0C
19F0:  XORLW  03
19F2:  BZ    1A6A
19F4:  BRA    1A70
.................... 						case	0x00:	//normal cycle 
.................... 							OneCycle=0;	//clear one cycle flag 
19F6:  MOVLB  3
19F8:  BCF    xC6.0
.................... 							DaqState=DaqStart;	//start new measuring 
19FA:  MOVLW  01
19FC:  MOVWF  xEF
.................... 							MB_Length=4; 
19FE:  MOVLW  04
1A00:  MOVLB  4
1A02:  MOVWF  xF0
.................... 							ValidReq++; 
1A04:  INCF   xF1,F
1A06:  BTFSC  FD8.2
1A08:  INCF   xF2,F
.................... 							break; 
1A0A:  BRA    1A84
.................... 						case	0x01: 
.................... 							OneCycle=1;	//set one cycle flag 
1A0C:  MOVLB  3
1A0E:  BSF    xC6.0
.................... 							DaqState=DaqStart;	//set new cycle 
1A10:  MOVLW  01
1A12:  MOVWF  xEF
.................... 							for(k=0; k<PCOUNT; k++){ 
1A14:  MOVLB  5
1A16:  CLRF   x32
1A18:  CLRF   x31
1A1A:  MOVF   x32,W
1A1C:  MOVLB  3
1A1E:  SUBWF  xC5,W
1A20:  BNC   1A5C
1A22:  BNZ   1A34
1A24:  MOVF   xC4,W
1A26:  MOVLB  5
1A28:  SUBWF  x31,W
1A2A:  BTFSS  FD8.0
1A2C:  BRA    1A32
1A2E:  MOVLB  3
1A30:  BRA    1A5C
1A32:  MOVLB  3
.................... 								gam_buf0[k]=0;	//clear measuring buffer 
1A34:  BCF    FD8.0
1A36:  MOVLB  5
1A38:  RLCF   x31,W
1A3A:  MOVWF  02
1A3C:  RLCF   x32,W
1A3E:  MOVWF  03
1A40:  MOVF   02,W
1A42:  ADDLW  A4
1A44:  MOVWF  FE9
1A46:  MOVLW  02
1A48:  ADDWFC 03,W
1A4A:  MOVWF  FEA
1A4C:  CLRF   FEC
1A4E:  MOVF   FED,F
1A50:  CLRF   FEF
.................... 								}; 
1A52:  INCF   x31,F
1A54:  BTFSC  FD8.2
1A56:  INCF   x32,F
1A58:  BRA    1A1A
1A5A:  MOVLB  3
.................... 							MB_Length=4; 
1A5C:  MOVLW  04
1A5E:  MOVLB  4
1A60:  MOVWF  xF0
.................... 							ValidReq++; 
1A62:  INCF   xF1,F
1A64:  BTFSC  FD8.2
1A66:  INCF   xF2,F
.................... 							break; 
1A68:  BRA    1A84
.................... 						case	0x02:	//reset mcu 
.................... 							reset_cpu(); 
1A6A:  RESET
.................... 							break; 
1A6C:  MOVLB  4
1A6E:  BRA    1A84
.................... 						default: 
.................... 						MB_Buffer[1]|=0x80; 
1A70:  MOVLB  3
1A72:  BSF    xF1.7
.................... 						MB_Buffer[2]=illegal_data_value; 
1A74:  MOVLW  03
1A76:  MOVWF  xF2
.................... 						ExcReq++; 
1A78:  MOVLB  4
1A7A:  INCF   xF5,F
1A7C:  BTFSC  FD8.2
1A7E:  INCF   xF6,F
.................... 						MB_Length=5; 
1A80:  MOVLW  05
1A82:  MOVWF  xF0
.................... 						}; 
.................... 					}else{ 
1A84:  BRA    1A9A
.................... 					MB_Buffer[1]|=0x80; 
1A86:  MOVLB  3
1A88:  BSF    xF1.7
.................... 					MB_Buffer[2]=illegal_data_address; 
1A8A:  MOVLW  02
1A8C:  MOVWF  xF2
.................... 					MB_Length=5; 
1A8E:  MOVLW  05
1A90:  MOVLB  4
1A92:  MOVWF  xF0
.................... 					ExcReq++; 
1A94:  INCF   xF5,F
1A96:  BTFSC  FD8.2
1A98:  INCF   xF6,F
.................... 					}; 
.................... 				break; 
1A9A:  BRA    1E34
.................... 		//read buffer 
.................... 		case	0x43: 
.................... 				if(MB_Length==7){ 
1A9C:  MOVLB  4
1A9E:  MOVF   xF0,W
1AA0:  SUBLW  07
1AA2:  BNZ   1B46
.................... 					switch(MB_Buffer[3]){ 
1AA4:  MOVLB  3
1AA6:  MOVF   xF3,W
1AA8:  XORLW  00
1AAA:  MOVLB  0
1AAC:  BZ    1AB4
1AAE:  XORLW  01
1AB0:  BZ    1AF2
1AB2:  BRA    1B30
.................... 						case	0x00:	//channel 0 
.................... 							//pack 
.................... 							l=2; 
1AB4:  MOVLB  5
1AB6:  CLRF   x34
1AB8:  MOVLW  02
1ABA:  MOVWF  x33
.................... 							for(k=0; k<0x100; k+=2){ 
1ABC:  CLRF   x32
1ABE:  CLRF   x31
1AC0:  MOVF   x32,W
1AC2:  SUBLW  00
1AC4:  BNC   1AE4
.................... 								MB_Buffer[l]=0; 
1AC6:  MOVLW  F0
1AC8:  ADDWF  x33,W
1ACA:  MOVWF  FE9
1ACC:  MOVLW  03
1ACE:  ADDWFC x34,W
1AD0:  MOVWF  FEA
1AD2:  CLRF   FEF
.................... 								l++; 
1AD4:  INCF   x33,F
1AD6:  BTFSC  FD8.2
1AD8:  INCF   x34,F
.................... 								}; 
1ADA:  MOVLW  02
1ADC:  ADDWF  x31,F
1ADE:  MOVLW  00
1AE0:  ADDWFC x32,F
1AE2:  BRA    1AC0
.................... 							MB_Length=132; 
1AE4:  MOVLW  84
1AE6:  MOVLB  4
1AE8:  MOVWF  xF0
.................... 							ValidReq++; 
1AEA:  INCF   xF1,F
1AEC:  BTFSC  FD8.2
1AEE:  INCF   xF2,F
.................... 							break; 
1AF0:  BRA    1B44
.................... 						case	0x01:	//channel 1 
.................... 							//pack 
.................... 							l=2; 
1AF2:  MOVLB  5
1AF4:  CLRF   x34
1AF6:  MOVLW  02
1AF8:  MOVWF  x33
.................... 							for(k=0; k<0x100; k+=2){ 
1AFA:  CLRF   x32
1AFC:  CLRF   x31
1AFE:  MOVF   x32,W
1B00:  SUBLW  00
1B02:  BNC   1B22
.................... 								MB_Buffer[l]=0; 
1B04:  MOVLW  F0
1B06:  ADDWF  x33,W
1B08:  MOVWF  FE9
1B0A:  MOVLW  03
1B0C:  ADDWFC x34,W
1B0E:  MOVWF  FEA
1B10:  CLRF   FEF
.................... 								l++; 
1B12:  INCF   x33,F
1B14:  BTFSC  FD8.2
1B16:  INCF   x34,F
.................... 								}; 
1B18:  MOVLW  02
1B1A:  ADDWF  x31,F
1B1C:  MOVLW  00
1B1E:  ADDWFC x32,F
1B20:  BRA    1AFE
.................... 							MB_Length=132; 
1B22:  MOVLW  84
1B24:  MOVLB  4
1B26:  MOVWF  xF0
.................... 							ValidReq++; 
1B28:  INCF   xF1,F
1B2A:  BTFSC  FD8.2
1B2C:  INCF   xF2,F
.................... 							break; 
1B2E:  BRA    1B44
.................... 						default:						 
.................... 						MB_Buffer[1]|=0x80; 
1B30:  MOVLB  3
1B32:  BSF    xF1.7
.................... 						MB_Buffer[2]=illegal_data_value; 
1B34:  MOVLW  03
1B36:  MOVWF  xF2
.................... 						ExcReq++; 
1B38:  MOVLB  4
1B3A:  INCF   xF5,F
1B3C:  BTFSC  FD8.2
1B3E:  INCF   xF6,F
.................... 						MB_Length=5; 
1B40:  MOVLW  05
1B42:  MOVWF  xF0
.................... 						}; 
.................... 					}else{ 
1B44:  BRA    1B5A
.................... 					MB_Buffer[1]|=0x80; 
1B46:  MOVLB  3
1B48:  BSF    xF1.7
.................... 					MB_Buffer[2]=illegal_data_address; 
1B4A:  MOVLW  02
1B4C:  MOVWF  xF2
.................... 					MB_Length=5; 
1B4E:  MOVLW  05
1B50:  MOVLB  4
1B52:  MOVWF  xF0
.................... 					ExcReq++; 
1B54:  INCF   xF5,F
1B56:  BTFSC  FD8.2
1B58:  INCF   xF6,F
.................... 					}; 
.................... 				break; 
1B5A:  BRA    1E34
.................... 		//get registers 
.................... 		case	0x44: 
.................... 				if(MB_Length==7){ 
1B5C:  MOVLB  4
1B5E:  MOVF   xF0,W
1B60:  SUBLW  07
1B62:  BNZ   1B9E
.................... 					//valig req propose 
.................... 					MB_Length=4; 
1B64:  MOVLW  04
1B66:  MOVWF  xF0
.................... 					ValidReq++; 
1B68:  INCF   xF1,F
1B6A:  BTFSC  FD8.2
1B6C:  INCF   xF2,F
.................... 					//action 
.................... 					//forming answer 
.................... 					j=2;	//set start answer pointer 
1B6E:  MOVLW  02
1B70:  MOVWF  xFB
.................... 					StAddr=MB_Buffer[3]; 
1B72:  MOVFF  3F3,52E
.................... 					EnAddr=(MB_Buffer[3]+MB_Buffer[4]); 
1B76:  MOVLB  3
1B78:  MOVF   xF4,W
1B7A:  ADDWF  xF3,W
1B7C:  MOVLB  5
1B7E:  MOVWF  x2F
.................... 					for(bytecount=StAddr; bytecount<EnAddr; bytecount++){ 
1B80:  MOVFF  52E,530
1B84:  MOVF   x2F,W
1B86:  SUBWF  x30,W
1B88:  BC    1B9A
.................... 						AddRegData(bytecount);		//get registers						 
1B8A:  MOVFF  530,535
1B8E:  MOVLB  0
1B90:  GOTO   0428
.................... 					}; 
1B94:  MOVLB  5
1B96:  INCF   x30,F
1B98:  BRA    1B84
.................... 					}else{ 
1B9A:  BRA    1BB4
1B9C:  MOVLB  4
.................... 					MB_Buffer[1]|=0x80; 
1B9E:  MOVLB  3
1BA0:  BSF    xF1.7
.................... 					MB_Buffer[2]=illegal_data_address; 
1BA2:  MOVLW  02
1BA4:  MOVWF  xF2
.................... 					MB_Length=5; 
1BA6:  MOVLW  05
1BA8:  MOVLB  4
1BAA:  MOVWF  xF0
.................... 					ExcReq++; 
1BAC:  INCF   xF5,F
1BAE:  BTFSC  FD8.2
1BB0:  INCF   xF6,F
1BB2:  MOVLB  5
.................... 					};		 
.................... 				break; 
1BB4:  MOVLB  4
1BB6:  BRA    1E34
.................... 		//set registers 
.................... 		case	0x45: 
.................... 				if((MB_Length>=8)&&(!(MB_Length&0x01))){ 
1BB8:  MOVLB  4
1BBA:  MOVF   xF0,W
1BBC:  SUBLW  07
1BBE:  BC    1C0C
1BC0:  BTFSC  xF0.0
1BC2:  BRA    1C0C
.................... 					//action 
.................... 					j=4;	//set start answer pointer 
1BC4:  MOVLW  04
1BC6:  MOVWF  xFB
.................... 					StAddr=MB_Buffer[3]; 
1BC8:  MOVFF  3F3,52E
.................... 					EnAddr=MB_Length-2; 
1BCC:  MOVLW  02
1BCE:  SUBWF  xF0,W
1BD0:  MOVLB  5
1BD2:  MOVWF  x2F
.................... 					//valig req propose 
.................... 					MB_Length=4; 
1BD4:  MOVLW  04
1BD6:  MOVLB  4
1BD8:  MOVWF  xF0
.................... 					ValidReq++; 
1BDA:  INCF   xF1,F
1BDC:  BTFSC  FD8.2
1BDE:  INCF   xF2,F
.................... 					for(bytecount=StAddr; j<EnAddr; bytecount++){ 
1BE0:  MOVFF  52E,530
1BE4:  MOVLB  5
1BE6:  MOVF   x2F,W
1BE8:  MOVLB  4
1BEA:  SUBWF  xFB,W
1BEC:  BC    1C00
.................... 						SetRegData(bytecount);		//get registers 
1BEE:  MOVFF  530,535
1BF2:  MOVLB  0
1BF4:  GOTO   0C4A
.................... 					}; 
1BF8:  MOVLB  5
1BFA:  INCF   x30,F
1BFC:  BRA    1BE6
1BFE:  MOVLB  4
.................... 					//forming answer 
.................... 					MB_Length=4; 
1C00:  MOVLW  04
1C02:  MOVWF  xF0
.................... 					ValidReq++; 
1C04:  INCF   xF1,F
1C06:  BTFSC  FD8.2
1C08:  INCF   xF2,F
.................... 					}else{ 
1C0A:  BRA    1C20
.................... 					MB_Buffer[1]|=0x80; 
1C0C:  MOVLB  3
1C0E:  BSF    xF1.7
.................... 					MB_Buffer[2]=illegal_data_address; 
1C10:  MOVLW  02
1C12:  MOVWF  xF2
.................... 					MB_Length=5; 
1C14:  MOVLW  05
1C16:  MOVLB  4
1C18:  MOVWF  xF0
.................... 					ExcReq++; 
1C1A:  INCF   xF5,F
1C1C:  BTFSC  FD8.2
1C1E:  INCF   xF6,F
.................... 					};		 
.................... 				break; 
1C20:  BRA    1E34
.................... 		//write to EEPROM command 
.................... 		case	0x65: 
.................... 				if(MB_Length==4){ 
1C22:  MOVLB  4
1C24:  MOVF   xF0,W
1C26:  SUBLW  04
1C28:  BNZ   1C3E
.................... 					BUWrite(); 
1C2A:  MOVLB  0
1C2C:  GOTO   1172
.................... 					MB_Length=4; 
1C30:  MOVLW  04
1C32:  MOVLB  4
1C34:  MOVWF  xF0
.................... 					ValidReq++; 
1C36:  INCF   xF1,F
1C38:  BTFSC  FD8.2
1C3A:  INCF   xF2,F
.................... 					}else{ 
1C3C:  BRA    1C52
.................... 					MB_Buffer[1]|=0x80; 
1C3E:  MOVLB  3
1C40:  BSF    xF1.7
.................... 					MB_Buffer[2]=illegal_data_address; 
1C42:  MOVLW  02
1C44:  MOVWF  xF2
.................... 					MB_Length=5; 
1C46:  MOVLW  05
1C48:  MOVLB  4
1C4A:  MOVWF  xF0
.................... 					ExcReq++; 
1C4C:  INCF   xF5,F
1C4E:  BTFSC  FD8.2
1C50:  INCF   xF6,F
.................... 					};		 
.................... 				break; 
1C52:  BRA    1E34
.................... 		//set speed 
.................... 		case	0x6A: 
.................... 				if(MB_Length==5){ 
1C54:  MOVLB  4
1C56:  MOVF   xF0,W
1C58:  SUBLW  05
1C5A:  BTFSS  FD8.2
1C5C:  BRA    1DA6
.................... 					MB_Length=4; 
1C5E:  MOVLW  04
1C60:  MOVWF  xF0
.................... 					ValidReq++; 
1C62:  INCF   xF1,F
1C64:  BTFSC  FD8.2
1C66:  INCF   xF2,F
.................... 					switch(MB_Buffer[2]){ 
1C68:  MOVLB  3
1C6A:  MOVF   xF2,W
1C6C:  XORLW  00
1C6E:  MOVLB  0
1C70:  BZ    1C90
1C72:  XORLW  01
1C74:  BZ    1CAE
1C76:  XORLW  03
1C78:  BZ    1CCC
1C7A:  XORLW  01
1C7C:  BZ    1CEA
1C7E:  XORLW  07
1C80:  BZ    1D08
1C82:  XORLW  01
1C84:  BZ    1D26
1C86:  XORLW  03
1C88:  BZ    1D44
1C8A:  XORLW  01
1C8C:  BZ    1D5E
1C8E:  BRA    1D7A
.................... 						case	0x00:	//1200 
.................... 							Speed=1200; 
1C90:  MOVLW  04
1C92:  MOVLB  3
1C94:  MOVWF  xDD
1C96:  MOVLW  B0
1C98:  MOVWF  xDC
.................... 							setup_uart(1200); 
1C9A:  BSF    FB8.3
1C9C:  MOVLW  0A
1C9E:  MOVWF  FAF
1CA0:  MOVLW  1A
1CA2:  MOVWF  FB0
1CA4:  MOVLW  A6
1CA6:  MOVWF  FAC
1CA8:  NOP   
1CAA:  NOP   
.................... 							break; 
1CAC:  BRA    1D90
.................... 						case	0x01:	//1800 
.................... 							Speed=1800; 
1CAE:  MOVLW  07
1CB0:  MOVLB  3
1CB2:  MOVWF  xDD
1CB4:  MOVLW  08
1CB6:  MOVWF  xDC
.................... 							setup_uart(1800); 
1CB8:  BSF    FB8.3
1CBA:  MOVLW  5B
1CBC:  MOVWF  FAF
1CBE:  MOVLW  11
1CC0:  MOVWF  FB0
1CC2:  MOVLW  A6
1CC4:  MOVWF  FAC
1CC6:  NOP   
1CC8:  NOP   
.................... 							break; 
1CCA:  BRA    1D90
.................... 						case	0x02:	//2400 
.................... 							Speed=2400; 
1CCC:  MOVLW  09
1CCE:  MOVLB  3
1CD0:  MOVWF  xDD
1CD2:  MOVLW  60
1CD4:  MOVWF  xDC
.................... 							setup_uart(2400); 
1CD6:  BSF    FB8.3
1CD8:  MOVLW  04
1CDA:  MOVWF  FAF
1CDC:  MOVLW  0D
1CDE:  MOVWF  FB0
1CE0:  MOVLW  A6
1CE2:  MOVWF  FAC
1CE4:  NOP   
1CE6:  NOP   
.................... 							break; 
1CE8:  BRA    1D90
.................... 						case	0x03:	//4800 
.................... 							Speed=4800; 
1CEA:  MOVLW  12
1CEC:  MOVLB  3
1CEE:  MOVWF  xDD
1CF0:  MOVLW  C0
1CF2:  MOVWF  xDC
.................... 							setup_uart(4800); 
1CF4:  BSF    FB8.3
1CF6:  MOVLW  82
1CF8:  MOVWF  FAF
1CFA:  MOVLW  06
1CFC:  MOVWF  FB0
1CFE:  MOVLW  A6
1D00:  MOVWF  FAC
1D02:  NOP   
1D04:  NOP   
.................... 							break; 
1D06:  BRA    1D90
.................... 						case	0x04:	//7200 
.................... 							Speed=7200; 
1D08:  MOVLW  1C
1D0A:  MOVLB  3
1D0C:  MOVWF  xDD
1D0E:  MOVLW  20
1D10:  MOVWF  xDC
.................... 							setup_uart(7200); 
1D12:  BSF    FB8.3
1D14:  MOVLW  56
1D16:  MOVWF  FAF
1D18:  MOVLW  04
1D1A:  MOVWF  FB0
1D1C:  MOVLW  A6
1D1E:  MOVWF  FAC
1D20:  NOP   
1D22:  NOP   
.................... 							break; 
1D24:  BRA    1D90
.................... 						case	0x05:	//9600 
.................... 							Speed=9600; 
1D26:  MOVLW  25
1D28:  MOVLB  3
1D2A:  MOVWF  xDD
1D2C:  MOVLW  80
1D2E:  MOVWF  xDC
.................... 							setup_uart(9600); 
1D30:  BSF    FB8.3
1D32:  MOVLW  40
1D34:  MOVWF  FAF
1D36:  MOVLW  03
1D38:  MOVWF  FB0
1D3A:  MOVLW  A6
1D3C:  MOVWF  FAC
1D3E:  NOP   
1D40:  NOP   
.................... 							break; 
1D42:  BRA    1D90
.................... 						case	0x06:	//14400 
.................... 							Speed=14400; 
1D44:  MOVLW  38
1D46:  MOVLB  3
1D48:  MOVWF  xDD
1D4A:  MOVLW  40
1D4C:  MOVWF  xDC
.................... 							setup_uart(14400); 
1D4E:  BCF    FB8.3
1D50:  MOVLW  8A
1D52:  MOVWF  FAF
1D54:  MOVLW  A6
1D56:  MOVWF  FAC
1D58:  NOP   
1D5A:  NOP   
.................... 							break; 
1D5C:  BRA    1D90
.................... 						case	0x07:	//19200 
.................... 							Speed=19200; 
1D5E:  MOVLW  4B
1D60:  MOVLB  3
1D62:  MOVWF  xDD
1D64:  CLRF   xDC
.................... 							setup_uart(19200); 
1D66:  BSF    FB8.3
1D68:  MOVLW  A0
1D6A:  MOVWF  FAF
1D6C:  MOVLW  01
1D6E:  MOVWF  FB0
1D70:  MOVLW  A6
1D72:  MOVWF  FAC
1D74:  NOP   
1D76:  NOP   
.................... 							break; 
1D78:  BRA    1D90
.................... 						default: 
.................... 							MB_Buffer[1]|=0x80; 
1D7A:  MOVLB  3
1D7C:  BSF    xF1.7
.................... 							MB_Buffer[2]=illegal_data_value; 
1D7E:  MOVLW  03
1D80:  MOVWF  xF2
.................... 							MB_Length=5; 
1D82:  MOVLW  05
1D84:  MOVLB  4
1D86:  MOVWF  xF0
.................... 							ExcReq++; 
1D88:  INCF   xF5,F
1D8A:  BTFSC  FD8.2
1D8C:  INCF   xF6,F
1D8E:  MOVLB  3
.................... 					}; 
.................... 					output_toggle(STAT); 
1D90:  BCF    F94.0
1D92:  BTG    F8B.0
.................... 					//pause for master 
.................... 					delay_ms(100); 
1D94:  MOVLW  64
1D96:  MOVLB  5
1D98:  MOVWF  x35
1D9A:  MOVLB  0
1D9C:  BRA    18CC
.................... 					output_toggle(STAT);					 
1D9E:  BCF    F94.0
1DA0:  BTG    F8B.0
.................... 					}else{ 
1DA2:  BRA    1DBC
1DA4:  MOVLB  4
.................... 					MB_Buffer[1]|=0x80; 
1DA6:  MOVLB  3
1DA8:  BSF    xF1.7
.................... 					MB_Buffer[2]=illegal_data_address; 
1DAA:  MOVLW  02
1DAC:  MOVWF  xF2
.................... 					MB_Length=5; 
1DAE:  MOVLW  05
1DB0:  MOVLB  4
1DB2:  MOVWF  xF0
.................... 					ExcReq++; 
1DB4:  INCF   xF5,F
1DB6:  BTFSC  FD8.2
1DB8:  INCF   xF6,F
1DBA:  MOVLB  0
.................... 					};		 
.................... 				break; 
1DBC:  MOVLB  4
1DBE:  BRA    1E34
.................... 		//send id 
.................... 		case	0x6B: 
.................... 				if(MB_Length==4){ 
1DC0:  MOVLB  4
1DC2:  MOVF   xF0,W
1DC4:  SUBLW  04
1DC6:  BNZ   1E0A
.................... 					MB_Buffer[2]="M"; 
1DC8:  MOVLW  4D
1DCA:  MOVLB  3
1DCC:  MOVWF  xF2
.................... 					MB_Buffer[3]="W"; 
1DCE:  MOVLW  57
1DD0:  MOVWF  xF3
.................... 					MB_Buffer[4]="T"; 
1DD2:  MOVLW  54
1DD4:  MOVWF  xF4
.................... 					MB_Buffer[5]="-"; 
1DD6:  MOVLW  2D
1DD8:  MOVWF  xF5
.................... 					MB_Buffer[6]="S"; 
1DDA:  MOVLW  53
1DDC:  MOVWF  xF6
.................... 					MB_Buffer[7]="P"; 
1DDE:  MOVLW  50
1DE0:  MOVWF  xF7
.................... 					MB_Buffer[8]="M"; 
1DE2:  MOVLW  4D
1DE4:  MOVWF  xF8
.................... 					MB_Buffer[9]="3"; 
1DE6:  MOVLW  33
1DE8:  MOVWF  xF9
.................... 					MB_Buffer[10]="v"; 
1DEA:  MOVLW  76
1DEC:  MOVWF  xFA
.................... 					MB_Buffer[11]="1"; 
1DEE:  MOVLW  31
1DF0:  MOVWF  xFB
.................... 					MB_Buffer[12]="."; 
1DF2:  MOVLW  2E
1DF4:  MOVWF  xFC
.................... 					MB_Buffer[13]="0"; 
1DF6:  MOVLW  30
1DF8:  MOVWF  xFD
.................... 					MB_Buffer[14]="0"; 
1DFA:  MOVWF  xFE
.................... 					MB_Length=16; 
1DFC:  MOVLW  10
1DFE:  MOVLB  4
1E00:  MOVWF  xF0
.................... 					ValidReq++; 
1E02:  INCF   xF1,F
1E04:  BTFSC  FD8.2
1E06:  INCF   xF2,F
.................... 					}else{ 
1E08:  BRA    1E1E
.................... 					MB_Buffer[1]|=0x80; 
1E0A:  MOVLB  3
1E0C:  BSF    xF1.7
.................... 					MB_Buffer[2]=illegal_data_address; 
1E0E:  MOVLW  02
1E10:  MOVWF  xF2
.................... 					MB_Length=5; 
1E12:  MOVLW  05
1E14:  MOVLB  4
1E16:  MOVWF  xF0
.................... 					ExcReq++; 
1E18:  INCF   xF5,F
1E1A:  BTFSC  FD8.2
1E1C:  INCF   xF6,F
.................... 					};		 
.................... 				break; 
1E1E:  BRA    1E34
.................... 		//not recognized 
.................... 		default:		//not recognized command 
.................... 		MB_Buffer[1]|=0x80;	//set error code 
1E20:  MOVLB  3
1E22:  BSF    xF1.7
.................... 		MB_Buffer[2]=illegal_function; 
1E24:  MOVLW  01
1E26:  MOVWF  xF2
.................... 		MB_Length=5; 
1E28:  MOVLW  05
1E2A:  MOVLB  4
1E2C:  MOVWF  xF0
.................... 		ExcReq++; 
1E2E:  INCF   xF5,F
1E30:  BTFSC  FD8.2
1E32:  INCF   xF6,F
.................... 	};	 
.................... 	//send answer 
.................... 	if(MB_Buffer[0]!=0){	//if unicast req - then send answer 
1E34:  MOVLB  3
1E36:  MOVF   xF0,F
1E38:  BZ    1EC2
.................... 	CRCc=ModbusCRC(MB_Buffer,MB_Length-2);	//calc CRC 
1E3A:  MOVLW  02
1E3C:  MOVLB  4
1E3E:  SUBWF  xF0,W
1E40:  MOVLB  5
1E42:  MOVWF  x35
1E44:  MOVLW  03
1E46:  MOVWF  x37
1E48:  MOVLW  F0
1E4A:  MOVWF  x36
1E4C:  MOVFF  535,538
1E50:  MOVLB  0
1E52:  CALL   03D0
1E56:  MOVFF  02,4FA
1E5A:  MOVFF  01,4F9
.................... 	MB_Buffer[MB_Length-2]=make8(CRCc,1);	//high CRC 
1E5E:  MOVLW  02
1E60:  MOVLB  4
1E62:  SUBWF  xF0,W
1E64:  CLRF   03
1E66:  ADDLW  F0
1E68:  MOVWF  FE9
1E6A:  MOVLW  03
1E6C:  ADDWFC 03,W
1E6E:  MOVWF  FEA
1E70:  MOVFF  4FA,FEF
.................... 	MB_Buffer[MB_Length-1]=make8(CRCc,0);	//low CRC 
1E74:  MOVLW  01
1E76:  SUBWF  xF0,W
1E78:  CLRF   03
1E7A:  ADDLW  F0
1E7C:  MOVWF  FE9
1E7E:  MOVLW  03
1E80:  ADDWFC 03,W
1E82:  MOVWF  FEA
1E84:  MOVFF  4F9,FEF
.................... 	//send 
.................... 	for(bytecount=0; bytecount<MB_Length; bytecount++){ 
1E88:  MOVLB  5
1E8A:  CLRF   x30
1E8C:  MOVLB  4
1E8E:  MOVF   xF0,W
1E90:  MOVLB  5
1E92:  SUBWF  x30,W
1E94:  BC    1EBC
.................... 		restart_wdt(); 
1E96:  CLRWDT
.................... 		putc(MB_Buffer[bytecount]); 
1E98:  CLRF   03
1E9A:  MOVF   x30,W
1E9C:  ADDLW  F0
1E9E:  MOVWF  FE9
1EA0:  MOVLW  03
1EA2:  ADDWFC 03,W
1EA4:  MOVWF  FEA
1EA6:  MOVFF  FEF,535
1EAA:  MOVFF  535,536
1EAE:  MOVLB  0
1EB0:  BRA    18FE
.................... 		output_low(STAT);	//toggle led 
1EB2:  BCF    F94.0
1EB4:  BCF    F8B.0
.................... 		}; 
1EB6:  MOVLB  5
1EB8:  INCF   x30,F
1EBA:  BRA    1E8C
.................... 		goto exit; 
1EBC:  MOVLB  4
1EBE:  BRA    1EC0
1EC0:  MOVLB  3
.................... 	};	 
.................... 	// 
.................... 	 
.................... exit:	//exit 
.................... 	output_high(STAT);	//on led 
1EC2:  BCF    F94.0
1EC4:  BSF    F8B.0
.................... 	MB_Length=0; 
1EC6:  MOVLB  4
1EC8:  CLRF   xF0
.................... 	clear_interrupt(INT_RDA);	 
.................... 	clear_interrupt(INT_TIMER1);	 
1ECA:  BCF    F9E.0
.................... 	disable_interrupts(INT_TIMER1);	 
1ECC:  BCF    F9D.0
.................... 	enable_interrupts(INT_RDA); 
1ECE:  BSF    F9D.5
.................... } 
.................... // 
....................  
....................  
1ED0:  BCF    F9E.0
1ED2:  MOVLB  0
1ED4:  GOTO   006C
.................... void main(void) 
.................... { 
*
2E5A:  CLRF   FF8
2E5C:  BCF    FD0.7
2E5E:  BSF    07.7
2E60:  CLRF   FEA
2E62:  CLRF   FE9
2E64:  MOVLW  70
2E66:  MOVWF  FD3
2E68:  MOVLW  40
2E6A:  MOVWF  F9B
2E6C:  MOVF   FD3,W
2E6E:  MOVLB  3
2E70:  CLRF   xC7
2E72:  CLRF   xEE
2E74:  MOVLW  32
2E76:  MOVWF  xED
2E78:  MOVLB  4
2E7A:  CLRF   xF0
2E7C:  BCF    F92.6
2E7E:  BCF    F89.6
2E80:  BSF    FB8.3
2E82:  MOVLW  40
2E84:  MOVWF  FAF
2E86:  MOVLW  03
2E88:  MOVWF  FB0
2E8A:  MOVLW  A6
2E8C:  MOVWF  FAC
2E8E:  MOVLW  90
2E90:  MOVWF  FAB
2E92:  NOP   
2E94:  NOP   
2E96:  MOVF   FC1,W
2E98:  ANDLW  C0
2E9A:  IORLW  0F
2E9C:  MOVWF  FC1
2E9E:  MOVLW  07
2EA0:  MOVWF  FB4
2EA2:  CLRF   1A
2EA4:  CLRF   1B
2EA6:  CLRF   1C
2EA8:  CLRF   1D
2EAA:  CLRF   1E
2EAC:  CLRF   1F
2EAE:  CLRF   20
2EB0:  CLRF   21
2EB2:  CLRF   22
2EB4:  CLRF   23
2EB6:  CLRF   24
2EB8:  CLRF   25
2EBA:  CLRF   26
2EBC:  CLRF   27
2EBE:  CLRF   28
2EC0:  CLRF   29
2EC2:  CLRF   2A
2EC4:  CLRF   2B
2EC6:  CLRF   2C
2EC8:  CLRF   2D
2ECA:  CLRF   2E
2ECC:  CLRF   2F
2ECE:  CLRF   30
2ED0:  CLRF   31
2ED2:  CLRF   32
2ED4:  CLRF   33
2ED6:  CLRF   34
2ED8:  CLRF   35
2EDA:  CLRF   36
2EDC:  CLRF   37
2EDE:  CLRF   38
2EE0:  CLRF   39
2EE2:  CLRF   3A
2EE4:  CLRF   3B
2EE6:  CLRF   3C
2EE8:  CLRF   3D
2EEA:  CLRF   3E
2EEC:  CLRF   3F
2EEE:  CLRF   40
2EF0:  CLRF   41
2EF2:  CLRF   42
2EF4:  CLRF   43
2EF6:  CLRF   44
2EF8:  CLRF   45
2EFA:  CLRF   46
2EFC:  CLRF   47
2EFE:  CLRF   48
2F00:  CLRF   49
2F02:  CLRF   4A
2F04:  CLRF   4B
2F06:  CLRF   4C
2F08:  CLRF   4D
2F0A:  CLRF   4E
2F0C:  CLRF   4F
2F0E:  CLRF   50
2F10:  CLRF   51
2F12:  CLRF   52
2F14:  CLRF   53
2F16:  CLRF   54
2F18:  CLRF   55
2F1A:  CLRF   56
2F1C:  CLRF   57
2F1E:  CLRF   58
2F20:  CLRF   59
2F22:  CLRF   5A
2F24:  CLRF   5B
2F26:  CLRF   5C
2F28:  CLRF   5D
2F2A:  CLRF   5E
2F2C:  CLRF   5F
2F2E:  CLRF   60
2F30:  CLRF   61
2F32:  CLRF   62
2F34:  CLRF   63
2F36:  CLRF   64
2F38:  CLRF   65
2F3A:  CLRF   66
2F3C:  CLRF   67
2F3E:  CLRF   68
2F40:  CLRF   69
2F42:  CLRF   6A
2F44:  CLRF   6B
2F46:  CLRF   6C
2F48:  CLRF   6D
2F4A:  CLRF   6E
2F4C:  CLRF   6F
2F4E:  CLRF   70
2F50:  CLRF   71
2F52:  CLRF   72
2F54:  CLRF   73
2F56:  CLRF   74
2F58:  CLRF   75
2F5A:  CLRF   76
2F5C:  CLRF   77
2F5E:  CLRF   78
2F60:  CLRF   79
2F62:  CLRF   7A
2F64:  CLRF   7B
2F66:  CLRF   7C
2F68:  CLRF   7D
2F6A:  CLRF   7E
2F6C:  CLRF   7F
2F6E:  MOVLB  0
2F70:  CLRF   x80
2F72:  CLRF   x81
2F74:  CLRF   x82
2F76:  CLRF   x83
2F78:  CLRF   x84
2F7A:  CLRF   x85
2F7C:  CLRF   x86
2F7E:  CLRF   x87
2F80:  CLRF   x88
2F82:  CLRF   x89
2F84:  CLRF   x8A
2F86:  CLRF   x8B
2F88:  CLRF   x8C
2F8A:  CLRF   x8D
2F8C:  CLRF   x8E
2F8E:  CLRF   x8F
2F90:  CLRF   x90
2F92:  CLRF   x91
2F94:  CLRF   x92
2F96:  CLRF   x93
2F98:  CLRF   x94
2F9A:  CLRF   x95
2F9C:  CLRF   x96
2F9E:  CLRF   x97
2FA0:  CLRF   x98
2FA2:  CLRF   x99
2FA4:  CLRF   x9A
2FA6:  CLRF   x9B
2FA8:  CLRF   x9C
2FAA:  CLRF   x9D
2FAC:  CLRF   x9E
2FAE:  CLRF   x9F
2FB0:  CLRF   xA0
2FB2:  CLRF   xA1
2FB4:  CLRF   xA2
2FB6:  CLRF   xA3
2FB8:  CLRF   xA4
2FBA:  CLRF   xA5
2FBC:  CLRF   xA6
2FBE:  CLRF   xA7
2FC0:  CLRF   xA8
2FC2:  CLRF   xA9
2FC4:  CLRF   xAA
2FC6:  CLRF   xAB
2FC8:  CLRF   xAC
2FCA:  CLRF   xAD
2FCC:  CLRF   xAE
2FCE:  CLRF   xAF
2FD0:  CLRF   xB0
2FD2:  CLRF   xB1
2FD4:  CLRF   xB2
2FD6:  CLRF   xB3
2FD8:  CLRF   xB4
2FDA:  CLRF   xB5
2FDC:  CLRF   xB6
2FDE:  CLRF   xB7
2FE0:  CLRF   xB8
2FE2:  CLRF   xB9
2FE4:  CLRF   xBA
2FE6:  CLRF   xBB
2FE8:  CLRF   xBC
2FEA:  CLRF   xBD
2FEC:  CLRF   xBE
2FEE:  CLRF   xBF
2FF0:  CLRF   xC0
2FF2:  CLRF   xC1
2FF4:  CLRF   xC2
2FF6:  CLRF   xC3
2FF8:  CLRF   xC4
2FFA:  CLRF   xC5
2FFC:  CLRF   xC6
2FFE:  CLRF   xC7
3000:  CLRF   xC8
3002:  CLRF   xC9
3004:  CLRF   xCA
3006:  CLRF   xCB
3008:  CLRF   xCC
300A:  CLRF   xCD
300C:  CLRF   xCE
300E:  CLRF   xCF
3010:  CLRF   xD0
3012:  CLRF   xD1
3014:  CLRF   xD2
3016:  CLRF   xD3
3018:  CLRF   xD4
301A:  CLRF   xD5
301C:  CLRF   xD6
301E:  CLRF   xD7
3020:  CLRF   xD8
3022:  CLRF   xD9
3024:  CLRF   xDA
3026:  CLRF   xDB
3028:  CLRF   xDC
302A:  CLRF   xDD
302C:  CLRF   xDE
302E:  CLRF   xDF
3030:  CLRF   xE0
3032:  CLRF   xE1
3034:  CLRF   xE2
3036:  CLRF   xE3
3038:  CLRF   xE4
303A:  CLRF   xE5
303C:  CLRF   xE6
303E:  CLRF   xE7
3040:  CLRF   xE8
3042:  CLRF   xE9
3044:  CLRF   xEA
3046:  CLRF   xEB
3048:  CLRF   xEC
304A:  CLRF   xED
304C:  CLRF   xEE
304E:  CLRF   xEF
3050:  CLRF   xF0
3052:  CLRF   xF1
3054:  CLRF   xF2
3056:  CLRF   xF3
3058:  CLRF   xF4
305A:  CLRF   xF5
305C:  CLRF   xF6
305E:  CLRF   xF7
3060:  CLRF   xF8
3062:  CLRF   xF9
3064:  CLRF   xFA
3066:  CLRF   xFB
3068:  CLRF   xFC
306A:  CLRF   xFD
306C:  CLRF   xFE
306E:  CLRF   xFF
3070:  MOVLB  1
3072:  CLRF   x00
3074:  CLRF   x01
3076:  CLRF   x02
3078:  CLRF   x03
307A:  CLRF   x04
307C:  CLRF   x05
307E:  CLRF   x06
3080:  CLRF   x07
3082:  CLRF   x08
3084:  CLRF   x09
3086:  CLRF   x0A
3088:  CLRF   x0B
308A:  CLRF   x0C
308C:  CLRF   x0D
308E:  CLRF   x0E
3090:  CLRF   x0F
3092:  CLRF   x10
3094:  CLRF   x11
3096:  CLRF   x12
3098:  CLRF   x13
309A:  CLRF   x14
309C:  CLRF   x15
309E:  CLRF   x16
30A0:  CLRF   x17
30A2:  CLRF   x18
30A4:  CLRF   x19
30A6:  CLRF   x1A
30A8:  CLRF   x1B
30AA:  CLRF   x1C
30AC:  CLRF   x1D
30AE:  CLRF   x1E
30B0:  CLRF   x1F
30B2:  CLRF   x20
30B4:  CLRF   x21
30B6:  CLRF   x22
30B8:  CLRF   x23
30BA:  CLRF   x24
30BC:  CLRF   x25
30BE:  CLRF   x26
30C0:  CLRF   x27
30C2:  CLRF   x28
30C4:  CLRF   x29
30C6:  CLRF   x2A
30C8:  CLRF   x2B
30CA:  CLRF   x2C
30CC:  CLRF   x2D
30CE:  CLRF   x2E
30D0:  CLRF   x2F
30D2:  CLRF   x30
30D4:  CLRF   x31
30D6:  CLRF   x32
30D8:  CLRF   x33
30DA:  CLRF   x34
30DC:  CLRF   x35
30DE:  CLRF   x36
30E0:  CLRF   x37
30E2:  CLRF   x38
30E4:  CLRF   x39
30E6:  CLRF   x3A
30E8:  CLRF   x3B
30EA:  CLRF   x3C
30EC:  CLRF   x3D
30EE:  CLRF   x3E
30F0:  CLRF   x3F
30F2:  CLRF   x40
30F4:  CLRF   x41
30F6:  CLRF   x42
30F8:  CLRF   x43
30FA:  CLRF   x44
30FC:  CLRF   x45
30FE:  CLRF   x46
3100:  CLRF   x47
3102:  CLRF   x48
3104:  CLRF   x49
3106:  CLRF   x4A
3108:  CLRF   x4B
310A:  CLRF   x4C
310C:  CLRF   x4D
310E:  CLRF   x4E
3110:  CLRF   x4F
3112:  CLRF   x50
3114:  CLRF   x51
3116:  CLRF   x52
3118:  CLRF   x53
311A:  CLRF   x54
311C:  CLRF   x55
311E:  CLRF   x56
3120:  CLRF   x57
3122:  CLRF   x58
3124:  CLRF   x59
3126:  CLRF   x5A
3128:  CLRF   x5B
312A:  CLRF   x5C
312C:  CLRF   x5D
312E:  CLRF   x5E
3130:  CLRF   x5F
3132:  CLRF   x60
3134:  CLRF   x61
3136:  CLRF   x62
3138:  CLRF   x63
313A:  CLRF   x64
313C:  CLRF   x65
313E:  CLRF   x66
3140:  CLRF   x67
3142:  CLRF   x68
3144:  CLRF   x69
3146:  CLRF   x6A
3148:  CLRF   x6B
314A:  CLRF   x6C
314C:  CLRF   x6D
314E:  CLRF   x6E
3150:  CLRF   x6F
3152:  CLRF   x70
3154:  CLRF   x71
3156:  CLRF   x72
3158:  CLRF   x73
315A:  CLRF   x74
315C:  CLRF   x75
315E:  CLRF   x76
3160:  CLRF   x77
3162:  CLRF   x78
3164:  CLRF   x79
3166:  CLRF   x7A
3168:  CLRF   x7B
316A:  CLRF   x7C
316C:  CLRF   x7D
316E:  CLRF   x7E
3170:  CLRF   x7F
3172:  CLRF   x80
3174:  CLRF   x81
3176:  CLRF   x82
3178:  CLRF   x83
317A:  CLRF   x84
317C:  CLRF   x85
317E:  CLRF   x86
3180:  CLRF   x87
3182:  CLRF   x88
3184:  CLRF   x89
3186:  CLRF   x8A
3188:  CLRF   x8B
318A:  CLRF   x8C
318C:  CLRF   x8D
318E:  CLRF   x8E
3190:  CLRF   x8F
3192:  CLRF   x90
3194:  CLRF   x91
3196:  CLRF   x92
3198:  CLRF   x93
319A:  CLRF   x94
319C:  CLRF   x95
319E:  CLRF   x96
31A0:  CLRF   x97
31A2:  CLRF   x98
31A4:  CLRF   x99
31A6:  CLRF   x9A
31A8:  CLRF   x9B
31AA:  CLRF   x9C
31AC:  CLRF   x9D
31AE:  CLRF   x9E
31B0:  CLRF   x9F
31B2:  CLRF   xA0
31B4:  CLRF   xA1
31B6:  CLRF   xA2
31B8:  CLRF   xA3
31BA:  CLRF   xA4
31BC:  CLRF   xA5
31BE:  CLRF   xA6
31C0:  CLRF   xA7
31C2:  CLRF   xA8
31C4:  CLRF   xA9
31C6:  CLRF   xAA
31C8:  CLRF   xAB
31CA:  CLRF   xAC
31CC:  CLRF   xAD
31CE:  CLRF   xAE
31D0:  CLRF   xAF
31D2:  CLRF   xB0
31D4:  CLRF   xB1
31D6:  CLRF   xB2
31D8:  CLRF   xB3
31DA:  CLRF   xB4
31DC:  CLRF   xB5
31DE:  CLRF   xB6
31E0:  CLRF   xB7
31E2:  CLRF   xB8
31E4:  CLRF   xB9
31E6:  CLRF   xBA
31E8:  CLRF   xBB
31EA:  CLRF   xBC
31EC:  CLRF   xBD
31EE:  CLRF   xBE
31F0:  CLRF   xBF
31F2:  CLRF   xC0
31F4:  CLRF   xC1
31F6:  CLRF   xC2
31F8:  CLRF   xC3
31FA:  CLRF   xC4
31FC:  CLRF   xC5
31FE:  CLRF   xC6
3200:  CLRF   xC7
3202:  CLRF   xC8
3204:  CLRF   xC9
3206:  CLRF   xCA
3208:  CLRF   xCB
320A:  CLRF   xCC
320C:  CLRF   xCD
320E:  CLRF   xCE
3210:  CLRF   xCF
3212:  CLRF   xD0
3214:  CLRF   xD1
3216:  CLRF   xD2
3218:  CLRF   xD3
321A:  CLRF   xD4
321C:  CLRF   xD5
321E:  CLRF   xD6
3220:  CLRF   xD7
3222:  CLRF   xD8
3224:  CLRF   xD9
3226:  CLRF   xDA
3228:  CLRF   xDB
322A:  CLRF   xDC
322C:  CLRF   xDD
322E:  CLRF   xDE
3230:  CLRF   xDF
3232:  CLRF   xE0
3234:  CLRF   xE1
3236:  CLRF   xE2
3238:  CLRF   xE3
323A:  CLRF   xE4
323C:  CLRF   xE5
323E:  CLRF   xE6
3240:  CLRF   xE7
3242:  CLRF   xE8
3244:  CLRF   xE9
3246:  CLRF   xEA
3248:  CLRF   xEB
324A:  CLRF   xEC
324C:  CLRF   xED
324E:  CLRF   xEE
3250:  CLRF   xEF
3252:  CLRF   xF0
3254:  CLRF   xF1
3256:  CLRF   xF2
3258:  CLRF   xF3
325A:  CLRF   xF4
325C:  CLRF   xF5
325E:  CLRF   xF6
3260:  CLRF   xF7
3262:  CLRF   xF8
3264:  CLRF   xF9
3266:  CLRF   xFA
3268:  CLRF   xFB
326A:  CLRF   xFC
326C:  CLRF   xFD
326E:  CLRF   xFE
3270:  CLRF   xFF
3272:  MOVLB  2
3274:  CLRF   x00
3276:  CLRF   x01
3278:  CLRF   x02
327A:  CLRF   x03
327C:  CLRF   x04
327E:  CLRF   x05
3280:  CLRF   x06
3282:  CLRF   x07
3284:  CLRF   x08
3286:  CLRF   x09
3288:  CLRF   x0A
328A:  CLRF   x0B
328C:  CLRF   x0C
328E:  CLRF   x0D
3290:  CLRF   x0E
3292:  CLRF   x0F
3294:  CLRF   x10
3296:  CLRF   x11
3298:  CLRF   x12
329A:  CLRF   x13
329C:  CLRF   x14
329E:  CLRF   x15
32A0:  CLRF   x16
32A2:  CLRF   x17
32A4:  CLRF   x18
32A6:  CLRF   x19
32A8:  CLRF   x1A
32AA:  CLRF   x1B
32AC:  CLRF   x1C
32AE:  CLRF   x1D
32B0:  CLRF   x1E
32B2:  CLRF   x1F
32B4:  CLRF   x20
32B6:  CLRF   x21
32B8:  CLRF   x22
32BA:  CLRF   x23
32BC:  CLRF   x24
32BE:  CLRF   x25
32C0:  CLRF   x26
32C2:  CLRF   x27
32C4:  CLRF   x28
32C6:  CLRF   x29
32C8:  CLRF   x2A
32CA:  CLRF   x2B
32CC:  CLRF   x2C
32CE:  CLRF   x2D
32D0:  CLRF   x2E
32D2:  CLRF   x2F
32D4:  CLRF   x30
32D6:  CLRF   x31
32D8:  CLRF   x32
32DA:  CLRF   x33
32DC:  CLRF   x34
32DE:  CLRF   x35
32E0:  CLRF   x36
32E2:  CLRF   x37
32E4:  CLRF   x38
32E6:  CLRF   x39
32E8:  CLRF   x3A
32EA:  CLRF   x3B
32EC:  CLRF   x3C
32EE:  CLRF   x3D
32F0:  CLRF   x3E
32F2:  CLRF   x3F
32F4:  CLRF   x40
32F6:  CLRF   x41
32F8:  CLRF   x42
32FA:  CLRF   x43
32FC:  CLRF   x44
32FE:  CLRF   x45
3300:  CLRF   x46
3302:  CLRF   x47
3304:  CLRF   x48
3306:  CLRF   x49
3308:  CLRF   x4A
330A:  CLRF   x4B
330C:  CLRF   x4C
330E:  CLRF   x4D
3310:  CLRF   x4E
3312:  CLRF   x4F
3314:  CLRF   x50
3316:  CLRF   x51
3318:  CLRF   x52
331A:  CLRF   x53
331C:  CLRF   x54
331E:  CLRF   x55
3320:  CLRF   x56
3322:  CLRF   x57
3324:  CLRF   x58
3326:  CLRF   x59
3328:  CLRF   x5A
332A:  CLRF   x5B
332C:  CLRF   x5C
332E:  CLRF   x5D
3330:  CLRF   x5E
3332:  CLRF   x5F
3334:  CLRF   x60
3336:  CLRF   x61
3338:  CLRF   x62
333A:  CLRF   x63
333C:  CLRF   x64
333E:  CLRF   x65
3340:  CLRF   x66
3342:  CLRF   x67
3344:  CLRF   x68
3346:  CLRF   x69
3348:  CLRF   x6A
334A:  CLRF   x6B
334C:  CLRF   x6C
334E:  CLRF   x6D
3350:  CLRF   x6E
3352:  CLRF   x6F
3354:  CLRF   x70
3356:  CLRF   x71
3358:  CLRF   x72
335A:  CLRF   x73
335C:  CLRF   x74
335E:  CLRF   x75
3360:  CLRF   x76
3362:  CLRF   x77
3364:  CLRF   x78
3366:  CLRF   x79
3368:  CLRF   x7A
336A:  CLRF   x7B
336C:  CLRF   x7C
336E:  CLRF   x7D
3370:  CLRF   x7E
3372:  CLRF   x7F
3374:  CLRF   x80
3376:  CLRF   x81
3378:  CLRF   x82
337A:  CLRF   x83
337C:  CLRF   x84
337E:  CLRF   x85
3380:  CLRF   x86
3382:  CLRF   x87
3384:  CLRF   x88
3386:  CLRF   x89
3388:  CLRF   x8A
338A:  CLRF   x8B
338C:  CLRF   x8C
338E:  CLRF   x8D
3390:  CLRF   x8E
3392:  CLRF   x8F
3394:  CLRF   x90
3396:  CLRF   x91
3398:  CLRF   x92
339A:  CLRF   x93
339C:  CLRF   x94
339E:  CLRF   x95
33A0:  CLRF   x96
33A2:  CLRF   x97
33A4:  CLRF   x98
33A6:  CLRF   x99
33A8:  CLRF   x9A
33AA:  CLRF   x9B
33AC:  CLRF   x9C
33AE:  CLRF   x9D
33B0:  CLRF   x9E
33B2:  CLRF   x9F
33B4:  CLRF   xA0
33B6:  CLRF   xA1
33B8:  CLRF   xA2
33BA:  CLRF   xA3
33BC:  CLRF   xA4
33BE:  CLRF   xA5
33C0:  CLRF   xA6
33C2:  CLRF   xA7
33C4:  CLRF   xA8
33C6:  CLRF   xA9
33C8:  CLRF   xAA
33CA:  CLRF   xAB
33CC:  CLRF   xAC
33CE:  CLRF   xAD
33D0:  CLRF   xAE
33D2:  CLRF   xAF
33D4:  CLRF   xB0
33D6:  CLRF   xB1
33D8:  CLRF   xB2
33DA:  CLRF   xB3
33DC:  CLRF   xB4
33DE:  CLRF   xB5
33E0:  CLRF   xB6
33E2:  CLRF   xB7
33E4:  CLRF   xB8
33E6:  CLRF   xB9
33E8:  CLRF   xBA
33EA:  CLRF   xBB
33EC:  CLRF   xBC
33EE:  CLRF   xBD
33F0:  CLRF   xBE
33F2:  CLRF   xBF
33F4:  CLRF   xC0
33F6:  CLRF   xC1
33F8:  CLRF   xC2
33FA:  CLRF   xC3
33FC:  CLRF   xC4
33FE:  CLRF   xC5
3400:  CLRF   xC6
3402:  CLRF   xC7
3404:  CLRF   xC8
3406:  CLRF   xC9
3408:  CLRF   xCA
340A:  CLRF   xCB
340C:  CLRF   xCC
340E:  CLRF   xCD
3410:  CLRF   xCE
3412:  CLRF   xCF
3414:  CLRF   xD0
3416:  CLRF   xD1
3418:  CLRF   xD2
341A:  CLRF   xD3
341C:  CLRF   xD4
341E:  CLRF   xD5
3420:  CLRF   xD6
3422:  CLRF   xD7
3424:  CLRF   xD8
3426:  CLRF   xD9
3428:  CLRF   xDA
342A:  CLRF   xDB
342C:  CLRF   xDC
342E:  CLRF   xDD
3430:  CLRF   xDE
3432:  CLRF   xDF
3434:  CLRF   xE0
3436:  CLRF   xE1
3438:  CLRF   xE2
343A:  CLRF   xE3
343C:  CLRF   xE4
343E:  CLRF   xE5
3440:  CLRF   xE6
3442:  CLRF   xE7
3444:  CLRF   xE8
3446:  CLRF   xE9
3448:  CLRF   xEA
344A:  CLRF   xEB
344C:  CLRF   xEC
344E:  CLRF   xED
3450:  CLRF   xEE
3452:  CLRF   xEF
3454:  CLRF   xF0
3456:  CLRF   xF1
3458:  CLRF   xF2
345A:  CLRF   xF3
345C:  CLRF   xF4
345E:  CLRF   xF5
3460:  CLRF   xF6
3462:  CLRF   xF7
3464:  CLRF   xF8
3466:  CLRF   xF9
3468:  CLRF   xFA
346A:  CLRF   xFB
346C:  CLRF   xFC
346E:  CLRF   xFD
3470:  CLRF   xFE
3472:  CLRF   xFF
3474:  MOVLB  3
3476:  CLRF   x00
3478:  CLRF   x01
347A:  CLRF   x02
347C:  CLRF   x03
347E:  CLRF   x04
3480:  CLRF   x05
3482:  CLRF   x06
3484:  CLRF   x07
3486:  CLRF   x08
3488:  CLRF   x09
348A:  CLRF   x0A
348C:  CLRF   x0B
348E:  CLRF   x0C
3490:  CLRF   x0D
3492:  CLRF   x0E
3494:  CLRF   x0F
3496:  CLRF   x10
3498:  CLRF   x11
349A:  CLRF   x12
349C:  CLRF   x13
349E:  CLRF   x14
34A0:  CLRF   x15
34A2:  CLRF   x16
34A4:  CLRF   x17
34A6:  CLRF   x18
34A8:  CLRF   x19
34AA:  CLRF   x1A
34AC:  CLRF   x1B
34AE:  CLRF   x1C
34B0:  CLRF   x1D
34B2:  CLRF   x1E
34B4:  CLRF   x1F
34B6:  CLRF   x20
34B8:  CLRF   x21
34BA:  CLRF   x22
34BC:  CLRF   x23
34BE:  CLRF   x24
34C0:  CLRF   x25
34C2:  CLRF   x26
34C4:  CLRF   x27
34C6:  CLRF   x28
34C8:  CLRF   x29
34CA:  CLRF   x2A
34CC:  CLRF   x2B
34CE:  CLRF   x2C
34D0:  CLRF   x2D
34D2:  CLRF   x2E
34D4:  CLRF   x2F
34D6:  CLRF   x30
34D8:  CLRF   x31
34DA:  CLRF   x32
34DC:  CLRF   x33
34DE:  CLRF   x34
34E0:  CLRF   x35
34E2:  CLRF   x36
34E4:  CLRF   x37
34E6:  CLRF   x38
34E8:  CLRF   x39
34EA:  CLRF   x3A
34EC:  CLRF   x3B
34EE:  CLRF   x3C
34F0:  CLRF   x3D
34F2:  CLRF   x3E
34F4:  CLRF   x3F
34F6:  CLRF   x40
34F8:  CLRF   x41
34FA:  CLRF   x42
34FC:  CLRF   x43
34FE:  CLRF   x44
3500:  CLRF   x45
3502:  CLRF   x46
3504:  CLRF   x47
3506:  CLRF   x48
3508:  CLRF   x49
350A:  CLRF   x4A
350C:  CLRF   x4B
350E:  CLRF   x4C
3510:  CLRF   x4D
3512:  CLRF   x4E
3514:  CLRF   x4F
3516:  CLRF   x50
3518:  CLRF   x51
351A:  CLRF   x52
351C:  CLRF   x53
351E:  CLRF   x54
3520:  CLRF   x55
3522:  CLRF   x56
3524:  CLRF   x57
3526:  CLRF   x58
3528:  CLRF   x59
352A:  CLRF   x5A
352C:  CLRF   x5B
352E:  CLRF   x5C
3530:  CLRF   x5D
3532:  CLRF   x5E
3534:  CLRF   x5F
3536:  CLRF   x60
3538:  CLRF   x61
353A:  CLRF   x62
353C:  CLRF   x63
353E:  CLRF   x64
3540:  CLRF   x65
3542:  CLRF   x66
3544:  CLRF   x67
3546:  CLRF   x68
3548:  CLRF   x69
354A:  CLRF   x6A
354C:  CLRF   x6B
354E:  CLRF   x6C
3550:  CLRF   x6D
3552:  CLRF   x6E
3554:  CLRF   x6F
3556:  CLRF   x70
3558:  CLRF   x71
355A:  CLRF   x72
355C:  CLRF   x73
355E:  CLRF   x74
3560:  CLRF   x75
3562:  CLRF   x76
3564:  CLRF   x77
3566:  CLRF   x78
3568:  CLRF   x79
356A:  CLRF   x7A
356C:  CLRF   x7B
356E:  CLRF   x7C
3570:  CLRF   x7D
3572:  CLRF   x7E
3574:  CLRF   x7F
3576:  CLRF   x80
3578:  CLRF   x81
357A:  CLRF   x82
357C:  CLRF   x83
357E:  CLRF   x84
3580:  CLRF   x85
3582:  CLRF   x86
3584:  CLRF   x87
3586:  CLRF   x88
3588:  CLRF   x89
358A:  CLRF   x8A
358C:  CLRF   x8B
358E:  CLRF   x8C
3590:  CLRF   x8D
3592:  CLRF   x8E
3594:  CLRF   x8F
3596:  CLRF   x90
3598:  CLRF   x91
359A:  CLRF   x92
359C:  CLRF   x93
359E:  CLRF   x94
35A0:  CLRF   x95
35A2:  CLRF   x96
35A4:  CLRF   x97
35A6:  CLRF   x98
35A8:  CLRF   x99
35AA:  CLRF   x9A
35AC:  CLRF   x9B
35AE:  CLRF   x9C
35B0:  CLRF   x9D
35B2:  CLRF   x9E
35B4:  CLRF   x9F
35B6:  CLRF   xA0
35B8:  CLRF   xA1
35BA:  CLRF   xA2
35BC:  CLRF   xA3
35BE:  CLRF   xA4
35C0:  CLRF   xA5
35C2:  CLRF   xA6
35C4:  CLRF   xA7
35C6:  CLRF   xA8
35C8:  CLRF   xA9
35CA:  CLRF   xAA
35CC:  CLRF   xAB
35CE:  CLRF   xAC
35D0:  CLRF   xAD
35D2:  CLRF   xAE
35D4:  CLRF   xAF
35D6:  CLRF   xB0
35D8:  CLRF   xB1
35DA:  CLRF   xB2
35DC:  CLRF   xB3
35DE:  CLRF   xB4
35E0:  CLRF   xB5
35E2:  CLRF   xB6
35E4:  CLRF   xB7
35E6:  CLRF   xB8
35E8:  CLRF   xB9
35EA:  CLRF   xBA
35EC:  CLRF   xBB
35EE:  CLRF   xBC
35F0:  CLRF   xBD
35F2:  CLRF   xBE
35F4:  CLRF   xBF
35F6:  CLRF   xC0
35F8:  CLRF   xC1
35FA:  CLRF   xC2
35FC:  CLRF   xC3
35FE:  CLRF   xC4
3600:  CLRF   xC5
3602:  BCF    xC6.0
3604:  CLRF   xC8
3606:  CLRF   xC9
3608:  CLRF   xCA
360A:  CLRF   xCB
360C:  CLRF   xCC
360E:  CLRF   xCD
3610:  CLRF   xCE
3612:  CLRF   xCF
3614:  CLRF   xD0
3616:  CLRF   xD1
3618:  CLRF   xD2
361A:  CLRF   xD3
361C:  CLRF   xD4
361E:  CLRF   xD5
3620:  CLRF   xD6
3622:  CLRF   xD7
3624:  CLRF   xD8
3626:  CLRF   xD9
3628:  CLRF   xDA
362A:  CLRF   xDB
362C:  CLRF   xDC
362E:  CLRF   xDD
3630:  CLRF   xDE
3632:  CLRF   xDF
3634:  CLRF   xE0
3636:  CLRF   xE1
3638:  CLRF   xE2
363A:  CLRF   xE3
363C:  CLRF   xE4
363E:  CLRF   xE5
3640:  CLRF   xE6
3642:  CLRF   xE7
3644:  CLRF   xE8
3646:  CLRF   xE9
3648:  CLRF   xEA
364A:  CLRF   xEB
364C:  CLRF   xEC
364E:  CLRF   xF0
3650:  CLRF   xF1
3652:  CLRF   xF2
3654:  CLRF   xF3
3656:  CLRF   xF4
3658:  CLRF   xF5
365A:  CLRF   xF6
365C:  CLRF   xF7
365E:  CLRF   xF8
3660:  CLRF   xF9
3662:  CLRF   xFA
3664:  CLRF   xFB
3666:  CLRF   xFC
3668:  CLRF   xFD
366A:  CLRF   xFE
366C:  CLRF   xFF
366E:  MOVLB  4
3670:  CLRF   x00
3672:  CLRF   x01
3674:  CLRF   x02
3676:  CLRF   x03
3678:  CLRF   x04
367A:  CLRF   x05
367C:  CLRF   x06
367E:  CLRF   x07
3680:  CLRF   x08
3682:  CLRF   x09
3684:  CLRF   x0A
3686:  CLRF   x0B
3688:  CLRF   x0C
368A:  CLRF   x0D
368C:  CLRF   x0E
368E:  CLRF   x0F
3690:  CLRF   x10
3692:  CLRF   x11
3694:  CLRF   x12
3696:  CLRF   x13
3698:  CLRF   x14
369A:  CLRF   x15
369C:  CLRF   x16
369E:  CLRF   x17
36A0:  CLRF   x18
36A2:  CLRF   x19
36A4:  CLRF   x1A
36A6:  CLRF   x1B
36A8:  CLRF   x1C
36AA:  CLRF   x1D
36AC:  CLRF   x1E
36AE:  CLRF   x1F
36B0:  CLRF   x20
36B2:  CLRF   x21
36B4:  CLRF   x22
36B6:  CLRF   x23
36B8:  CLRF   x24
36BA:  CLRF   x25
36BC:  CLRF   x26
36BE:  CLRF   x27
36C0:  CLRF   x28
36C2:  CLRF   x29
36C4:  CLRF   x2A
36C6:  CLRF   x2B
36C8:  CLRF   x2C
36CA:  CLRF   x2D
36CC:  CLRF   x2E
36CE:  CLRF   x2F
36D0:  CLRF   x30
36D2:  CLRF   x31
36D4:  CLRF   x32
36D6:  CLRF   x33
36D8:  CLRF   x34
36DA:  CLRF   x35
36DC:  CLRF   x36
36DE:  CLRF   x37
36E0:  CLRF   x38
36E2:  CLRF   x39
36E4:  CLRF   x3A
36E6:  CLRF   x3B
36E8:  CLRF   x3C
36EA:  CLRF   x3D
36EC:  CLRF   x3E
36EE:  CLRF   x3F
36F0:  CLRF   x40
36F2:  CLRF   x41
36F4:  CLRF   x42
36F6:  CLRF   x43
36F8:  CLRF   x44
36FA:  CLRF   x45
36FC:  CLRF   x46
36FE:  CLRF   x47
3700:  CLRF   x48
3702:  CLRF   x49
3704:  CLRF   x4A
3706:  CLRF   x4B
3708:  CLRF   x4C
370A:  CLRF   x4D
370C:  CLRF   x4E
370E:  CLRF   x4F
3710:  CLRF   x50
3712:  CLRF   x51
3714:  CLRF   x52
3716:  CLRF   x53
3718:  CLRF   x54
371A:  CLRF   x55
371C:  CLRF   x56
371E:  CLRF   x57
3720:  CLRF   x58
3722:  CLRF   x59
3724:  CLRF   x5A
3726:  CLRF   x5B
3728:  CLRF   x5C
372A:  CLRF   x5D
372C:  CLRF   x5E
372E:  CLRF   x5F
3730:  CLRF   x60
3732:  CLRF   x61
3734:  CLRF   x62
3736:  CLRF   x63
3738:  CLRF   x64
373A:  CLRF   x65
373C:  CLRF   x66
373E:  CLRF   x67
3740:  CLRF   x68
3742:  CLRF   x69
3744:  CLRF   x6A
3746:  CLRF   x6B
3748:  CLRF   x6C
374A:  CLRF   x6D
374C:  CLRF   x6E
374E:  CLRF   x6F
3750:  CLRF   x70
3752:  CLRF   x71
3754:  CLRF   x72
3756:  CLRF   x73
3758:  CLRF   x74
375A:  CLRF   x75
375C:  CLRF   x76
375E:  CLRF   x77
3760:  CLRF   x78
3762:  CLRF   x79
3764:  CLRF   x7A
3766:  CLRF   x7B
3768:  CLRF   x7C
376A:  CLRF   x7D
376C:  CLRF   x7E
376E:  CLRF   x7F
3770:  CLRF   x80
3772:  CLRF   x81
3774:  CLRF   x82
3776:  CLRF   x83
3778:  CLRF   x84
377A:  CLRF   x85
377C:  CLRF   x86
377E:  CLRF   x87
3780:  CLRF   x88
3782:  CLRF   x89
3784:  CLRF   x8A
3786:  CLRF   x8B
3788:  CLRF   x8C
378A:  CLRF   x8D
378C:  CLRF   x8E
378E:  CLRF   x8F
3790:  CLRF   x90
3792:  CLRF   x91
3794:  CLRF   x92
3796:  CLRF   x93
3798:  CLRF   x94
379A:  CLRF   x95
379C:  CLRF   x96
379E:  CLRF   x97
37A0:  CLRF   x98
37A2:  CLRF   x99
37A4:  CLRF   x9A
37A6:  CLRF   x9B
37A8:  CLRF   x9C
37AA:  CLRF   x9D
37AC:  CLRF   x9E
37AE:  CLRF   x9F
37B0:  CLRF   xA0
37B2:  CLRF   xA1
37B4:  CLRF   xA2
37B6:  CLRF   xA3
37B8:  CLRF   xA4
37BA:  CLRF   xA5
37BC:  CLRF   xA6
37BE:  CLRF   xA7
37C0:  CLRF   xA8
37C2:  CLRF   xA9
37C4:  CLRF   xAA
37C6:  CLRF   xAB
37C8:  CLRF   xAC
37CA:  CLRF   xAD
37CC:  CLRF   xAE
37CE:  CLRF   xAF
37D0:  CLRF   xB0
37D2:  CLRF   xB1
37D4:  CLRF   xB2
37D6:  CLRF   xB3
37D8:  CLRF   xB4
37DA:  CLRF   xB5
37DC:  CLRF   xB6
37DE:  CLRF   xB7
37E0:  CLRF   xB8
37E2:  CLRF   xB9
37E4:  CLRF   xBA
37E6:  CLRF   xBB
37E8:  CLRF   xBC
37EA:  CLRF   xBD
37EC:  CLRF   xBE
37EE:  CLRF   xBF
37F0:  CLRF   xC0
37F2:  CLRF   xC1
37F4:  CLRF   xC2
37F6:  CLRF   xC3
37F8:  CLRF   xC4
37FA:  CLRF   xC5
37FC:  CLRF   xC6
37FE:  CLRF   xC7
3800:  CLRF   xC8
3802:  CLRF   xC9
3804:  CLRF   xCA
3806:  CLRF   xCB
3808:  CLRF   xCC
380A:  CLRF   xCD
380C:  CLRF   xCE
380E:  CLRF   xCF
3810:  CLRF   xD0
3812:  CLRF   xD1
3814:  CLRF   xD2
3816:  CLRF   xD3
3818:  CLRF   xD4
381A:  CLRF   xD5
381C:  CLRF   xD6
381E:  CLRF   xD7
3820:  CLRF   xD8
3822:  CLRF   xD9
3824:  CLRF   xDA
3826:  CLRF   xDB
3828:  CLRF   xDC
382A:  CLRF   xDD
382C:  CLRF   xDE
382E:  CLRF   xDF
3830:  CLRF   xE0
3832:  CLRF   xE1
3834:  CLRF   xE2
3836:  CLRF   xE3
3838:  CLRF   xE4
383A:  CLRF   xE5
383C:  CLRF   xE6
383E:  CLRF   xE7
3840:  CLRF   xE8
3842:  CLRF   xE9
3844:  CLRF   xEA
3846:  CLRF   xEB
3848:  CLRF   xEC
384A:  CLRF   xED
384C:  CLRF   xEE
384E:  CLRF   xEF
3850:  CLRF   xF1
3852:  CLRF   xF2
3854:  CLRF   xF3
3856:  CLRF   xF4
3858:  CLRF   xF5
385A:  CLRF   xF6
385C:  CLRF   xF7
385E:  CLRF   xF8
3860:  CLRF   xF9
3862:  CLRF   xFA
3864:  CLRF   xFB
3866:  CLRF   xFC
3868:  CLRF   xFE
386A:  CLRF   xFD
386C:  MOVLB  5
386E:  CLRF   x06
3870:  CLRF   x05
3872:  CLRF   x04
3874:  CLRF   x03
3876:  MOVLW  01
3878:  MOVWF  x0F
387A:  MOVLW  FF
387C:  MOVWF  x0E
387E:  CLRF   x13
3880:  MOVLW  01
3882:  MOVWF  x12
.................... 	//addition variables 
.................... 	int16 maxCycles = 0; 
.................... 	int16 cnt; 
.................... 	int16 ADC0;	//current ADC value 
.................... 	int32 Wrk0 = 0;	//sum mean value 
.................... 	int16 StorAddr;	//storage address 
.................... 	int8 OutBufAddr;	//out buffer address 
.................... 	int32 Sum; 
.................... 	int16 BetTrsh = 0x01ff; //beta treshold 
.................... 	int16 bet_cur; //current beta value 
.................... 	int16 filterWidth = 1; 
.................... 	int16 sawLevel; 
....................  
.................... 	InitMcu();		//mcu init 
3884:  MOVLB  0
3886:  GOTO   1ED8
.................... 	BURead();		//read registers from EE 
388A:  GOTO   1F76
.................... 	RsInit(); 
388E:  GOTO   244C
....................  
.................... 	//interrupt configuration 
.................... 	enable_interrupts(INT_RDA); 
3892:  BSF    F9D.5
.................... 	disable_interrupts(INT_TIMER1); 
3894:  BCF    F9D.0
.................... 	enable_interrupts(GLOBAL); 
3896:  MOVLW  C0
3898:  IORWF  FF2,F
....................  
.................... 	output_high(TERMO); 
389A:  BCF    F96.1
389C:  BSF    F8D.1
....................  
.................... 	DaqState = DaqStart; 
389E:  MOVLW  01
38A0:  MOVLB  3
38A2:  MOVWF  xEF
.................... 	//main cycle 
.................... 	while (TRUE) 
.................... 	{ 
.................... 		restart_wdt(); 
38A4:  CLRWDT
.................... 		//state procesor 
.................... 		switch (DaqState) 
.................... 		{ 
38A6:  MOVF   xEF,W
38A8:  ADDLW  FC
38AA:  BTFSC  FD8.0
38AC:  GOTO   409A
38B0:  ADDLW  04
38B2:  MOVLB  0
38B4:  GOTO   409E
.................... 		case DaqIdle: 
.................... 			Termometer(); 
38B8:  CALL   2712
.................... 			//wait for state changing 
.................... 			break; 
38BC:  MOVLB  3
38BE:  GOTO   409A
....................  
.................... 		case DaqStart: 
.................... 			//prepare for measuring 
.................... 			bet_cur = 0;		//reset beta value 
38C2:  MOVLB  5
38C4:  CLRF   x11
38C6:  CLRF   x10
....................  
.................... 			//set input amplifiers 
.................... 			SetKU0(AmpCoef0); 
38C8:  MOVFF  3AB,51A
38CC:  MOVFF  3AA,519
38D0:  MOVLB  0
38D2:  GOTO   2888
.................... 			SetKU1(AmpCoef1); 
38D6:  MOVFF  3B7,51A
38DA:  MOVFF  3B6,519
38DE:  GOTO   2904
....................  
.................... 			//filtering window setup 
.................... 			if (FWDT > 0 && FWDT < 7) 
38E2:  MOVLB  3
38E4:  MOVF   xC2,F
38E6:  BNZ   38EC
38E8:  MOVF   xC3,F
38EA:  BZ    391C
38EC:  MOVF   xC3,F
38EE:  BNZ   391C
38F0:  MOVF   xC2,W
38F2:  SUBLW  06
38F4:  BNC   391C
.................... 			{ 
.................... 				filterWidth = (int16)(0x0001 << FWDT); //power 2 for FWDT factor 
38F6:  MOVLB  5
38F8:  CLRF   x13
38FA:  MOVLW  01
38FC:  MOVWF  x12
38FE:  MOVLB  3
3900:  MOVF   xC2,W
3902:  MOVWF  00
3904:  BZ    391A
3906:  BCF    FD8.0
3908:  MOVLB  5
390A:  RLCF   x12,F
390C:  RLCF   x13,F
390E:  DECFSZ 00,F
3910:  BRA    3914
3912:  BRA    3918
3914:  MOVLB  3
3916:  BRA    3906
3918:  MOVLB  3
.................... 			} 
.................... 			else 
391A:  BRA    3924
.................... 				filterWidth = 1; 
391C:  MOVLB  5
391E:  CLRF   x13
3920:  MOVLW  01
3922:  MOVWF  x12
....................  
.................... 			//zero buffers & variables 
.................... 			for (cnt = 0; cnt < filterWidth; cnt++) 
3924:  MOVLB  5
3926:  CLRF   x00
3928:  MOVLB  4
392A:  CLRF   xFF
392C:  MOVLB  5
392E:  MOVF   x00,W
3930:  SUBWF  x13,W
3932:  BNC   3978
3934:  BNZ   3946
3936:  MOVF   x12,W
3938:  MOVLB  4
393A:  SUBWF  xFF,W
393C:  BTFSS  FD8.0
393E:  BRA    3944
3940:  MOVLB  5
3942:  BRA    3978
3944:  MOVLB  5
.................... 			{ 
.................... 				data_filt0[cnt] = 0;	//clear buffer 
3946:  BCF    FD8.0
3948:  MOVLB  4
394A:  RLCF   xFF,W
394C:  MOVWF  02
394E:  MOVLB  5
3950:  RLCF   x00,W
3952:  MOVWF  03
3954:  MOVF   02,W
3956:  ADDLW  1A
3958:  MOVWF  FE9
395A:  MOVLW  00
395C:  ADDWFC 03,W
395E:  MOVWF  FEA
3960:  CLRF   FEC
3962:  MOVF   FED,F
3964:  CLRF   FEF
.................... 			} 
3966:  MOVLB  4
3968:  INCF   xFF,F
396A:  BTFSS  FD8.2
396C:  BRA    3974
396E:  MOVLB  5
3970:  INCF   x00,F
3972:  MOVLB  4
3974:  BRA    392C
3976:  MOVLB  5
....................  
.................... 			StorAddr = 0; 
3978:  CLRF   x08
397A:  CLRF   x07
.................... 			OutBufAddr = 0; 
397C:  CLRF   x09
.................... 			iWin = 0; 
397E:  MOVLB  3
3980:  CLRF   xE0
.................... 			iMaxFall0 = 0; 
3982:  MOVLB  0
3984:  CLRF   xA3
3986:  CLRF   xA2
.................... 			iMaxRise0 = 0; 
3988:  CLRF   x9F
398A:  CLRF   x9E
.................... 			maxFall0 = 0; 
398C:  CLRF   xA1
398E:  CLRF   xA0
.................... 			maxRise0 = 0; 
3990:  CLRF   x9D
3992:  CLRF   x9C
.................... 			data_mean0 = 0; 
3994:  CLRF   x9B
3996:  CLRF   x9A
....................  
.................... 			//DAC parameters initialization 
.................... 			sawStartLevel = (int16)(((float)SAW_A0 / 1000) * volts2dac); //convert to ADC discretes 
3998:  MOVFF  3CB,51A
399C:  MOVFF  3CA,519
39A0:  CALL   2980
39A4:  MOVFF  00,516
39A8:  MOVFF  01,517
39AC:  MOVFF  02,518
39B0:  MOVFF  03,519
39B4:  MOVFF  03,520
39B8:  MOVFF  02,51F
39BC:  MOVFF  01,51E
39C0:  MOVFF  00,51D
39C4:  MOVLB  5
39C6:  CLRF   x24
39C8:  CLRF   x23
39CA:  MOVLW  7A
39CC:  MOVWF  x22
39CE:  MOVLW  88
39D0:  MOVWF  x21
39D2:  MOVLB  0
39D4:  CALL   29B6
39D8:  MOVFF  00,516
39DC:  MOVFF  01,517
39E0:  MOVFF  02,518
39E4:  MOVFF  03,519
39E8:  MOVFF  03,521
39EC:  MOVFF  02,520
39F0:  MOVFF  01,51F
39F4:  MOVFF  00,51E
39F8:  MOVLW  CD
39FA:  MOVLB  5
39FC:  MOVWF  x25
39FE:  MOVLW  CC
3A00:  MOVWF  x24
3A02:  MOVLW  4C
3A04:  MOVWF  x23
3A06:  MOVLW  86
3A08:  MOVWF  x22
3A0A:  MOVLB  0
3A0C:  CALL   25E0
3A10:  MOVFF  03,51E
3A14:  MOVFF  02,51D
3A18:  MOVFF  01,51C
3A1C:  MOVFF  00,51B
3A20:  CALL   26D6
3A24:  MOVFF  02,3CD
3A28:  MOVFF  01,3CC
....................  
.................... 			sawEndLevel = sawStartLevel 
.................... 				+ (int16)(((float)SAW_A1 / 1000) * volts2dac); 
3A2C:  MOVFF  3CF,51A
3A30:  MOVFF  3CE,519
3A34:  CALL   2980
3A38:  MOVFF  00,516
3A3C:  MOVFF  01,517
3A40:  MOVFF  02,518
3A44:  MOVFF  03,519
3A48:  MOVFF  03,520
3A4C:  MOVFF  02,51F
3A50:  MOVFF  01,51E
3A54:  MOVFF  00,51D
3A58:  MOVLB  5
3A5A:  CLRF   x24
3A5C:  CLRF   x23
3A5E:  MOVLW  7A
3A60:  MOVWF  x22
3A62:  MOVLW  88
3A64:  MOVWF  x21
3A66:  MOVLB  0
3A68:  CALL   29B6
3A6C:  MOVFF  00,516
3A70:  MOVFF  01,517
3A74:  MOVFF  02,518
3A78:  MOVFF  03,519
3A7C:  MOVFF  03,521
3A80:  MOVFF  02,520
3A84:  MOVFF  01,51F
3A88:  MOVFF  00,51E
3A8C:  MOVLW  CD
3A8E:  MOVLB  5
3A90:  MOVWF  x25
3A92:  MOVLW  CC
3A94:  MOVWF  x24
3A96:  MOVLW  4C
3A98:  MOVWF  x23
3A9A:  MOVLW  86
3A9C:  MOVWF  x22
3A9E:  MOVLB  0
3AA0:  CALL   25E0
3AA4:  MOVFF  03,51E
3AA8:  MOVFF  02,51D
3AAC:  MOVFF  01,51C
3AB0:  MOVFF  00,51B
3AB4:  CALL   26D6
3AB8:  MOVF   01,W
3ABA:  MOVLB  3
3ABC:  ADDWF  xCC,W
3ABE:  MOVWF  xD0
3AC0:  MOVF   02,W
3AC2:  ADDWFC xCD,W
3AC4:  MOVWF  xD1
....................  
.................... 			if (sawEndLevel >= 4096){ 
3AC6:  MOVF   xD1,W
3AC8:  SUBLW  0F
3ACA:  BC    3AD4
.................... 				sawEndLevel = 4095; 
3ACC:  MOVLW  0F
3ACE:  MOVWF  xD1
3AD0:  MOVLW  FF
3AD2:  MOVWF  xD0
.................... 			} 
.................... 				 
....................  
.................... 			//next state 
.................... 			DaqState = DaqMeasure;	//set measuring state 
3AD4:  MOVLW  02
3AD6:  MOVWF  xEF
.................... 			break; 
3AD8:  BRA    409A
....................  
.................... 		case DaqMeasure: 
.................... 			//indicate 
.................... 			output_toggle(STAT); 
3ADA:  BCF    F94.0
3ADC:  BTG    F8B.0
....................  
.................... 			//set initial DAC level 
.................... 			SetSawDac(sawStartLevel); 
3ADE:  MOVFF  3CD,51A
3AE2:  MOVFF  3CC,519
3AE6:  CALL   2B14
....................  
.................... 			//read data from ADC 
.................... 			//select ADC channel 
.................... 			set_adc_channel(0);	//select ch0 
3AEA:  MOVLW  00
3AEC:  MOVWF  01
3AEE:  MOVF   FC2,W
3AF0:  ANDLW  C3
3AF2:  IORWF  01,W
3AF4:  MOVWF  FC2
....................  
.................... 			Sum = 0; 
3AF6:  MOVLB  5
3AF8:  CLRF   x0D
3AFA:  CLRF   x0C
3AFC:  CLRF   x0B
3AFE:  CLRF   x0A
.................... 			Wrk0 = 0; 
3B00:  CLRF   x06
3B02:  CLRF   x05
3B04:  CLRF   x04
3B06:  CLRF   x03
.................... 			maxCycles = 0; 
3B08:  MOVLB  4
3B0A:  CLRF   xFE
3B0C:  CLRF   xFD
....................  
.................... 			// Rising saw part 
.................... 			for (sawLevel = sawStartLevel; sawLevel <= sawEndLevel; sawLevel++) 
3B0E:  MOVFF  3CD,515
3B12:  MOVFF  3CC,514
3B16:  MOVLB  5
3B18:  MOVF   x15,W
3B1A:  MOVLB  3
3B1C:  SUBWF  xD1,W
3B1E:  BTFSS  FD8.0
3B20:  BRA    3C50
3B22:  BNZ   3B30
3B24:  MOVLB  5
3B26:  MOVF   x14,W
3B28:  MOVLB  3
3B2A:  SUBWF  xD0,W
3B2C:  BTFSS  FD8.0
3B2E:  BRA    3C50
.................... 			{ 
....................  
.................... 				restart_wdt(); 
3B30:  CLRWDT
....................  
.................... 				read_adc(ADC_START_ONLY); //read measured value 
3B32:  BSF    FC2.1
....................  
.................... 				SetSawDac(sawLevel);	//set next saw level 
3B34:  MOVFF  515,51A
3B38:  MOVFF  514,519
3B3C:  MOVLB  0
3B3E:  CALL   2B14
....................  
.................... 				ADC0 = read_adc(ADC_READ_ONLY); //read measured value 
3B42:  BTFSC  FC2.1
3B44:  BRA    3B42
3B46:  MOVFF  FC4,502
3B4A:  MOVLB  5
3B4C:  MOVFF  FC3,501
.................... 				 
.................... 				//filtering 
.................... 				Wrk0 -= data_filt0[iWin];	//calc new sum mean val 
3B50:  BCF    FD8.0
3B52:  MOVLB  3
3B54:  RLCF   xE0,W
3B56:  CLRF   03
3B58:  ADDLW  1A
3B5A:  MOVWF  FE9
3B5C:  MOVLW  00
3B5E:  ADDWFC 03,W
3B60:  MOVWF  FEA
3B62:  MOVFF  FEC,03
3B66:  MOVF   FED,F
3B68:  MOVF   FEF,W
3B6A:  MOVLB  5
3B6C:  SUBWF  x03,F
3B6E:  MOVF   03,W
3B70:  SUBWFB x04,F
3B72:  MOVLW  00
3B74:  SUBWFB x05,F
3B76:  SUBWFB x06,F
.................... 				 
.................... 				Wrk0 += ADC0; 
3B78:  MOVF   x01,W
3B7A:  ADDWF  x03,F
3B7C:  MOVF   x02,W
3B7E:  ADDWFC x04,F
3B80:  MOVLW  00
3B82:  ADDWFC x05,F
3B84:  ADDWFC x06,F
....................  
.................... 				data_filt0[iWin] = ADC0; 
3B86:  BCF    FD8.0
3B88:  MOVLB  3
3B8A:  RLCF   xE0,W
3B8C:  CLRF   03
3B8E:  ADDLW  1A
3B90:  MOVWF  FE9
3B92:  MOVLW  00
3B94:  ADDWFC 03,W
3B96:  MOVWF  FEA
3B98:  MOVFF  502,FEC
3B9C:  MOVF   FED,F
3B9E:  MOVFF  501,FEF
....................  
.................... 				//next filter value 
.................... 				if (iWin == 0) 
3BA2:  MOVF   xE0,F
3BA4:  BNZ   3BAE
.................... 				{ 
.................... 					iWin = filterWidth; 
3BA6:  MOVFF  512,3E0
.................... 					iWin--; 
3BAA:  DECF   xE0,F
.................... 				} 
.................... 				else 
3BAC:  BRA    3BB0
.................... 					iWin--; 
3BAE:  DECF   xE0,F
.................... 					 
.................... 				//cycle meaning 
.................... 				/*Wrk0=0; 
.................... 				int8 i; 
.................... 				for (i = 0; i<filterWidth; i++) 
.................... 				{ 
.................... 					Wrk0 +=data_filt0[i]; 
.................... 				}*/ 
.................... 					 
....................  
.................... 				//calc mean value 
.................... 				data_mean0 = (int16)(Wrk0 >> FWDT); //divide by filterWidth = 2^FWDT 
3BB0:  MOVFF  506,03
3BB4:  MOVFF  505,02
3BB8:  MOVFF  504,01
3BBC:  MOVFF  503,00
3BC0:  MOVF   xC2,W
3BC2:  MOVLB  5
3BC4:  MOVWF  x16
3BC6:  BZ    3BD6
3BC8:  BCF    FD8.0
3BCA:  RRCF   03,F
3BCC:  RRCF   02,F
3BCE:  RRCF   01,F
3BD0:  RRCF   00,F
3BD2:  DECFSZ x16,F
3BD4:  BRA    3BC8
3BD6:  MOVFF  01,9B
3BDA:  MOVFF  00,9A
.................... 				Sum += data_mean0; 
3BDE:  MOVLB  0
3BE0:  MOVF   x9A,W
3BE2:  MOVLB  5
3BE4:  ADDWF  x0A,F
3BE6:  MOVLB  0
3BE8:  MOVF   x9B,W
3BEA:  MOVLB  5
3BEC:  ADDWFC x0B,F
3BEE:  MOVLW  00
3BF0:  ADDWFC x0C,F
3BF2:  ADDWFC x0D,F
....................  
.................... 				//extremum 
.................... 				//estim max val 
.................... 				if (data_mean0 > maxRise0) 
3BF4:  MOVLB  0
3BF6:  MOVF   x9D,W
3BF8:  SUBWF  x9B,W
3BFA:  BNC   3C14
3BFC:  BNZ   3C04
3BFE:  MOVF   x9A,W
3C00:  SUBWF  x9C,W
3C02:  BC    3C14
.................... 				{ 
.................... 					iMaxRise0 = StorAddr; 
3C04:  MOVFF  508,9F
3C08:  MOVFF  507,9E
.................... 					maxRise0 = data_mean0; 
3C0C:  MOVFF  9B,9D
3C10:  MOVFF  9A,9C
.................... 				}; 
....................  
.................... 				StorAddr++; 
3C14:  MOVLB  5
3C16:  INCF   x07,F
3C18:  BTFSC  FD8.2
3C1A:  INCF   x08,F
....................  
.................... 				//beta measuring 
.................... 				if (data_mean0 > BetTrsh) 
3C1C:  MOVF   x0F,W
3C1E:  MOVLB  0
3C20:  SUBWF  x9B,W
3C22:  BNC   3C3C
3C24:  BNZ   3C34
3C26:  MOVF   x9A,W
3C28:  MOVLB  5
3C2A:  SUBWF  x0E,W
3C2C:  BTFSS  FD8.0
3C2E:  BRA    3C34
3C30:  MOVLB  0
3C32:  BRA    3C3C
.................... 					bet_cur++; 
3C34:  MOVLB  5
3C36:  INCF   x10,F
3C38:  BTFSC  FD8.2
3C3A:  INCF   x11,F
....................  
.................... 				maxCycles++; //add cycle count 
3C3C:  MOVLB  4
3C3E:  INCF   xFD,F
3C40:  BTFSC  FD8.2
3C42:  INCF   xFE,F
....................  
.................... 			} 
3C44:  MOVLB  5
3C46:  INCF   x14,F
3C48:  BTFSC  FD8.2
3C4A:  INCF   x15,F
3C4C:  BRA    3B18
3C4E:  MOVLB  3
....................  
.................... 			DaqState = DaqScale; 
3C50:  MOVLW  03
3C52:  MOVWF  xEF
.................... 			break; 
3C54:  BRA    409A
....................  
.................... 		case DaqScale: 
.................... 			//scaling & result storing 
....................  
.................... 			//temperature 
.................... 			Termometer(); 
3C56:  CALL   2712
.................... 			restart_wdt(); 
3C5A:  CLRWDT
....................  
.................... 			//regulator 
.................... 			if (T_GEN > (TG_CAL + Hst)) 
3C5C:  MOVLB  3
3C5E:  MOVF   xED,W
3C60:  ADDWF  xDA,W
3C62:  MOVWF  01
3C64:  MOVF   xEE,W
3C66:  ADDWFC xDB,W
3C68:  MOVWF  03
3C6A:  MOVF   01,W
3C6C:  BTFSC  xC9.7
3C6E:  BRA    3C82
3C70:  MOVF   03,W
3C72:  SUBWF  xC9,W
3C74:  BNC   3C82
3C76:  BNZ   3C7E
3C78:  MOVF   xC8,W
3C7A:  SUBWF  01,W
3C7C:  BC    3C82
.................... 			{ //if temperature above rated & histeresis 
.................... 				output_low(TERMO);				//off heater 
3C7E:  BCF    F96.1
3C80:  BCF    F8D.1
.................... 			} 
....................  
.................... 			if (T_GEN < (TG_CAL - Hst)) 
3C82:  MOVF   xED,W
3C84:  SUBWF  xDA,W
3C86:  MOVWF  00
3C88:  MOVF   xEE,W
3C8A:  SUBWFB xDB,W
3C8C:  MOVWF  03
3C8E:  MOVFF  00,01
3C92:  BTFSC  xC9.7
3C94:  BRA    3CA4
3C96:  MOVF   xC9,W
3C98:  SUBWF  03,W
3C9A:  BNC   3CA8
3C9C:  BNZ   3CA4
3C9E:  MOVF   01,W
3CA0:  SUBWF  xC8,W
3CA2:  BC    3CA8
.................... 			{			//if temperature below rated & histeresis 
.................... 				output_high(TERMO);				//on heater 
3CA4:  BCF    F96.1
3CA6:  BSF    F8D.1
.................... 			} 
....................  
.................... 			//amplitude - alpha 
.................... 			alp_buf0[iGam] = maxRise0; 
3CA8:  BCF    FD8.0
3CAA:  RLCF   xC7,W
3CAC:  CLRF   03
3CAE:  ADDLW  A4
3CB0:  MOVWF  FE9
3CB2:  MOVLW  00
3CB4:  ADDWFC 03,W
3CB6:  MOVWF  FEA
3CB8:  MOVFF  9D,FEC
3CBC:  MOVF   FED,F
3CBE:  MOVFF  9C,FEF
....................  
.................... 			//treshold estimation 
.................... 			BetTrsh = (int16)(alp_buf0[iGam] >> 1); 
3CC2:  BCF    FD8.0
3CC4:  RLCF   xC7,W
3CC6:  CLRF   03
3CC8:  ADDLW  A4
3CCA:  MOVWF  FE9
3CCC:  MOVLW  00
3CCE:  ADDWFC 03,W
3CD0:  MOVWF  FEA
3CD2:  MOVFF  FEC,517
3CD6:  MOVF   FED,F
3CD8:  MOVFF  FEF,516
3CDC:  BCF    FD8.0
3CDE:  MOVLB  5
3CE0:  RRCF   x17,W
3CE2:  MOVWF  x0F
3CE4:  RRCF   x16,W
3CE6:  MOVWF  x0E
....................  
.................... 			//pulse width 
.................... 			bet_buf0[iGam] = bet_cur; 
3CE8:  BCF    FD8.0
3CEA:  MOVLB  3
3CEC:  RLCF   xC7,W
3CEE:  CLRF   03
3CF0:  ADDLW  A4
3CF2:  MOVWF  FE9
3CF4:  MOVLW  01
3CF6:  ADDWFC 03,W
3CF8:  MOVWF  FEA
3CFA:  MOVFF  511,FEC
3CFE:  MOVF   FED,F
3D00:  MOVFF  510,FEF
....................  
.................... 			//gamma meaning 
.................... 			gam_buf0[iGam] = iMaxRise0; //meaning buffer 
3D04:  BCF    FD8.0
3D06:  RLCF   xC7,W
3D08:  CLRF   03
3D0A:  ADDLW  A4
3D0C:  MOVWF  FE9
3D0E:  MOVLW  02
3D10:  ADDWFC 03,W
3D12:  MOVWF  FEA
3D14:  MOVFF  9F,FEC
3D18:  MOVF   FED,F
3D1A:  MOVFF  9E,FEF
....................  
.................... 			//next index 
.................... 			if (iGam == 0) 
3D1E:  MOVF   xC7,F
3D20:  BNZ   3D2A
.................... 			{ 
.................... 				iGam = PCOUNT - 1; 
3D22:  MOVLW  01
3D24:  SUBWF  xC4,W
3D26:  MOVWF  xC7
.................... 			} 
.................... 			else 
3D28:  BRA    3D2C
.................... 				iGam--; 
3D2A:  DECF   xC7,F
....................  
.................... 			AlpSum = 0; 
3D2C:  CLRF   xE4
3D2E:  CLRF   xE3
3D30:  CLRF   xE2
3D32:  CLRF   xE1
.................... 			BetSum = 0; 
3D34:  CLRF   xE8
3D36:  CLRF   xE7
3D38:  CLRF   xE6
3D3A:  CLRF   xE5
.................... 			GamSum = 0; 
3D3C:  CLRF   xEC
3D3E:  CLRF   xEB
3D40:  CLRF   xEA
3D42:  CLRF   xE9
....................  
.................... 			for (cnt = 0; cnt < PCOUNT; cnt++) 
3D44:  MOVLB  5
3D46:  CLRF   x00
3D48:  MOVLB  4
3D4A:  CLRF   xFF
3D4C:  MOVLB  5
3D4E:  MOVF   x00,W
3D50:  MOVLB  3
3D52:  SUBWF  xC5,W
3D54:  BNC   3E0C
3D56:  BNZ   3D68
3D58:  MOVF   xC4,W
3D5A:  MOVLB  4
3D5C:  SUBWF  xFF,W
3D5E:  BTFSS  FD8.0
3D60:  BRA    3D66
3D62:  MOVLB  3
3D64:  BRA    3E0C
3D66:  MOVLB  3
.................... 			{ 
.................... 				restart_wdt(); 
3D68:  CLRWDT
.................... 				AlpSum += alp_buf0[cnt]; 
3D6A:  BCF    FD8.0
3D6C:  MOVLB  4
3D6E:  RLCF   xFF,W
3D70:  MOVWF  02
3D72:  MOVLB  5
3D74:  RLCF   x00,W
3D76:  MOVWF  03
3D78:  MOVF   02,W
3D7A:  ADDLW  A4
3D7C:  MOVWF  FE9
3D7E:  MOVLW  00
3D80:  ADDWFC 03,W
3D82:  MOVWF  FEA
3D84:  MOVFF  FEC,03
3D88:  MOVF   FED,F
3D8A:  MOVF   FEF,W
3D8C:  MOVLB  3
3D8E:  ADDWF  xE1,F
3D90:  MOVF   03,W
3D92:  ADDWFC xE2,F
3D94:  MOVLW  00
3D96:  ADDWFC xE3,F
3D98:  ADDWFC xE4,F
.................... 				BetSum += bet_buf0[cnt]; 
3D9A:  BCF    FD8.0
3D9C:  MOVLB  4
3D9E:  RLCF   xFF,W
3DA0:  MOVWF  02
3DA2:  MOVLB  5
3DA4:  RLCF   x00,W
3DA6:  MOVWF  03
3DA8:  MOVF   02,W
3DAA:  ADDLW  A4
3DAC:  MOVWF  FE9
3DAE:  MOVLW  01
3DB0:  ADDWFC 03,W
3DB2:  MOVWF  FEA
3DB4:  MOVFF  FEC,03
3DB8:  MOVF   FED,F
3DBA:  MOVF   FEF,W
3DBC:  MOVLB  3
3DBE:  ADDWF  xE5,F
3DC0:  MOVF   03,W
3DC2:  ADDWFC xE6,F
3DC4:  MOVLW  00
3DC6:  ADDWFC xE7,F
3DC8:  ADDWFC xE8,F
.................... 				GamSum += gam_buf0[cnt]; 
3DCA:  BCF    FD8.0
3DCC:  MOVLB  4
3DCE:  RLCF   xFF,W
3DD0:  MOVWF  02
3DD2:  MOVLB  5
3DD4:  RLCF   x00,W
3DD6:  MOVWF  03
3DD8:  MOVF   02,W
3DDA:  ADDLW  A4
3DDC:  MOVWF  FE9
3DDE:  MOVLW  02
3DE0:  ADDWFC 03,W
3DE2:  MOVWF  FEA
3DE4:  MOVFF  FEC,03
3DE8:  MOVF   FED,F
3DEA:  MOVF   FEF,W
3DEC:  MOVLB  3
3DEE:  ADDWF  xE9,F
3DF0:  MOVF   03,W
3DF2:  ADDWFC xEA,F
3DF4:  MOVLW  00
3DF6:  ADDWFC xEB,F
3DF8:  ADDWFC xEC,F
.................... 			} 
3DFA:  MOVLB  4
3DFC:  INCF   xFF,F
3DFE:  BTFSS  FD8.2
3E00:  BRA    3E08
3E02:  MOVLB  5
3E04:  INCF   x00,F
3E06:  MOVLB  4
3E08:  BRA    3D4C
3E0A:  MOVLB  3
....................  
.................... 			//alpha 
.................... 			restart_wdt(); 
3E0C:  CLRWDT
.................... 			Amplitude0 = ((int16)(((AlpSum >> 7) * 2.4414) - 0)) >> (AmpCoef0); //divide sum by 128 and conver to volts with amplify coeff 
3E0E:  RRCF   xE4,W
3E10:  MOVLB  5
3E12:  MOVWF  x1A
3E14:  MOVLB  3
3E16:  RRCF   xE3,W
3E18:  MOVLB  5
3E1A:  MOVWF  x19
3E1C:  MOVLB  3
3E1E:  RRCF   xE2,W
3E20:  MOVLB  5
3E22:  MOVWF  x18
3E24:  MOVLB  3
3E26:  RRCF   xE1,W
3E28:  MOVLB  5
3E2A:  MOVWF  x17
3E2C:  RRCF   x1A,F
3E2E:  RRCF   x19,F
3E30:  RRCF   x18,F
3E32:  RRCF   x17,F
3E34:  RRCF   x1A,F
3E36:  RRCF   x19,F
3E38:  RRCF   x18,F
3E3A:  RRCF   x17,F
3E3C:  RRCF   x1A,F
3E3E:  RRCF   x19,F
3E40:  RRCF   x18,F
3E42:  RRCF   x17,F
3E44:  RRCF   x1A,F
3E46:  RRCF   x19,F
3E48:  RRCF   x18,F
3E4A:  RRCF   x17,F
3E4C:  RRCF   x1A,F
3E4E:  RRCF   x19,F
3E50:  RRCF   x18,F
3E52:  RRCF   x17,F
3E54:  RRCF   x1A,F
3E56:  RRCF   x19,F
3E58:  RRCF   x18,F
3E5A:  RRCF   x17,F
3E5C:  MOVLW  01
3E5E:  ANDWF  x1A,F
3E60:  MOVFF  51A,521
3E64:  MOVFF  519,520
3E68:  MOVFF  518,51F
3E6C:  MOVFF  517,51E
3E70:  MOVLB  0
3E72:  GOTO   2B4A
3E76:  MOVFF  03,521
3E7A:  MOVFF  02,520
3E7E:  MOVFF  01,51F
3E82:  MOVFF  00,51E
3E86:  MOVLW  E6
3E88:  MOVLB  5
3E8A:  MOVWF  x25
3E8C:  MOVLW  3F
3E8E:  MOVWF  x24
3E90:  MOVLW  1C
3E92:  MOVWF  x23
3E94:  MOVLW  80
3E96:  MOVWF  x22
3E98:  MOVLB  0
3E9A:  CALL   25E0
3E9E:  MOVFF  00,517
3EA2:  MOVFF  01,518
3EA6:  MOVFF  02,519
3EAA:  MOVFF  03,51A
3EAE:  BSF    FD8.1
3EB0:  MOVFF  03,521
3EB4:  MOVFF  02,520
3EB8:  MOVFF  01,51F
3EBC:  MOVFF  00,51E
3EC0:  MOVLB  5
3EC2:  CLRF   x25
3EC4:  CLRF   x24
3EC6:  CLRF   x23
3EC8:  CLRF   x22
3ECA:  MOVLB  0
3ECC:  GOTO   2B84
3ED0:  MOVFF  03,51E
3ED4:  MOVFF  02,51D
3ED8:  MOVFF  01,51C
3EDC:  MOVFF  00,51B
3EE0:  CALL   26D6
3EE4:  MOVFF  02,518
3EE8:  MOVFF  01,517
3EEC:  MOVFF  02,3A5
3EF0:  MOVFF  01,3A4
3EF4:  MOVLB  3
3EF6:  MOVF   xAA,W
3EF8:  MOVWF  00
3EFA:  BZ    3F06
3EFC:  BCF    FD8.0
3EFE:  RRCF   xA5,F
3F00:  RRCF   xA4,F
3F02:  DECFSZ 00,F
3F04:  BRA    3EFC
....................  
.................... 			//beta 
.................... 			restart_wdt(); 
3F06:  CLRWDT
.................... 			PulseWdt0 = (int16)((BetSum>>7) * 10000 / maxCycles); //divide sum by 128 and norming 
3F08:  RRCF   xE8,W
3F0A:  MOVLB  5
3F0C:  MOVWF  x1A
3F0E:  MOVLB  3
3F10:  RRCF   xE7,W
3F12:  MOVLB  5
3F14:  MOVWF  x19
3F16:  MOVLB  3
3F18:  RRCF   xE6,W
3F1A:  MOVLB  5
3F1C:  MOVWF  x18
3F1E:  MOVLB  3
3F20:  RRCF   xE5,W
3F22:  MOVLB  5
3F24:  MOVWF  x17
3F26:  RRCF   x1A,F
3F28:  RRCF   x19,F
3F2A:  RRCF   x18,F
3F2C:  RRCF   x17,F
3F2E:  RRCF   x1A,F
3F30:  RRCF   x19,F
3F32:  RRCF   x18,F
3F34:  RRCF   x17,F
3F36:  RRCF   x1A,F
3F38:  RRCF   x19,F
3F3A:  RRCF   x18,F
3F3C:  RRCF   x17,F
3F3E:  RRCF   x1A,F
3F40:  RRCF   x19,F
3F42:  RRCF   x18,F
3F44:  RRCF   x17,F
3F46:  RRCF   x1A,F
3F48:  RRCF   x19,F
3F4A:  RRCF   x18,F
3F4C:  RRCF   x17,F
3F4E:  RRCF   x1A,F
3F50:  RRCF   x19,F
3F52:  RRCF   x18,F
3F54:  RRCF   x17,F
3F56:  MOVLW  01
3F58:  ANDWF  x1A,F
3F5A:  MOVFF  51A,521
3F5E:  MOVFF  519,520
3F62:  MOVFF  518,51F
3F66:  MOVFF  517,51E
3F6A:  CLRF   x25
3F6C:  CLRF   x24
3F6E:  MOVLW  27
3F70:  MOVWF  x23
3F72:  MOVLW  10
3F74:  MOVWF  x22
3F76:  MOVLB  0
3F78:  CALL   2DFE
3F7C:  MOVFF  03,51A
3F80:  MOVFF  02,519
3F84:  MOVFF  01,518
3F88:  MOVFF  00,517
3F8C:  BCF    FD8.1
3F8E:  CLRF   19
3F90:  BTFSC  FF2.7
3F92:  BSF    19.7
3F94:  BCF    FF2.7
3F96:  MOVFF  03,531
3F9A:  MOVFF  02,530
3F9E:  MOVFF  01,52F
3FA2:  MOVFF  00,52E
3FA6:  MOVLB  5
3FA8:  CLRF   x35
3FAA:  CLRF   x34
3FAC:  MOVFF  4FE,533
3FB0:  MOVFF  4FD,532
3FB4:  MOVLB  0
3FB6:  CALL   02DA
3FBA:  BTFSC  19.7
3FBC:  BSF    FF2.7
3FBE:  MOVFF  01,3A7
3FC2:  MOVFF  00,3A6
.................... 			//PulseWdt0 = (int16)(BetSum>>7); 
....................  
.................... 			//gamma 
.................... 			restart_wdt(); 
3FC6:  CLRWDT
.................... 			Gamma0 = (int16)((GamSum>>7) * 10000 / maxCycles); //divide sum by 128 and norming 
3FC8:  MOVLB  3
3FCA:  RRCF   xEC,W
3FCC:  MOVLB  5
3FCE:  MOVWF  x1A
3FD0:  MOVLB  3
3FD2:  RRCF   xEB,W
3FD4:  MOVLB  5
3FD6:  MOVWF  x19
3FD8:  MOVLB  3
3FDA:  RRCF   xEA,W
3FDC:  MOVLB  5
3FDE:  MOVWF  x18
3FE0:  MOVLB  3
3FE2:  RRCF   xE9,W
3FE4:  MOVLB  5
3FE6:  MOVWF  x17
3FE8:  RRCF   x1A,F
3FEA:  RRCF   x19,F
3FEC:  RRCF   x18,F
3FEE:  RRCF   x17,F
3FF0:  RRCF   x1A,F
3FF2:  RRCF   x19,F
3FF4:  RRCF   x18,F
3FF6:  RRCF   x17,F
3FF8:  RRCF   x1A,F
3FFA:  RRCF   x19,F
3FFC:  RRCF   x18,F
3FFE:  RRCF   x17,F
4000:  RRCF   x1A,F
4002:  RRCF   x19,F
4004:  RRCF   x18,F
4006:  RRCF   x17,F
4008:  RRCF   x1A,F
400A:  RRCF   x19,F
400C:  RRCF   x18,F
400E:  RRCF   x17,F
4010:  RRCF   x1A,F
4012:  RRCF   x19,F
4014:  RRCF   x18,F
4016:  RRCF   x17,F
4018:  MOVLW  01
401A:  ANDWF  x1A,F
401C:  MOVFF  51A,521
4020:  MOVFF  519,520
4024:  MOVFF  518,51F
4028:  MOVFF  517,51E
402C:  CLRF   x25
402E:  CLRF   x24
4030:  MOVLW  27
4032:  MOVWF  x23
4034:  MOVLW  10
4036:  MOVWF  x22
4038:  MOVLB  0
403A:  CALL   2DFE
403E:  MOVFF  03,51A
4042:  MOVFF  02,519
4046:  MOVFF  01,518
404A:  MOVFF  00,517
404E:  BCF    FD8.1
4050:  CLRF   19
4052:  BTFSC  FF2.7
4054:  BSF    19.7
4056:  BCF    FF2.7
4058:  MOVFF  03,531
405C:  MOVFF  02,530
4060:  MOVFF  01,52F
4064:  MOVFF  00,52E
4068:  MOVLB  5
406A:  CLRF   x35
406C:  CLRF   x34
406E:  MOVFF  4FE,533
4072:  MOVFF  4FD,532
4076:  MOVLB  0
4078:  CALL   02DA
407C:  BTFSC  19.7
407E:  BSF    FF2.7
4080:  MOVFF  01,3A9
4084:  MOVFF  00,3A8
.................... 			//Gamma0 = (int16)(GamSum>>7); 
....................  
.................... 			//repeat testing 
.................... 			if (OneCycle) 
4088:  MOVLB  3
408A:  BTFSS  xC6.0
408C:  BRA    4092
.................... 			{ 
.................... 				DaqState = DaqIdle;	//if one cycle  - next-idle 
408E:  CLRF   xEF
.................... 			} 
.................... 			else 
4090:  BRA    4096
.................... 				DaqState = DaqStart;	//else normal measuring 
4092:  MOVLW  01
4094:  MOVWF  xEF
.................... 	 
.................... 			break; 
4096:  BRA    409A
4098:  MOVLB  3
.................... 		} 
.................... 	} 
409A:  BRA    38A4
.................... } 
409C:  BRA    409C

Configuration Fuses:
   Word  1: C800   IESO FCMEN INTRC_IO
   Word  2: 0019   NOBROWNOUT WDT1 NOWDT BORV20 NOPUT
   Word  3: 0700   PBADEN CCP2C1 LPT1OSC NOMCLR
   Word  4: 0000   NOSTVREN DEBUG NOLVP NOXINST
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB

   Some fuses have been forced to be compatible with the ICD debugger.

ROM data:
F00000: 00 00 20 4E 01 00 01 00 00 08 80 00 03 00 00 4B 
F00010: 01 00 C4 09 C4 09 B8 0B 00 00 00 00 00 7F 00 00 
F00020: 00 00 00 00 00 00 00 00 
